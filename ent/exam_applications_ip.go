// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"recruit/ent/exam_applications_ip"
	"recruit/ent/rolemaster"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Exam_Applications_IP is the model entity for the Exam_Applications_IP schema.
type Exam_Applications_IP struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// ApplicationNumber holds the value of the "ApplicationNumber" field.
	ApplicationNumber string `json:"ApplicationNumber,omitempty"`
	// EmployeeID holds the value of the "EmployeeID" field.
	EmployeeID int64 `json:"EmployeeID,omitempty"`
	// EmployeeName holds the value of the "EmployeeName" field.
	EmployeeName string `json:"EmployeeName,omitempty"`
	// DOB holds the value of the "DOB" field.
	DOB string `json:"DOB,omitempty"`
	// Gender holds the value of the "Gender" field.
	Gender string `json:"Gender,omitempty"`
	// MobileNumber holds the value of the "MobileNumber" field.
	MobileNumber string `json:"MobileNumber,omitempty"`
	// EmailID holds the value of the "EmailID" field.
	EmailID string `json:"EmailID,omitempty"`
	// EmployeeCategory holds the value of the "EmployeeCategory" field.
	EmployeeCategory string `json:"EmployeeCategory,omitempty"`
	// Cadre holds the value of the "Cadre" field.
	Cadre string `json:"Cadre,omitempty"`
	// EmployeePost holds the value of the "EmployeePost" field.
	EmployeePost string `json:"EmployeePost,omitempty"`
	// FacilityID holds the value of the "FacilityID" field.
	FacilityID string `json:"FacilityID,omitempty"`
	// FacilityName holds the value of the "FacilityName" field.
	FacilityName string `json:"FacilityName,omitempty"`
	// DivisionName holds the value of the "DivisionName" field.
	DivisionName string `json:"DivisionName,omitempty"`
	// RegionName holds the value of the "RegionName" field.
	RegionName string `json:"RegionName,omitempty"`
	// ReportingOfficeName holds the value of the "ReportingOfficeName" field.
	ReportingOfficeName string `json:"ReportingOfficeName,omitempty"`
	// CircleName holds the value of the "CircleName" field.
	CircleName string `json:"CircleName,omitempty"`
	// EntryCadre holds the value of the "EntryCadre" field.
	EntryCadre string `json:"EntryCadre,omitempty"`
	// DCCS holds the value of the "DCCS" field.
	DCCS string `json:"DCCS,omitempty"`
	// DCInPresentCadre holds the value of the "DCInPresentCadre" field.
	DCInPresentCadre string `json:"DCInPresentCadre,omitempty"`
	// DeputationOfficeId holds the value of the "DeputationOfficeId" field.
	DeputationOfficeId string `json:"DeputationOfficeId,omitempty"`
	// DisabilityType holds the value of the "DisabilityType" field.
	DisabilityType string `json:"DisabilityType,omitempty"`
	// DisabilityPercentage holds the value of the "DisabilityPercentage" field.
	DisabilityPercentage string `json:"DisabilityPercentage,omitempty"`
	// Education holds the value of the "Education" field.
	Education string `json:"Education,omitempty"`
	// ExamNameCode holds the value of the "ExamNameCode" field.
	ExamNameCode string `json:"ExamNameCode,omitempty"`
	// ExamYear holds the value of the "ExamYear" field.
	ExamYear string `json:"ExamYear,omitempty"`
	// ExamName holds the value of the "ExamName" field.
	ExamName string `json:"ExamName,omitempty"`
	// PresentCadre holds the value of the "PresentCadre" field.
	PresentCadre string `json:"PresentCadre,omitempty"`
	// PresentDesignation holds the value of the "PresentDesignation" field.
	PresentDesignation string `json:"PresentDesignation,omitempty"`
	// EligibleCadre holds the value of the "EligibleCadre" field.
	EligibleCadre string `json:"EligibleCadre,omitempty"`
	// EligibleCadreDate holds the value of the "EligibleCadreDate" field.
	EligibleCadreDate string `json:"EligibleCadreDate,omitempty"`
	// ServiceLength holds the value of the "ServiceLength" field.
	ServiceLength []interface{} `json:"ServiceLength,omitempty"`
	// CentrePreference holds the value of the "CentrePreference" field.
	CentrePreference string `json:"CentrePreference,omitempty"`
	// Signature holds the value of the "Signature" field.
	Signature string `json:"Signature,omitempty"`
	// Photo holds the value of the "Photo" field.
	Photo string `json:"Photo,omitempty"`
	// ApplicationStatus holds the value of the "ApplicationStatus" field.
	ApplicationStatus string `json:"ApplicationStatus,omitempty"`
	// ApplnSubmittedDate holds the value of the "ApplnSubmittedDate" field.
	ApplnSubmittedDate time.Time `json:"ApplnSubmittedDate,omitempty"`
	// VARemarks holds the value of the "VA_Remarks" field.
	VARemarks string `json:"VA_Remarks,omitempty"`
	// VAUserName holds the value of the "VA_UserName" field.
	VAUserName string `json:"VA_UserName,omitempty"`
	// VADate holds the value of the "VA_Date" field.
	VADate time.Time `json:"VA_Date,omitempty"`
	// CARemarks holds the value of the "CA_Remarks" field.
	CARemarks string `json:"CA_Remarks,omitempty"`
	// CAUserName holds the value of the "CA_UserName" field.
	CAUserName string `json:"CA_UserName,omitempty"`
	// CADate holds the value of the "CA_Date" field.
	CADate time.Time `json:"CA_Date,omitempty"`
	// ApplicationWdlDate holds the value of the "ApplicationWdlDate" field.
	ApplicationWdlDate time.Time `json:"ApplicationWdlDate,omitempty"`
	// NARemarks holds the value of the "NA_Remarks" field.
	NARemarks string `json:"NA_Remarks,omitempty"`
	// NAUserName holds the value of the "NA_UserName" field.
	NAUserName string `json:"NA_UserName,omitempty"`
	// NADate holds the value of the "NA_Date" field.
	NADate time.Time `json:"NA_Date,omitempty"`
	// AppliactionRemarks holds the value of the "AppliactionRemarks" field.
	AppliactionRemarks string `json:"AppliactionRemarks,omitempty"`
	// CadrePreferences holds the value of the "CadrePreferences" field.
	CadrePreferences []interface{} `json:"CadrePreferences,omitempty"`
	// DivisionPreferences holds the value of the "DivisionPreferences" field.
	DivisionPreferences []interface{} `json:"DivisionPreferences,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// UpdatedBy holds the value of the "UpdatedBy" field.
	UpdatedBy string `json:"UpdatedBy,omitempty"`
	// CAPreviousRemarks holds the value of the "CAPreviousRemarks" field.
	CAPreviousRemarks string `json:"CAPreviousRemarks,omitempty"`
	// RoleUserCode holds the value of the "RoleUserCode" field.
	RoleUserCode int32 `json:"RoleUserCode,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Exam_Applications_IPQuery when eager-loading is set.
	Edges                     Exam_Applications_IPEdges `json:"edges"`
	exam_ip_exam_appln_ip_ref *int32
	facility_office_ip_ref    *int32
	user_master_users_ip_ref  *int64
	selectValues              sql.SelectValues
}

// Exam_Applications_IPEdges holds the relations/edges for other nodes in the graph.
type Exam_Applications_IPEdges struct {
	// UsersIPRef holds the value of the UsersIPRef edge.
	UsersIPRef []*UserMaster `json:"UsersIPRef,omitempty"`
	// ExamApplnIPRef holds the value of the ExamAppln_IP_Ref edge.
	ExamApplnIPRef []*Exam_IP `json:"ExamAppln_IP_Ref,omitempty"`
	// OfficeIPRef holds the value of the Office_IP_Ref edge.
	OfficeIPRef []*Facility `json:"Office_IP_Ref,omitempty"`
	// Roleusers holds the value of the roleusers edge.
	Roleusers *RoleMaster `json:"roleusers,omitempty"`
	// CadrePrefRef holds the value of the CadrePref_Ref edge.
	CadrePrefRef []*Cadre_Choice_IP `json:"CadrePref_Ref,omitempty"`
	// CirclePrefRef holds the value of the CirclePrefRef edge.
	CirclePrefRef []*PlaceOfPreferenceIP `json:"CirclePrefRef,omitempty"`
	// IPApplicationsRef holds the value of the IPApplicationsRef edge.
	IPApplicationsRef []*RecommendationsIPApplications `json:"IPApplicationsRef,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// UsersIPRefOrErr returns the UsersIPRef value or an error if the edge
// was not loaded in eager-loading.
func (e Exam_Applications_IPEdges) UsersIPRefOrErr() ([]*UserMaster, error) {
	if e.loadedTypes[0] {
		return e.UsersIPRef, nil
	}
	return nil, &NotLoadedError{edge: "UsersIPRef"}
}

// ExamApplnIPRefOrErr returns the ExamApplnIPRef value or an error if the edge
// was not loaded in eager-loading.
func (e Exam_Applications_IPEdges) ExamApplnIPRefOrErr() ([]*Exam_IP, error) {
	if e.loadedTypes[1] {
		return e.ExamApplnIPRef, nil
	}
	return nil, &NotLoadedError{edge: "ExamAppln_IP_Ref"}
}

// OfficeIPRefOrErr returns the OfficeIPRef value or an error if the edge
// was not loaded in eager-loading.
func (e Exam_Applications_IPEdges) OfficeIPRefOrErr() ([]*Facility, error) {
	if e.loadedTypes[2] {
		return e.OfficeIPRef, nil
	}
	return nil, &NotLoadedError{edge: "Office_IP_Ref"}
}

// RoleusersOrErr returns the Roleusers value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Exam_Applications_IPEdges) RoleusersOrErr() (*RoleMaster, error) {
	if e.loadedTypes[3] {
		if e.Roleusers == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: rolemaster.Label}
		}
		return e.Roleusers, nil
	}
	return nil, &NotLoadedError{edge: "roleusers"}
}

// CadrePrefRefOrErr returns the CadrePrefRef value or an error if the edge
// was not loaded in eager-loading.
func (e Exam_Applications_IPEdges) CadrePrefRefOrErr() ([]*Cadre_Choice_IP, error) {
	if e.loadedTypes[4] {
		return e.CadrePrefRef, nil
	}
	return nil, &NotLoadedError{edge: "CadrePref_Ref"}
}

// CirclePrefRefOrErr returns the CirclePrefRef value or an error if the edge
// was not loaded in eager-loading.
func (e Exam_Applications_IPEdges) CirclePrefRefOrErr() ([]*PlaceOfPreferenceIP, error) {
	if e.loadedTypes[5] {
		return e.CirclePrefRef, nil
	}
	return nil, &NotLoadedError{edge: "CirclePrefRef"}
}

// IPApplicationsRefOrErr returns the IPApplicationsRef value or an error if the edge
// was not loaded in eager-loading.
func (e Exam_Applications_IPEdges) IPApplicationsRefOrErr() ([]*RecommendationsIPApplications, error) {
	if e.loadedTypes[6] {
		return e.IPApplicationsRef, nil
	}
	return nil, &NotLoadedError{edge: "IPApplicationsRef"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Exam_Applications_IP) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case exam_applications_ip.FieldServiceLength, exam_applications_ip.FieldCadrePreferences, exam_applications_ip.FieldDivisionPreferences:
			values[i] = new([]byte)
		case exam_applications_ip.FieldID, exam_applications_ip.FieldEmployeeID, exam_applications_ip.FieldRoleUserCode:
			values[i] = new(sql.NullInt64)
		case exam_applications_ip.FieldApplicationNumber, exam_applications_ip.FieldEmployeeName, exam_applications_ip.FieldDOB, exam_applications_ip.FieldGender, exam_applications_ip.FieldMobileNumber, exam_applications_ip.FieldEmailID, exam_applications_ip.FieldEmployeeCategory, exam_applications_ip.FieldCadre, exam_applications_ip.FieldEmployeePost, exam_applications_ip.FieldFacilityID, exam_applications_ip.FieldFacilityName, exam_applications_ip.FieldDivisionName, exam_applications_ip.FieldRegionName, exam_applications_ip.FieldReportingOfficeName, exam_applications_ip.FieldCircleName, exam_applications_ip.FieldEntryCadre, exam_applications_ip.FieldDCCS, exam_applications_ip.FieldDCInPresentCadre, exam_applications_ip.FieldDeputationOfficeId, exam_applications_ip.FieldDisabilityType, exam_applications_ip.FieldDisabilityPercentage, exam_applications_ip.FieldEducation, exam_applications_ip.FieldExamNameCode, exam_applications_ip.FieldExamYear, exam_applications_ip.FieldExamName, exam_applications_ip.FieldPresentCadre, exam_applications_ip.FieldPresentDesignation, exam_applications_ip.FieldEligibleCadre, exam_applications_ip.FieldEligibleCadreDate, exam_applications_ip.FieldCentrePreference, exam_applications_ip.FieldSignature, exam_applications_ip.FieldPhoto, exam_applications_ip.FieldApplicationStatus, exam_applications_ip.FieldVARemarks, exam_applications_ip.FieldVAUserName, exam_applications_ip.FieldCARemarks, exam_applications_ip.FieldCAUserName, exam_applications_ip.FieldNARemarks, exam_applications_ip.FieldNAUserName, exam_applications_ip.FieldAppliactionRemarks, exam_applications_ip.FieldUpdatedBy, exam_applications_ip.FieldCAPreviousRemarks:
			values[i] = new(sql.NullString)
		case exam_applications_ip.FieldApplnSubmittedDate, exam_applications_ip.FieldVADate, exam_applications_ip.FieldCADate, exam_applications_ip.FieldApplicationWdlDate, exam_applications_ip.FieldNADate, exam_applications_ip.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case exam_applications_ip.ForeignKeys[0]: // exam_ip_exam_appln_ip_ref
			values[i] = new(sql.NullInt64)
		case exam_applications_ip.ForeignKeys[1]: // facility_office_ip_ref
			values[i] = new(sql.NullInt64)
		case exam_applications_ip.ForeignKeys[2]: // user_master_users_ip_ref
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Exam_Applications_IP fields.
func (eai *Exam_Applications_IP) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case exam_applications_ip.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			eai.ID = int64(value.Int64)
		case exam_applications_ip.FieldApplicationNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ApplicationNumber", values[i])
			} else if value.Valid {
				eai.ApplicationNumber = value.String
			}
		case exam_applications_ip.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeID", values[i])
			} else if value.Valid {
				eai.EmployeeID = value.Int64
			}
		case exam_applications_ip.FieldEmployeeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeName", values[i])
			} else if value.Valid {
				eai.EmployeeName = value.String
			}
		case exam_applications_ip.FieldDOB:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DOB", values[i])
			} else if value.Valid {
				eai.DOB = value.String
			}
		case exam_applications_ip.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Gender", values[i])
			} else if value.Valid {
				eai.Gender = value.String
			}
		case exam_applications_ip.FieldMobileNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field MobileNumber", values[i])
			} else if value.Valid {
				eai.MobileNumber = value.String
			}
		case exam_applications_ip.FieldEmailID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmailID", values[i])
			} else if value.Valid {
				eai.EmailID = value.String
			}
		case exam_applications_ip.FieldEmployeeCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeCategory", values[i])
			} else if value.Valid {
				eai.EmployeeCategory = value.String
			}
		case exam_applications_ip.FieldCadre:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Cadre", values[i])
			} else if value.Valid {
				eai.Cadre = value.String
			}
		case exam_applications_ip.FieldEmployeePost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeePost", values[i])
			} else if value.Valid {
				eai.EmployeePost = value.String
			}
		case exam_applications_ip.FieldFacilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FacilityID", values[i])
			} else if value.Valid {
				eai.FacilityID = value.String
			}
		case exam_applications_ip.FieldFacilityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FacilityName", values[i])
			} else if value.Valid {
				eai.FacilityName = value.String
			}
		case exam_applications_ip.FieldDivisionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DivisionName", values[i])
			} else if value.Valid {
				eai.DivisionName = value.String
			}
		case exam_applications_ip.FieldRegionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field RegionName", values[i])
			} else if value.Valid {
				eai.RegionName = value.String
			}
		case exam_applications_ip.FieldReportingOfficeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ReportingOfficeName", values[i])
			} else if value.Valid {
				eai.ReportingOfficeName = value.String
			}
		case exam_applications_ip.FieldCircleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CircleName", values[i])
			} else if value.Valid {
				eai.CircleName = value.String
			}
		case exam_applications_ip.FieldEntryCadre:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EntryCadre", values[i])
			} else if value.Valid {
				eai.EntryCadre = value.String
			}
		case exam_applications_ip.FieldDCCS:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DCCS", values[i])
			} else if value.Valid {
				eai.DCCS = value.String
			}
		case exam_applications_ip.FieldDCInPresentCadre:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DCInPresentCadre", values[i])
			} else if value.Valid {
				eai.DCInPresentCadre = value.String
			}
		case exam_applications_ip.FieldDeputationOfficeId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeputationOfficeId", values[i])
			} else if value.Valid {
				eai.DeputationOfficeId = value.String
			}
		case exam_applications_ip.FieldDisabilityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DisabilityType", values[i])
			} else if value.Valid {
				eai.DisabilityType = value.String
			}
		case exam_applications_ip.FieldDisabilityPercentage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DisabilityPercentage", values[i])
			} else if value.Valid {
				eai.DisabilityPercentage = value.String
			}
		case exam_applications_ip.FieldEducation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Education", values[i])
			} else if value.Valid {
				eai.Education = value.String
			}
		case exam_applications_ip.FieldExamNameCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamNameCode", values[i])
			} else if value.Valid {
				eai.ExamNameCode = value.String
			}
		case exam_applications_ip.FieldExamYear:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamYear", values[i])
			} else if value.Valid {
				eai.ExamYear = value.String
			}
		case exam_applications_ip.FieldExamName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamName", values[i])
			} else if value.Valid {
				eai.ExamName = value.String
			}
		case exam_applications_ip.FieldPresentCadre:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PresentCadre", values[i])
			} else if value.Valid {
				eai.PresentCadre = value.String
			}
		case exam_applications_ip.FieldPresentDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PresentDesignation", values[i])
			} else if value.Valid {
				eai.PresentDesignation = value.String
			}
		case exam_applications_ip.FieldEligibleCadre:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EligibleCadre", values[i])
			} else if value.Valid {
				eai.EligibleCadre = value.String
			}
		case exam_applications_ip.FieldEligibleCadreDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EligibleCadreDate", values[i])
			} else if value.Valid {
				eai.EligibleCadreDate = value.String
			}
		case exam_applications_ip.FieldServiceLength:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field ServiceLength", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &eai.ServiceLength); err != nil {
					return fmt.Errorf("unmarshal field ServiceLength: %w", err)
				}
			}
		case exam_applications_ip.FieldCentrePreference:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CentrePreference", values[i])
			} else if value.Valid {
				eai.CentrePreference = value.String
			}
		case exam_applications_ip.FieldSignature:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Signature", values[i])
			} else if value.Valid {
				eai.Signature = value.String
			}
		case exam_applications_ip.FieldPhoto:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Photo", values[i])
			} else if value.Valid {
				eai.Photo = value.String
			}
		case exam_applications_ip.FieldApplicationStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ApplicationStatus", values[i])
			} else if value.Valid {
				eai.ApplicationStatus = value.String
			}
		case exam_applications_ip.FieldApplnSubmittedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ApplnSubmittedDate", values[i])
			} else if value.Valid {
				eai.ApplnSubmittedDate = value.Time
			}
		case exam_applications_ip.FieldVARemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VA_Remarks", values[i])
			} else if value.Valid {
				eai.VARemarks = value.String
			}
		case exam_applications_ip.FieldVAUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VA_UserName", values[i])
			} else if value.Valid {
				eai.VAUserName = value.String
			}
		case exam_applications_ip.FieldVADate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field VA_Date", values[i])
			} else if value.Valid {
				eai.VADate = value.Time
			}
		case exam_applications_ip.FieldCARemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CA_Remarks", values[i])
			} else if value.Valid {
				eai.CARemarks = value.String
			}
		case exam_applications_ip.FieldCAUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CA_UserName", values[i])
			} else if value.Valid {
				eai.CAUserName = value.String
			}
		case exam_applications_ip.FieldCADate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CA_Date", values[i])
			} else if value.Valid {
				eai.CADate = value.Time
			}
		case exam_applications_ip.FieldApplicationWdlDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ApplicationWdlDate", values[i])
			} else if value.Valid {
				eai.ApplicationWdlDate = value.Time
			}
		case exam_applications_ip.FieldNARemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NA_Remarks", values[i])
			} else if value.Valid {
				eai.NARemarks = value.String
			}
		case exam_applications_ip.FieldNAUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NA_UserName", values[i])
			} else if value.Valid {
				eai.NAUserName = value.String
			}
		case exam_applications_ip.FieldNADate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field NA_Date", values[i])
			} else if value.Valid {
				eai.NADate = value.Time
			}
		case exam_applications_ip.FieldAppliactionRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AppliactionRemarks", values[i])
			} else if value.Valid {
				eai.AppliactionRemarks = value.String
			}
		case exam_applications_ip.FieldCadrePreferences:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field CadrePreferences", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &eai.CadrePreferences); err != nil {
					return fmt.Errorf("unmarshal field CadrePreferences: %w", err)
				}
			}
		case exam_applications_ip.FieldDivisionPreferences:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field DivisionPreferences", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &eai.DivisionPreferences); err != nil {
					return fmt.Errorf("unmarshal field DivisionPreferences: %w", err)
				}
			}
		case exam_applications_ip.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				eai.UpdatedAt = value.Time
			}
		case exam_applications_ip.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedBy", values[i])
			} else if value.Valid {
				eai.UpdatedBy = value.String
			}
		case exam_applications_ip.FieldCAPreviousRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CAPreviousRemarks", values[i])
			} else if value.Valid {
				eai.CAPreviousRemarks = value.String
			}
		case exam_applications_ip.FieldRoleUserCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field RoleUserCode", values[i])
			} else if value.Valid {
				eai.RoleUserCode = int32(value.Int64)
			}
		case exam_applications_ip.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exam_ip_exam_appln_ip_ref", value)
			} else if value.Valid {
				eai.exam_ip_exam_appln_ip_ref = new(int32)
				*eai.exam_ip_exam_appln_ip_ref = int32(value.Int64)
			}
		case exam_applications_ip.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field facility_office_ip_ref", value)
			} else if value.Valid {
				eai.facility_office_ip_ref = new(int32)
				*eai.facility_office_ip_ref = int32(value.Int64)
			}
		case exam_applications_ip.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_master_users_ip_ref", value)
			} else if value.Valid {
				eai.user_master_users_ip_ref = new(int64)
				*eai.user_master_users_ip_ref = int64(value.Int64)
			}
		default:
			eai.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Exam_Applications_IP.
// This includes values selected through modifiers, order, etc.
func (eai *Exam_Applications_IP) Value(name string) (ent.Value, error) {
	return eai.selectValues.Get(name)
}

// QueryUsersIPRef queries the "UsersIPRef" edge of the Exam_Applications_IP entity.
func (eai *Exam_Applications_IP) QueryUsersIPRef() *UserMasterQuery {
	return NewExamApplicationsIPClient(eai.config).QueryUsersIPRef(eai)
}

// QueryExamApplnIPRef queries the "ExamAppln_IP_Ref" edge of the Exam_Applications_IP entity.
func (eai *Exam_Applications_IP) QueryExamApplnIPRef() *ExamIPQuery {
	return NewExamApplicationsIPClient(eai.config).QueryExamApplnIPRef(eai)
}

// QueryOfficeIPRef queries the "Office_IP_Ref" edge of the Exam_Applications_IP entity.
func (eai *Exam_Applications_IP) QueryOfficeIPRef() *FacilityQuery {
	return NewExamApplicationsIPClient(eai.config).QueryOfficeIPRef(eai)
}

// QueryRoleusers queries the "roleusers" edge of the Exam_Applications_IP entity.
func (eai *Exam_Applications_IP) QueryRoleusers() *RoleMasterQuery {
	return NewExamApplicationsIPClient(eai.config).QueryRoleusers(eai)
}

// QueryCadrePrefRef queries the "CadrePref_Ref" edge of the Exam_Applications_IP entity.
func (eai *Exam_Applications_IP) QueryCadrePrefRef() *CadreChoiceIPQuery {
	return NewExamApplicationsIPClient(eai.config).QueryCadrePrefRef(eai)
}

// QueryCirclePrefRef queries the "CirclePrefRef" edge of the Exam_Applications_IP entity.
func (eai *Exam_Applications_IP) QueryCirclePrefRef() *PlaceOfPreferenceIPQuery {
	return NewExamApplicationsIPClient(eai.config).QueryCirclePrefRef(eai)
}

// QueryIPApplicationsRef queries the "IPApplicationsRef" edge of the Exam_Applications_IP entity.
func (eai *Exam_Applications_IP) QueryIPApplicationsRef() *RecommendationsIPApplicationsQuery {
	return NewExamApplicationsIPClient(eai.config).QueryIPApplicationsRef(eai)
}

// Update returns a builder for updating this Exam_Applications_IP.
// Note that you need to call Exam_Applications_IP.Unwrap() before calling this method if this Exam_Applications_IP
// was returned from a transaction, and the transaction was committed or rolled back.
func (eai *Exam_Applications_IP) Update() *ExamApplicationsIPUpdateOne {
	return NewExamApplicationsIPClient(eai.config).UpdateOne(eai)
}

// Unwrap unwraps the Exam_Applications_IP entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (eai *Exam_Applications_IP) Unwrap() *Exam_Applications_IP {
	_tx, ok := eai.config.driver.(*txDriver)
	if !ok {
		panic("ent: Exam_Applications_IP is not a transactional entity")
	}
	eai.config.driver = _tx.drv
	return eai
}

// String implements the fmt.Stringer.
func (eai *Exam_Applications_IP) String() string {
	var builder strings.Builder
	builder.WriteString("Exam_Applications_IP(")
	builder.WriteString(fmt.Sprintf("id=%v, ", eai.ID))
	builder.WriteString("ApplicationNumber=")
	builder.WriteString(eai.ApplicationNumber)
	builder.WriteString(", ")
	builder.WriteString("EmployeeID=")
	builder.WriteString(fmt.Sprintf("%v", eai.EmployeeID))
	builder.WriteString(", ")
	builder.WriteString("EmployeeName=")
	builder.WriteString(eai.EmployeeName)
	builder.WriteString(", ")
	builder.WriteString("DOB=")
	builder.WriteString(eai.DOB)
	builder.WriteString(", ")
	builder.WriteString("Gender=")
	builder.WriteString(eai.Gender)
	builder.WriteString(", ")
	builder.WriteString("MobileNumber=")
	builder.WriteString(eai.MobileNumber)
	builder.WriteString(", ")
	builder.WriteString("EmailID=")
	builder.WriteString(eai.EmailID)
	builder.WriteString(", ")
	builder.WriteString("EmployeeCategory=")
	builder.WriteString(eai.EmployeeCategory)
	builder.WriteString(", ")
	builder.WriteString("Cadre=")
	builder.WriteString(eai.Cadre)
	builder.WriteString(", ")
	builder.WriteString("EmployeePost=")
	builder.WriteString(eai.EmployeePost)
	builder.WriteString(", ")
	builder.WriteString("FacilityID=")
	builder.WriteString(eai.FacilityID)
	builder.WriteString(", ")
	builder.WriteString("FacilityName=")
	builder.WriteString(eai.FacilityName)
	builder.WriteString(", ")
	builder.WriteString("DivisionName=")
	builder.WriteString(eai.DivisionName)
	builder.WriteString(", ")
	builder.WriteString("RegionName=")
	builder.WriteString(eai.RegionName)
	builder.WriteString(", ")
	builder.WriteString("ReportingOfficeName=")
	builder.WriteString(eai.ReportingOfficeName)
	builder.WriteString(", ")
	builder.WriteString("CircleName=")
	builder.WriteString(eai.CircleName)
	builder.WriteString(", ")
	builder.WriteString("EntryCadre=")
	builder.WriteString(eai.EntryCadre)
	builder.WriteString(", ")
	builder.WriteString("DCCS=")
	builder.WriteString(eai.DCCS)
	builder.WriteString(", ")
	builder.WriteString("DCInPresentCadre=")
	builder.WriteString(eai.DCInPresentCadre)
	builder.WriteString(", ")
	builder.WriteString("DeputationOfficeId=")
	builder.WriteString(eai.DeputationOfficeId)
	builder.WriteString(", ")
	builder.WriteString("DisabilityType=")
	builder.WriteString(eai.DisabilityType)
	builder.WriteString(", ")
	builder.WriteString("DisabilityPercentage=")
	builder.WriteString(eai.DisabilityPercentage)
	builder.WriteString(", ")
	builder.WriteString("Education=")
	builder.WriteString(eai.Education)
	builder.WriteString(", ")
	builder.WriteString("ExamNameCode=")
	builder.WriteString(eai.ExamNameCode)
	builder.WriteString(", ")
	builder.WriteString("ExamYear=")
	builder.WriteString(eai.ExamYear)
	builder.WriteString(", ")
	builder.WriteString("ExamName=")
	builder.WriteString(eai.ExamName)
	builder.WriteString(", ")
	builder.WriteString("PresentCadre=")
	builder.WriteString(eai.PresentCadre)
	builder.WriteString(", ")
	builder.WriteString("PresentDesignation=")
	builder.WriteString(eai.PresentDesignation)
	builder.WriteString(", ")
	builder.WriteString("EligibleCadre=")
	builder.WriteString(eai.EligibleCadre)
	builder.WriteString(", ")
	builder.WriteString("EligibleCadreDate=")
	builder.WriteString(eai.EligibleCadreDate)
	builder.WriteString(", ")
	builder.WriteString("ServiceLength=")
	builder.WriteString(fmt.Sprintf("%v", eai.ServiceLength))
	builder.WriteString(", ")
	builder.WriteString("CentrePreference=")
	builder.WriteString(eai.CentrePreference)
	builder.WriteString(", ")
	builder.WriteString("Signature=")
	builder.WriteString(eai.Signature)
	builder.WriteString(", ")
	builder.WriteString("Photo=")
	builder.WriteString(eai.Photo)
	builder.WriteString(", ")
	builder.WriteString("ApplicationStatus=")
	builder.WriteString(eai.ApplicationStatus)
	builder.WriteString(", ")
	builder.WriteString("ApplnSubmittedDate=")
	builder.WriteString(eai.ApplnSubmittedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("VA_Remarks=")
	builder.WriteString(eai.VARemarks)
	builder.WriteString(", ")
	builder.WriteString("VA_UserName=")
	builder.WriteString(eai.VAUserName)
	builder.WriteString(", ")
	builder.WriteString("VA_Date=")
	builder.WriteString(eai.VADate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("CA_Remarks=")
	builder.WriteString(eai.CARemarks)
	builder.WriteString(", ")
	builder.WriteString("CA_UserName=")
	builder.WriteString(eai.CAUserName)
	builder.WriteString(", ")
	builder.WriteString("CA_Date=")
	builder.WriteString(eai.CADate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ApplicationWdlDate=")
	builder.WriteString(eai.ApplicationWdlDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("NA_Remarks=")
	builder.WriteString(eai.NARemarks)
	builder.WriteString(", ")
	builder.WriteString("NA_UserName=")
	builder.WriteString(eai.NAUserName)
	builder.WriteString(", ")
	builder.WriteString("NA_Date=")
	builder.WriteString(eai.NADate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("AppliactionRemarks=")
	builder.WriteString(eai.AppliactionRemarks)
	builder.WriteString(", ")
	builder.WriteString("CadrePreferences=")
	builder.WriteString(fmt.Sprintf("%v", eai.CadrePreferences))
	builder.WriteString(", ")
	builder.WriteString("DivisionPreferences=")
	builder.WriteString(fmt.Sprintf("%v", eai.DivisionPreferences))
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(eai.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedBy=")
	builder.WriteString(eai.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("CAPreviousRemarks=")
	builder.WriteString(eai.CAPreviousRemarks)
	builder.WriteString(", ")
	builder.WriteString("RoleUserCode=")
	builder.WriteString(fmt.Sprintf("%v", eai.RoleUserCode))
	builder.WriteByte(')')
	return builder.String()
}

// Exam_Applications_IPs is a parsable slice of Exam_Applications_IP.
type Exam_Applications_IPs []*Exam_Applications_IP
