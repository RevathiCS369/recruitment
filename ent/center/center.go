// Code generated by ent, DO NOT EDIT.

package center

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the center type in the database.
	Label = "center"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "CenterCode"
	// FieldNotifyCode holds the string denoting the notifycode field in the database.
	FieldNotifyCode = "notify_code"
	// FieldNodalOfficerCode holds the string denoting the nodalofficercode field in the database.
	FieldNodalOfficerCode = "nodal_officer_code"
	// FieldCenterName holds the string denoting the centername field in the database.
	FieldCenterName = "center_name"
	// EdgeApplications holds the string denoting the applications edge name in mutations.
	EdgeApplications = "applications"
	// EdgeNodalOfficer holds the string denoting the nodal_officer edge name in mutations.
	EdgeNodalOfficer = "nodal_officer"
	// EdgeNotification holds the string denoting the notification edge name in mutations.
	EdgeNotification = "notification"
	// ApplicationFieldID holds the string denoting the ID field of the Application.
	ApplicationFieldID = "ApplicationCode"
	// NodalOfficerFieldID holds the string denoting the ID field of the NodalOfficer.
	NodalOfficerFieldID = "NodalOfficerCode"
	// NotificationFieldID holds the string denoting the ID field of the Notification.
	NotificationFieldID = "NotifyCode"
	// Table holds the table name of the center in the database.
	Table = "Center"
	// ApplicationsTable is the table that holds the applications relation/edge.
	ApplicationsTable = "Application"
	// ApplicationsInverseTable is the table name for the Application entity.
	// It exists in this package in order to avoid circular dependency with the "application" package.
	ApplicationsInverseTable = "Application"
	// ApplicationsColumn is the table column denoting the applications relation/edge.
	ApplicationsColumn = "center_code"
	// NodalOfficerTable is the table that holds the nodal_officer relation/edge.
	NodalOfficerTable = "Center"
	// NodalOfficerInverseTable is the table name for the NodalOfficer entity.
	// It exists in this package in order to avoid circular dependency with the "nodalofficer" package.
	NodalOfficerInverseTable = "NodalOfficers"
	// NodalOfficerColumn is the table column denoting the nodal_officer relation/edge.
	NodalOfficerColumn = "nodal_officer_code"
	// NotificationTable is the table that holds the notification relation/edge.
	NotificationTable = "Center"
	// NotificationInverseTable is the table name for the Notification entity.
	// It exists in this package in order to avoid circular dependency with the "notification" package.
	NotificationInverseTable = "Notification"
	// NotificationColumn is the table column denoting the notification relation/edge.
	NotificationColumn = "notify_code"
)

// Columns holds all SQL columns for center fields.
var Columns = []string{
	FieldID,
	FieldNotifyCode,
	FieldNodalOfficerCode,
	FieldCenterName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "Center"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"exam_papers_centers",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Center queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNotifyCode orders the results by the NotifyCode field.
func ByNotifyCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotifyCode, opts...).ToFunc()
}

// ByNodalOfficerCode orders the results by the NodalOfficerCode field.
func ByNodalOfficerCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNodalOfficerCode, opts...).ToFunc()
}

// ByCenterName orders the results by the CenterName field.
func ByCenterName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCenterName, opts...).ToFunc()
}

// ByApplicationsCount orders the results by applications count.
func ByApplicationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newApplicationsStep(), opts...)
	}
}

// ByApplications orders the results by applications terms.
func ByApplications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplicationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNodalOfficerField orders the results by nodal_officer field.
func ByNodalOfficerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNodalOfficerStep(), sql.OrderByField(field, opts...))
	}
}

// ByNotificationField orders the results by notification field.
func ByNotificationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotificationStep(), sql.OrderByField(field, opts...))
	}
}
func newApplicationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplicationsInverseTable, ApplicationFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ApplicationsTable, ApplicationsColumn),
	)
}
func newNodalOfficerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NodalOfficerInverseTable, NodalOfficerFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, NodalOfficerTable, NodalOfficerColumn),
	)
}
func newNotificationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotificationInverseTable, NotificationFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, NotificationTable, NotificationColumn),
	)
}
