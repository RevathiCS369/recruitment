// Code generated by ent, DO NOT EDIT.

package exameligibility

import (
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldLTE(FieldID, id))
}

// Examcode applies equality check predicate on the "Examcode" field. It's identical to ExamcodeEQ.
func Examcode(v int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldEQ(FieldExamcode, v))
}

// AgeCriteria applies equality check predicate on the "AgeCriteria" field. It's identical to AgeCriteriaEQ.
func AgeCriteria(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldEQ(FieldAgeCriteria, v))
}

// ServiceCriteria applies equality check predicate on the "ServiceCriteria" field. It's identical to ServiceCriteriaEQ.
func ServiceCriteria(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldEQ(FieldServiceCriteria, v))
}

// DrivingLicenseCriteria applies equality check predicate on the "DrivingLicenseCriteria" field. It's identical to DrivingLicenseCriteriaEQ.
func DrivingLicenseCriteria(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldEQ(FieldDrivingLicenseCriteria, v))
}

// NotifyCode applies equality check predicate on the "NotifyCode" field. It's identical to NotifyCodeEQ.
func NotifyCode(v int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldEQ(FieldNotifyCode, v))
}

// EmployeeCadreID applies equality check predicate on the "EmployeeCadreID" field. It's identical to EmployeeCadreIDEQ.
func EmployeeCadreID(v int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldEQ(FieldEmployeeCadreID, v))
}

// CategoryID applies equality check predicate on the "CategoryID" field. It's identical to CategoryIDEQ.
func CategoryID(v int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldEQ(FieldCategoryID, v))
}

// ExamcodeEQ applies the EQ predicate on the "Examcode" field.
func ExamcodeEQ(v int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldEQ(FieldExamcode, v))
}

// ExamcodeNEQ applies the NEQ predicate on the "Examcode" field.
func ExamcodeNEQ(v int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldNEQ(FieldExamcode, v))
}

// ExamcodeIn applies the In predicate on the "Examcode" field.
func ExamcodeIn(vs ...int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldIn(FieldExamcode, vs...))
}

// ExamcodeNotIn applies the NotIn predicate on the "Examcode" field.
func ExamcodeNotIn(vs ...int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldNotIn(FieldExamcode, vs...))
}

// ExamcodeGT applies the GT predicate on the "Examcode" field.
func ExamcodeGT(v int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldGT(FieldExamcode, v))
}

// ExamcodeGTE applies the GTE predicate on the "Examcode" field.
func ExamcodeGTE(v int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldGTE(FieldExamcode, v))
}

// ExamcodeLT applies the LT predicate on the "Examcode" field.
func ExamcodeLT(v int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldLT(FieldExamcode, v))
}

// ExamcodeLTE applies the LTE predicate on the "Examcode" field.
func ExamcodeLTE(v int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldLTE(FieldExamcode, v))
}

// AgeCriteriaEQ applies the EQ predicate on the "AgeCriteria" field.
func AgeCriteriaEQ(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldEQ(FieldAgeCriteria, v))
}

// AgeCriteriaNEQ applies the NEQ predicate on the "AgeCriteria" field.
func AgeCriteriaNEQ(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldNEQ(FieldAgeCriteria, v))
}

// AgeCriteriaIn applies the In predicate on the "AgeCriteria" field.
func AgeCriteriaIn(vs ...string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldIn(FieldAgeCriteria, vs...))
}

// AgeCriteriaNotIn applies the NotIn predicate on the "AgeCriteria" field.
func AgeCriteriaNotIn(vs ...string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldNotIn(FieldAgeCriteria, vs...))
}

// AgeCriteriaGT applies the GT predicate on the "AgeCriteria" field.
func AgeCriteriaGT(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldGT(FieldAgeCriteria, v))
}

// AgeCriteriaGTE applies the GTE predicate on the "AgeCriteria" field.
func AgeCriteriaGTE(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldGTE(FieldAgeCriteria, v))
}

// AgeCriteriaLT applies the LT predicate on the "AgeCriteria" field.
func AgeCriteriaLT(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldLT(FieldAgeCriteria, v))
}

// AgeCriteriaLTE applies the LTE predicate on the "AgeCriteria" field.
func AgeCriteriaLTE(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldLTE(FieldAgeCriteria, v))
}

// AgeCriteriaContains applies the Contains predicate on the "AgeCriteria" field.
func AgeCriteriaContains(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldContains(FieldAgeCriteria, v))
}

// AgeCriteriaHasPrefix applies the HasPrefix predicate on the "AgeCriteria" field.
func AgeCriteriaHasPrefix(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldHasPrefix(FieldAgeCriteria, v))
}

// AgeCriteriaHasSuffix applies the HasSuffix predicate on the "AgeCriteria" field.
func AgeCriteriaHasSuffix(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldHasSuffix(FieldAgeCriteria, v))
}

// AgeCriteriaIsNil applies the IsNil predicate on the "AgeCriteria" field.
func AgeCriteriaIsNil() predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldIsNull(FieldAgeCriteria))
}

// AgeCriteriaNotNil applies the NotNil predicate on the "AgeCriteria" field.
func AgeCriteriaNotNil() predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldNotNull(FieldAgeCriteria))
}

// AgeCriteriaEqualFold applies the EqualFold predicate on the "AgeCriteria" field.
func AgeCriteriaEqualFold(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldEqualFold(FieldAgeCriteria, v))
}

// AgeCriteriaContainsFold applies the ContainsFold predicate on the "AgeCriteria" field.
func AgeCriteriaContainsFold(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldContainsFold(FieldAgeCriteria, v))
}

// ServiceCriteriaEQ applies the EQ predicate on the "ServiceCriteria" field.
func ServiceCriteriaEQ(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldEQ(FieldServiceCriteria, v))
}

// ServiceCriteriaNEQ applies the NEQ predicate on the "ServiceCriteria" field.
func ServiceCriteriaNEQ(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldNEQ(FieldServiceCriteria, v))
}

// ServiceCriteriaIn applies the In predicate on the "ServiceCriteria" field.
func ServiceCriteriaIn(vs ...string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldIn(FieldServiceCriteria, vs...))
}

// ServiceCriteriaNotIn applies the NotIn predicate on the "ServiceCriteria" field.
func ServiceCriteriaNotIn(vs ...string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldNotIn(FieldServiceCriteria, vs...))
}

// ServiceCriteriaGT applies the GT predicate on the "ServiceCriteria" field.
func ServiceCriteriaGT(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldGT(FieldServiceCriteria, v))
}

// ServiceCriteriaGTE applies the GTE predicate on the "ServiceCriteria" field.
func ServiceCriteriaGTE(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldGTE(FieldServiceCriteria, v))
}

// ServiceCriteriaLT applies the LT predicate on the "ServiceCriteria" field.
func ServiceCriteriaLT(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldLT(FieldServiceCriteria, v))
}

// ServiceCriteriaLTE applies the LTE predicate on the "ServiceCriteria" field.
func ServiceCriteriaLTE(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldLTE(FieldServiceCriteria, v))
}

// ServiceCriteriaContains applies the Contains predicate on the "ServiceCriteria" field.
func ServiceCriteriaContains(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldContains(FieldServiceCriteria, v))
}

// ServiceCriteriaHasPrefix applies the HasPrefix predicate on the "ServiceCriteria" field.
func ServiceCriteriaHasPrefix(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldHasPrefix(FieldServiceCriteria, v))
}

// ServiceCriteriaHasSuffix applies the HasSuffix predicate on the "ServiceCriteria" field.
func ServiceCriteriaHasSuffix(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldHasSuffix(FieldServiceCriteria, v))
}

// ServiceCriteriaIsNil applies the IsNil predicate on the "ServiceCriteria" field.
func ServiceCriteriaIsNil() predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldIsNull(FieldServiceCriteria))
}

// ServiceCriteriaNotNil applies the NotNil predicate on the "ServiceCriteria" field.
func ServiceCriteriaNotNil() predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldNotNull(FieldServiceCriteria))
}

// ServiceCriteriaEqualFold applies the EqualFold predicate on the "ServiceCriteria" field.
func ServiceCriteriaEqualFold(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldEqualFold(FieldServiceCriteria, v))
}

// ServiceCriteriaContainsFold applies the ContainsFold predicate on the "ServiceCriteria" field.
func ServiceCriteriaContainsFold(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldContainsFold(FieldServiceCriteria, v))
}

// DrivingLicenseCriteriaEQ applies the EQ predicate on the "DrivingLicenseCriteria" field.
func DrivingLicenseCriteriaEQ(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldEQ(FieldDrivingLicenseCriteria, v))
}

// DrivingLicenseCriteriaNEQ applies the NEQ predicate on the "DrivingLicenseCriteria" field.
func DrivingLicenseCriteriaNEQ(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldNEQ(FieldDrivingLicenseCriteria, v))
}

// DrivingLicenseCriteriaIn applies the In predicate on the "DrivingLicenseCriteria" field.
func DrivingLicenseCriteriaIn(vs ...string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldIn(FieldDrivingLicenseCriteria, vs...))
}

// DrivingLicenseCriteriaNotIn applies the NotIn predicate on the "DrivingLicenseCriteria" field.
func DrivingLicenseCriteriaNotIn(vs ...string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldNotIn(FieldDrivingLicenseCriteria, vs...))
}

// DrivingLicenseCriteriaGT applies the GT predicate on the "DrivingLicenseCriteria" field.
func DrivingLicenseCriteriaGT(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldGT(FieldDrivingLicenseCriteria, v))
}

// DrivingLicenseCriteriaGTE applies the GTE predicate on the "DrivingLicenseCriteria" field.
func DrivingLicenseCriteriaGTE(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldGTE(FieldDrivingLicenseCriteria, v))
}

// DrivingLicenseCriteriaLT applies the LT predicate on the "DrivingLicenseCriteria" field.
func DrivingLicenseCriteriaLT(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldLT(FieldDrivingLicenseCriteria, v))
}

// DrivingLicenseCriteriaLTE applies the LTE predicate on the "DrivingLicenseCriteria" field.
func DrivingLicenseCriteriaLTE(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldLTE(FieldDrivingLicenseCriteria, v))
}

// DrivingLicenseCriteriaContains applies the Contains predicate on the "DrivingLicenseCriteria" field.
func DrivingLicenseCriteriaContains(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldContains(FieldDrivingLicenseCriteria, v))
}

// DrivingLicenseCriteriaHasPrefix applies the HasPrefix predicate on the "DrivingLicenseCriteria" field.
func DrivingLicenseCriteriaHasPrefix(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldHasPrefix(FieldDrivingLicenseCriteria, v))
}

// DrivingLicenseCriteriaHasSuffix applies the HasSuffix predicate on the "DrivingLicenseCriteria" field.
func DrivingLicenseCriteriaHasSuffix(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldHasSuffix(FieldDrivingLicenseCriteria, v))
}

// DrivingLicenseCriteriaIsNil applies the IsNil predicate on the "DrivingLicenseCriteria" field.
func DrivingLicenseCriteriaIsNil() predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldIsNull(FieldDrivingLicenseCriteria))
}

// DrivingLicenseCriteriaNotNil applies the NotNil predicate on the "DrivingLicenseCriteria" field.
func DrivingLicenseCriteriaNotNil() predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldNotNull(FieldDrivingLicenseCriteria))
}

// DrivingLicenseCriteriaEqualFold applies the EqualFold predicate on the "DrivingLicenseCriteria" field.
func DrivingLicenseCriteriaEqualFold(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldEqualFold(FieldDrivingLicenseCriteria, v))
}

// DrivingLicenseCriteriaContainsFold applies the ContainsFold predicate on the "DrivingLicenseCriteria" field.
func DrivingLicenseCriteriaContainsFold(v string) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldContainsFold(FieldDrivingLicenseCriteria, v))
}

// NotifyCodeEQ applies the EQ predicate on the "NotifyCode" field.
func NotifyCodeEQ(v int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldEQ(FieldNotifyCode, v))
}

// NotifyCodeNEQ applies the NEQ predicate on the "NotifyCode" field.
func NotifyCodeNEQ(v int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldNEQ(FieldNotifyCode, v))
}

// NotifyCodeIn applies the In predicate on the "NotifyCode" field.
func NotifyCodeIn(vs ...int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldIn(FieldNotifyCode, vs...))
}

// NotifyCodeNotIn applies the NotIn predicate on the "NotifyCode" field.
func NotifyCodeNotIn(vs ...int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldNotIn(FieldNotifyCode, vs...))
}

// NotifyCodeGT applies the GT predicate on the "NotifyCode" field.
func NotifyCodeGT(v int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldGT(FieldNotifyCode, v))
}

// NotifyCodeGTE applies the GTE predicate on the "NotifyCode" field.
func NotifyCodeGTE(v int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldGTE(FieldNotifyCode, v))
}

// NotifyCodeLT applies the LT predicate on the "NotifyCode" field.
func NotifyCodeLT(v int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldLT(FieldNotifyCode, v))
}

// NotifyCodeLTE applies the LTE predicate on the "NotifyCode" field.
func NotifyCodeLTE(v int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldLTE(FieldNotifyCode, v))
}

// NotifyCodeIsNil applies the IsNil predicate on the "NotifyCode" field.
func NotifyCodeIsNil() predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldIsNull(FieldNotifyCode))
}

// NotifyCodeNotNil applies the NotNil predicate on the "NotifyCode" field.
func NotifyCodeNotNil() predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldNotNull(FieldNotifyCode))
}

// EmployeeCadreIDEQ applies the EQ predicate on the "EmployeeCadreID" field.
func EmployeeCadreIDEQ(v int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldEQ(FieldEmployeeCadreID, v))
}

// EmployeeCadreIDNEQ applies the NEQ predicate on the "EmployeeCadreID" field.
func EmployeeCadreIDNEQ(v int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldNEQ(FieldEmployeeCadreID, v))
}

// EmployeeCadreIDIn applies the In predicate on the "EmployeeCadreID" field.
func EmployeeCadreIDIn(vs ...int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldIn(FieldEmployeeCadreID, vs...))
}

// EmployeeCadreIDNotIn applies the NotIn predicate on the "EmployeeCadreID" field.
func EmployeeCadreIDNotIn(vs ...int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldNotIn(FieldEmployeeCadreID, vs...))
}

// EmployeeCadreIDGT applies the GT predicate on the "EmployeeCadreID" field.
func EmployeeCadreIDGT(v int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldGT(FieldEmployeeCadreID, v))
}

// EmployeeCadreIDGTE applies the GTE predicate on the "EmployeeCadreID" field.
func EmployeeCadreIDGTE(v int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldGTE(FieldEmployeeCadreID, v))
}

// EmployeeCadreIDLT applies the LT predicate on the "EmployeeCadreID" field.
func EmployeeCadreIDLT(v int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldLT(FieldEmployeeCadreID, v))
}

// EmployeeCadreIDLTE applies the LTE predicate on the "EmployeeCadreID" field.
func EmployeeCadreIDLTE(v int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldLTE(FieldEmployeeCadreID, v))
}

// EmployeeCadreIDIsNil applies the IsNil predicate on the "EmployeeCadreID" field.
func EmployeeCadreIDIsNil() predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldIsNull(FieldEmployeeCadreID))
}

// EmployeeCadreIDNotNil applies the NotNil predicate on the "EmployeeCadreID" field.
func EmployeeCadreIDNotNil() predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldNotNull(FieldEmployeeCadreID))
}

// CategoryIDEQ applies the EQ predicate on the "CategoryID" field.
func CategoryIDEQ(v int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldEQ(FieldCategoryID, v))
}

// CategoryIDNEQ applies the NEQ predicate on the "CategoryID" field.
func CategoryIDNEQ(v int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldNEQ(FieldCategoryID, v))
}

// CategoryIDIn applies the In predicate on the "CategoryID" field.
func CategoryIDIn(vs ...int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldIn(FieldCategoryID, vs...))
}

// CategoryIDNotIn applies the NotIn predicate on the "CategoryID" field.
func CategoryIDNotIn(vs ...int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldNotIn(FieldCategoryID, vs...))
}

// CategoryIDGT applies the GT predicate on the "CategoryID" field.
func CategoryIDGT(v int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldGT(FieldCategoryID, v))
}

// CategoryIDGTE applies the GTE predicate on the "CategoryID" field.
func CategoryIDGTE(v int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldGTE(FieldCategoryID, v))
}

// CategoryIDLT applies the LT predicate on the "CategoryID" field.
func CategoryIDLT(v int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldLT(FieldCategoryID, v))
}

// CategoryIDLTE applies the LTE predicate on the "CategoryID" field.
func CategoryIDLTE(v int32) predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldLTE(FieldCategoryID, v))
}

// CategoryIDIsNil applies the IsNil predicate on the "CategoryID" field.
func CategoryIDIsNil() predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldIsNull(FieldCategoryID))
}

// CategoryIDNotNil applies the NotNil predicate on the "CategoryID" field.
func CategoryIDNotNil() predicate.ExamEligibility {
	return predicate.ExamEligibility(sql.FieldNotNull(FieldCategoryID))
}

// HasAgeEligibilities applies the HasEdge predicate on the "age_eligibilities" edge.
func HasAgeEligibilities() predicate.ExamEligibility {
	return predicate.ExamEligibility(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AgeEligibilitiesTable, AgeEligibilitiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAgeEligibilitiesWith applies the HasEdge predicate on the "age_eligibilities" edge with a given conditions (other predicates).
func HasAgeEligibilitiesWith(preds ...predicate.AgeEligibility) predicate.ExamEligibility {
	return predicate.ExamEligibility(func(s *sql.Selector) {
		step := newAgeEligibilitiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ExamEligibility) predicate.ExamEligibility {
	return predicate.ExamEligibility(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ExamEligibility) predicate.ExamEligibility {
	return predicate.ExamEligibility(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ExamEligibility) predicate.ExamEligibility {
	return predicate.ExamEligibility(func(s *sql.Selector) {
		p(s.Not())
	})
}
