// Code generated by ent, DO NOT EDIT.

package exameligibility

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the exameligibility type in the database.
	Label = "exam_eligibility"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "EligibilityCode"
	// FieldExamcode holds the string denoting the examcode field in the database.
	FieldExamcode = "examcode"
	// FieldAgeCriteria holds the string denoting the agecriteria field in the database.
	FieldAgeCriteria = "age_criteria"
	// FieldServiceCriteria holds the string denoting the servicecriteria field in the database.
	FieldServiceCriteria = "service_criteria"
	// FieldDrivingLicenseCriteria holds the string denoting the drivinglicensecriteria field in the database.
	FieldDrivingLicenseCriteria = "driving_license_criteria"
	// FieldNotifyCode holds the string denoting the notifycode field in the database.
	FieldNotifyCode = "notify_code"
	// FieldEmployeeCadreID holds the string denoting the employeecadreid field in the database.
	FieldEmployeeCadreID = "employee_cadre_id"
	// FieldCategoryID holds the string denoting the categoryid field in the database.
	FieldCategoryID = "category_id"
	// EdgeAgeEligibilities holds the string denoting the age_eligibilities edge name in mutations.
	EdgeAgeEligibilities = "age_eligibilities"
	// AgeEligibilityFieldID holds the string denoting the ID field of the AgeEligibility.
	AgeEligibilityFieldID = "AgeElibilityCode"
	// Table holds the table name of the exameligibility in the database.
	Table = "ExamEligibility"
	// AgeEligibilitiesTable is the table that holds the age_eligibilities relation/edge.
	AgeEligibilitiesTable = "AgeEligibility"
	// AgeEligibilitiesInverseTable is the table name for the AgeEligibility entity.
	// It exists in this package in order to avoid circular dependency with the "ageeligibility" package.
	AgeEligibilitiesInverseTable = "AgeEligibility"
	// AgeEligibilitiesColumn is the table column denoting the age_eligibilities relation/edge.
	AgeEligibilitiesColumn = "eligibility_code"
)

// Columns holds all SQL columns for exameligibility fields.
var Columns = []string{
	FieldID,
	FieldExamcode,
	FieldAgeCriteria,
	FieldServiceCriteria,
	FieldDrivingLicenseCriteria,
	FieldNotifyCode,
	FieldEmployeeCadreID,
	FieldCategoryID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ExamEligibility queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByExamcode orders the results by the Examcode field.
func ByExamcode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamcode, opts...).ToFunc()
}

// ByAgeCriteria orders the results by the AgeCriteria field.
func ByAgeCriteria(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgeCriteria, opts...).ToFunc()
}

// ByServiceCriteria orders the results by the ServiceCriteria field.
func ByServiceCriteria(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServiceCriteria, opts...).ToFunc()
}

// ByDrivingLicenseCriteria orders the results by the DrivingLicenseCriteria field.
func ByDrivingLicenseCriteria(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDrivingLicenseCriteria, opts...).ToFunc()
}

// ByNotifyCode orders the results by the NotifyCode field.
func ByNotifyCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotifyCode, opts...).ToFunc()
}

// ByEmployeeCadreID orders the results by the EmployeeCadreID field.
func ByEmployeeCadreID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeCadreID, opts...).ToFunc()
}

// ByCategoryID orders the results by the CategoryID field.
func ByCategoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategoryID, opts...).ToFunc()
}

// ByAgeEligibilitiesCount orders the results by age_eligibilities count.
func ByAgeEligibilitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAgeEligibilitiesStep(), opts...)
	}
}

// ByAgeEligibilities orders the results by age_eligibilities terms.
func ByAgeEligibilities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAgeEligibilitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAgeEligibilitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AgeEligibilitiesInverseTable, AgeEligibilityFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AgeEligibilitiesTable, AgeEligibilitiesColumn),
	)
}
