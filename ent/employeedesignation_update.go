// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/employeedesignation"
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmployeeDesignationUpdate is the builder for updating EmployeeDesignation entities.
type EmployeeDesignationUpdate struct {
	config
	hooks    []Hook
	mutation *EmployeeDesignationMutation
}

// Where appends a list predicates to the EmployeeDesignationUpdate builder.
func (edu *EmployeeDesignationUpdate) Where(ps ...predicate.EmployeeDesignation) *EmployeeDesignationUpdate {
	edu.mutation.Where(ps...)
	return edu
}

// SetDesignationCode sets the "DesignationCode" field.
func (edu *EmployeeDesignationUpdate) SetDesignationCode(s string) *EmployeeDesignationUpdate {
	edu.mutation.SetDesignationCode(s)
	return edu
}

// SetDesignationDescription sets the "DesignationDescription" field.
func (edu *EmployeeDesignationUpdate) SetDesignationDescription(s string) *EmployeeDesignationUpdate {
	edu.mutation.SetDesignationDescription(s)
	return edu
}

// Mutation returns the EmployeeDesignationMutation object of the builder.
func (edu *EmployeeDesignationUpdate) Mutation() *EmployeeDesignationMutation {
	return edu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (edu *EmployeeDesignationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, edu.sqlSave, edu.mutation, edu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (edu *EmployeeDesignationUpdate) SaveX(ctx context.Context) int {
	affected, err := edu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (edu *EmployeeDesignationUpdate) Exec(ctx context.Context) error {
	_, err := edu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (edu *EmployeeDesignationUpdate) ExecX(ctx context.Context) {
	if err := edu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (edu *EmployeeDesignationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(employeedesignation.Table, employeedesignation.Columns, sqlgraph.NewFieldSpec(employeedesignation.FieldID, field.TypeInt32))
	if ps := edu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := edu.mutation.DesignationCode(); ok {
		_spec.SetField(employeedesignation.FieldDesignationCode, field.TypeString, value)
	}
	if value, ok := edu.mutation.DesignationDescription(); ok {
		_spec.SetField(employeedesignation.FieldDesignationDescription, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, edu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employeedesignation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	edu.mutation.done = true
	return n, nil
}

// EmployeeDesignationUpdateOne is the builder for updating a single EmployeeDesignation entity.
type EmployeeDesignationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmployeeDesignationMutation
}

// SetDesignationCode sets the "DesignationCode" field.
func (eduo *EmployeeDesignationUpdateOne) SetDesignationCode(s string) *EmployeeDesignationUpdateOne {
	eduo.mutation.SetDesignationCode(s)
	return eduo
}

// SetDesignationDescription sets the "DesignationDescription" field.
func (eduo *EmployeeDesignationUpdateOne) SetDesignationDescription(s string) *EmployeeDesignationUpdateOne {
	eduo.mutation.SetDesignationDescription(s)
	return eduo
}

// Mutation returns the EmployeeDesignationMutation object of the builder.
func (eduo *EmployeeDesignationUpdateOne) Mutation() *EmployeeDesignationMutation {
	return eduo.mutation
}

// Where appends a list predicates to the EmployeeDesignationUpdate builder.
func (eduo *EmployeeDesignationUpdateOne) Where(ps ...predicate.EmployeeDesignation) *EmployeeDesignationUpdateOne {
	eduo.mutation.Where(ps...)
	return eduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eduo *EmployeeDesignationUpdateOne) Select(field string, fields ...string) *EmployeeDesignationUpdateOne {
	eduo.fields = append([]string{field}, fields...)
	return eduo
}

// Save executes the query and returns the updated EmployeeDesignation entity.
func (eduo *EmployeeDesignationUpdateOne) Save(ctx context.Context) (*EmployeeDesignation, error) {
	return withHooks(ctx, eduo.sqlSave, eduo.mutation, eduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eduo *EmployeeDesignationUpdateOne) SaveX(ctx context.Context) *EmployeeDesignation {
	node, err := eduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eduo *EmployeeDesignationUpdateOne) Exec(ctx context.Context) error {
	_, err := eduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eduo *EmployeeDesignationUpdateOne) ExecX(ctx context.Context) {
	if err := eduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eduo *EmployeeDesignationUpdateOne) sqlSave(ctx context.Context) (_node *EmployeeDesignation, err error) {
	_spec := sqlgraph.NewUpdateSpec(employeedesignation.Table, employeedesignation.Columns, sqlgraph.NewFieldSpec(employeedesignation.FieldID, field.TypeInt32))
	id, ok := eduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EmployeeDesignation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, employeedesignation.FieldID)
		for _, f := range fields {
			if !employeedesignation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != employeedesignation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eduo.mutation.DesignationCode(); ok {
		_spec.SetField(employeedesignation.FieldDesignationCode, field.TypeString, value)
	}
	if value, ok := eduo.mutation.DesignationDescription(); ok {
		_spec.SetField(employeedesignation.FieldDesignationDescription, field.TypeString, value)
	}
	_node = &EmployeeDesignation{config: eduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employeedesignation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eduo.mutation.done = true
	return _node, nil
}
