// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/eligibilitymaster"
	"recruit/ent/exam"
	"recruit/ent/examcalendar"
	"recruit/ent/exampapers"
	"recruit/ent/examtype"
	"recruit/ent/nodalofficer"
	"recruit/ent/notification"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamCreate is the builder for creating a Exam entity.
type ExamCreate struct {
	config
	mutation *ExamMutation
	hooks    []Hook
}

// SetExamName sets the "ExamName" field.
func (ec *ExamCreate) SetExamName(s string) *ExamCreate {
	ec.mutation.SetExamName(s)
	return ec
}

// SetNumOfPapers sets the "NumOfPapers" field.
func (ec *ExamCreate) SetNumOfPapers(i int32) *ExamCreate {
	ec.mutation.SetNumOfPapers(i)
	return ec
}

// SetNotificationBy sets the "NotificationBy" field.
func (ec *ExamCreate) SetNotificationBy(s string) *ExamCreate {
	ec.mutation.SetNotificationBy(s)
	return ec
}

// SetConductedBy sets the "ConductedBy" field.
func (ec *ExamCreate) SetConductedBy(s string) *ExamCreate {
	ec.mutation.SetConductedBy(s)
	return ec
}

// SetNodalOfficerLevel sets the "NodalOfficerLevel" field.
func (ec *ExamCreate) SetNodalOfficerLevel(s string) *ExamCreate {
	ec.mutation.SetNodalOfficerLevel(s)
	return ec
}

// SetNillableNodalOfficerLevel sets the "NodalOfficerLevel" field if the given value is not nil.
func (ec *ExamCreate) SetNillableNodalOfficerLevel(s *string) *ExamCreate {
	if s != nil {
		ec.SetNodalOfficerLevel(*s)
	}
	return ec
}

// SetCalendarCode sets the "CalendarCode" field.
func (ec *ExamCreate) SetCalendarCode(i int32) *ExamCreate {
	ec.mutation.SetCalendarCode(i)
	return ec
}

// SetNillableCalendarCode sets the "CalendarCode" field if the given value is not nil.
func (ec *ExamCreate) SetNillableCalendarCode(i *int32) *ExamCreate {
	if i != nil {
		ec.SetCalendarCode(*i)
	}
	return ec
}

// SetPaperCode sets the "PaperCode" field.
func (ec *ExamCreate) SetPaperCode(i int32) *ExamCreate {
	ec.mutation.SetPaperCode(i)
	return ec
}

// SetNillablePaperCode sets the "PaperCode" field if the given value is not nil.
func (ec *ExamCreate) SetNillablePaperCode(i *int32) *ExamCreate {
	if i != nil {
		ec.SetPaperCode(*i)
	}
	return ec
}

// SetExamType sets the "ExamType" field.
func (ec *ExamCreate) SetExamType(s string) *ExamCreate {
	ec.mutation.SetExamType(s)
	return ec
}

// SetTentativeNotificationMandatoryDate sets the "TentativeNotificationMandatoryDate" field.
func (ec *ExamCreate) SetTentativeNotificationMandatoryDate(b bool) *ExamCreate {
	ec.mutation.SetTentativeNotificationMandatoryDate(b)
	return ec
}

// SetNillableTentativeNotificationMandatoryDate sets the "TentativeNotificationMandatoryDate" field if the given value is not nil.
func (ec *ExamCreate) SetNillableTentativeNotificationMandatoryDate(b *bool) *ExamCreate {
	if b != nil {
		ec.SetTentativeNotificationMandatoryDate(*b)
	}
	return ec
}

// SetLocalLanguage sets the "LocalLanguage" field.
func (ec *ExamCreate) SetLocalLanguage(b bool) *ExamCreate {
	ec.mutation.SetLocalLanguage(b)
	return ec
}

// SetNillableLocalLanguage sets the "LocalLanguage" field if the given value is not nil.
func (ec *ExamCreate) SetNillableLocalLanguage(b *bool) *ExamCreate {
	if b != nil {
		ec.SetLocalLanguage(*b)
	}
	return ec
}

// SetOptionForPost sets the "OptionForPost" field.
func (ec *ExamCreate) SetOptionForPost(b bool) *ExamCreate {
	ec.mutation.SetOptionForPost(b)
	return ec
}

// SetNillableOptionForPost sets the "OptionForPost" field if the given value is not nil.
func (ec *ExamCreate) SetNillableOptionForPost(b *bool) *ExamCreate {
	if b != nil {
		ec.SetOptionForPost(*b)
	}
	return ec
}

// SetOptionToWriteExamOtherThanParent sets the "OptionToWriteExamOtherThanParent" field.
func (ec *ExamCreate) SetOptionToWriteExamOtherThanParent(b bool) *ExamCreate {
	ec.mutation.SetOptionToWriteExamOtherThanParent(b)
	return ec
}

// SetNillableOptionToWriteExamOtherThanParent sets the "OptionToWriteExamOtherThanParent" field if the given value is not nil.
func (ec *ExamCreate) SetNillableOptionToWriteExamOtherThanParent(b *bool) *ExamCreate {
	if b != nil {
		ec.SetOptionToWriteExamOtherThanParent(*b)
	}
	return ec
}

// SetOrderNumber sets the "OrderNumber" field.
func (ec *ExamCreate) SetOrderNumber(s string) *ExamCreate {
	ec.mutation.SetOrderNumber(s)
	return ec
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (ec *ExamCreate) SetNillableOrderNumber(s *string) *ExamCreate {
	if s != nil {
		ec.SetOrderNumber(*s)
	}
	return ec
}

// SetStatus sets the "Status" field.
func (ec *ExamCreate) SetStatus(s string) *ExamCreate {
	ec.mutation.SetStatus(s)
	return ec
}

// SetExamTypeCode sets the "ExamTypeCode" field.
func (ec *ExamCreate) SetExamTypeCode(i int32) *ExamCreate {
	ec.mutation.SetExamTypeCode(i)
	return ec
}

// SetNillableExamTypeCode sets the "ExamTypeCode" field if the given value is not nil.
func (ec *ExamCreate) SetNillableExamTypeCode(i *int32) *ExamCreate {
	if i != nil {
		ec.SetExamTypeCode(*i)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *ExamCreate) SetID(i int32) *ExamCreate {
	ec.mutation.SetID(i)
	return ec
}

// AddNodalOfficerIDs adds the "nodal_officers" edge to the NodalOfficer entity by IDs.
func (ec *ExamCreate) AddNodalOfficerIDs(ids ...int32) *ExamCreate {
	ec.mutation.AddNodalOfficerIDs(ids...)
	return ec
}

// AddNodalOfficers adds the "nodal_officers" edges to the NodalOfficer entity.
func (ec *ExamCreate) AddNodalOfficers(n ...*NodalOfficer) *ExamCreate {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ec.AddNodalOfficerIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (ec *ExamCreate) AddNotificationIDs(ids ...int32) *ExamCreate {
	ec.mutation.AddNotificationIDs(ids...)
	return ec
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (ec *ExamCreate) AddNotifications(n ...*Notification) *ExamCreate {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ec.AddNotificationIDs(ids...)
}

// AddExamsRefIDs adds the "exams_ref" edge to the ExamCalendar entity by IDs.
func (ec *ExamCreate) AddExamsRefIDs(ids ...int32) *ExamCreate {
	ec.mutation.AddExamsRefIDs(ids...)
	return ec
}

// AddExamsRef adds the "exams_ref" edges to the ExamCalendar entity.
func (ec *ExamCreate) AddExamsRef(e ...*ExamCalendar) *ExamCreate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ec.AddExamsRefIDs(ids...)
}

// AddPaperIDs adds the "papers" edge to the ExamPapers entity by IDs.
func (ec *ExamCreate) AddPaperIDs(ids ...int32) *ExamCreate {
	ec.mutation.AddPaperIDs(ids...)
	return ec
}

// AddPapers adds the "papers" edges to the ExamPapers entity.
func (ec *ExamCreate) AddPapers(e ...*ExamPapers) *ExamCreate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ec.AddPaperIDs(ids...)
}

// AddExamEligibilityIDs adds the "ExamEligibility" edge to the EligibilityMaster entity by IDs.
func (ec *ExamCreate) AddExamEligibilityIDs(ids ...int32) *ExamCreate {
	ec.mutation.AddExamEligibilityIDs(ids...)
	return ec
}

// AddExamEligibility adds the "ExamEligibility" edges to the EligibilityMaster entity.
func (ec *ExamCreate) AddExamEligibility(e ...*EligibilityMaster) *ExamCreate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ec.AddExamEligibilityIDs(ids...)
}

// AddExamsTypeIDs adds the "exams_type" edge to the ExamType entity by IDs.
func (ec *ExamCreate) AddExamsTypeIDs(ids ...int32) *ExamCreate {
	ec.mutation.AddExamsTypeIDs(ids...)
	return ec
}

// AddExamsType adds the "exams_type" edges to the ExamType entity.
func (ec *ExamCreate) AddExamsType(e ...*ExamType) *ExamCreate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ec.AddExamsTypeIDs(ids...)
}

// Mutation returns the ExamMutation object of the builder.
func (ec *ExamCreate) Mutation() *ExamMutation {
	return ec.mutation
}

// Save creates the Exam in the database.
func (ec *ExamCreate) Save(ctx context.Context) (*Exam, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *ExamCreate) SaveX(ctx context.Context) *Exam {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *ExamCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *ExamCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *ExamCreate) defaults() {
	if _, ok := ec.mutation.TentativeNotificationMandatoryDate(); !ok {
		v := exam.DefaultTentativeNotificationMandatoryDate
		ec.mutation.SetTentativeNotificationMandatoryDate(v)
	}
	if _, ok := ec.mutation.LocalLanguage(); !ok {
		v := exam.DefaultLocalLanguage
		ec.mutation.SetLocalLanguage(v)
	}
	if _, ok := ec.mutation.OptionForPost(); !ok {
		v := exam.DefaultOptionForPost
		ec.mutation.SetOptionForPost(v)
	}
	if _, ok := ec.mutation.OptionToWriteExamOtherThanParent(); !ok {
		v := exam.DefaultOptionToWriteExamOtherThanParent
		ec.mutation.SetOptionToWriteExamOtherThanParent(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *ExamCreate) check() error {
	if _, ok := ec.mutation.ExamName(); !ok {
		return &ValidationError{Name: "ExamName", err: errors.New(`ent: missing required field "Exam.ExamName"`)}
	}
	if _, ok := ec.mutation.NumOfPapers(); !ok {
		return &ValidationError{Name: "NumOfPapers", err: errors.New(`ent: missing required field "Exam.NumOfPapers"`)}
	}
	if _, ok := ec.mutation.NotificationBy(); !ok {
		return &ValidationError{Name: "NotificationBy", err: errors.New(`ent: missing required field "Exam.NotificationBy"`)}
	}
	if _, ok := ec.mutation.ConductedBy(); !ok {
		return &ValidationError{Name: "ConductedBy", err: errors.New(`ent: missing required field "Exam.ConductedBy"`)}
	}
	if _, ok := ec.mutation.ExamType(); !ok {
		return &ValidationError{Name: "ExamType", err: errors.New(`ent: missing required field "Exam.ExamType"`)}
	}
	if _, ok := ec.mutation.TentativeNotificationMandatoryDate(); !ok {
		return &ValidationError{Name: "TentativeNotificationMandatoryDate", err: errors.New(`ent: missing required field "Exam.TentativeNotificationMandatoryDate"`)}
	}
	if _, ok := ec.mutation.LocalLanguage(); !ok {
		return &ValidationError{Name: "LocalLanguage", err: errors.New(`ent: missing required field "Exam.LocalLanguage"`)}
	}
	if _, ok := ec.mutation.OptionForPost(); !ok {
		return &ValidationError{Name: "OptionForPost", err: errors.New(`ent: missing required field "Exam.OptionForPost"`)}
	}
	if _, ok := ec.mutation.OptionToWriteExamOtherThanParent(); !ok {
		return &ValidationError{Name: "OptionToWriteExamOtherThanParent", err: errors.New(`ent: missing required field "Exam.OptionToWriteExamOtherThanParent"`)}
	}
	if _, ok := ec.mutation.Status(); !ok {
		return &ValidationError{Name: "Status", err: errors.New(`ent: missing required field "Exam.Status"`)}
	}
	return nil
}

func (ec *ExamCreate) sqlSave(ctx context.Context) (*Exam, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *ExamCreate) createSpec() (*Exam, *sqlgraph.CreateSpec) {
	var (
		_node = &Exam{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(exam.Table, sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ec.mutation.ExamName(); ok {
		_spec.SetField(exam.FieldExamName, field.TypeString, value)
		_node.ExamName = value
	}
	if value, ok := ec.mutation.NumOfPapers(); ok {
		_spec.SetField(exam.FieldNumOfPapers, field.TypeInt32, value)
		_node.NumOfPapers = value
	}
	if value, ok := ec.mutation.NotificationBy(); ok {
		_spec.SetField(exam.FieldNotificationBy, field.TypeString, value)
		_node.NotificationBy = value
	}
	if value, ok := ec.mutation.ConductedBy(); ok {
		_spec.SetField(exam.FieldConductedBy, field.TypeString, value)
		_node.ConductedBy = value
	}
	if value, ok := ec.mutation.NodalOfficerLevel(); ok {
		_spec.SetField(exam.FieldNodalOfficerLevel, field.TypeString, value)
		_node.NodalOfficerLevel = value
	}
	if value, ok := ec.mutation.CalendarCode(); ok {
		_spec.SetField(exam.FieldCalendarCode, field.TypeInt32, value)
		_node.CalendarCode = value
	}
	if value, ok := ec.mutation.PaperCode(); ok {
		_spec.SetField(exam.FieldPaperCode, field.TypeInt32, value)
		_node.PaperCode = value
	}
	if value, ok := ec.mutation.ExamType(); ok {
		_spec.SetField(exam.FieldExamType, field.TypeString, value)
		_node.ExamType = value
	}
	if value, ok := ec.mutation.TentativeNotificationMandatoryDate(); ok {
		_spec.SetField(exam.FieldTentativeNotificationMandatoryDate, field.TypeBool, value)
		_node.TentativeNotificationMandatoryDate = value
	}
	if value, ok := ec.mutation.LocalLanguage(); ok {
		_spec.SetField(exam.FieldLocalLanguage, field.TypeBool, value)
		_node.LocalLanguage = value
	}
	if value, ok := ec.mutation.OptionForPost(); ok {
		_spec.SetField(exam.FieldOptionForPost, field.TypeBool, value)
		_node.OptionForPost = value
	}
	if value, ok := ec.mutation.OptionToWriteExamOtherThanParent(); ok {
		_spec.SetField(exam.FieldOptionToWriteExamOtherThanParent, field.TypeBool, value)
		_node.OptionToWriteExamOtherThanParent = value
	}
	if value, ok := ec.mutation.OrderNumber(); ok {
		_spec.SetField(exam.FieldOrderNumber, field.TypeString, value)
		_node.OrderNumber = value
	}
	if value, ok := ec.mutation.Status(); ok {
		_spec.SetField(exam.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ec.mutation.ExamTypeCode(); ok {
		_spec.SetField(exam.FieldExamTypeCode, field.TypeInt32, value)
		_node.ExamTypeCode = value
	}
	if nodes := ec.mutation.NodalOfficersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.NodalOfficersTable,
			Columns: []string{exam.NodalOfficersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodalofficer.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.NotificationsTable,
			Columns: []string{exam.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.ExamsRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamsRefTable,
			Columns: []string{exam.ExamsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.PapersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.PapersTable,
			Columns: []string{exam.PapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.ExamEligibilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamEligibilityTable,
			Columns: []string{exam.ExamEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.ExamsTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamsTypeTable,
			Columns: []string{exam.ExamsTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examtype.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExamCreateBulk is the builder for creating many Exam entities in bulk.
type ExamCreateBulk struct {
	config
	builders []*ExamCreate
}

// Save creates the Exam entities in the database.
func (ecb *ExamCreateBulk) Save(ctx context.Context) ([]*Exam, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Exam, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExamMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *ExamCreateBulk) SaveX(ctx context.Context) []*Exam {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *ExamCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *ExamCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
