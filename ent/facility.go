// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/facility"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Facility is the model entity for the Facility schema.
type Facility struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// FacilityCode holds the value of the "FacilityCode" field.
	FacilityCode string `json:"FacilityCode,omitempty"`
	// OfficeType holds the value of the "OfficeType" field.
	OfficeType string `json:"OfficeType,omitempty"`
	// FacilityName holds the value of the "FacilityName" field.
	FacilityName string `json:"FacilityName,omitempty"`
	// ReportingOfficeType holds the value of the "ReportingOfficeType" field.
	ReportingOfficeType string `json:"ReportingOfficeType,omitempty"`
	// ReportingOfficeCode holds the value of the "ReportingOfficeCode" field.
	ReportingOfficeCode string `json:"ReportingOfficeCode,omitempty"`
	// EmailID holds the value of the "EmailID" field.
	EmailID string `json:"EmailID,omitempty"`
	// MobileNumber holds the value of the "MobileNumber" field.
	MobileNumber int32 `json:"MobileNumber,omitempty"`
	// DivisionCode holds the value of the "DivisionCode" field.
	DivisionCode int32 `json:"DivisionCode,omitempty"`
	// RegionCode holds the value of the "RegionCode" field.
	RegionCode int32 `json:"RegionCode,omitempty"`
	// CircleCode holds the value of the "CircleCode" field.
	CircleCode int32 `json:"CircleCode,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FacilityQuery when eager-loading is set.
	Edges                        FacilityEdges `json:"edges"`
	circle_master_circle_ref     *int32
	region_master_region_ref_ref *int32
	selectValues                 sql.SelectValues
}

// FacilityEdges holds the relations/edges for other nodes in the graph.
type FacilityEdges struct {
	// RegionRef holds the value of the region_ref edge.
	RegionRef []*RegionMaster `json:"region_ref,omitempty"`
	// CircleRef holds the value of the circle_ref edge.
	CircleRef []*CircleMaster `json:"circle_ref,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RegionRefOrErr returns the RegionRef value or an error if the edge
// was not loaded in eager-loading.
func (e FacilityEdges) RegionRefOrErr() ([]*RegionMaster, error) {
	if e.loadedTypes[0] {
		return e.RegionRef, nil
	}
	return nil, &NotLoadedError{edge: "region_ref"}
}

// CircleRefOrErr returns the CircleRef value or an error if the edge
// was not loaded in eager-loading.
func (e FacilityEdges) CircleRefOrErr() ([]*CircleMaster, error) {
	if e.loadedTypes[1] {
		return e.CircleRef, nil
	}
	return nil, &NotLoadedError{edge: "circle_ref"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Facility) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case facility.FieldID, facility.FieldMobileNumber, facility.FieldDivisionCode, facility.FieldRegionCode, facility.FieldCircleCode:
			values[i] = new(sql.NullInt64)
		case facility.FieldFacilityCode, facility.FieldOfficeType, facility.FieldFacilityName, facility.FieldReportingOfficeType, facility.FieldReportingOfficeCode, facility.FieldEmailID:
			values[i] = new(sql.NullString)
		case facility.ForeignKeys[0]: // circle_master_circle_ref
			values[i] = new(sql.NullInt64)
		case facility.ForeignKeys[1]: // region_master_region_ref_ref
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Facility fields.
func (f *Facility) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case facility.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int32(value.Int64)
		case facility.FieldFacilityCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FacilityCode", values[i])
			} else if value.Valid {
				f.FacilityCode = value.String
			}
		case facility.FieldOfficeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OfficeType", values[i])
			} else if value.Valid {
				f.OfficeType = value.String
			}
		case facility.FieldFacilityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FacilityName", values[i])
			} else if value.Valid {
				f.FacilityName = value.String
			}
		case facility.FieldReportingOfficeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ReportingOfficeType", values[i])
			} else if value.Valid {
				f.ReportingOfficeType = value.String
			}
		case facility.FieldReportingOfficeCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ReportingOfficeCode", values[i])
			} else if value.Valid {
				f.ReportingOfficeCode = value.String
			}
		case facility.FieldEmailID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmailID", values[i])
			} else if value.Valid {
				f.EmailID = value.String
			}
		case facility.FieldMobileNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field MobileNumber", values[i])
			} else if value.Valid {
				f.MobileNumber = int32(value.Int64)
			}
		case facility.FieldDivisionCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DivisionCode", values[i])
			} else if value.Valid {
				f.DivisionCode = int32(value.Int64)
			}
		case facility.FieldRegionCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field RegionCode", values[i])
			} else if value.Valid {
				f.RegionCode = int32(value.Int64)
			}
		case facility.FieldCircleCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CircleCode", values[i])
			} else if value.Valid {
				f.CircleCode = int32(value.Int64)
			}
		case facility.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field circle_master_circle_ref", value)
			} else if value.Valid {
				f.circle_master_circle_ref = new(int32)
				*f.circle_master_circle_ref = int32(value.Int64)
			}
		case facility.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field region_master_region_ref_ref", value)
			} else if value.Valid {
				f.region_master_region_ref_ref = new(int32)
				*f.region_master_region_ref_ref = int32(value.Int64)
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Facility.
// This includes values selected through modifiers, order, etc.
func (f *Facility) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryRegionRef queries the "region_ref" edge of the Facility entity.
func (f *Facility) QueryRegionRef() *RegionMasterQuery {
	return NewFacilityClient(f.config).QueryRegionRef(f)
}

// QueryCircleRef queries the "circle_ref" edge of the Facility entity.
func (f *Facility) QueryCircleRef() *CircleMasterQuery {
	return NewFacilityClient(f.config).QueryCircleRef(f)
}

// Update returns a builder for updating this Facility.
// Note that you need to call Facility.Unwrap() before calling this method if this Facility
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Facility) Update() *FacilityUpdateOne {
	return NewFacilityClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Facility entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Facility) Unwrap() *Facility {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Facility is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Facility) String() string {
	var builder strings.Builder
	builder.WriteString("Facility(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("FacilityCode=")
	builder.WriteString(f.FacilityCode)
	builder.WriteString(", ")
	builder.WriteString("OfficeType=")
	builder.WriteString(f.OfficeType)
	builder.WriteString(", ")
	builder.WriteString("FacilityName=")
	builder.WriteString(f.FacilityName)
	builder.WriteString(", ")
	builder.WriteString("ReportingOfficeType=")
	builder.WriteString(f.ReportingOfficeType)
	builder.WriteString(", ")
	builder.WriteString("ReportingOfficeCode=")
	builder.WriteString(f.ReportingOfficeCode)
	builder.WriteString(", ")
	builder.WriteString("EmailID=")
	builder.WriteString(f.EmailID)
	builder.WriteString(", ")
	builder.WriteString("MobileNumber=")
	builder.WriteString(fmt.Sprintf("%v", f.MobileNumber))
	builder.WriteString(", ")
	builder.WriteString("DivisionCode=")
	builder.WriteString(fmt.Sprintf("%v", f.DivisionCode))
	builder.WriteString(", ")
	builder.WriteString("RegionCode=")
	builder.WriteString(fmt.Sprintf("%v", f.RegionCode))
	builder.WriteString(", ")
	builder.WriteString("CircleCode=")
	builder.WriteString(fmt.Sprintf("%v", f.CircleCode))
	builder.WriteByte(')')
	return builder.String()
}

// Facilities is a parsable slice of Facility.
type Facilities []*Facility
