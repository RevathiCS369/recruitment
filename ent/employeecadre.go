// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/employeecadre"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EmployeeCadre is the model entity for the EmployeeCadre schema.
type EmployeeCadre struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// Cadrecode holds the value of the "cadrecode" field.
	Cadrecode string `json:"cadrecode,omitempty"`
	// Cadredescription holds the value of the "cadredescription" field.
	Cadredescription string `json:"cadredescription,omitempty"`
	// PayLevel holds the value of the "PayLevel" field.
	PayLevel string `json:"PayLevel,omitempty"`
	// Scale holds the value of the "Scale" field.
	Scale        string `json:"Scale,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmployeeCadre) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case employeecadre.FieldID:
			values[i] = new(sql.NullInt64)
		case employeecadre.FieldCadrecode, employeecadre.FieldCadredescription, employeecadre.FieldPayLevel, employeecadre.FieldScale:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmployeeCadre fields.
func (ec *EmployeeCadre) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case employeecadre.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ec.ID = int32(value.Int64)
		case employeecadre.FieldCadrecode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cadrecode", values[i])
			} else if value.Valid {
				ec.Cadrecode = value.String
			}
		case employeecadre.FieldCadredescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cadredescription", values[i])
			} else if value.Valid {
				ec.Cadredescription = value.String
			}
		case employeecadre.FieldPayLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PayLevel", values[i])
			} else if value.Valid {
				ec.PayLevel = value.String
			}
		case employeecadre.FieldScale:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Scale", values[i])
			} else if value.Valid {
				ec.Scale = value.String
			}
		default:
			ec.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EmployeeCadre.
// This includes values selected through modifiers, order, etc.
func (ec *EmployeeCadre) Value(name string) (ent.Value, error) {
	return ec.selectValues.Get(name)
}

// Update returns a builder for updating this EmployeeCadre.
// Note that you need to call EmployeeCadre.Unwrap() before calling this method if this EmployeeCadre
// was returned from a transaction, and the transaction was committed or rolled back.
func (ec *EmployeeCadre) Update() *EmployeeCadreUpdateOne {
	return NewEmployeeCadreClient(ec.config).UpdateOne(ec)
}

// Unwrap unwraps the EmployeeCadre entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ec *EmployeeCadre) Unwrap() *EmployeeCadre {
	_tx, ok := ec.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmployeeCadre is not a transactional entity")
	}
	ec.config.driver = _tx.drv
	return ec
}

// String implements the fmt.Stringer.
func (ec *EmployeeCadre) String() string {
	var builder strings.Builder
	builder.WriteString("EmployeeCadre(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ec.ID))
	builder.WriteString("cadrecode=")
	builder.WriteString(ec.Cadrecode)
	builder.WriteString(", ")
	builder.WriteString("cadredescription=")
	builder.WriteString(ec.Cadredescription)
	builder.WriteString(", ")
	builder.WriteString("PayLevel=")
	builder.WriteString(ec.PayLevel)
	builder.WriteString(", ")
	builder.WriteString("Scale=")
	builder.WriteString(ec.Scale)
	builder.WriteByte(')')
	return builder.String()
}

// EmployeeCadres is a parsable slice of EmployeeCadre.
type EmployeeCadres []*EmployeeCadre
