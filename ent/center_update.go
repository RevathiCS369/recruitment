// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/application"
	"recruit/ent/center"
	"recruit/ent/nodalofficer"
	"recruit/ent/notification"
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CenterUpdate is the builder for updating Center entities.
type CenterUpdate struct {
	config
	hooks    []Hook
	mutation *CenterMutation
}

// Where appends a list predicates to the CenterUpdate builder.
func (cu *CenterUpdate) Where(ps ...predicate.Center) *CenterUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetNotifyCode sets the "NotifyCode" field.
func (cu *CenterUpdate) SetNotifyCode(i int32) *CenterUpdate {
	cu.mutation.SetNotifyCode(i)
	return cu
}

// SetNillableNotifyCode sets the "NotifyCode" field if the given value is not nil.
func (cu *CenterUpdate) SetNillableNotifyCode(i *int32) *CenterUpdate {
	if i != nil {
		cu.SetNotifyCode(*i)
	}
	return cu
}

// ClearNotifyCode clears the value of the "NotifyCode" field.
func (cu *CenterUpdate) ClearNotifyCode() *CenterUpdate {
	cu.mutation.ClearNotifyCode()
	return cu
}

// SetNodalOfficerCode sets the "NodalOfficerCode" field.
func (cu *CenterUpdate) SetNodalOfficerCode(i int32) *CenterUpdate {
	cu.mutation.SetNodalOfficerCode(i)
	return cu
}

// SetNillableNodalOfficerCode sets the "NodalOfficerCode" field if the given value is not nil.
func (cu *CenterUpdate) SetNillableNodalOfficerCode(i *int32) *CenterUpdate {
	if i != nil {
		cu.SetNodalOfficerCode(*i)
	}
	return cu
}

// ClearNodalOfficerCode clears the value of the "NodalOfficerCode" field.
func (cu *CenterUpdate) ClearNodalOfficerCode() *CenterUpdate {
	cu.mutation.ClearNodalOfficerCode()
	return cu
}

// SetCenterName sets the "CenterName" field.
func (cu *CenterUpdate) SetCenterName(s string) *CenterUpdate {
	cu.mutation.SetCenterName(s)
	return cu
}

// AddApplicationIDs adds the "applications" edge to the Application entity by IDs.
func (cu *CenterUpdate) AddApplicationIDs(ids ...int32) *CenterUpdate {
	cu.mutation.AddApplicationIDs(ids...)
	return cu
}

// AddApplications adds the "applications" edges to the Application entity.
func (cu *CenterUpdate) AddApplications(a ...*Application) *CenterUpdate {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddApplicationIDs(ids...)
}

// SetNodalOfficerID sets the "nodal_officer" edge to the NodalOfficer entity by ID.
func (cu *CenterUpdate) SetNodalOfficerID(id int32) *CenterUpdate {
	cu.mutation.SetNodalOfficerID(id)
	return cu
}

// SetNillableNodalOfficerID sets the "nodal_officer" edge to the NodalOfficer entity by ID if the given value is not nil.
func (cu *CenterUpdate) SetNillableNodalOfficerID(id *int32) *CenterUpdate {
	if id != nil {
		cu = cu.SetNodalOfficerID(*id)
	}
	return cu
}

// SetNodalOfficer sets the "nodal_officer" edge to the NodalOfficer entity.
func (cu *CenterUpdate) SetNodalOfficer(n *NodalOfficer) *CenterUpdate {
	return cu.SetNodalOfficerID(n.ID)
}

// SetNotificationID sets the "notification" edge to the Notification entity by ID.
func (cu *CenterUpdate) SetNotificationID(id int32) *CenterUpdate {
	cu.mutation.SetNotificationID(id)
	return cu
}

// SetNillableNotificationID sets the "notification" edge to the Notification entity by ID if the given value is not nil.
func (cu *CenterUpdate) SetNillableNotificationID(id *int32) *CenterUpdate {
	if id != nil {
		cu = cu.SetNotificationID(*id)
	}
	return cu
}

// SetNotification sets the "notification" edge to the Notification entity.
func (cu *CenterUpdate) SetNotification(n *Notification) *CenterUpdate {
	return cu.SetNotificationID(n.ID)
}

// Mutation returns the CenterMutation object of the builder.
func (cu *CenterUpdate) Mutation() *CenterMutation {
	return cu.mutation
}

// ClearApplications clears all "applications" edges to the Application entity.
func (cu *CenterUpdate) ClearApplications() *CenterUpdate {
	cu.mutation.ClearApplications()
	return cu
}

// RemoveApplicationIDs removes the "applications" edge to Application entities by IDs.
func (cu *CenterUpdate) RemoveApplicationIDs(ids ...int32) *CenterUpdate {
	cu.mutation.RemoveApplicationIDs(ids...)
	return cu
}

// RemoveApplications removes "applications" edges to Application entities.
func (cu *CenterUpdate) RemoveApplications(a ...*Application) *CenterUpdate {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveApplicationIDs(ids...)
}

// ClearNodalOfficer clears the "nodal_officer" edge to the NodalOfficer entity.
func (cu *CenterUpdate) ClearNodalOfficer() *CenterUpdate {
	cu.mutation.ClearNodalOfficer()
	return cu
}

// ClearNotification clears the "notification" edge to the Notification entity.
func (cu *CenterUpdate) ClearNotification() *CenterUpdate {
	cu.mutation.ClearNotification()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CenterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CenterUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CenterUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CenterUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CenterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(center.Table, center.Columns, sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CenterName(); ok {
		_spec.SetField(center.FieldCenterName, field.TypeString, value)
	}
	if cu.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ApplicationsTable,
			Columns: []string{center.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedApplicationsIDs(); len(nodes) > 0 && !cu.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ApplicationsTable,
			Columns: []string{center.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ApplicationsTable,
			Columns: []string{center.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.NodalOfficerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   center.NodalOfficerTable,
			Columns: []string{center.NodalOfficerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodalofficer.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.NodalOfficerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   center.NodalOfficerTable,
			Columns: []string{center.NodalOfficerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodalofficer.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.NotificationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   center.NotificationTable,
			Columns: []string{center.NotificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.NotificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   center.NotificationTable,
			Columns: []string{center.NotificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{center.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CenterUpdateOne is the builder for updating a single Center entity.
type CenterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CenterMutation
}

// SetNotifyCode sets the "NotifyCode" field.
func (cuo *CenterUpdateOne) SetNotifyCode(i int32) *CenterUpdateOne {
	cuo.mutation.SetNotifyCode(i)
	return cuo
}

// SetNillableNotifyCode sets the "NotifyCode" field if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillableNotifyCode(i *int32) *CenterUpdateOne {
	if i != nil {
		cuo.SetNotifyCode(*i)
	}
	return cuo
}

// ClearNotifyCode clears the value of the "NotifyCode" field.
func (cuo *CenterUpdateOne) ClearNotifyCode() *CenterUpdateOne {
	cuo.mutation.ClearNotifyCode()
	return cuo
}

// SetNodalOfficerCode sets the "NodalOfficerCode" field.
func (cuo *CenterUpdateOne) SetNodalOfficerCode(i int32) *CenterUpdateOne {
	cuo.mutation.SetNodalOfficerCode(i)
	return cuo
}

// SetNillableNodalOfficerCode sets the "NodalOfficerCode" field if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillableNodalOfficerCode(i *int32) *CenterUpdateOne {
	if i != nil {
		cuo.SetNodalOfficerCode(*i)
	}
	return cuo
}

// ClearNodalOfficerCode clears the value of the "NodalOfficerCode" field.
func (cuo *CenterUpdateOne) ClearNodalOfficerCode() *CenterUpdateOne {
	cuo.mutation.ClearNodalOfficerCode()
	return cuo
}

// SetCenterName sets the "CenterName" field.
func (cuo *CenterUpdateOne) SetCenterName(s string) *CenterUpdateOne {
	cuo.mutation.SetCenterName(s)
	return cuo
}

// AddApplicationIDs adds the "applications" edge to the Application entity by IDs.
func (cuo *CenterUpdateOne) AddApplicationIDs(ids ...int32) *CenterUpdateOne {
	cuo.mutation.AddApplicationIDs(ids...)
	return cuo
}

// AddApplications adds the "applications" edges to the Application entity.
func (cuo *CenterUpdateOne) AddApplications(a ...*Application) *CenterUpdateOne {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddApplicationIDs(ids...)
}

// SetNodalOfficerID sets the "nodal_officer" edge to the NodalOfficer entity by ID.
func (cuo *CenterUpdateOne) SetNodalOfficerID(id int32) *CenterUpdateOne {
	cuo.mutation.SetNodalOfficerID(id)
	return cuo
}

// SetNillableNodalOfficerID sets the "nodal_officer" edge to the NodalOfficer entity by ID if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillableNodalOfficerID(id *int32) *CenterUpdateOne {
	if id != nil {
		cuo = cuo.SetNodalOfficerID(*id)
	}
	return cuo
}

// SetNodalOfficer sets the "nodal_officer" edge to the NodalOfficer entity.
func (cuo *CenterUpdateOne) SetNodalOfficer(n *NodalOfficer) *CenterUpdateOne {
	return cuo.SetNodalOfficerID(n.ID)
}

// SetNotificationID sets the "notification" edge to the Notification entity by ID.
func (cuo *CenterUpdateOne) SetNotificationID(id int32) *CenterUpdateOne {
	cuo.mutation.SetNotificationID(id)
	return cuo
}

// SetNillableNotificationID sets the "notification" edge to the Notification entity by ID if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillableNotificationID(id *int32) *CenterUpdateOne {
	if id != nil {
		cuo = cuo.SetNotificationID(*id)
	}
	return cuo
}

// SetNotification sets the "notification" edge to the Notification entity.
func (cuo *CenterUpdateOne) SetNotification(n *Notification) *CenterUpdateOne {
	return cuo.SetNotificationID(n.ID)
}

// Mutation returns the CenterMutation object of the builder.
func (cuo *CenterUpdateOne) Mutation() *CenterMutation {
	return cuo.mutation
}

// ClearApplications clears all "applications" edges to the Application entity.
func (cuo *CenterUpdateOne) ClearApplications() *CenterUpdateOne {
	cuo.mutation.ClearApplications()
	return cuo
}

// RemoveApplicationIDs removes the "applications" edge to Application entities by IDs.
func (cuo *CenterUpdateOne) RemoveApplicationIDs(ids ...int32) *CenterUpdateOne {
	cuo.mutation.RemoveApplicationIDs(ids...)
	return cuo
}

// RemoveApplications removes "applications" edges to Application entities.
func (cuo *CenterUpdateOne) RemoveApplications(a ...*Application) *CenterUpdateOne {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveApplicationIDs(ids...)
}

// ClearNodalOfficer clears the "nodal_officer" edge to the NodalOfficer entity.
func (cuo *CenterUpdateOne) ClearNodalOfficer() *CenterUpdateOne {
	cuo.mutation.ClearNodalOfficer()
	return cuo
}

// ClearNotification clears the "notification" edge to the Notification entity.
func (cuo *CenterUpdateOne) ClearNotification() *CenterUpdateOne {
	cuo.mutation.ClearNotification()
	return cuo
}

// Where appends a list predicates to the CenterUpdate builder.
func (cuo *CenterUpdateOne) Where(ps ...predicate.Center) *CenterUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CenterUpdateOne) Select(field string, fields ...string) *CenterUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Center entity.
func (cuo *CenterUpdateOne) Save(ctx context.Context) (*Center, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CenterUpdateOne) SaveX(ctx context.Context) *Center {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CenterUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CenterUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CenterUpdateOne) sqlSave(ctx context.Context) (_node *Center, err error) {
	_spec := sqlgraph.NewUpdateSpec(center.Table, center.Columns, sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Center.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, center.FieldID)
		for _, f := range fields {
			if !center.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != center.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CenterName(); ok {
		_spec.SetField(center.FieldCenterName, field.TypeString, value)
	}
	if cuo.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ApplicationsTable,
			Columns: []string{center.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedApplicationsIDs(); len(nodes) > 0 && !cuo.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ApplicationsTable,
			Columns: []string{center.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ApplicationsTable,
			Columns: []string{center.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.NodalOfficerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   center.NodalOfficerTable,
			Columns: []string{center.NodalOfficerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodalofficer.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.NodalOfficerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   center.NodalOfficerTable,
			Columns: []string{center.NodalOfficerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodalofficer.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.NotificationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   center.NotificationTable,
			Columns: []string{center.NotificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.NotificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   center.NotificationTable,
			Columns: []string{center.NotificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Center{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{center.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
