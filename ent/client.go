// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"recruit/ent/migrate"

	"recruit/ent/adminlogin"
	"recruit/ent/ageeligibility"
	"recruit/ent/application"
	"recruit/ent/cadre_choice_ip"
	"recruit/ent/cadre_choice_pa"
	"recruit/ent/cadre_choice_pm"
	"recruit/ent/cadre_choice_ps"
	"recruit/ent/center"
	"recruit/ent/circlemaster"
	"recruit/ent/directorateusers"
	"recruit/ent/disability"
	"recruit/ent/division_choice_pa"
	"recruit/ent/division_choice_pm"
	"recruit/ent/division_choice_ps"
	"recruit/ent/divisionmaster"
	"recruit/ent/eligibilitymaster"
	"recruit/ent/employeecadre"
	"recruit/ent/employeecategory"
	"recruit/ent/employeedesignation"
	"recruit/ent/employeemaster"
	"recruit/ent/employeeposts"
	"recruit/ent/employees"
	"recruit/ent/exam"
	"recruit/ent/exam_applications_ip"
	"recruit/ent/exam_applications_ps"
	"recruit/ent/exam_ip"
	"recruit/ent/exam_pa"
	"recruit/ent/exam_pm"
	"recruit/ent/exam_ps"
	"recruit/ent/examcalendar"
	"recruit/ent/exampapers"
	"recruit/ent/examtype"
	"recruit/ent/facility"
	"recruit/ent/login"
	"recruit/ent/nodalofficer"
	"recruit/ent/notification"
	"recruit/ent/papertypes"
	"recruit/ent/placeofpreferenceip"
	"recruit/ent/recommendationsipapplications"
	"recruit/ent/regionmaster"
	"recruit/ent/reversal_application_ip"
	"recruit/ent/rolemaster"
	"recruit/ent/user"
	"recruit/ent/usermaster"
	"recruit/ent/vacancyyear"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AdminLogin is the client for interacting with the AdminLogin builders.
	AdminLogin *AdminLoginClient
	// AgeEligibility is the client for interacting with the AgeEligibility builders.
	AgeEligibility *AgeEligibilityClient
	// Application is the client for interacting with the Application builders.
	Application *ApplicationClient
	// Cadre_Choice_IP is the client for interacting with the Cadre_Choice_IP builders.
	Cadre_Choice_IP *CadreChoiceIPClient
	// Cadre_Choice_PA is the client for interacting with the Cadre_Choice_PA builders.
	Cadre_Choice_PA *CadreChoicePAClient
	// Cadre_Choice_PM is the client for interacting with the Cadre_Choice_PM builders.
	Cadre_Choice_PM *CadreChoicePMClient
	// Cadre_Choice_PS is the client for interacting with the Cadre_Choice_PS builders.
	Cadre_Choice_PS *CadreChoicePSClient
	// Center is the client for interacting with the Center builders.
	Center *CenterClient
	// CircleMaster is the client for interacting with the CircleMaster builders.
	CircleMaster *CircleMasterClient
	// DirectorateUsers is the client for interacting with the DirectorateUsers builders.
	DirectorateUsers *DirectorateUsersClient
	// Disability is the client for interacting with the Disability builders.
	Disability *DisabilityClient
	// DivisionMaster is the client for interacting with the DivisionMaster builders.
	DivisionMaster *DivisionMasterClient
	// Division_Choice_PA is the client for interacting with the Division_Choice_PA builders.
	Division_Choice_PA *DivisionChoicePAClient
	// Division_Choice_PM is the client for interacting with the Division_Choice_PM builders.
	Division_Choice_PM *DivisionChoicePMClient
	// Division_Choice_PS is the client for interacting with the Division_Choice_PS builders.
	Division_Choice_PS *DivisionChoicePSClient
	// EligibilityMaster is the client for interacting with the EligibilityMaster builders.
	EligibilityMaster *EligibilityMasterClient
	// EmployeeCadre is the client for interacting with the EmployeeCadre builders.
	EmployeeCadre *EmployeeCadreClient
	// EmployeeCategory is the client for interacting with the EmployeeCategory builders.
	EmployeeCategory *EmployeeCategoryClient
	// EmployeeDesignation is the client for interacting with the EmployeeDesignation builders.
	EmployeeDesignation *EmployeeDesignationClient
	// EmployeeMaster is the client for interacting with the EmployeeMaster builders.
	EmployeeMaster *EmployeeMasterClient
	// EmployeePosts is the client for interacting with the EmployeePosts builders.
	EmployeePosts *EmployeePostsClient
	// Employees is the client for interacting with the Employees builders.
	Employees *EmployeesClient
	// Exam is the client for interacting with the Exam builders.
	Exam *ExamClient
	// ExamCalendar is the client for interacting with the ExamCalendar builders.
	ExamCalendar *ExamCalendarClient
	// ExamPapers is the client for interacting with the ExamPapers builders.
	ExamPapers *ExamPapersClient
	// ExamType is the client for interacting with the ExamType builders.
	ExamType *ExamTypeClient
	// Exam_Applications_IP is the client for interacting with the Exam_Applications_IP builders.
	Exam_Applications_IP *ExamApplicationsIPClient
	// Exam_Applications_PS is the client for interacting with the Exam_Applications_PS builders.
	Exam_Applications_PS *ExamApplicationsPSClient
	// Exam_IP is the client for interacting with the Exam_IP builders.
	Exam_IP *ExamIPClient
	// Exam_PA is the client for interacting with the Exam_PA builders.
	Exam_PA *ExamPAClient
	// Exam_PM is the client for interacting with the Exam_PM builders.
	Exam_PM *ExamPMClient
	// Exam_PS is the client for interacting with the Exam_PS builders.
	Exam_PS *ExamPSClient
	// Facility is the client for interacting with the Facility builders.
	Facility *FacilityClient
	// Login is the client for interacting with the Login builders.
	Login *LoginClient
	// NodalOfficer is the client for interacting with the NodalOfficer builders.
	NodalOfficer *NodalOfficerClient
	// Notification is the client for interacting with the Notification builders.
	Notification *NotificationClient
	// PaperTypes is the client for interacting with the PaperTypes builders.
	PaperTypes *PaperTypesClient
	// PlaceOfPreferenceIP is the client for interacting with the PlaceOfPreferenceIP builders.
	PlaceOfPreferenceIP *PlaceOfPreferenceIPClient
	// RecommendationsIPApplications is the client for interacting with the RecommendationsIPApplications builders.
	RecommendationsIPApplications *RecommendationsIPApplicationsClient
	// RegionMaster is the client for interacting with the RegionMaster builders.
	RegionMaster *RegionMasterClient
	// Reversal_Application_IP is the client for interacting with the Reversal_Application_IP builders.
	Reversal_Application_IP *ReversalApplicationIPClient
	// RoleMaster is the client for interacting with the RoleMaster builders.
	RoleMaster *RoleMasterClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserMaster is the client for interacting with the UserMaster builders.
	UserMaster *UserMasterClient
	// VacancyYear is the client for interacting with the VacancyYear builders.
	VacancyYear *VacancyYearClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AdminLogin = NewAdminLoginClient(c.config)
	c.AgeEligibility = NewAgeEligibilityClient(c.config)
	c.Application = NewApplicationClient(c.config)
	c.Cadre_Choice_IP = NewCadreChoiceIPClient(c.config)
	c.Cadre_Choice_PA = NewCadreChoicePAClient(c.config)
	c.Cadre_Choice_PM = NewCadreChoicePMClient(c.config)
	c.Cadre_Choice_PS = NewCadreChoicePSClient(c.config)
	c.Center = NewCenterClient(c.config)
	c.CircleMaster = NewCircleMasterClient(c.config)
	c.DirectorateUsers = NewDirectorateUsersClient(c.config)
	c.Disability = NewDisabilityClient(c.config)
	c.DivisionMaster = NewDivisionMasterClient(c.config)
	c.Division_Choice_PA = NewDivisionChoicePAClient(c.config)
	c.Division_Choice_PM = NewDivisionChoicePMClient(c.config)
	c.Division_Choice_PS = NewDivisionChoicePSClient(c.config)
	c.EligibilityMaster = NewEligibilityMasterClient(c.config)
	c.EmployeeCadre = NewEmployeeCadreClient(c.config)
	c.EmployeeCategory = NewEmployeeCategoryClient(c.config)
	c.EmployeeDesignation = NewEmployeeDesignationClient(c.config)
	c.EmployeeMaster = NewEmployeeMasterClient(c.config)
	c.EmployeePosts = NewEmployeePostsClient(c.config)
	c.Employees = NewEmployeesClient(c.config)
	c.Exam = NewExamClient(c.config)
	c.ExamCalendar = NewExamCalendarClient(c.config)
	c.ExamPapers = NewExamPapersClient(c.config)
	c.ExamType = NewExamTypeClient(c.config)
	c.Exam_Applications_IP = NewExamApplicationsIPClient(c.config)
	c.Exam_Applications_PS = NewExamApplicationsPSClient(c.config)
	c.Exam_IP = NewExamIPClient(c.config)
	c.Exam_PA = NewExamPAClient(c.config)
	c.Exam_PM = NewExamPMClient(c.config)
	c.Exam_PS = NewExamPSClient(c.config)
	c.Facility = NewFacilityClient(c.config)
	c.Login = NewLoginClient(c.config)
	c.NodalOfficer = NewNodalOfficerClient(c.config)
	c.Notification = NewNotificationClient(c.config)
	c.PaperTypes = NewPaperTypesClient(c.config)
	c.PlaceOfPreferenceIP = NewPlaceOfPreferenceIPClient(c.config)
	c.RecommendationsIPApplications = NewRecommendationsIPApplicationsClient(c.config)
	c.RegionMaster = NewRegionMasterClient(c.config)
	c.Reversal_Application_IP = NewReversalApplicationIPClient(c.config)
	c.RoleMaster = NewRoleMasterClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserMaster = NewUserMasterClient(c.config)
	c.VacancyYear = NewVacancyYearClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                           ctx,
		config:                        cfg,
		AdminLogin:                    NewAdminLoginClient(cfg),
		AgeEligibility:                NewAgeEligibilityClient(cfg),
		Application:                   NewApplicationClient(cfg),
		Cadre_Choice_IP:               NewCadreChoiceIPClient(cfg),
		Cadre_Choice_PA:               NewCadreChoicePAClient(cfg),
		Cadre_Choice_PM:               NewCadreChoicePMClient(cfg),
		Cadre_Choice_PS:               NewCadreChoicePSClient(cfg),
		Center:                        NewCenterClient(cfg),
		CircleMaster:                  NewCircleMasterClient(cfg),
		DirectorateUsers:              NewDirectorateUsersClient(cfg),
		Disability:                    NewDisabilityClient(cfg),
		DivisionMaster:                NewDivisionMasterClient(cfg),
		Division_Choice_PA:            NewDivisionChoicePAClient(cfg),
		Division_Choice_PM:            NewDivisionChoicePMClient(cfg),
		Division_Choice_PS:            NewDivisionChoicePSClient(cfg),
		EligibilityMaster:             NewEligibilityMasterClient(cfg),
		EmployeeCadre:                 NewEmployeeCadreClient(cfg),
		EmployeeCategory:              NewEmployeeCategoryClient(cfg),
		EmployeeDesignation:           NewEmployeeDesignationClient(cfg),
		EmployeeMaster:                NewEmployeeMasterClient(cfg),
		EmployeePosts:                 NewEmployeePostsClient(cfg),
		Employees:                     NewEmployeesClient(cfg),
		Exam:                          NewExamClient(cfg),
		ExamCalendar:                  NewExamCalendarClient(cfg),
		ExamPapers:                    NewExamPapersClient(cfg),
		ExamType:                      NewExamTypeClient(cfg),
		Exam_Applications_IP:          NewExamApplicationsIPClient(cfg),
		Exam_Applications_PS:          NewExamApplicationsPSClient(cfg),
		Exam_IP:                       NewExamIPClient(cfg),
		Exam_PA:                       NewExamPAClient(cfg),
		Exam_PM:                       NewExamPMClient(cfg),
		Exam_PS:                       NewExamPSClient(cfg),
		Facility:                      NewFacilityClient(cfg),
		Login:                         NewLoginClient(cfg),
		NodalOfficer:                  NewNodalOfficerClient(cfg),
		Notification:                  NewNotificationClient(cfg),
		PaperTypes:                    NewPaperTypesClient(cfg),
		PlaceOfPreferenceIP:           NewPlaceOfPreferenceIPClient(cfg),
		RecommendationsIPApplications: NewRecommendationsIPApplicationsClient(cfg),
		RegionMaster:                  NewRegionMasterClient(cfg),
		Reversal_Application_IP:       NewReversalApplicationIPClient(cfg),
		RoleMaster:                    NewRoleMasterClient(cfg),
		User:                          NewUserClient(cfg),
		UserMaster:                    NewUserMasterClient(cfg),
		VacancyYear:                   NewVacancyYearClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                           ctx,
		config:                        cfg,
		AdminLogin:                    NewAdminLoginClient(cfg),
		AgeEligibility:                NewAgeEligibilityClient(cfg),
		Application:                   NewApplicationClient(cfg),
		Cadre_Choice_IP:               NewCadreChoiceIPClient(cfg),
		Cadre_Choice_PA:               NewCadreChoicePAClient(cfg),
		Cadre_Choice_PM:               NewCadreChoicePMClient(cfg),
		Cadre_Choice_PS:               NewCadreChoicePSClient(cfg),
		Center:                        NewCenterClient(cfg),
		CircleMaster:                  NewCircleMasterClient(cfg),
		DirectorateUsers:              NewDirectorateUsersClient(cfg),
		Disability:                    NewDisabilityClient(cfg),
		DivisionMaster:                NewDivisionMasterClient(cfg),
		Division_Choice_PA:            NewDivisionChoicePAClient(cfg),
		Division_Choice_PM:            NewDivisionChoicePMClient(cfg),
		Division_Choice_PS:            NewDivisionChoicePSClient(cfg),
		EligibilityMaster:             NewEligibilityMasterClient(cfg),
		EmployeeCadre:                 NewEmployeeCadreClient(cfg),
		EmployeeCategory:              NewEmployeeCategoryClient(cfg),
		EmployeeDesignation:           NewEmployeeDesignationClient(cfg),
		EmployeeMaster:                NewEmployeeMasterClient(cfg),
		EmployeePosts:                 NewEmployeePostsClient(cfg),
		Employees:                     NewEmployeesClient(cfg),
		Exam:                          NewExamClient(cfg),
		ExamCalendar:                  NewExamCalendarClient(cfg),
		ExamPapers:                    NewExamPapersClient(cfg),
		ExamType:                      NewExamTypeClient(cfg),
		Exam_Applications_IP:          NewExamApplicationsIPClient(cfg),
		Exam_Applications_PS:          NewExamApplicationsPSClient(cfg),
		Exam_IP:                       NewExamIPClient(cfg),
		Exam_PA:                       NewExamPAClient(cfg),
		Exam_PM:                       NewExamPMClient(cfg),
		Exam_PS:                       NewExamPSClient(cfg),
		Facility:                      NewFacilityClient(cfg),
		Login:                         NewLoginClient(cfg),
		NodalOfficer:                  NewNodalOfficerClient(cfg),
		Notification:                  NewNotificationClient(cfg),
		PaperTypes:                    NewPaperTypesClient(cfg),
		PlaceOfPreferenceIP:           NewPlaceOfPreferenceIPClient(cfg),
		RecommendationsIPApplications: NewRecommendationsIPApplicationsClient(cfg),
		RegionMaster:                  NewRegionMasterClient(cfg),
		Reversal_Application_IP:       NewReversalApplicationIPClient(cfg),
		RoleMaster:                    NewRoleMasterClient(cfg),
		User:                          NewUserClient(cfg),
		UserMaster:                    NewUserMasterClient(cfg),
		VacancyYear:                   NewVacancyYearClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AdminLogin.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.AdminLogin, c.AgeEligibility, c.Application, c.Cadre_Choice_IP,
		c.Cadre_Choice_PA, c.Cadre_Choice_PM, c.Cadre_Choice_PS, c.Center,
		c.CircleMaster, c.DirectorateUsers, c.Disability, c.DivisionMaster,
		c.Division_Choice_PA, c.Division_Choice_PM, c.Division_Choice_PS,
		c.EligibilityMaster, c.EmployeeCadre, c.EmployeeCategory,
		c.EmployeeDesignation, c.EmployeeMaster, c.EmployeePosts, c.Employees, c.Exam,
		c.ExamCalendar, c.ExamPapers, c.ExamType, c.Exam_Applications_IP,
		c.Exam_Applications_PS, c.Exam_IP, c.Exam_PA, c.Exam_PM, c.Exam_PS, c.Facility,
		c.Login, c.NodalOfficer, c.Notification, c.PaperTypes, c.PlaceOfPreferenceIP,
		c.RecommendationsIPApplications, c.RegionMaster, c.Reversal_Application_IP,
		c.RoleMaster, c.User, c.UserMaster, c.VacancyYear,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.AdminLogin, c.AgeEligibility, c.Application, c.Cadre_Choice_IP,
		c.Cadre_Choice_PA, c.Cadre_Choice_PM, c.Cadre_Choice_PS, c.Center,
		c.CircleMaster, c.DirectorateUsers, c.Disability, c.DivisionMaster,
		c.Division_Choice_PA, c.Division_Choice_PM, c.Division_Choice_PS,
		c.EligibilityMaster, c.EmployeeCadre, c.EmployeeCategory,
		c.EmployeeDesignation, c.EmployeeMaster, c.EmployeePosts, c.Employees, c.Exam,
		c.ExamCalendar, c.ExamPapers, c.ExamType, c.Exam_Applications_IP,
		c.Exam_Applications_PS, c.Exam_IP, c.Exam_PA, c.Exam_PM, c.Exam_PS, c.Facility,
		c.Login, c.NodalOfficer, c.Notification, c.PaperTypes, c.PlaceOfPreferenceIP,
		c.RecommendationsIPApplications, c.RegionMaster, c.Reversal_Application_IP,
		c.RoleMaster, c.User, c.UserMaster, c.VacancyYear,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AdminLoginMutation:
		return c.AdminLogin.mutate(ctx, m)
	case *AgeEligibilityMutation:
		return c.AgeEligibility.mutate(ctx, m)
	case *ApplicationMutation:
		return c.Application.mutate(ctx, m)
	case *CadreChoiceIPMutation:
		return c.Cadre_Choice_IP.mutate(ctx, m)
	case *CadreChoicePAMutation:
		return c.Cadre_Choice_PA.mutate(ctx, m)
	case *CadreChoicePMMutation:
		return c.Cadre_Choice_PM.mutate(ctx, m)
	case *CadreChoicePSMutation:
		return c.Cadre_Choice_PS.mutate(ctx, m)
	case *CenterMutation:
		return c.Center.mutate(ctx, m)
	case *CircleMasterMutation:
		return c.CircleMaster.mutate(ctx, m)
	case *DirectorateUsersMutation:
		return c.DirectorateUsers.mutate(ctx, m)
	case *DisabilityMutation:
		return c.Disability.mutate(ctx, m)
	case *DivisionMasterMutation:
		return c.DivisionMaster.mutate(ctx, m)
	case *DivisionChoicePAMutation:
		return c.Division_Choice_PA.mutate(ctx, m)
	case *DivisionChoicePMMutation:
		return c.Division_Choice_PM.mutate(ctx, m)
	case *DivisionChoicePSMutation:
		return c.Division_Choice_PS.mutate(ctx, m)
	case *EligibilityMasterMutation:
		return c.EligibilityMaster.mutate(ctx, m)
	case *EmployeeCadreMutation:
		return c.EmployeeCadre.mutate(ctx, m)
	case *EmployeeCategoryMutation:
		return c.EmployeeCategory.mutate(ctx, m)
	case *EmployeeDesignationMutation:
		return c.EmployeeDesignation.mutate(ctx, m)
	case *EmployeeMasterMutation:
		return c.EmployeeMaster.mutate(ctx, m)
	case *EmployeePostsMutation:
		return c.EmployeePosts.mutate(ctx, m)
	case *EmployeesMutation:
		return c.Employees.mutate(ctx, m)
	case *ExamMutation:
		return c.Exam.mutate(ctx, m)
	case *ExamCalendarMutation:
		return c.ExamCalendar.mutate(ctx, m)
	case *ExamPapersMutation:
		return c.ExamPapers.mutate(ctx, m)
	case *ExamTypeMutation:
		return c.ExamType.mutate(ctx, m)
	case *ExamApplicationsIPMutation:
		return c.Exam_Applications_IP.mutate(ctx, m)
	case *ExamApplicationsPSMutation:
		return c.Exam_Applications_PS.mutate(ctx, m)
	case *ExamIPMutation:
		return c.Exam_IP.mutate(ctx, m)
	case *ExamPAMutation:
		return c.Exam_PA.mutate(ctx, m)
	case *ExamPMMutation:
		return c.Exam_PM.mutate(ctx, m)
	case *ExamPSMutation:
		return c.Exam_PS.mutate(ctx, m)
	case *FacilityMutation:
		return c.Facility.mutate(ctx, m)
	case *LoginMutation:
		return c.Login.mutate(ctx, m)
	case *NodalOfficerMutation:
		return c.NodalOfficer.mutate(ctx, m)
	case *NotificationMutation:
		return c.Notification.mutate(ctx, m)
	case *PaperTypesMutation:
		return c.PaperTypes.mutate(ctx, m)
	case *PlaceOfPreferenceIPMutation:
		return c.PlaceOfPreferenceIP.mutate(ctx, m)
	case *RecommendationsIPApplicationsMutation:
		return c.RecommendationsIPApplications.mutate(ctx, m)
	case *RegionMasterMutation:
		return c.RegionMaster.mutate(ctx, m)
	case *ReversalApplicationIPMutation:
		return c.Reversal_Application_IP.mutate(ctx, m)
	case *RoleMasterMutation:
		return c.RoleMaster.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserMasterMutation:
		return c.UserMaster.mutate(ctx, m)
	case *VacancyYearMutation:
		return c.VacancyYear.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AdminLoginClient is a client for the AdminLogin schema.
type AdminLoginClient struct {
	config
}

// NewAdminLoginClient returns a client for the AdminLogin from the given config.
func NewAdminLoginClient(c config) *AdminLoginClient {
	return &AdminLoginClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `adminlogin.Hooks(f(g(h())))`.
func (c *AdminLoginClient) Use(hooks ...Hook) {
	c.hooks.AdminLogin = append(c.hooks.AdminLogin, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `adminlogin.Intercept(f(g(h())))`.
func (c *AdminLoginClient) Intercept(interceptors ...Interceptor) {
	c.inters.AdminLogin = append(c.inters.AdminLogin, interceptors...)
}

// Create returns a builder for creating a AdminLogin entity.
func (c *AdminLoginClient) Create() *AdminLoginCreate {
	mutation := newAdminLoginMutation(c.config, OpCreate)
	return &AdminLoginCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AdminLogin entities.
func (c *AdminLoginClient) CreateBulk(builders ...*AdminLoginCreate) *AdminLoginCreateBulk {
	return &AdminLoginCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AdminLogin.
func (c *AdminLoginClient) Update() *AdminLoginUpdate {
	mutation := newAdminLoginMutation(c.config, OpUpdate)
	return &AdminLoginUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminLoginClient) UpdateOne(al *AdminLogin) *AdminLoginUpdateOne {
	mutation := newAdminLoginMutation(c.config, OpUpdateOne, withAdminLogin(al))
	return &AdminLoginUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminLoginClient) UpdateOneID(id int32) *AdminLoginUpdateOne {
	mutation := newAdminLoginMutation(c.config, OpUpdateOne, withAdminLoginID(id))
	return &AdminLoginUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AdminLogin.
func (c *AdminLoginClient) Delete() *AdminLoginDelete {
	mutation := newAdminLoginMutation(c.config, OpDelete)
	return &AdminLoginDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AdminLoginClient) DeleteOne(al *AdminLogin) *AdminLoginDeleteOne {
	return c.DeleteOneID(al.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AdminLoginClient) DeleteOneID(id int32) *AdminLoginDeleteOne {
	builder := c.Delete().Where(adminlogin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminLoginDeleteOne{builder}
}

// Query returns a query builder for AdminLogin.
func (c *AdminLoginClient) Query() *AdminLoginQuery {
	return &AdminLoginQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAdminLogin},
		inters: c.Interceptors(),
	}
}

// Get returns a AdminLogin entity by its id.
func (c *AdminLoginClient) Get(ctx context.Context, id int32) (*AdminLogin, error) {
	return c.Query().Where(adminlogin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminLoginClient) GetX(ctx context.Context, id int32) *AdminLogin {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoleMaster queries the role_master edge of a AdminLogin.
func (c *AdminLoginClient) QueryRoleMaster(al *AdminLogin) *RoleMasterQuery {
	query := (&RoleMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := al.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adminlogin.Table, adminlogin.FieldID, id),
			sqlgraph.To(rolemaster.Table, rolemaster.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, adminlogin.RoleMasterTable, adminlogin.RoleMasterColumn),
		)
		fromV = sqlgraph.Neighbors(al.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdminLoginClient) Hooks() []Hook {
	return c.hooks.AdminLogin
}

// Interceptors returns the client interceptors.
func (c *AdminLoginClient) Interceptors() []Interceptor {
	return c.inters.AdminLogin
}

func (c *AdminLoginClient) mutate(ctx context.Context, m *AdminLoginMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AdminLoginCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AdminLoginUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AdminLoginUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AdminLoginDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AdminLogin mutation op: %q", m.Op())
	}
}

// AgeEligibilityClient is a client for the AgeEligibility schema.
type AgeEligibilityClient struct {
	config
}

// NewAgeEligibilityClient returns a client for the AgeEligibility from the given config.
func NewAgeEligibilityClient(c config) *AgeEligibilityClient {
	return &AgeEligibilityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ageeligibility.Hooks(f(g(h())))`.
func (c *AgeEligibilityClient) Use(hooks ...Hook) {
	c.hooks.AgeEligibility = append(c.hooks.AgeEligibility, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ageeligibility.Intercept(f(g(h())))`.
func (c *AgeEligibilityClient) Intercept(interceptors ...Interceptor) {
	c.inters.AgeEligibility = append(c.inters.AgeEligibility, interceptors...)
}

// Create returns a builder for creating a AgeEligibility entity.
func (c *AgeEligibilityClient) Create() *AgeEligibilityCreate {
	mutation := newAgeEligibilityMutation(c.config, OpCreate)
	return &AgeEligibilityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AgeEligibility entities.
func (c *AgeEligibilityClient) CreateBulk(builders ...*AgeEligibilityCreate) *AgeEligibilityCreateBulk {
	return &AgeEligibilityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AgeEligibility.
func (c *AgeEligibilityClient) Update() *AgeEligibilityUpdate {
	mutation := newAgeEligibilityMutation(c.config, OpUpdate)
	return &AgeEligibilityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AgeEligibilityClient) UpdateOne(ae *AgeEligibility) *AgeEligibilityUpdateOne {
	mutation := newAgeEligibilityMutation(c.config, OpUpdateOne, withAgeEligibility(ae))
	return &AgeEligibilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AgeEligibilityClient) UpdateOneID(id int32) *AgeEligibilityUpdateOne {
	mutation := newAgeEligibilityMutation(c.config, OpUpdateOne, withAgeEligibilityID(id))
	return &AgeEligibilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AgeEligibility.
func (c *AgeEligibilityClient) Delete() *AgeEligibilityDelete {
	mutation := newAgeEligibilityMutation(c.config, OpDelete)
	return &AgeEligibilityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AgeEligibilityClient) DeleteOne(ae *AgeEligibility) *AgeEligibilityDeleteOne {
	return c.DeleteOneID(ae.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AgeEligibilityClient) DeleteOneID(id int32) *AgeEligibilityDeleteOne {
	builder := c.Delete().Where(ageeligibility.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AgeEligibilityDeleteOne{builder}
}

// Query returns a query builder for AgeEligibility.
func (c *AgeEligibilityClient) Query() *AgeEligibilityQuery {
	return &AgeEligibilityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAgeEligibility},
		inters: c.Interceptors(),
	}
}

// Get returns a AgeEligibility entity by its id.
func (c *AgeEligibilityClient) Get(ctx context.Context, id int32) (*AgeEligibility, error) {
	return c.Query().Where(ageeligibility.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AgeEligibilityClient) GetX(ctx context.Context, id int32) *AgeEligibility {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AgeEligibilityClient) Hooks() []Hook {
	return c.hooks.AgeEligibility
}

// Interceptors returns the client interceptors.
func (c *AgeEligibilityClient) Interceptors() []Interceptor {
	return c.inters.AgeEligibility
}

func (c *AgeEligibilityClient) mutate(ctx context.Context, m *AgeEligibilityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AgeEligibilityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AgeEligibilityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AgeEligibilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AgeEligibilityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AgeEligibility mutation op: %q", m.Op())
	}
}

// ApplicationClient is a client for the Application schema.
type ApplicationClient struct {
	config
}

// NewApplicationClient returns a client for the Application from the given config.
func NewApplicationClient(c config) *ApplicationClient {
	return &ApplicationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `application.Hooks(f(g(h())))`.
func (c *ApplicationClient) Use(hooks ...Hook) {
	c.hooks.Application = append(c.hooks.Application, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `application.Intercept(f(g(h())))`.
func (c *ApplicationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Application = append(c.inters.Application, interceptors...)
}

// Create returns a builder for creating a Application entity.
func (c *ApplicationClient) Create() *ApplicationCreate {
	mutation := newApplicationMutation(c.config, OpCreate)
	return &ApplicationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Application entities.
func (c *ApplicationClient) CreateBulk(builders ...*ApplicationCreate) *ApplicationCreateBulk {
	return &ApplicationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Application.
func (c *ApplicationClient) Update() *ApplicationUpdate {
	mutation := newApplicationMutation(c.config, OpUpdate)
	return &ApplicationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApplicationClient) UpdateOne(a *Application) *ApplicationUpdateOne {
	mutation := newApplicationMutation(c.config, OpUpdateOne, withApplication(a))
	return &ApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApplicationClient) UpdateOneID(id int32) *ApplicationUpdateOne {
	mutation := newApplicationMutation(c.config, OpUpdateOne, withApplicationID(id))
	return &ApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Application.
func (c *ApplicationClient) Delete() *ApplicationDelete {
	mutation := newApplicationMutation(c.config, OpDelete)
	return &ApplicationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApplicationClient) DeleteOne(a *Application) *ApplicationDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApplicationClient) DeleteOneID(id int32) *ApplicationDeleteOne {
	builder := c.Delete().Where(application.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApplicationDeleteOne{builder}
}

// Query returns a query builder for Application.
func (c *ApplicationClient) Query() *ApplicationQuery {
	return &ApplicationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApplication},
		inters: c.Interceptors(),
	}
}

// Get returns a Application entity by its id.
func (c *ApplicationClient) Get(ctx context.Context, id int32) (*Application, error) {
	return c.Query().Where(application.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApplicationClient) GetX(ctx context.Context, id int32) *Application {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCenter queries the center edge of a Application.
func (c *ApplicationClient) QueryCenter(a *Application) *CenterQuery {
	query := (&CenterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(application.Table, application.FieldID, id),
			sqlgraph.To(center.Table, center.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, application.CenterTable, application.CenterColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotification queries the notification edge of a Application.
func (c *ApplicationClient) QueryNotification(a *Application) *NotificationQuery {
	query := (&NotificationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(application.Table, application.FieldID, id),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, application.NotificationTable, application.NotificationColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ApplicationClient) Hooks() []Hook {
	return c.hooks.Application
}

// Interceptors returns the client interceptors.
func (c *ApplicationClient) Interceptors() []Interceptor {
	return c.inters.Application
}

func (c *ApplicationClient) mutate(ctx context.Context, m *ApplicationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApplicationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApplicationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApplicationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Application mutation op: %q", m.Op())
	}
}

// CadreChoiceIPClient is a client for the Cadre_Choice_IP schema.
type CadreChoiceIPClient struct {
	config
}

// NewCadreChoiceIPClient returns a client for the Cadre_Choice_IP from the given config.
func NewCadreChoiceIPClient(c config) *CadreChoiceIPClient {
	return &CadreChoiceIPClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cadre_choice_ip.Hooks(f(g(h())))`.
func (c *CadreChoiceIPClient) Use(hooks ...Hook) {
	c.hooks.Cadre_Choice_IP = append(c.hooks.Cadre_Choice_IP, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cadre_choice_ip.Intercept(f(g(h())))`.
func (c *CadreChoiceIPClient) Intercept(interceptors ...Interceptor) {
	c.inters.Cadre_Choice_IP = append(c.inters.Cadre_Choice_IP, interceptors...)
}

// Create returns a builder for creating a Cadre_Choice_IP entity.
func (c *CadreChoiceIPClient) Create() *CadreChoiceIPCreate {
	mutation := newCadreChoiceIPMutation(c.config, OpCreate)
	return &CadreChoiceIPCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cadre_Choice_IP entities.
func (c *CadreChoiceIPClient) CreateBulk(builders ...*CadreChoiceIPCreate) *CadreChoiceIPCreateBulk {
	return &CadreChoiceIPCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cadre_Choice_IP.
func (c *CadreChoiceIPClient) Update() *CadreChoiceIPUpdate {
	mutation := newCadreChoiceIPMutation(c.config, OpUpdate)
	return &CadreChoiceIPUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CadreChoiceIPClient) UpdateOne(cci *Cadre_Choice_IP) *CadreChoiceIPUpdateOne {
	mutation := newCadreChoiceIPMutation(c.config, OpUpdateOne, withCadre_Choice_IP(cci))
	return &CadreChoiceIPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CadreChoiceIPClient) UpdateOneID(id int32) *CadreChoiceIPUpdateOne {
	mutation := newCadreChoiceIPMutation(c.config, OpUpdateOne, withCadre_Choice_IPID(id))
	return &CadreChoiceIPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cadre_Choice_IP.
func (c *CadreChoiceIPClient) Delete() *CadreChoiceIPDelete {
	mutation := newCadreChoiceIPMutation(c.config, OpDelete)
	return &CadreChoiceIPDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CadreChoiceIPClient) DeleteOne(cci *Cadre_Choice_IP) *CadreChoiceIPDeleteOne {
	return c.DeleteOneID(cci.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CadreChoiceIPClient) DeleteOneID(id int32) *CadreChoiceIPDeleteOne {
	builder := c.Delete().Where(cadre_choice_ip.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CadreChoiceIPDeleteOne{builder}
}

// Query returns a query builder for Cadre_Choice_IP.
func (c *CadreChoiceIPClient) Query() *CadreChoiceIPQuery {
	return &CadreChoiceIPQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCadreChoiceIP},
		inters: c.Interceptors(),
	}
}

// Get returns a Cadre_Choice_IP entity by its id.
func (c *CadreChoiceIPClient) Get(ctx context.Context, id int32) (*Cadre_Choice_IP, error) {
	return c.Query().Where(cadre_choice_ip.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CadreChoiceIPClient) GetX(ctx context.Context, id int32) *Cadre_Choice_IP {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplnIPRef queries the ApplnIP_Ref edge of a Cadre_Choice_IP.
func (c *CadreChoiceIPClient) QueryApplnIPRef(cci *Cadre_Choice_IP) *ExamApplicationsIPQuery {
	query := (&ExamApplicationsIPClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cadre_choice_ip.Table, cadre_choice_ip.FieldID, id),
			sqlgraph.To(exam_applications_ip.Table, exam_applications_ip.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cadre_choice_ip.ApplnIPRefTable, cadre_choice_ip.ApplnIPRefColumn),
		)
		fromV = sqlgraph.Neighbors(cci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CadreChoiceIPClient) Hooks() []Hook {
	return c.hooks.Cadre_Choice_IP
}

// Interceptors returns the client interceptors.
func (c *CadreChoiceIPClient) Interceptors() []Interceptor {
	return c.inters.Cadre_Choice_IP
}

func (c *CadreChoiceIPClient) mutate(ctx context.Context, m *CadreChoiceIPMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CadreChoiceIPCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CadreChoiceIPUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CadreChoiceIPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CadreChoiceIPDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Cadre_Choice_IP mutation op: %q", m.Op())
	}
}

// CadreChoicePAClient is a client for the Cadre_Choice_PA schema.
type CadreChoicePAClient struct {
	config
}

// NewCadreChoicePAClient returns a client for the Cadre_Choice_PA from the given config.
func NewCadreChoicePAClient(c config) *CadreChoicePAClient {
	return &CadreChoicePAClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cadre_choice_pa.Hooks(f(g(h())))`.
func (c *CadreChoicePAClient) Use(hooks ...Hook) {
	c.hooks.Cadre_Choice_PA = append(c.hooks.Cadre_Choice_PA, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cadre_choice_pa.Intercept(f(g(h())))`.
func (c *CadreChoicePAClient) Intercept(interceptors ...Interceptor) {
	c.inters.Cadre_Choice_PA = append(c.inters.Cadre_Choice_PA, interceptors...)
}

// Create returns a builder for creating a Cadre_Choice_PA entity.
func (c *CadreChoicePAClient) Create() *CadreChoicePACreate {
	mutation := newCadreChoicePAMutation(c.config, OpCreate)
	return &CadreChoicePACreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cadre_Choice_PA entities.
func (c *CadreChoicePAClient) CreateBulk(builders ...*CadreChoicePACreate) *CadreChoicePACreateBulk {
	return &CadreChoicePACreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cadre_Choice_PA.
func (c *CadreChoicePAClient) Update() *CadreChoicePAUpdate {
	mutation := newCadreChoicePAMutation(c.config, OpUpdate)
	return &CadreChoicePAUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CadreChoicePAClient) UpdateOne(ccp *Cadre_Choice_PA) *CadreChoicePAUpdateOne {
	mutation := newCadreChoicePAMutation(c.config, OpUpdateOne, withCadre_Choice_PA(ccp))
	return &CadreChoicePAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CadreChoicePAClient) UpdateOneID(id int32) *CadreChoicePAUpdateOne {
	mutation := newCadreChoicePAMutation(c.config, OpUpdateOne, withCadre_Choice_PAID(id))
	return &CadreChoicePAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cadre_Choice_PA.
func (c *CadreChoicePAClient) Delete() *CadreChoicePADelete {
	mutation := newCadreChoicePAMutation(c.config, OpDelete)
	return &CadreChoicePADelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CadreChoicePAClient) DeleteOne(ccp *Cadre_Choice_PA) *CadreChoicePADeleteOne {
	return c.DeleteOneID(ccp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CadreChoicePAClient) DeleteOneID(id int32) *CadreChoicePADeleteOne {
	builder := c.Delete().Where(cadre_choice_pa.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CadreChoicePADeleteOne{builder}
}

// Query returns a query builder for Cadre_Choice_PA.
func (c *CadreChoicePAClient) Query() *CadreChoicePAQuery {
	return &CadreChoicePAQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCadreChoicePA},
		inters: c.Interceptors(),
	}
}

// Get returns a Cadre_Choice_PA entity by its id.
func (c *CadreChoicePAClient) Get(ctx context.Context, id int32) (*Cadre_Choice_PA, error) {
	return c.Query().Where(cadre_choice_pa.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CadreChoicePAClient) GetX(ctx context.Context, id int32) *Cadre_Choice_PA {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CadreChoicePAClient) Hooks() []Hook {
	return c.hooks.Cadre_Choice_PA
}

// Interceptors returns the client interceptors.
func (c *CadreChoicePAClient) Interceptors() []Interceptor {
	return c.inters.Cadre_Choice_PA
}

func (c *CadreChoicePAClient) mutate(ctx context.Context, m *CadreChoicePAMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CadreChoicePACreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CadreChoicePAUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CadreChoicePAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CadreChoicePADelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Cadre_Choice_PA mutation op: %q", m.Op())
	}
}

// CadreChoicePMClient is a client for the Cadre_Choice_PM schema.
type CadreChoicePMClient struct {
	config
}

// NewCadreChoicePMClient returns a client for the Cadre_Choice_PM from the given config.
func NewCadreChoicePMClient(c config) *CadreChoicePMClient {
	return &CadreChoicePMClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cadre_choice_pm.Hooks(f(g(h())))`.
func (c *CadreChoicePMClient) Use(hooks ...Hook) {
	c.hooks.Cadre_Choice_PM = append(c.hooks.Cadre_Choice_PM, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cadre_choice_pm.Intercept(f(g(h())))`.
func (c *CadreChoicePMClient) Intercept(interceptors ...Interceptor) {
	c.inters.Cadre_Choice_PM = append(c.inters.Cadre_Choice_PM, interceptors...)
}

// Create returns a builder for creating a Cadre_Choice_PM entity.
func (c *CadreChoicePMClient) Create() *CadreChoicePMCreate {
	mutation := newCadreChoicePMMutation(c.config, OpCreate)
	return &CadreChoicePMCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cadre_Choice_PM entities.
func (c *CadreChoicePMClient) CreateBulk(builders ...*CadreChoicePMCreate) *CadreChoicePMCreateBulk {
	return &CadreChoicePMCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cadre_Choice_PM.
func (c *CadreChoicePMClient) Update() *CadreChoicePMUpdate {
	mutation := newCadreChoicePMMutation(c.config, OpUpdate)
	return &CadreChoicePMUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CadreChoicePMClient) UpdateOne(ccp *Cadre_Choice_PM) *CadreChoicePMUpdateOne {
	mutation := newCadreChoicePMMutation(c.config, OpUpdateOne, withCadre_Choice_PM(ccp))
	return &CadreChoicePMUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CadreChoicePMClient) UpdateOneID(id int32) *CadreChoicePMUpdateOne {
	mutation := newCadreChoicePMMutation(c.config, OpUpdateOne, withCadre_Choice_PMID(id))
	return &CadreChoicePMUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cadre_Choice_PM.
func (c *CadreChoicePMClient) Delete() *CadreChoicePMDelete {
	mutation := newCadreChoicePMMutation(c.config, OpDelete)
	return &CadreChoicePMDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CadreChoicePMClient) DeleteOne(ccp *Cadre_Choice_PM) *CadreChoicePMDeleteOne {
	return c.DeleteOneID(ccp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CadreChoicePMClient) DeleteOneID(id int32) *CadreChoicePMDeleteOne {
	builder := c.Delete().Where(cadre_choice_pm.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CadreChoicePMDeleteOne{builder}
}

// Query returns a query builder for Cadre_Choice_PM.
func (c *CadreChoicePMClient) Query() *CadreChoicePMQuery {
	return &CadreChoicePMQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCadreChoicePM},
		inters: c.Interceptors(),
	}
}

// Get returns a Cadre_Choice_PM entity by its id.
func (c *CadreChoicePMClient) Get(ctx context.Context, id int32) (*Cadre_Choice_PM, error) {
	return c.Query().Where(cadre_choice_pm.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CadreChoicePMClient) GetX(ctx context.Context, id int32) *Cadre_Choice_PM {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CadreChoicePMClient) Hooks() []Hook {
	return c.hooks.Cadre_Choice_PM
}

// Interceptors returns the client interceptors.
func (c *CadreChoicePMClient) Interceptors() []Interceptor {
	return c.inters.Cadre_Choice_PM
}

func (c *CadreChoicePMClient) mutate(ctx context.Context, m *CadreChoicePMMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CadreChoicePMCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CadreChoicePMUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CadreChoicePMUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CadreChoicePMDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Cadre_Choice_PM mutation op: %q", m.Op())
	}
}

// CadreChoicePSClient is a client for the Cadre_Choice_PS schema.
type CadreChoicePSClient struct {
	config
}

// NewCadreChoicePSClient returns a client for the Cadre_Choice_PS from the given config.
func NewCadreChoicePSClient(c config) *CadreChoicePSClient {
	return &CadreChoicePSClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cadre_choice_ps.Hooks(f(g(h())))`.
func (c *CadreChoicePSClient) Use(hooks ...Hook) {
	c.hooks.Cadre_Choice_PS = append(c.hooks.Cadre_Choice_PS, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cadre_choice_ps.Intercept(f(g(h())))`.
func (c *CadreChoicePSClient) Intercept(interceptors ...Interceptor) {
	c.inters.Cadre_Choice_PS = append(c.inters.Cadre_Choice_PS, interceptors...)
}

// Create returns a builder for creating a Cadre_Choice_PS entity.
func (c *CadreChoicePSClient) Create() *CadreChoicePSCreate {
	mutation := newCadreChoicePSMutation(c.config, OpCreate)
	return &CadreChoicePSCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cadre_Choice_PS entities.
func (c *CadreChoicePSClient) CreateBulk(builders ...*CadreChoicePSCreate) *CadreChoicePSCreateBulk {
	return &CadreChoicePSCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cadre_Choice_PS.
func (c *CadreChoicePSClient) Update() *CadreChoicePSUpdate {
	mutation := newCadreChoicePSMutation(c.config, OpUpdate)
	return &CadreChoicePSUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CadreChoicePSClient) UpdateOne(ccp *Cadre_Choice_PS) *CadreChoicePSUpdateOne {
	mutation := newCadreChoicePSMutation(c.config, OpUpdateOne, withCadre_Choice_PS(ccp))
	return &CadreChoicePSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CadreChoicePSClient) UpdateOneID(id int32) *CadreChoicePSUpdateOne {
	mutation := newCadreChoicePSMutation(c.config, OpUpdateOne, withCadre_Choice_PSID(id))
	return &CadreChoicePSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cadre_Choice_PS.
func (c *CadreChoicePSClient) Delete() *CadreChoicePSDelete {
	mutation := newCadreChoicePSMutation(c.config, OpDelete)
	return &CadreChoicePSDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CadreChoicePSClient) DeleteOne(ccp *Cadre_Choice_PS) *CadreChoicePSDeleteOne {
	return c.DeleteOneID(ccp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CadreChoicePSClient) DeleteOneID(id int32) *CadreChoicePSDeleteOne {
	builder := c.Delete().Where(cadre_choice_ps.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CadreChoicePSDeleteOne{builder}
}

// Query returns a query builder for Cadre_Choice_PS.
func (c *CadreChoicePSClient) Query() *CadreChoicePSQuery {
	return &CadreChoicePSQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCadreChoicePS},
		inters: c.Interceptors(),
	}
}

// Get returns a Cadre_Choice_PS entity by its id.
func (c *CadreChoicePSClient) Get(ctx context.Context, id int32) (*Cadre_Choice_PS, error) {
	return c.Query().Where(cadre_choice_ps.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CadreChoicePSClient) GetX(ctx context.Context, id int32) *Cadre_Choice_PS {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CadreChoicePSClient) Hooks() []Hook {
	return c.hooks.Cadre_Choice_PS
}

// Interceptors returns the client interceptors.
func (c *CadreChoicePSClient) Interceptors() []Interceptor {
	return c.inters.Cadre_Choice_PS
}

func (c *CadreChoicePSClient) mutate(ctx context.Context, m *CadreChoicePSMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CadreChoicePSCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CadreChoicePSUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CadreChoicePSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CadreChoicePSDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Cadre_Choice_PS mutation op: %q", m.Op())
	}
}

// CenterClient is a client for the Center schema.
type CenterClient struct {
	config
}

// NewCenterClient returns a client for the Center from the given config.
func NewCenterClient(c config) *CenterClient {
	return &CenterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `center.Hooks(f(g(h())))`.
func (c *CenterClient) Use(hooks ...Hook) {
	c.hooks.Center = append(c.hooks.Center, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `center.Intercept(f(g(h())))`.
func (c *CenterClient) Intercept(interceptors ...Interceptor) {
	c.inters.Center = append(c.inters.Center, interceptors...)
}

// Create returns a builder for creating a Center entity.
func (c *CenterClient) Create() *CenterCreate {
	mutation := newCenterMutation(c.config, OpCreate)
	return &CenterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Center entities.
func (c *CenterClient) CreateBulk(builders ...*CenterCreate) *CenterCreateBulk {
	return &CenterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Center.
func (c *CenterClient) Update() *CenterUpdate {
	mutation := newCenterMutation(c.config, OpUpdate)
	return &CenterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CenterClient) UpdateOne(ce *Center) *CenterUpdateOne {
	mutation := newCenterMutation(c.config, OpUpdateOne, withCenter(ce))
	return &CenterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CenterClient) UpdateOneID(id int32) *CenterUpdateOne {
	mutation := newCenterMutation(c.config, OpUpdateOne, withCenterID(id))
	return &CenterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Center.
func (c *CenterClient) Delete() *CenterDelete {
	mutation := newCenterMutation(c.config, OpDelete)
	return &CenterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CenterClient) DeleteOne(ce *Center) *CenterDeleteOne {
	return c.DeleteOneID(ce.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CenterClient) DeleteOneID(id int32) *CenterDeleteOne {
	builder := c.Delete().Where(center.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CenterDeleteOne{builder}
}

// Query returns a query builder for Center.
func (c *CenterClient) Query() *CenterQuery {
	return &CenterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCenter},
		inters: c.Interceptors(),
	}
}

// Get returns a Center entity by its id.
func (c *CenterClient) Get(ctx context.Context, id int32) (*Center, error) {
	return c.Query().Where(center.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CenterClient) GetX(ctx context.Context, id int32) *Center {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplications queries the applications edge of a Center.
func (c *CenterClient) QueryApplications(ce *Center) *ApplicationQuery {
	query := (&ApplicationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(center.Table, center.FieldID, id),
			sqlgraph.To(application.Table, application.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, center.ApplicationsTable, center.ApplicationsColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNodalOfficer queries the nodal_officer edge of a Center.
func (c *CenterClient) QueryNodalOfficer(ce *Center) *NodalOfficerQuery {
	query := (&NodalOfficerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(center.Table, center.FieldID, id),
			sqlgraph.To(nodalofficer.Table, nodalofficer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, center.NodalOfficerTable, center.NodalOfficerColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotification queries the notification edge of a Center.
func (c *CenterClient) QueryNotification(ce *Center) *NotificationQuery {
	query := (&NotificationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(center.Table, center.FieldID, id),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, center.NotificationTable, center.NotificationColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CenterClient) Hooks() []Hook {
	return c.hooks.Center
}

// Interceptors returns the client interceptors.
func (c *CenterClient) Interceptors() []Interceptor {
	return c.inters.Center
}

func (c *CenterClient) mutate(ctx context.Context, m *CenterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CenterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CenterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CenterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CenterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Center mutation op: %q", m.Op())
	}
}

// CircleMasterClient is a client for the CircleMaster schema.
type CircleMasterClient struct {
	config
}

// NewCircleMasterClient returns a client for the CircleMaster from the given config.
func NewCircleMasterClient(c config) *CircleMasterClient {
	return &CircleMasterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `circlemaster.Hooks(f(g(h())))`.
func (c *CircleMasterClient) Use(hooks ...Hook) {
	c.hooks.CircleMaster = append(c.hooks.CircleMaster, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `circlemaster.Intercept(f(g(h())))`.
func (c *CircleMasterClient) Intercept(interceptors ...Interceptor) {
	c.inters.CircleMaster = append(c.inters.CircleMaster, interceptors...)
}

// Create returns a builder for creating a CircleMaster entity.
func (c *CircleMasterClient) Create() *CircleMasterCreate {
	mutation := newCircleMasterMutation(c.config, OpCreate)
	return &CircleMasterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CircleMaster entities.
func (c *CircleMasterClient) CreateBulk(builders ...*CircleMasterCreate) *CircleMasterCreateBulk {
	return &CircleMasterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CircleMaster.
func (c *CircleMasterClient) Update() *CircleMasterUpdate {
	mutation := newCircleMasterMutation(c.config, OpUpdate)
	return &CircleMasterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CircleMasterClient) UpdateOne(cm *CircleMaster) *CircleMasterUpdateOne {
	mutation := newCircleMasterMutation(c.config, OpUpdateOne, withCircleMaster(cm))
	return &CircleMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CircleMasterClient) UpdateOneID(id int32) *CircleMasterUpdateOne {
	mutation := newCircleMasterMutation(c.config, OpUpdateOne, withCircleMasterID(id))
	return &CircleMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CircleMaster.
func (c *CircleMasterClient) Delete() *CircleMasterDelete {
	mutation := newCircleMasterMutation(c.config, OpDelete)
	return &CircleMasterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CircleMasterClient) DeleteOne(cm *CircleMaster) *CircleMasterDeleteOne {
	return c.DeleteOneID(cm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CircleMasterClient) DeleteOneID(id int32) *CircleMasterDeleteOne {
	builder := c.Delete().Where(circlemaster.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CircleMasterDeleteOne{builder}
}

// Query returns a query builder for CircleMaster.
func (c *CircleMasterClient) Query() *CircleMasterQuery {
	return &CircleMasterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCircleMaster},
		inters: c.Interceptors(),
	}
}

// Get returns a CircleMaster entity by its id.
func (c *CircleMasterClient) Get(ctx context.Context, id int32) (*CircleMaster, error) {
	return c.Query().Where(circlemaster.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CircleMasterClient) GetX(ctx context.Context, id int32) *CircleMaster {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRegionRef queries the region_ref edge of a CircleMaster.
func (c *CircleMasterClient) QueryRegionRef(cm *CircleMaster) *RegionMasterQuery {
	query := (&RegionMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(circlemaster.Table, circlemaster.FieldID, id),
			sqlgraph.To(regionmaster.Table, regionmaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, circlemaster.RegionRefTable, circlemaster.RegionRefColumn),
		)
		fromV = sqlgraph.Neighbors(cm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCircleRef queries the circle_ref edge of a CircleMaster.
func (c *CircleMasterClient) QueryCircleRef(cm *CircleMaster) *FacilityQuery {
	query := (&FacilityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(circlemaster.Table, circlemaster.FieldID, id),
			sqlgraph.To(facility.Table, facility.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, circlemaster.CircleRefTable, circlemaster.CircleRefColumn),
		)
		fromV = sqlgraph.Neighbors(cm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CircleMasterClient) Hooks() []Hook {
	return c.hooks.CircleMaster
}

// Interceptors returns the client interceptors.
func (c *CircleMasterClient) Interceptors() []Interceptor {
	return c.inters.CircleMaster
}

func (c *CircleMasterClient) mutate(ctx context.Context, m *CircleMasterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CircleMasterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CircleMasterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CircleMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CircleMasterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CircleMaster mutation op: %q", m.Op())
	}
}

// DirectorateUsersClient is a client for the DirectorateUsers schema.
type DirectorateUsersClient struct {
	config
}

// NewDirectorateUsersClient returns a client for the DirectorateUsers from the given config.
func NewDirectorateUsersClient(c config) *DirectorateUsersClient {
	return &DirectorateUsersClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `directorateusers.Hooks(f(g(h())))`.
func (c *DirectorateUsersClient) Use(hooks ...Hook) {
	c.hooks.DirectorateUsers = append(c.hooks.DirectorateUsers, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `directorateusers.Intercept(f(g(h())))`.
func (c *DirectorateUsersClient) Intercept(interceptors ...Interceptor) {
	c.inters.DirectorateUsers = append(c.inters.DirectorateUsers, interceptors...)
}

// Create returns a builder for creating a DirectorateUsers entity.
func (c *DirectorateUsersClient) Create() *DirectorateUsersCreate {
	mutation := newDirectorateUsersMutation(c.config, OpCreate)
	return &DirectorateUsersCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DirectorateUsers entities.
func (c *DirectorateUsersClient) CreateBulk(builders ...*DirectorateUsersCreate) *DirectorateUsersCreateBulk {
	return &DirectorateUsersCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DirectorateUsers.
func (c *DirectorateUsersClient) Update() *DirectorateUsersUpdate {
	mutation := newDirectorateUsersMutation(c.config, OpUpdate)
	return &DirectorateUsersUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DirectorateUsersClient) UpdateOne(du *DirectorateUsers) *DirectorateUsersUpdateOne {
	mutation := newDirectorateUsersMutation(c.config, OpUpdateOne, withDirectorateUsers(du))
	return &DirectorateUsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DirectorateUsersClient) UpdateOneID(id int32) *DirectorateUsersUpdateOne {
	mutation := newDirectorateUsersMutation(c.config, OpUpdateOne, withDirectorateUsersID(id))
	return &DirectorateUsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DirectorateUsers.
func (c *DirectorateUsersClient) Delete() *DirectorateUsersDelete {
	mutation := newDirectorateUsersMutation(c.config, OpDelete)
	return &DirectorateUsersDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DirectorateUsersClient) DeleteOne(du *DirectorateUsers) *DirectorateUsersDeleteOne {
	return c.DeleteOneID(du.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DirectorateUsersClient) DeleteOneID(id int32) *DirectorateUsersDeleteOne {
	builder := c.Delete().Where(directorateusers.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DirectorateUsersDeleteOne{builder}
}

// Query returns a query builder for DirectorateUsers.
func (c *DirectorateUsersClient) Query() *DirectorateUsersQuery {
	return &DirectorateUsersQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDirectorateUsers},
		inters: c.Interceptors(),
	}
}

// Get returns a DirectorateUsers entity by its id.
func (c *DirectorateUsersClient) Get(ctx context.Context, id int32) (*DirectorateUsers, error) {
	return c.Query().Where(directorateusers.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DirectorateUsersClient) GetX(ctx context.Context, id int32) *DirectorateUsers {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEmployeeUser queries the employee_user edge of a DirectorateUsers.
func (c *DirectorateUsersClient) QueryEmployeeUser(du *DirectorateUsers) *EmployeesQuery {
	query := (&EmployeesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := du.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(directorateusers.Table, directorateusers.FieldID, id),
			sqlgraph.To(employees.Table, employees.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, directorateusers.EmployeeUserTable, directorateusers.EmployeeUserColumn),
		)
		fromV = sqlgraph.Neighbors(du.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DirectorateUsersClient) Hooks() []Hook {
	return c.hooks.DirectorateUsers
}

// Interceptors returns the client interceptors.
func (c *DirectorateUsersClient) Interceptors() []Interceptor {
	return c.inters.DirectorateUsers
}

func (c *DirectorateUsersClient) mutate(ctx context.Context, m *DirectorateUsersMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DirectorateUsersCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DirectorateUsersUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DirectorateUsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DirectorateUsersDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DirectorateUsers mutation op: %q", m.Op())
	}
}

// DisabilityClient is a client for the Disability schema.
type DisabilityClient struct {
	config
}

// NewDisabilityClient returns a client for the Disability from the given config.
func NewDisabilityClient(c config) *DisabilityClient {
	return &DisabilityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `disability.Hooks(f(g(h())))`.
func (c *DisabilityClient) Use(hooks ...Hook) {
	c.hooks.Disability = append(c.hooks.Disability, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `disability.Intercept(f(g(h())))`.
func (c *DisabilityClient) Intercept(interceptors ...Interceptor) {
	c.inters.Disability = append(c.inters.Disability, interceptors...)
}

// Create returns a builder for creating a Disability entity.
func (c *DisabilityClient) Create() *DisabilityCreate {
	mutation := newDisabilityMutation(c.config, OpCreate)
	return &DisabilityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Disability entities.
func (c *DisabilityClient) CreateBulk(builders ...*DisabilityCreate) *DisabilityCreateBulk {
	return &DisabilityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Disability.
func (c *DisabilityClient) Update() *DisabilityUpdate {
	mutation := newDisabilityMutation(c.config, OpUpdate)
	return &DisabilityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DisabilityClient) UpdateOne(d *Disability) *DisabilityUpdateOne {
	mutation := newDisabilityMutation(c.config, OpUpdateOne, withDisability(d))
	return &DisabilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DisabilityClient) UpdateOneID(id int32) *DisabilityUpdateOne {
	mutation := newDisabilityMutation(c.config, OpUpdateOne, withDisabilityID(id))
	return &DisabilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Disability.
func (c *DisabilityClient) Delete() *DisabilityDelete {
	mutation := newDisabilityMutation(c.config, OpDelete)
	return &DisabilityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DisabilityClient) DeleteOne(d *Disability) *DisabilityDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DisabilityClient) DeleteOneID(id int32) *DisabilityDeleteOne {
	builder := c.Delete().Where(disability.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DisabilityDeleteOne{builder}
}

// Query returns a query builder for Disability.
func (c *DisabilityClient) Query() *DisabilityQuery {
	return &DisabilityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDisability},
		inters: c.Interceptors(),
	}
}

// Get returns a Disability entity by its id.
func (c *DisabilityClient) Get(ctx context.Context, id int32) (*Disability, error) {
	return c.Query().Where(disability.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DisabilityClient) GetX(ctx context.Context, id int32) *Disability {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDisRef queries the dis_ref edge of a Disability.
func (c *DisabilityClient) QueryDisRef(d *Disability) *ExamPapersQuery {
	query := (&ExamPapersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(disability.Table, disability.FieldID, id),
			sqlgraph.To(exampapers.Table, exampapers.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, disability.DisRefTable, disability.DisRefColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DisabilityClient) Hooks() []Hook {
	return c.hooks.Disability
}

// Interceptors returns the client interceptors.
func (c *DisabilityClient) Interceptors() []Interceptor {
	return c.inters.Disability
}

func (c *DisabilityClient) mutate(ctx context.Context, m *DisabilityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DisabilityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DisabilityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DisabilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DisabilityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Disability mutation op: %q", m.Op())
	}
}

// DivisionMasterClient is a client for the DivisionMaster schema.
type DivisionMasterClient struct {
	config
}

// NewDivisionMasterClient returns a client for the DivisionMaster from the given config.
func NewDivisionMasterClient(c config) *DivisionMasterClient {
	return &DivisionMasterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `divisionmaster.Hooks(f(g(h())))`.
func (c *DivisionMasterClient) Use(hooks ...Hook) {
	c.hooks.DivisionMaster = append(c.hooks.DivisionMaster, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `divisionmaster.Intercept(f(g(h())))`.
func (c *DivisionMasterClient) Intercept(interceptors ...Interceptor) {
	c.inters.DivisionMaster = append(c.inters.DivisionMaster, interceptors...)
}

// Create returns a builder for creating a DivisionMaster entity.
func (c *DivisionMasterClient) Create() *DivisionMasterCreate {
	mutation := newDivisionMasterMutation(c.config, OpCreate)
	return &DivisionMasterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DivisionMaster entities.
func (c *DivisionMasterClient) CreateBulk(builders ...*DivisionMasterCreate) *DivisionMasterCreateBulk {
	return &DivisionMasterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DivisionMaster.
func (c *DivisionMasterClient) Update() *DivisionMasterUpdate {
	mutation := newDivisionMasterMutation(c.config, OpUpdate)
	return &DivisionMasterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DivisionMasterClient) UpdateOne(dm *DivisionMaster) *DivisionMasterUpdateOne {
	mutation := newDivisionMasterMutation(c.config, OpUpdateOne, withDivisionMaster(dm))
	return &DivisionMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DivisionMasterClient) UpdateOneID(id int32) *DivisionMasterUpdateOne {
	mutation := newDivisionMasterMutation(c.config, OpUpdateOne, withDivisionMasterID(id))
	return &DivisionMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DivisionMaster.
func (c *DivisionMasterClient) Delete() *DivisionMasterDelete {
	mutation := newDivisionMasterMutation(c.config, OpDelete)
	return &DivisionMasterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DivisionMasterClient) DeleteOne(dm *DivisionMaster) *DivisionMasterDeleteOne {
	return c.DeleteOneID(dm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DivisionMasterClient) DeleteOneID(id int32) *DivisionMasterDeleteOne {
	builder := c.Delete().Where(divisionmaster.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DivisionMasterDeleteOne{builder}
}

// Query returns a query builder for DivisionMaster.
func (c *DivisionMasterClient) Query() *DivisionMasterQuery {
	return &DivisionMasterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDivisionMaster},
		inters: c.Interceptors(),
	}
}

// Get returns a DivisionMaster entity by its id.
func (c *DivisionMasterClient) Get(ctx context.Context, id int32) (*DivisionMaster, error) {
	return c.Query().Where(divisionmaster.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DivisionMasterClient) GetX(ctx context.Context, id int32) *DivisionMaster {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRegions queries the regions edge of a DivisionMaster.
func (c *DivisionMasterClient) QueryRegions(dm *DivisionMaster) *RegionMasterQuery {
	query := (&RegionMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(divisionmaster.Table, divisionmaster.FieldID, id),
			sqlgraph.To(regionmaster.Table, regionmaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, divisionmaster.RegionsTable, divisionmaster.RegionsColumn),
		)
		fromV = sqlgraph.Neighbors(dm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDivisionsRef queries the divisions_ref edge of a DivisionMaster.
func (c *DivisionMasterClient) QueryDivisionsRef(dm *DivisionMaster) *FacilityQuery {
	query := (&FacilityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(divisionmaster.Table, divisionmaster.FieldID, id),
			sqlgraph.To(facility.Table, facility.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, divisionmaster.DivisionsRefTable, divisionmaster.DivisionsRefColumn),
		)
		fromV = sqlgraph.Neighbors(dm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DivisionMasterClient) Hooks() []Hook {
	return c.hooks.DivisionMaster
}

// Interceptors returns the client interceptors.
func (c *DivisionMasterClient) Interceptors() []Interceptor {
	return c.inters.DivisionMaster
}

func (c *DivisionMasterClient) mutate(ctx context.Context, m *DivisionMasterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DivisionMasterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DivisionMasterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DivisionMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DivisionMasterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DivisionMaster mutation op: %q", m.Op())
	}
}

// DivisionChoicePAClient is a client for the Division_Choice_PA schema.
type DivisionChoicePAClient struct {
	config
}

// NewDivisionChoicePAClient returns a client for the Division_Choice_PA from the given config.
func NewDivisionChoicePAClient(c config) *DivisionChoicePAClient {
	return &DivisionChoicePAClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `division_choice_pa.Hooks(f(g(h())))`.
func (c *DivisionChoicePAClient) Use(hooks ...Hook) {
	c.hooks.Division_Choice_PA = append(c.hooks.Division_Choice_PA, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `division_choice_pa.Intercept(f(g(h())))`.
func (c *DivisionChoicePAClient) Intercept(interceptors ...Interceptor) {
	c.inters.Division_Choice_PA = append(c.inters.Division_Choice_PA, interceptors...)
}

// Create returns a builder for creating a Division_Choice_PA entity.
func (c *DivisionChoicePAClient) Create() *DivisionChoicePACreate {
	mutation := newDivisionChoicePAMutation(c.config, OpCreate)
	return &DivisionChoicePACreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Division_Choice_PA entities.
func (c *DivisionChoicePAClient) CreateBulk(builders ...*DivisionChoicePACreate) *DivisionChoicePACreateBulk {
	return &DivisionChoicePACreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Division_Choice_PA.
func (c *DivisionChoicePAClient) Update() *DivisionChoicePAUpdate {
	mutation := newDivisionChoicePAMutation(c.config, OpUpdate)
	return &DivisionChoicePAUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DivisionChoicePAClient) UpdateOne(dcp *Division_Choice_PA) *DivisionChoicePAUpdateOne {
	mutation := newDivisionChoicePAMutation(c.config, OpUpdateOne, withDivision_Choice_PA(dcp))
	return &DivisionChoicePAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DivisionChoicePAClient) UpdateOneID(id int32) *DivisionChoicePAUpdateOne {
	mutation := newDivisionChoicePAMutation(c.config, OpUpdateOne, withDivision_Choice_PAID(id))
	return &DivisionChoicePAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Division_Choice_PA.
func (c *DivisionChoicePAClient) Delete() *DivisionChoicePADelete {
	mutation := newDivisionChoicePAMutation(c.config, OpDelete)
	return &DivisionChoicePADelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DivisionChoicePAClient) DeleteOne(dcp *Division_Choice_PA) *DivisionChoicePADeleteOne {
	return c.DeleteOneID(dcp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DivisionChoicePAClient) DeleteOneID(id int32) *DivisionChoicePADeleteOne {
	builder := c.Delete().Where(division_choice_pa.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DivisionChoicePADeleteOne{builder}
}

// Query returns a query builder for Division_Choice_PA.
func (c *DivisionChoicePAClient) Query() *DivisionChoicePAQuery {
	return &DivisionChoicePAQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDivisionChoicePA},
		inters: c.Interceptors(),
	}
}

// Get returns a Division_Choice_PA entity by its id.
func (c *DivisionChoicePAClient) Get(ctx context.Context, id int32) (*Division_Choice_PA, error) {
	return c.Query().Where(division_choice_pa.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DivisionChoicePAClient) GetX(ctx context.Context, id int32) *Division_Choice_PA {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DivisionChoicePAClient) Hooks() []Hook {
	return c.hooks.Division_Choice_PA
}

// Interceptors returns the client interceptors.
func (c *DivisionChoicePAClient) Interceptors() []Interceptor {
	return c.inters.Division_Choice_PA
}

func (c *DivisionChoicePAClient) mutate(ctx context.Context, m *DivisionChoicePAMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DivisionChoicePACreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DivisionChoicePAUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DivisionChoicePAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DivisionChoicePADelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Division_Choice_PA mutation op: %q", m.Op())
	}
}

// DivisionChoicePMClient is a client for the Division_Choice_PM schema.
type DivisionChoicePMClient struct {
	config
}

// NewDivisionChoicePMClient returns a client for the Division_Choice_PM from the given config.
func NewDivisionChoicePMClient(c config) *DivisionChoicePMClient {
	return &DivisionChoicePMClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `division_choice_pm.Hooks(f(g(h())))`.
func (c *DivisionChoicePMClient) Use(hooks ...Hook) {
	c.hooks.Division_Choice_PM = append(c.hooks.Division_Choice_PM, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `division_choice_pm.Intercept(f(g(h())))`.
func (c *DivisionChoicePMClient) Intercept(interceptors ...Interceptor) {
	c.inters.Division_Choice_PM = append(c.inters.Division_Choice_PM, interceptors...)
}

// Create returns a builder for creating a Division_Choice_PM entity.
func (c *DivisionChoicePMClient) Create() *DivisionChoicePMCreate {
	mutation := newDivisionChoicePMMutation(c.config, OpCreate)
	return &DivisionChoicePMCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Division_Choice_PM entities.
func (c *DivisionChoicePMClient) CreateBulk(builders ...*DivisionChoicePMCreate) *DivisionChoicePMCreateBulk {
	return &DivisionChoicePMCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Division_Choice_PM.
func (c *DivisionChoicePMClient) Update() *DivisionChoicePMUpdate {
	mutation := newDivisionChoicePMMutation(c.config, OpUpdate)
	return &DivisionChoicePMUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DivisionChoicePMClient) UpdateOne(dcp *Division_Choice_PM) *DivisionChoicePMUpdateOne {
	mutation := newDivisionChoicePMMutation(c.config, OpUpdateOne, withDivision_Choice_PM(dcp))
	return &DivisionChoicePMUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DivisionChoicePMClient) UpdateOneID(id int32) *DivisionChoicePMUpdateOne {
	mutation := newDivisionChoicePMMutation(c.config, OpUpdateOne, withDivision_Choice_PMID(id))
	return &DivisionChoicePMUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Division_Choice_PM.
func (c *DivisionChoicePMClient) Delete() *DivisionChoicePMDelete {
	mutation := newDivisionChoicePMMutation(c.config, OpDelete)
	return &DivisionChoicePMDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DivisionChoicePMClient) DeleteOne(dcp *Division_Choice_PM) *DivisionChoicePMDeleteOne {
	return c.DeleteOneID(dcp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DivisionChoicePMClient) DeleteOneID(id int32) *DivisionChoicePMDeleteOne {
	builder := c.Delete().Where(division_choice_pm.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DivisionChoicePMDeleteOne{builder}
}

// Query returns a query builder for Division_Choice_PM.
func (c *DivisionChoicePMClient) Query() *DivisionChoicePMQuery {
	return &DivisionChoicePMQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDivisionChoicePM},
		inters: c.Interceptors(),
	}
}

// Get returns a Division_Choice_PM entity by its id.
func (c *DivisionChoicePMClient) Get(ctx context.Context, id int32) (*Division_Choice_PM, error) {
	return c.Query().Where(division_choice_pm.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DivisionChoicePMClient) GetX(ctx context.Context, id int32) *Division_Choice_PM {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DivisionChoicePMClient) Hooks() []Hook {
	return c.hooks.Division_Choice_PM
}

// Interceptors returns the client interceptors.
func (c *DivisionChoicePMClient) Interceptors() []Interceptor {
	return c.inters.Division_Choice_PM
}

func (c *DivisionChoicePMClient) mutate(ctx context.Context, m *DivisionChoicePMMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DivisionChoicePMCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DivisionChoicePMUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DivisionChoicePMUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DivisionChoicePMDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Division_Choice_PM mutation op: %q", m.Op())
	}
}

// DivisionChoicePSClient is a client for the Division_Choice_PS schema.
type DivisionChoicePSClient struct {
	config
}

// NewDivisionChoicePSClient returns a client for the Division_Choice_PS from the given config.
func NewDivisionChoicePSClient(c config) *DivisionChoicePSClient {
	return &DivisionChoicePSClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `division_choice_ps.Hooks(f(g(h())))`.
func (c *DivisionChoicePSClient) Use(hooks ...Hook) {
	c.hooks.Division_Choice_PS = append(c.hooks.Division_Choice_PS, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `division_choice_ps.Intercept(f(g(h())))`.
func (c *DivisionChoicePSClient) Intercept(interceptors ...Interceptor) {
	c.inters.Division_Choice_PS = append(c.inters.Division_Choice_PS, interceptors...)
}

// Create returns a builder for creating a Division_Choice_PS entity.
func (c *DivisionChoicePSClient) Create() *DivisionChoicePSCreate {
	mutation := newDivisionChoicePSMutation(c.config, OpCreate)
	return &DivisionChoicePSCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Division_Choice_PS entities.
func (c *DivisionChoicePSClient) CreateBulk(builders ...*DivisionChoicePSCreate) *DivisionChoicePSCreateBulk {
	return &DivisionChoicePSCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Division_Choice_PS.
func (c *DivisionChoicePSClient) Update() *DivisionChoicePSUpdate {
	mutation := newDivisionChoicePSMutation(c.config, OpUpdate)
	return &DivisionChoicePSUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DivisionChoicePSClient) UpdateOne(dcp *Division_Choice_PS) *DivisionChoicePSUpdateOne {
	mutation := newDivisionChoicePSMutation(c.config, OpUpdateOne, withDivision_Choice_PS(dcp))
	return &DivisionChoicePSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DivisionChoicePSClient) UpdateOneID(id int32) *DivisionChoicePSUpdateOne {
	mutation := newDivisionChoicePSMutation(c.config, OpUpdateOne, withDivision_Choice_PSID(id))
	return &DivisionChoicePSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Division_Choice_PS.
func (c *DivisionChoicePSClient) Delete() *DivisionChoicePSDelete {
	mutation := newDivisionChoicePSMutation(c.config, OpDelete)
	return &DivisionChoicePSDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DivisionChoicePSClient) DeleteOne(dcp *Division_Choice_PS) *DivisionChoicePSDeleteOne {
	return c.DeleteOneID(dcp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DivisionChoicePSClient) DeleteOneID(id int32) *DivisionChoicePSDeleteOne {
	builder := c.Delete().Where(division_choice_ps.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DivisionChoicePSDeleteOne{builder}
}

// Query returns a query builder for Division_Choice_PS.
func (c *DivisionChoicePSClient) Query() *DivisionChoicePSQuery {
	return &DivisionChoicePSQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDivisionChoicePS},
		inters: c.Interceptors(),
	}
}

// Get returns a Division_Choice_PS entity by its id.
func (c *DivisionChoicePSClient) Get(ctx context.Context, id int32) (*Division_Choice_PS, error) {
	return c.Query().Where(division_choice_ps.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DivisionChoicePSClient) GetX(ctx context.Context, id int32) *Division_Choice_PS {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DivisionChoicePSClient) Hooks() []Hook {
	return c.hooks.Division_Choice_PS
}

// Interceptors returns the client interceptors.
func (c *DivisionChoicePSClient) Interceptors() []Interceptor {
	return c.inters.Division_Choice_PS
}

func (c *DivisionChoicePSClient) mutate(ctx context.Context, m *DivisionChoicePSMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DivisionChoicePSCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DivisionChoicePSUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DivisionChoicePSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DivisionChoicePSDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Division_Choice_PS mutation op: %q", m.Op())
	}
}

// EligibilityMasterClient is a client for the EligibilityMaster schema.
type EligibilityMasterClient struct {
	config
}

// NewEligibilityMasterClient returns a client for the EligibilityMaster from the given config.
func NewEligibilityMasterClient(c config) *EligibilityMasterClient {
	return &EligibilityMasterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `eligibilitymaster.Hooks(f(g(h())))`.
func (c *EligibilityMasterClient) Use(hooks ...Hook) {
	c.hooks.EligibilityMaster = append(c.hooks.EligibilityMaster, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `eligibilitymaster.Intercept(f(g(h())))`.
func (c *EligibilityMasterClient) Intercept(interceptors ...Interceptor) {
	c.inters.EligibilityMaster = append(c.inters.EligibilityMaster, interceptors...)
}

// Create returns a builder for creating a EligibilityMaster entity.
func (c *EligibilityMasterClient) Create() *EligibilityMasterCreate {
	mutation := newEligibilityMasterMutation(c.config, OpCreate)
	return &EligibilityMasterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EligibilityMaster entities.
func (c *EligibilityMasterClient) CreateBulk(builders ...*EligibilityMasterCreate) *EligibilityMasterCreateBulk {
	return &EligibilityMasterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EligibilityMaster.
func (c *EligibilityMasterClient) Update() *EligibilityMasterUpdate {
	mutation := newEligibilityMasterMutation(c.config, OpUpdate)
	return &EligibilityMasterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EligibilityMasterClient) UpdateOne(em *EligibilityMaster) *EligibilityMasterUpdateOne {
	mutation := newEligibilityMasterMutation(c.config, OpUpdateOne, withEligibilityMaster(em))
	return &EligibilityMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EligibilityMasterClient) UpdateOneID(id int32) *EligibilityMasterUpdateOne {
	mutation := newEligibilityMasterMutation(c.config, OpUpdateOne, withEligibilityMasterID(id))
	return &EligibilityMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EligibilityMaster.
func (c *EligibilityMasterClient) Delete() *EligibilityMasterDelete {
	mutation := newEligibilityMasterMutation(c.config, OpDelete)
	return &EligibilityMasterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EligibilityMasterClient) DeleteOne(em *EligibilityMaster) *EligibilityMasterDeleteOne {
	return c.DeleteOneID(em.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EligibilityMasterClient) DeleteOneID(id int32) *EligibilityMasterDeleteOne {
	builder := c.Delete().Where(eligibilitymaster.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EligibilityMasterDeleteOne{builder}
}

// Query returns a query builder for EligibilityMaster.
func (c *EligibilityMasterClient) Query() *EligibilityMasterQuery {
	return &EligibilityMasterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEligibilityMaster},
		inters: c.Interceptors(),
	}
}

// Get returns a EligibilityMaster entity by its id.
func (c *EligibilityMasterClient) Get(ctx context.Context, id int32) (*EligibilityMaster, error) {
	return c.Query().Where(eligibilitymaster.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EligibilityMasterClient) GetX(ctx context.Context, id int32) *EligibilityMaster {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNotifications queries the Notifications edge of a EligibilityMaster.
func (c *EligibilityMasterClient) QueryNotifications(em *EligibilityMaster) *NotificationQuery {
	query := (&NotificationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := em.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eligibilitymaster.Table, eligibilitymaster.FieldID, id),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, eligibilitymaster.NotificationsTable, eligibilitymaster.NotificationsColumn),
		)
		fromV = sqlgraph.Neighbors(em.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCategoryEligibility queries the CategoryEligibility edge of a EligibilityMaster.
func (c *EligibilityMasterClient) QueryCategoryEligibility(em *EligibilityMaster) *EmployeeCategoryQuery {
	query := (&EmployeeCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := em.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eligibilitymaster.Table, eligibilitymaster.FieldID, id),
			sqlgraph.To(employeecategory.Table, employeecategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, eligibilitymaster.CategoryEligibilityTable, eligibilitymaster.CategoryEligibilityColumn),
		)
		fromV = sqlgraph.Neighbors(em.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPostEligibility queries the PostEligibility edge of a EligibilityMaster.
func (c *EligibilityMasterClient) QueryPostEligibility(em *EligibilityMaster) *EmployeePostsQuery {
	query := (&EmployeePostsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := em.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eligibilitymaster.Table, eligibilitymaster.FieldID, id),
			sqlgraph.To(employeeposts.Table, employeeposts.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, eligibilitymaster.PostEligibilityTable, eligibilitymaster.PostEligibilityColumn),
		)
		fromV = sqlgraph.Neighbors(em.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamPaperEligibility queries the ExamPaper_Eligibility edge of a EligibilityMaster.
func (c *EligibilityMasterClient) QueryExamPaperEligibility(em *EligibilityMaster) *ExamPapersQuery {
	query := (&ExamPapersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := em.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eligibilitymaster.Table, eligibilitymaster.FieldID, id),
			sqlgraph.To(exampapers.Table, exampapers.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, eligibilitymaster.ExamPaperEligibilityTable, eligibilitymaster.ExamPaperEligibilityColumn),
		)
		fromV = sqlgraph.Neighbors(em.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamEligibility queries the Exam_Eligibility edge of a EligibilityMaster.
func (c *EligibilityMasterClient) QueryExamEligibility(em *EligibilityMaster) *ExamQuery {
	query := (&ExamClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := em.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eligibilitymaster.Table, eligibilitymaster.FieldID, id),
			sqlgraph.To(exam.Table, exam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, eligibilitymaster.ExamEligibilityTable, eligibilitymaster.ExamEligibilityColumn),
		)
		fromV = sqlgraph.Neighbors(em.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EligibilityMasterClient) Hooks() []Hook {
	return c.hooks.EligibilityMaster
}

// Interceptors returns the client interceptors.
func (c *EligibilityMasterClient) Interceptors() []Interceptor {
	return c.inters.EligibilityMaster
}

func (c *EligibilityMasterClient) mutate(ctx context.Context, m *EligibilityMasterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EligibilityMasterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EligibilityMasterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EligibilityMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EligibilityMasterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EligibilityMaster mutation op: %q", m.Op())
	}
}

// EmployeeCadreClient is a client for the EmployeeCadre schema.
type EmployeeCadreClient struct {
	config
}

// NewEmployeeCadreClient returns a client for the EmployeeCadre from the given config.
func NewEmployeeCadreClient(c config) *EmployeeCadreClient {
	return &EmployeeCadreClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employeecadre.Hooks(f(g(h())))`.
func (c *EmployeeCadreClient) Use(hooks ...Hook) {
	c.hooks.EmployeeCadre = append(c.hooks.EmployeeCadre, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `employeecadre.Intercept(f(g(h())))`.
func (c *EmployeeCadreClient) Intercept(interceptors ...Interceptor) {
	c.inters.EmployeeCadre = append(c.inters.EmployeeCadre, interceptors...)
}

// Create returns a builder for creating a EmployeeCadre entity.
func (c *EmployeeCadreClient) Create() *EmployeeCadreCreate {
	mutation := newEmployeeCadreMutation(c.config, OpCreate)
	return &EmployeeCadreCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EmployeeCadre entities.
func (c *EmployeeCadreClient) CreateBulk(builders ...*EmployeeCadreCreate) *EmployeeCadreCreateBulk {
	return &EmployeeCadreCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EmployeeCadre.
func (c *EmployeeCadreClient) Update() *EmployeeCadreUpdate {
	mutation := newEmployeeCadreMutation(c.config, OpUpdate)
	return &EmployeeCadreUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeeCadreClient) UpdateOne(ec *EmployeeCadre) *EmployeeCadreUpdateOne {
	mutation := newEmployeeCadreMutation(c.config, OpUpdateOne, withEmployeeCadre(ec))
	return &EmployeeCadreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeeCadreClient) UpdateOneID(id int32) *EmployeeCadreUpdateOne {
	mutation := newEmployeeCadreMutation(c.config, OpUpdateOne, withEmployeeCadreID(id))
	return &EmployeeCadreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EmployeeCadre.
func (c *EmployeeCadreClient) Delete() *EmployeeCadreDelete {
	mutation := newEmployeeCadreMutation(c.config, OpDelete)
	return &EmployeeCadreDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmployeeCadreClient) DeleteOne(ec *EmployeeCadre) *EmployeeCadreDeleteOne {
	return c.DeleteOneID(ec.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmployeeCadreClient) DeleteOneID(id int32) *EmployeeCadreDeleteOne {
	builder := c.Delete().Where(employeecadre.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeeCadreDeleteOne{builder}
}

// Query returns a query builder for EmployeeCadre.
func (c *EmployeeCadreClient) Query() *EmployeeCadreQuery {
	return &EmployeeCadreQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmployeeCadre},
		inters: c.Interceptors(),
	}
}

// Get returns a EmployeeCadre entity by its id.
func (c *EmployeeCadreClient) Get(ctx context.Context, id int32) (*EmployeeCadre, error) {
	return c.Query().Where(employeecadre.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeeCadreClient) GetX(ctx context.Context, id int32) *EmployeeCadre {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EmployeeCadreClient) Hooks() []Hook {
	return c.hooks.EmployeeCadre
}

// Interceptors returns the client interceptors.
func (c *EmployeeCadreClient) Interceptors() []Interceptor {
	return c.inters.EmployeeCadre
}

func (c *EmployeeCadreClient) mutate(ctx context.Context, m *EmployeeCadreMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmployeeCadreCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmployeeCadreUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmployeeCadreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmployeeCadreDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EmployeeCadre mutation op: %q", m.Op())
	}
}

// EmployeeCategoryClient is a client for the EmployeeCategory schema.
type EmployeeCategoryClient struct {
	config
}

// NewEmployeeCategoryClient returns a client for the EmployeeCategory from the given config.
func NewEmployeeCategoryClient(c config) *EmployeeCategoryClient {
	return &EmployeeCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employeecategory.Hooks(f(g(h())))`.
func (c *EmployeeCategoryClient) Use(hooks ...Hook) {
	c.hooks.EmployeeCategory = append(c.hooks.EmployeeCategory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `employeecategory.Intercept(f(g(h())))`.
func (c *EmployeeCategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.EmployeeCategory = append(c.inters.EmployeeCategory, interceptors...)
}

// Create returns a builder for creating a EmployeeCategory entity.
func (c *EmployeeCategoryClient) Create() *EmployeeCategoryCreate {
	mutation := newEmployeeCategoryMutation(c.config, OpCreate)
	return &EmployeeCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EmployeeCategory entities.
func (c *EmployeeCategoryClient) CreateBulk(builders ...*EmployeeCategoryCreate) *EmployeeCategoryCreateBulk {
	return &EmployeeCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EmployeeCategory.
func (c *EmployeeCategoryClient) Update() *EmployeeCategoryUpdate {
	mutation := newEmployeeCategoryMutation(c.config, OpUpdate)
	return &EmployeeCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeeCategoryClient) UpdateOne(ec *EmployeeCategory) *EmployeeCategoryUpdateOne {
	mutation := newEmployeeCategoryMutation(c.config, OpUpdateOne, withEmployeeCategory(ec))
	return &EmployeeCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeeCategoryClient) UpdateOneID(id int32) *EmployeeCategoryUpdateOne {
	mutation := newEmployeeCategoryMutation(c.config, OpUpdateOne, withEmployeeCategoryID(id))
	return &EmployeeCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EmployeeCategory.
func (c *EmployeeCategoryClient) Delete() *EmployeeCategoryDelete {
	mutation := newEmployeeCategoryMutation(c.config, OpDelete)
	return &EmployeeCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmployeeCategoryClient) DeleteOne(ec *EmployeeCategory) *EmployeeCategoryDeleteOne {
	return c.DeleteOneID(ec.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmployeeCategoryClient) DeleteOneID(id int32) *EmployeeCategoryDeleteOne {
	builder := c.Delete().Where(employeecategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeeCategoryDeleteOne{builder}
}

// Query returns a query builder for EmployeeCategory.
func (c *EmployeeCategoryClient) Query() *EmployeeCategoryQuery {
	return &EmployeeCategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmployeeCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a EmployeeCategory entity by its id.
func (c *EmployeeCategoryClient) Get(ctx context.Context, id int32) (*EmployeeCategory, error) {
	return c.Query().Where(employeecategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeeCategoryClient) GetX(ctx context.Context, id int32) *EmployeeCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EmployeeCategoryClient) Hooks() []Hook {
	return c.hooks.EmployeeCategory
}

// Interceptors returns the client interceptors.
func (c *EmployeeCategoryClient) Interceptors() []Interceptor {
	return c.inters.EmployeeCategory
}

func (c *EmployeeCategoryClient) mutate(ctx context.Context, m *EmployeeCategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmployeeCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmployeeCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmployeeCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmployeeCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EmployeeCategory mutation op: %q", m.Op())
	}
}

// EmployeeDesignationClient is a client for the EmployeeDesignation schema.
type EmployeeDesignationClient struct {
	config
}

// NewEmployeeDesignationClient returns a client for the EmployeeDesignation from the given config.
func NewEmployeeDesignationClient(c config) *EmployeeDesignationClient {
	return &EmployeeDesignationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employeedesignation.Hooks(f(g(h())))`.
func (c *EmployeeDesignationClient) Use(hooks ...Hook) {
	c.hooks.EmployeeDesignation = append(c.hooks.EmployeeDesignation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `employeedesignation.Intercept(f(g(h())))`.
func (c *EmployeeDesignationClient) Intercept(interceptors ...Interceptor) {
	c.inters.EmployeeDesignation = append(c.inters.EmployeeDesignation, interceptors...)
}

// Create returns a builder for creating a EmployeeDesignation entity.
func (c *EmployeeDesignationClient) Create() *EmployeeDesignationCreate {
	mutation := newEmployeeDesignationMutation(c.config, OpCreate)
	return &EmployeeDesignationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EmployeeDesignation entities.
func (c *EmployeeDesignationClient) CreateBulk(builders ...*EmployeeDesignationCreate) *EmployeeDesignationCreateBulk {
	return &EmployeeDesignationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EmployeeDesignation.
func (c *EmployeeDesignationClient) Update() *EmployeeDesignationUpdate {
	mutation := newEmployeeDesignationMutation(c.config, OpUpdate)
	return &EmployeeDesignationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeeDesignationClient) UpdateOne(ed *EmployeeDesignation) *EmployeeDesignationUpdateOne {
	mutation := newEmployeeDesignationMutation(c.config, OpUpdateOne, withEmployeeDesignation(ed))
	return &EmployeeDesignationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeeDesignationClient) UpdateOneID(id int32) *EmployeeDesignationUpdateOne {
	mutation := newEmployeeDesignationMutation(c.config, OpUpdateOne, withEmployeeDesignationID(id))
	return &EmployeeDesignationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EmployeeDesignation.
func (c *EmployeeDesignationClient) Delete() *EmployeeDesignationDelete {
	mutation := newEmployeeDesignationMutation(c.config, OpDelete)
	return &EmployeeDesignationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmployeeDesignationClient) DeleteOne(ed *EmployeeDesignation) *EmployeeDesignationDeleteOne {
	return c.DeleteOneID(ed.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmployeeDesignationClient) DeleteOneID(id int32) *EmployeeDesignationDeleteOne {
	builder := c.Delete().Where(employeedesignation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeeDesignationDeleteOne{builder}
}

// Query returns a query builder for EmployeeDesignation.
func (c *EmployeeDesignationClient) Query() *EmployeeDesignationQuery {
	return &EmployeeDesignationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmployeeDesignation},
		inters: c.Interceptors(),
	}
}

// Get returns a EmployeeDesignation entity by its id.
func (c *EmployeeDesignationClient) Get(ctx context.Context, id int32) (*EmployeeDesignation, error) {
	return c.Query().Where(employeedesignation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeeDesignationClient) GetX(ctx context.Context, id int32) *EmployeeDesignation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EmployeeDesignationClient) Hooks() []Hook {
	return c.hooks.EmployeeDesignation
}

// Interceptors returns the client interceptors.
func (c *EmployeeDesignationClient) Interceptors() []Interceptor {
	return c.inters.EmployeeDesignation
}

func (c *EmployeeDesignationClient) mutate(ctx context.Context, m *EmployeeDesignationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmployeeDesignationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmployeeDesignationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmployeeDesignationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmployeeDesignationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EmployeeDesignation mutation op: %q", m.Op())
	}
}

// EmployeeMasterClient is a client for the EmployeeMaster schema.
type EmployeeMasterClient struct {
	config
}

// NewEmployeeMasterClient returns a client for the EmployeeMaster from the given config.
func NewEmployeeMasterClient(c config) *EmployeeMasterClient {
	return &EmployeeMasterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employeemaster.Hooks(f(g(h())))`.
func (c *EmployeeMasterClient) Use(hooks ...Hook) {
	c.hooks.EmployeeMaster = append(c.hooks.EmployeeMaster, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `employeemaster.Intercept(f(g(h())))`.
func (c *EmployeeMasterClient) Intercept(interceptors ...Interceptor) {
	c.inters.EmployeeMaster = append(c.inters.EmployeeMaster, interceptors...)
}

// Create returns a builder for creating a EmployeeMaster entity.
func (c *EmployeeMasterClient) Create() *EmployeeMasterCreate {
	mutation := newEmployeeMasterMutation(c.config, OpCreate)
	return &EmployeeMasterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EmployeeMaster entities.
func (c *EmployeeMasterClient) CreateBulk(builders ...*EmployeeMasterCreate) *EmployeeMasterCreateBulk {
	return &EmployeeMasterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EmployeeMaster.
func (c *EmployeeMasterClient) Update() *EmployeeMasterUpdate {
	mutation := newEmployeeMasterMutation(c.config, OpUpdate)
	return &EmployeeMasterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeeMasterClient) UpdateOne(em *EmployeeMaster) *EmployeeMasterUpdateOne {
	mutation := newEmployeeMasterMutation(c.config, OpUpdateOne, withEmployeeMaster(em))
	return &EmployeeMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeeMasterClient) UpdateOneID(id int64) *EmployeeMasterUpdateOne {
	mutation := newEmployeeMasterMutation(c.config, OpUpdateOne, withEmployeeMasterID(id))
	return &EmployeeMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EmployeeMaster.
func (c *EmployeeMasterClient) Delete() *EmployeeMasterDelete {
	mutation := newEmployeeMasterMutation(c.config, OpDelete)
	return &EmployeeMasterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmployeeMasterClient) DeleteOne(em *EmployeeMaster) *EmployeeMasterDeleteOne {
	return c.DeleteOneID(em.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmployeeMasterClient) DeleteOneID(id int64) *EmployeeMasterDeleteOne {
	builder := c.Delete().Where(employeemaster.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeeMasterDeleteOne{builder}
}

// Query returns a query builder for EmployeeMaster.
func (c *EmployeeMasterClient) Query() *EmployeeMasterQuery {
	return &EmployeeMasterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmployeeMaster},
		inters: c.Interceptors(),
	}
}

// Get returns a EmployeeMaster entity by its id.
func (c *EmployeeMasterClient) Get(ctx context.Context, id int64) (*EmployeeMaster, error) {
	return c.Query().Where(employeemaster.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeeMasterClient) GetX(ctx context.Context, id int64) *EmployeeMaster {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsermasterRef queries the UsermasterRef edge of a EmployeeMaster.
func (c *EmployeeMasterClient) QueryUsermasterRef(em *EmployeeMaster) *UserMasterQuery {
	query := (&UserMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := em.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employeemaster.Table, employeemaster.FieldID, id),
			sqlgraph.To(usermaster.Table, usermaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employeemaster.UsermasterRefTable, employeemaster.UsermasterRefColumn),
		)
		fromV = sqlgraph.Neighbors(em.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmpRef queries the Emp_Ref edge of a EmployeeMaster.
func (c *EmployeeMasterClient) QueryEmpRef(em *EmployeeMaster) *ExamApplicationsPSQuery {
	query := (&ExamApplicationsPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := em.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employeemaster.Table, employeemaster.FieldID, id),
			sqlgraph.To(exam_applications_ps.Table, exam_applications_ps.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employeemaster.EmpRefTable, employeemaster.EmpRefColumn),
		)
		fromV = sqlgraph.Neighbors(em.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmployeeMasterClient) Hooks() []Hook {
	return c.hooks.EmployeeMaster
}

// Interceptors returns the client interceptors.
func (c *EmployeeMasterClient) Interceptors() []Interceptor {
	return c.inters.EmployeeMaster
}

func (c *EmployeeMasterClient) mutate(ctx context.Context, m *EmployeeMasterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmployeeMasterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmployeeMasterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmployeeMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmployeeMasterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EmployeeMaster mutation op: %q", m.Op())
	}
}

// EmployeePostsClient is a client for the EmployeePosts schema.
type EmployeePostsClient struct {
	config
}

// NewEmployeePostsClient returns a client for the EmployeePosts from the given config.
func NewEmployeePostsClient(c config) *EmployeePostsClient {
	return &EmployeePostsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employeeposts.Hooks(f(g(h())))`.
func (c *EmployeePostsClient) Use(hooks ...Hook) {
	c.hooks.EmployeePosts = append(c.hooks.EmployeePosts, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `employeeposts.Intercept(f(g(h())))`.
func (c *EmployeePostsClient) Intercept(interceptors ...Interceptor) {
	c.inters.EmployeePosts = append(c.inters.EmployeePosts, interceptors...)
}

// Create returns a builder for creating a EmployeePosts entity.
func (c *EmployeePostsClient) Create() *EmployeePostsCreate {
	mutation := newEmployeePostsMutation(c.config, OpCreate)
	return &EmployeePostsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EmployeePosts entities.
func (c *EmployeePostsClient) CreateBulk(builders ...*EmployeePostsCreate) *EmployeePostsCreateBulk {
	return &EmployeePostsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EmployeePosts.
func (c *EmployeePostsClient) Update() *EmployeePostsUpdate {
	mutation := newEmployeePostsMutation(c.config, OpUpdate)
	return &EmployeePostsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeePostsClient) UpdateOne(ep *EmployeePosts) *EmployeePostsUpdateOne {
	mutation := newEmployeePostsMutation(c.config, OpUpdateOne, withEmployeePosts(ep))
	return &EmployeePostsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeePostsClient) UpdateOneID(id int32) *EmployeePostsUpdateOne {
	mutation := newEmployeePostsMutation(c.config, OpUpdateOne, withEmployeePostsID(id))
	return &EmployeePostsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EmployeePosts.
func (c *EmployeePostsClient) Delete() *EmployeePostsDelete {
	mutation := newEmployeePostsMutation(c.config, OpDelete)
	return &EmployeePostsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmployeePostsClient) DeleteOne(ep *EmployeePosts) *EmployeePostsDeleteOne {
	return c.DeleteOneID(ep.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmployeePostsClient) DeleteOneID(id int32) *EmployeePostsDeleteOne {
	builder := c.Delete().Where(employeeposts.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeePostsDeleteOne{builder}
}

// Query returns a query builder for EmployeePosts.
func (c *EmployeePostsClient) Query() *EmployeePostsQuery {
	return &EmployeePostsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmployeePosts},
		inters: c.Interceptors(),
	}
}

// Get returns a EmployeePosts entity by its id.
func (c *EmployeePostsClient) Get(ctx context.Context, id int32) (*EmployeePosts, error) {
	return c.Query().Where(employeeposts.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeePostsClient) GetX(ctx context.Context, id int32) *EmployeePosts {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEmpPosts queries the emp_posts edge of a EmployeePosts.
func (c *EmployeePostsClient) QueryEmpPosts(ep *EmployeePosts) *EmployeesQuery {
	query := (&EmployeesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employeeposts.Table, employeeposts.FieldID, id),
			sqlgraph.To(employees.Table, employees.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employeeposts.EmpPostsTable, employeeposts.EmpPostsColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPostEligibility queries the PostEligibility edge of a EmployeePosts.
func (c *EmployeePostsClient) QueryPostEligibility(ep *EmployeePosts) *EligibilityMasterQuery {
	query := (&EligibilityMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employeeposts.Table, employeeposts.FieldID, id),
			sqlgraph.To(eligibilitymaster.Table, eligibilitymaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employeeposts.PostEligibilityTable, employeeposts.PostEligibilityColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmployeePostsClient) Hooks() []Hook {
	return c.hooks.EmployeePosts
}

// Interceptors returns the client interceptors.
func (c *EmployeePostsClient) Interceptors() []Interceptor {
	return c.inters.EmployeePosts
}

func (c *EmployeePostsClient) mutate(ctx context.Context, m *EmployeePostsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmployeePostsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmployeePostsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmployeePostsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmployeePostsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EmployeePosts mutation op: %q", m.Op())
	}
}

// EmployeesClient is a client for the Employees schema.
type EmployeesClient struct {
	config
}

// NewEmployeesClient returns a client for the Employees from the given config.
func NewEmployeesClient(c config) *EmployeesClient {
	return &EmployeesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employees.Hooks(f(g(h())))`.
func (c *EmployeesClient) Use(hooks ...Hook) {
	c.hooks.Employees = append(c.hooks.Employees, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `employees.Intercept(f(g(h())))`.
func (c *EmployeesClient) Intercept(interceptors ...Interceptor) {
	c.inters.Employees = append(c.inters.Employees, interceptors...)
}

// Create returns a builder for creating a Employees entity.
func (c *EmployeesClient) Create() *EmployeesCreate {
	mutation := newEmployeesMutation(c.config, OpCreate)
	return &EmployeesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Employees entities.
func (c *EmployeesClient) CreateBulk(builders ...*EmployeesCreate) *EmployeesCreateBulk {
	return &EmployeesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Employees.
func (c *EmployeesClient) Update() *EmployeesUpdate {
	mutation := newEmployeesMutation(c.config, OpUpdate)
	return &EmployeesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeesClient) UpdateOne(e *Employees) *EmployeesUpdateOne {
	mutation := newEmployeesMutation(c.config, OpUpdateOne, withEmployees(e))
	return &EmployeesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeesClient) UpdateOneID(id int32) *EmployeesUpdateOne {
	mutation := newEmployeesMutation(c.config, OpUpdateOne, withEmployeesID(id))
	return &EmployeesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Employees.
func (c *EmployeesClient) Delete() *EmployeesDelete {
	mutation := newEmployeesMutation(c.config, OpDelete)
	return &EmployeesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmployeesClient) DeleteOne(e *Employees) *EmployeesDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmployeesClient) DeleteOneID(id int32) *EmployeesDeleteOne {
	builder := c.Delete().Where(employees.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeesDeleteOne{builder}
}

// Query returns a query builder for Employees.
func (c *EmployeesClient) Query() *EmployeesQuery {
	return &EmployeesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmployees},
		inters: c.Interceptors(),
	}
}

// Get returns a Employees entity by its id.
func (c *EmployeesClient) Get(ctx context.Context, id int32) (*Employees, error) {
	return c.Query().Where(employees.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeesClient) GetX(ctx context.Context, id int32) *Employees {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EmployeesClient) Hooks() []Hook {
	return c.hooks.Employees
}

// Interceptors returns the client interceptors.
func (c *EmployeesClient) Interceptors() []Interceptor {
	return c.inters.Employees
}

func (c *EmployeesClient) mutate(ctx context.Context, m *EmployeesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmployeesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmployeesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmployeesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmployeesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Employees mutation op: %q", m.Op())
	}
}

// ExamClient is a client for the Exam schema.
type ExamClient struct {
	config
}

// NewExamClient returns a client for the Exam from the given config.
func NewExamClient(c config) *ExamClient {
	return &ExamClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exam.Hooks(f(g(h())))`.
func (c *ExamClient) Use(hooks ...Hook) {
	c.hooks.Exam = append(c.hooks.Exam, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `exam.Intercept(f(g(h())))`.
func (c *ExamClient) Intercept(interceptors ...Interceptor) {
	c.inters.Exam = append(c.inters.Exam, interceptors...)
}

// Create returns a builder for creating a Exam entity.
func (c *ExamClient) Create() *ExamCreate {
	mutation := newExamMutation(c.config, OpCreate)
	return &ExamCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Exam entities.
func (c *ExamClient) CreateBulk(builders ...*ExamCreate) *ExamCreateBulk {
	return &ExamCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Exam.
func (c *ExamClient) Update() *ExamUpdate {
	mutation := newExamMutation(c.config, OpUpdate)
	return &ExamUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExamClient) UpdateOne(e *Exam) *ExamUpdateOne {
	mutation := newExamMutation(c.config, OpUpdateOne, withExam(e))
	return &ExamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExamClient) UpdateOneID(id int32) *ExamUpdateOne {
	mutation := newExamMutation(c.config, OpUpdateOne, withExamID(id))
	return &ExamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Exam.
func (c *ExamClient) Delete() *ExamDelete {
	mutation := newExamMutation(c.config, OpDelete)
	return &ExamDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExamClient) DeleteOne(e *Exam) *ExamDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExamClient) DeleteOneID(id int32) *ExamDeleteOne {
	builder := c.Delete().Where(exam.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExamDeleteOne{builder}
}

// Query returns a query builder for Exam.
func (c *ExamClient) Query() *ExamQuery {
	return &ExamQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExam},
		inters: c.Interceptors(),
	}
}

// Get returns a Exam entity by its id.
func (c *ExamClient) Get(ctx context.Context, id int32) (*Exam, error) {
	return c.Query().Where(exam.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExamClient) GetX(ctx context.Context, id int32) *Exam {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNodalOfficers queries the nodal_officers edge of a Exam.
func (c *ExamClient) QueryNodalOfficers(e *Exam) *NodalOfficerQuery {
	query := (&NodalOfficerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam.Table, exam.FieldID, id),
			sqlgraph.To(nodalofficer.Table, nodalofficer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam.NodalOfficersTable, exam.NodalOfficersColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifications queries the notifications edge of a Exam.
func (c *ExamClient) QueryNotifications(e *Exam) *NotificationQuery {
	query := (&NotificationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam.Table, exam.FieldID, id),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam.NotificationsTable, exam.NotificationsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamsRef queries the exams_ref edge of a Exam.
func (c *ExamClient) QueryExamsRef(e *Exam) *ExamCalendarQuery {
	query := (&ExamCalendarClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam.Table, exam.FieldID, id),
			sqlgraph.To(examcalendar.Table, examcalendar.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam.ExamsRefTable, exam.ExamsRefColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPapers queries the papers edge of a Exam.
func (c *ExamClient) QueryPapers(e *Exam) *ExamPapersQuery {
	query := (&ExamPapersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam.Table, exam.FieldID, id),
			sqlgraph.To(exampapers.Table, exampapers.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam.PapersTable, exam.PapersColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamEligibility queries the ExamEligibility edge of a Exam.
func (c *ExamClient) QueryExamEligibility(e *Exam) *EligibilityMasterQuery {
	query := (&EligibilityMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam.Table, exam.FieldID, id),
			sqlgraph.To(eligibilitymaster.Table, eligibilitymaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam.ExamEligibilityTable, exam.ExamEligibilityColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamsType queries the exams_type edge of a Exam.
func (c *ExamClient) QueryExamsType(e *Exam) *ExamTypeQuery {
	query := (&ExamTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam.Table, exam.FieldID, id),
			sqlgraph.To(examtype.Table, examtype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam.ExamsTypeTable, exam.ExamsTypeColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExamClient) Hooks() []Hook {
	return c.hooks.Exam
}

// Interceptors returns the client interceptors.
func (c *ExamClient) Interceptors() []Interceptor {
	return c.inters.Exam
}

func (c *ExamClient) mutate(ctx context.Context, m *ExamMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExamCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExamUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExamDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Exam mutation op: %q", m.Op())
	}
}

// ExamCalendarClient is a client for the ExamCalendar schema.
type ExamCalendarClient struct {
	config
}

// NewExamCalendarClient returns a client for the ExamCalendar from the given config.
func NewExamCalendarClient(c config) *ExamCalendarClient {
	return &ExamCalendarClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `examcalendar.Hooks(f(g(h())))`.
func (c *ExamCalendarClient) Use(hooks ...Hook) {
	c.hooks.ExamCalendar = append(c.hooks.ExamCalendar, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `examcalendar.Intercept(f(g(h())))`.
func (c *ExamCalendarClient) Intercept(interceptors ...Interceptor) {
	c.inters.ExamCalendar = append(c.inters.ExamCalendar, interceptors...)
}

// Create returns a builder for creating a ExamCalendar entity.
func (c *ExamCalendarClient) Create() *ExamCalendarCreate {
	mutation := newExamCalendarMutation(c.config, OpCreate)
	return &ExamCalendarCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExamCalendar entities.
func (c *ExamCalendarClient) CreateBulk(builders ...*ExamCalendarCreate) *ExamCalendarCreateBulk {
	return &ExamCalendarCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExamCalendar.
func (c *ExamCalendarClient) Update() *ExamCalendarUpdate {
	mutation := newExamCalendarMutation(c.config, OpUpdate)
	return &ExamCalendarUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExamCalendarClient) UpdateOne(ec *ExamCalendar) *ExamCalendarUpdateOne {
	mutation := newExamCalendarMutation(c.config, OpUpdateOne, withExamCalendar(ec))
	return &ExamCalendarUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExamCalendarClient) UpdateOneID(id int32) *ExamCalendarUpdateOne {
	mutation := newExamCalendarMutation(c.config, OpUpdateOne, withExamCalendarID(id))
	return &ExamCalendarUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExamCalendar.
func (c *ExamCalendarClient) Delete() *ExamCalendarDelete {
	mutation := newExamCalendarMutation(c.config, OpDelete)
	return &ExamCalendarDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExamCalendarClient) DeleteOne(ec *ExamCalendar) *ExamCalendarDeleteOne {
	return c.DeleteOneID(ec.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExamCalendarClient) DeleteOneID(id int32) *ExamCalendarDeleteOne {
	builder := c.Delete().Where(examcalendar.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExamCalendarDeleteOne{builder}
}

// Query returns a query builder for ExamCalendar.
func (c *ExamCalendarClient) Query() *ExamCalendarQuery {
	return &ExamCalendarQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExamCalendar},
		inters: c.Interceptors(),
	}
}

// Get returns a ExamCalendar entity by its id.
func (c *ExamCalendarClient) Get(ctx context.Context, id int32) (*ExamCalendar, error) {
	return c.Query().Where(examcalendar.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExamCalendarClient) GetX(ctx context.Context, id int32) *ExamCalendar {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVcyYears queries the vcy_years edge of a ExamCalendar.
func (c *ExamCalendarClient) QueryVcyYears(ec *ExamCalendar) *VacancyYearQuery {
	query := (&VacancyYearClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(examcalendar.Table, examcalendar.FieldID, id),
			sqlgraph.To(vacancyyear.Table, vacancyyear.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, examcalendar.VcyYearsTable, examcalendar.VcyYearsColumn),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExams queries the exams edge of a ExamCalendar.
func (c *ExamCalendarClient) QueryExams(ec *ExamCalendar) *ExamQuery {
	query := (&ExamClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(examcalendar.Table, examcalendar.FieldID, id),
			sqlgraph.To(exam.Table, exam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, examcalendar.ExamsTable, examcalendar.ExamsColumn),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPapers queries the papers edge of a ExamCalendar.
func (c *ExamCalendarClient) QueryPapers(ec *ExamCalendar) *ExamPapersQuery {
	query := (&ExamPapersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(examcalendar.Table, examcalendar.FieldID, id),
			sqlgraph.To(exampapers.Table, exampapers.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, examcalendar.PapersTable, examcalendar.PapersColumn),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyRef queries the Notify_ref edge of a ExamCalendar.
func (c *ExamCalendarClient) QueryNotifyRef(ec *ExamCalendar) *NotificationQuery {
	query := (&NotificationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(examcalendar.Table, examcalendar.FieldID, id),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, examcalendar.NotifyRefTable, examcalendar.NotifyRefColumn),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamcalPsRef queries the examcal_ps_ref edge of a ExamCalendar.
func (c *ExamCalendarClient) QueryExamcalPsRef(ec *ExamCalendar) *ExamPSQuery {
	query := (&ExamPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(examcalendar.Table, examcalendar.FieldID, id),
			sqlgraph.To(exam_ps.Table, exam_ps.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, examcalendar.ExamcalPsRefTable, examcalendar.ExamcalPsRefColumn),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamcalIPRef queries the examcal_ip_ref edge of a ExamCalendar.
func (c *ExamCalendarClient) QueryExamcalIPRef(ec *ExamCalendar) *ExamIPQuery {
	query := (&ExamIPClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(examcalendar.Table, examcalendar.FieldID, id),
			sqlgraph.To(exam_ip.Table, exam_ip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, examcalendar.ExamcalIPRefTable, examcalendar.ExamcalIPRefColumn),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExamCalendarClient) Hooks() []Hook {
	return c.hooks.ExamCalendar
}

// Interceptors returns the client interceptors.
func (c *ExamCalendarClient) Interceptors() []Interceptor {
	return c.inters.ExamCalendar
}

func (c *ExamCalendarClient) mutate(ctx context.Context, m *ExamCalendarMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExamCalendarCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExamCalendarUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExamCalendarUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExamCalendarDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ExamCalendar mutation op: %q", m.Op())
	}
}

// ExamPapersClient is a client for the ExamPapers schema.
type ExamPapersClient struct {
	config
}

// NewExamPapersClient returns a client for the ExamPapers from the given config.
func NewExamPapersClient(c config) *ExamPapersClient {
	return &ExamPapersClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exampapers.Hooks(f(g(h())))`.
func (c *ExamPapersClient) Use(hooks ...Hook) {
	c.hooks.ExamPapers = append(c.hooks.ExamPapers, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `exampapers.Intercept(f(g(h())))`.
func (c *ExamPapersClient) Intercept(interceptors ...Interceptor) {
	c.inters.ExamPapers = append(c.inters.ExamPapers, interceptors...)
}

// Create returns a builder for creating a ExamPapers entity.
func (c *ExamPapersClient) Create() *ExamPapersCreate {
	mutation := newExamPapersMutation(c.config, OpCreate)
	return &ExamPapersCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExamPapers entities.
func (c *ExamPapersClient) CreateBulk(builders ...*ExamPapersCreate) *ExamPapersCreateBulk {
	return &ExamPapersCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExamPapers.
func (c *ExamPapersClient) Update() *ExamPapersUpdate {
	mutation := newExamPapersMutation(c.config, OpUpdate)
	return &ExamPapersUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExamPapersClient) UpdateOne(ep *ExamPapers) *ExamPapersUpdateOne {
	mutation := newExamPapersMutation(c.config, OpUpdateOne, withExamPapers(ep))
	return &ExamPapersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExamPapersClient) UpdateOneID(id int32) *ExamPapersUpdateOne {
	mutation := newExamPapersMutation(c.config, OpUpdateOne, withExamPapersID(id))
	return &ExamPapersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExamPapers.
func (c *ExamPapersClient) Delete() *ExamPapersDelete {
	mutation := newExamPapersMutation(c.config, OpDelete)
	return &ExamPapersDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExamPapersClient) DeleteOne(ep *ExamPapers) *ExamPapersDeleteOne {
	return c.DeleteOneID(ep.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExamPapersClient) DeleteOneID(id int32) *ExamPapersDeleteOne {
	builder := c.Delete().Where(exampapers.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExamPapersDeleteOne{builder}
}

// Query returns a query builder for ExamPapers.
func (c *ExamPapersClient) Query() *ExamPapersQuery {
	return &ExamPapersQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExamPapers},
		inters: c.Interceptors(),
	}
}

// Get returns a ExamPapers entity by its id.
func (c *ExamPapersClient) Get(ctx context.Context, id int32) (*ExamPapers, error) {
	return c.Query().Where(exampapers.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExamPapersClient) GetX(ctx context.Context, id int32) *ExamPapers {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCenters queries the centers edge of a ExamPapers.
func (c *ExamPapersClient) QueryCenters(ep *ExamPapers) *CenterQuery {
	query := (&CenterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exampapers.Table, exampapers.FieldID, id),
			sqlgraph.To(center.Table, center.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exampapers.CentersTable, exampapers.CentersColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExam queries the exam edge of a ExamPapers.
func (c *ExamPapersClient) QueryExam(ep *ExamPapers) *ExamQuery {
	query := (&ExamClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exampapers.Table, exampapers.FieldID, id),
			sqlgraph.To(exam.Table, exam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exampapers.ExamTable, exampapers.ExamColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExampapersTypes queries the exampapers_types edge of a ExamPapers.
func (c *ExamPapersClient) QueryExampapersTypes(ep *ExamPapers) *PaperTypesQuery {
	query := (&PaperTypesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exampapers.Table, exampapers.FieldID, id),
			sqlgraph.To(papertypes.Table, papertypes.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exampapers.ExampapersTypesTable, exampapers.ExampapersTypesColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPapersRef queries the papers_ref edge of a ExamPapers.
func (c *ExamPapersClient) QueryPapersRef(ep *ExamPapers) *ExamCalendarQuery {
	query := (&ExamCalendarClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exampapers.Table, exampapers.FieldID, id),
			sqlgraph.To(examcalendar.Table, examcalendar.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exampapers.PapersRefTable, exampapers.PapersRefColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamPaperEligibility queries the ExamPaperEligibility edge of a ExamPapers.
func (c *ExamPapersClient) QueryExamPaperEligibility(ep *ExamPapers) *EligibilityMasterQuery {
	query := (&EligibilityMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exampapers.Table, exampapers.FieldID, id),
			sqlgraph.To(eligibilitymaster.Table, eligibilitymaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exampapers.ExamPaperEligibilityTable, exampapers.ExamPaperEligibilityColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDisRef queries the dis_ref edge of a ExamPapers.
func (c *ExamPapersClient) QueryDisRef(ep *ExamPapers) *DisabilityQuery {
	query := (&DisabilityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exampapers.Table, exampapers.FieldID, id),
			sqlgraph.To(disability.Table, disability.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exampapers.DisRefTable, exampapers.DisRefColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPapersPsRef queries the papers_ps_ref edge of a ExamPapers.
func (c *ExamPapersClient) QueryPapersPsRef(ep *ExamPapers) *ExamPSQuery {
	query := (&ExamPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exampapers.Table, exampapers.FieldID, id),
			sqlgraph.To(exam_ps.Table, exam_ps.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exampapers.PapersPsRefTable, exampapers.PapersPsRefColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPapersIPRef queries the papers_ip_ref edge of a ExamPapers.
func (c *ExamPapersClient) QueryPapersIPRef(ep *ExamPapers) *ExamIPQuery {
	query := (&ExamIPClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exampapers.Table, exampapers.FieldID, id),
			sqlgraph.To(exam_ip.Table, exam_ip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exampapers.PapersIPRefTable, exampapers.PapersIPRefColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExamPapersClient) Hooks() []Hook {
	return c.hooks.ExamPapers
}

// Interceptors returns the client interceptors.
func (c *ExamPapersClient) Interceptors() []Interceptor {
	return c.inters.ExamPapers
}

func (c *ExamPapersClient) mutate(ctx context.Context, m *ExamPapersMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExamPapersCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExamPapersUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExamPapersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExamPapersDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ExamPapers mutation op: %q", m.Op())
	}
}

// ExamTypeClient is a client for the ExamType schema.
type ExamTypeClient struct {
	config
}

// NewExamTypeClient returns a client for the ExamType from the given config.
func NewExamTypeClient(c config) *ExamTypeClient {
	return &ExamTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `examtype.Hooks(f(g(h())))`.
func (c *ExamTypeClient) Use(hooks ...Hook) {
	c.hooks.ExamType = append(c.hooks.ExamType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `examtype.Intercept(f(g(h())))`.
func (c *ExamTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.ExamType = append(c.inters.ExamType, interceptors...)
}

// Create returns a builder for creating a ExamType entity.
func (c *ExamTypeClient) Create() *ExamTypeCreate {
	mutation := newExamTypeMutation(c.config, OpCreate)
	return &ExamTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExamType entities.
func (c *ExamTypeClient) CreateBulk(builders ...*ExamTypeCreate) *ExamTypeCreateBulk {
	return &ExamTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExamType.
func (c *ExamTypeClient) Update() *ExamTypeUpdate {
	mutation := newExamTypeMutation(c.config, OpUpdate)
	return &ExamTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExamTypeClient) UpdateOne(et *ExamType) *ExamTypeUpdateOne {
	mutation := newExamTypeMutation(c.config, OpUpdateOne, withExamType(et))
	return &ExamTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExamTypeClient) UpdateOneID(id int32) *ExamTypeUpdateOne {
	mutation := newExamTypeMutation(c.config, OpUpdateOne, withExamTypeID(id))
	return &ExamTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExamType.
func (c *ExamTypeClient) Delete() *ExamTypeDelete {
	mutation := newExamTypeMutation(c.config, OpDelete)
	return &ExamTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExamTypeClient) DeleteOne(et *ExamType) *ExamTypeDeleteOne {
	return c.DeleteOneID(et.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExamTypeClient) DeleteOneID(id int32) *ExamTypeDeleteOne {
	builder := c.Delete().Where(examtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExamTypeDeleteOne{builder}
}

// Query returns a query builder for ExamType.
func (c *ExamTypeClient) Query() *ExamTypeQuery {
	return &ExamTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExamType},
		inters: c.Interceptors(),
	}
}

// Get returns a ExamType entity by its id.
func (c *ExamTypeClient) Get(ctx context.Context, id int32) (*ExamType, error) {
	return c.Query().Where(examtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExamTypeClient) GetX(ctx context.Context, id int32) *ExamType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExam queries the exam edge of a ExamType.
func (c *ExamTypeClient) QueryExam(et *ExamType) *ExamQuery {
	query := (&ExamClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(examtype.Table, examtype.FieldID, id),
			sqlgraph.To(exam.Table, exam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, examtype.ExamTable, examtype.ExamColumn),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExamTypeClient) Hooks() []Hook {
	return c.hooks.ExamType
}

// Interceptors returns the client interceptors.
func (c *ExamTypeClient) Interceptors() []Interceptor {
	return c.inters.ExamType
}

func (c *ExamTypeClient) mutate(ctx context.Context, m *ExamTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExamTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExamTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExamTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExamTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ExamType mutation op: %q", m.Op())
	}
}

// ExamApplicationsIPClient is a client for the Exam_Applications_IP schema.
type ExamApplicationsIPClient struct {
	config
}

// NewExamApplicationsIPClient returns a client for the Exam_Applications_IP from the given config.
func NewExamApplicationsIPClient(c config) *ExamApplicationsIPClient {
	return &ExamApplicationsIPClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exam_applications_ip.Hooks(f(g(h())))`.
func (c *ExamApplicationsIPClient) Use(hooks ...Hook) {
	c.hooks.Exam_Applications_IP = append(c.hooks.Exam_Applications_IP, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `exam_applications_ip.Intercept(f(g(h())))`.
func (c *ExamApplicationsIPClient) Intercept(interceptors ...Interceptor) {
	c.inters.Exam_Applications_IP = append(c.inters.Exam_Applications_IP, interceptors...)
}

// Create returns a builder for creating a Exam_Applications_IP entity.
func (c *ExamApplicationsIPClient) Create() *ExamApplicationsIPCreate {
	mutation := newExamApplicationsIPMutation(c.config, OpCreate)
	return &ExamApplicationsIPCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Exam_Applications_IP entities.
func (c *ExamApplicationsIPClient) CreateBulk(builders ...*ExamApplicationsIPCreate) *ExamApplicationsIPCreateBulk {
	return &ExamApplicationsIPCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Exam_Applications_IP.
func (c *ExamApplicationsIPClient) Update() *ExamApplicationsIPUpdate {
	mutation := newExamApplicationsIPMutation(c.config, OpUpdate)
	return &ExamApplicationsIPUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExamApplicationsIPClient) UpdateOne(eai *Exam_Applications_IP) *ExamApplicationsIPUpdateOne {
	mutation := newExamApplicationsIPMutation(c.config, OpUpdateOne, withExam_Applications_IP(eai))
	return &ExamApplicationsIPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExamApplicationsIPClient) UpdateOneID(id int64) *ExamApplicationsIPUpdateOne {
	mutation := newExamApplicationsIPMutation(c.config, OpUpdateOne, withExam_Applications_IPID(id))
	return &ExamApplicationsIPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Exam_Applications_IP.
func (c *ExamApplicationsIPClient) Delete() *ExamApplicationsIPDelete {
	mutation := newExamApplicationsIPMutation(c.config, OpDelete)
	return &ExamApplicationsIPDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExamApplicationsIPClient) DeleteOne(eai *Exam_Applications_IP) *ExamApplicationsIPDeleteOne {
	return c.DeleteOneID(eai.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExamApplicationsIPClient) DeleteOneID(id int64) *ExamApplicationsIPDeleteOne {
	builder := c.Delete().Where(exam_applications_ip.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExamApplicationsIPDeleteOne{builder}
}

// Query returns a query builder for Exam_Applications_IP.
func (c *ExamApplicationsIPClient) Query() *ExamApplicationsIPQuery {
	return &ExamApplicationsIPQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExamApplicationsIP},
		inters: c.Interceptors(),
	}
}

// Get returns a Exam_Applications_IP entity by its id.
func (c *ExamApplicationsIPClient) Get(ctx context.Context, id int64) (*Exam_Applications_IP, error) {
	return c.Query().Where(exam_applications_ip.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExamApplicationsIPClient) GetX(ctx context.Context, id int64) *Exam_Applications_IP {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsersIPRef queries the UsersIPRef edge of a Exam_Applications_IP.
func (c *ExamApplicationsIPClient) QueryUsersIPRef(eai *Exam_Applications_IP) *UserMasterQuery {
	query := (&UserMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ip.Table, exam_applications_ip.FieldID, id),
			sqlgraph.To(usermaster.Table, usermaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_ip.UsersIPRefTable, exam_applications_ip.UsersIPRefColumn),
		)
		fromV = sqlgraph.Neighbors(eai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamApplnIPRef queries the ExamAppln_IP_Ref edge of a Exam_Applications_IP.
func (c *ExamApplicationsIPClient) QueryExamApplnIPRef(eai *Exam_Applications_IP) *ExamIPQuery {
	query := (&ExamIPClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ip.Table, exam_applications_ip.FieldID, id),
			sqlgraph.To(exam_ip.Table, exam_ip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_ip.ExamApplnIPRefTable, exam_applications_ip.ExamApplnIPRefColumn),
		)
		fromV = sqlgraph.Neighbors(eai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOfficeIPRef queries the Office_IP_Ref edge of a Exam_Applications_IP.
func (c *ExamApplicationsIPClient) QueryOfficeIPRef(eai *Exam_Applications_IP) *FacilityQuery {
	query := (&FacilityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ip.Table, exam_applications_ip.FieldID, id),
			sqlgraph.To(facility.Table, facility.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_ip.OfficeIPRefTable, exam_applications_ip.OfficeIPRefColumn),
		)
		fromV = sqlgraph.Neighbors(eai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleusers queries the roleusers edge of a Exam_Applications_IP.
func (c *ExamApplicationsIPClient) QueryRoleusers(eai *Exam_Applications_IP) *RoleMasterQuery {
	query := (&RoleMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ip.Table, exam_applications_ip.FieldID, id),
			sqlgraph.To(rolemaster.Table, rolemaster.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_ip.RoleusersTable, exam_applications_ip.RoleusersColumn),
		)
		fromV = sqlgraph.Neighbors(eai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCadrePrefRef queries the CadrePref_Ref edge of a Exam_Applications_IP.
func (c *ExamApplicationsIPClient) QueryCadrePrefRef(eai *Exam_Applications_IP) *CadreChoiceIPQuery {
	query := (&CadreChoiceIPClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ip.Table, exam_applications_ip.FieldID, id),
			sqlgraph.To(cadre_choice_ip.Table, cadre_choice_ip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_ip.CadrePrefRefTable, exam_applications_ip.CadrePrefRefColumn),
		)
		fromV = sqlgraph.Neighbors(eai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCirclePrefRef queries the CirclePrefRef edge of a Exam_Applications_IP.
func (c *ExamApplicationsIPClient) QueryCirclePrefRef(eai *Exam_Applications_IP) *PlaceOfPreferenceIPQuery {
	query := (&PlaceOfPreferenceIPClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ip.Table, exam_applications_ip.FieldID, id),
			sqlgraph.To(placeofpreferenceip.Table, placeofpreferenceip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_ip.CirclePrefRefTable, exam_applications_ip.CirclePrefRefColumn),
		)
		fromV = sqlgraph.Neighbors(eai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIPApplicationsRef queries the IPApplicationsRef edge of a Exam_Applications_IP.
func (c *ExamApplicationsIPClient) QueryIPApplicationsRef(eai *Exam_Applications_IP) *RecommendationsIPApplicationsQuery {
	query := (&RecommendationsIPApplicationsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ip.Table, exam_applications_ip.FieldID, id),
			sqlgraph.To(recommendationsipapplications.Table, recommendationsipapplications.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_ip.IPApplicationsRefTable, exam_applications_ip.IPApplicationsRefColumn),
		)
		fromV = sqlgraph.Neighbors(eai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExamApplicationsIPClient) Hooks() []Hook {
	return c.hooks.Exam_Applications_IP
}

// Interceptors returns the client interceptors.
func (c *ExamApplicationsIPClient) Interceptors() []Interceptor {
	return c.inters.Exam_Applications_IP
}

func (c *ExamApplicationsIPClient) mutate(ctx context.Context, m *ExamApplicationsIPMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExamApplicationsIPCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExamApplicationsIPUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExamApplicationsIPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExamApplicationsIPDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Exam_Applications_IP mutation op: %q", m.Op())
	}
}

// ExamApplicationsPSClient is a client for the Exam_Applications_PS schema.
type ExamApplicationsPSClient struct {
	config
}

// NewExamApplicationsPSClient returns a client for the Exam_Applications_PS from the given config.
func NewExamApplicationsPSClient(c config) *ExamApplicationsPSClient {
	return &ExamApplicationsPSClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exam_applications_ps.Hooks(f(g(h())))`.
func (c *ExamApplicationsPSClient) Use(hooks ...Hook) {
	c.hooks.Exam_Applications_PS = append(c.hooks.Exam_Applications_PS, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `exam_applications_ps.Intercept(f(g(h())))`.
func (c *ExamApplicationsPSClient) Intercept(interceptors ...Interceptor) {
	c.inters.Exam_Applications_PS = append(c.inters.Exam_Applications_PS, interceptors...)
}

// Create returns a builder for creating a Exam_Applications_PS entity.
func (c *ExamApplicationsPSClient) Create() *ExamApplicationsPSCreate {
	mutation := newExamApplicationsPSMutation(c.config, OpCreate)
	return &ExamApplicationsPSCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Exam_Applications_PS entities.
func (c *ExamApplicationsPSClient) CreateBulk(builders ...*ExamApplicationsPSCreate) *ExamApplicationsPSCreateBulk {
	return &ExamApplicationsPSCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Exam_Applications_PS.
func (c *ExamApplicationsPSClient) Update() *ExamApplicationsPSUpdate {
	mutation := newExamApplicationsPSMutation(c.config, OpUpdate)
	return &ExamApplicationsPSUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExamApplicationsPSClient) UpdateOne(eap *Exam_Applications_PS) *ExamApplicationsPSUpdateOne {
	mutation := newExamApplicationsPSMutation(c.config, OpUpdateOne, withExam_Applications_PS(eap))
	return &ExamApplicationsPSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExamApplicationsPSClient) UpdateOneID(id int64) *ExamApplicationsPSUpdateOne {
	mutation := newExamApplicationsPSMutation(c.config, OpUpdateOne, withExam_Applications_PSID(id))
	return &ExamApplicationsPSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Exam_Applications_PS.
func (c *ExamApplicationsPSClient) Delete() *ExamApplicationsPSDelete {
	mutation := newExamApplicationsPSMutation(c.config, OpDelete)
	return &ExamApplicationsPSDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExamApplicationsPSClient) DeleteOne(eap *Exam_Applications_PS) *ExamApplicationsPSDeleteOne {
	return c.DeleteOneID(eap.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExamApplicationsPSClient) DeleteOneID(id int64) *ExamApplicationsPSDeleteOne {
	builder := c.Delete().Where(exam_applications_ps.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExamApplicationsPSDeleteOne{builder}
}

// Query returns a query builder for Exam_Applications_PS.
func (c *ExamApplicationsPSClient) Query() *ExamApplicationsPSQuery {
	return &ExamApplicationsPSQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExamApplicationsPS},
		inters: c.Interceptors(),
	}
}

// Get returns a Exam_Applications_PS entity by its id.
func (c *ExamApplicationsPSClient) Get(ctx context.Context, id int64) (*Exam_Applications_PS, error) {
	return c.Query().Where(exam_applications_ps.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExamApplicationsPSClient) GetX(ctx context.Context, id int64) *Exam_Applications_PS {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsersPSRef queries the UsersPSRef edge of a Exam_Applications_PS.
func (c *ExamApplicationsPSClient) QueryUsersPSRef(eap *Exam_Applications_PS) *UserMasterQuery {
	query := (&UserMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ps.Table, exam_applications_ps.FieldID, id),
			sqlgraph.To(usermaster.Table, usermaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_ps.UsersPSRefTable, exam_applications_ps.UsersPSRefColumn),
		)
		fromV = sqlgraph.Neighbors(eap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamApplnPSRef queries the ExamAppln_PS_Ref edge of a Exam_Applications_PS.
func (c *ExamApplicationsPSClient) QueryExamApplnPSRef(eap *Exam_Applications_PS) *ExamPSQuery {
	query := (&ExamPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ps.Table, exam_applications_ps.FieldID, id),
			sqlgraph.To(exam_ps.Table, exam_ps.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_ps.ExamApplnPSRefTable, exam_applications_ps.ExamApplnPSRefColumn),
		)
		fromV = sqlgraph.Neighbors(eap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOfficePSRef queries the Office_PS_Ref edge of a Exam_Applications_PS.
func (c *ExamApplicationsPSClient) QueryOfficePSRef(eap *Exam_Applications_PS) *FacilityQuery {
	query := (&FacilityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ps.Table, exam_applications_ps.FieldID, id),
			sqlgraph.To(facility.Table, facility.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_ps.OfficePSRefTable, exam_applications_ps.OfficePSRefColumn),
		)
		fromV = sqlgraph.Neighbors(eap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleusers queries the roleusers edge of a Exam_Applications_PS.
func (c *ExamApplicationsPSClient) QueryRoleusers(eap *Exam_Applications_PS) *RoleMasterQuery {
	query := (&RoleMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ps.Table, exam_applications_ps.FieldID, id),
			sqlgraph.To(rolemaster.Table, rolemaster.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_ps.RoleusersTable, exam_applications_ps.RoleusersColumn),
		)
		fromV = sqlgraph.Neighbors(eap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExamApplicationsPSClient) Hooks() []Hook {
	return c.hooks.Exam_Applications_PS
}

// Interceptors returns the client interceptors.
func (c *ExamApplicationsPSClient) Interceptors() []Interceptor {
	return c.inters.Exam_Applications_PS
}

func (c *ExamApplicationsPSClient) mutate(ctx context.Context, m *ExamApplicationsPSMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExamApplicationsPSCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExamApplicationsPSUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExamApplicationsPSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExamApplicationsPSDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Exam_Applications_PS mutation op: %q", m.Op())
	}
}

// ExamIPClient is a client for the Exam_IP schema.
type ExamIPClient struct {
	config
}

// NewExamIPClient returns a client for the Exam_IP from the given config.
func NewExamIPClient(c config) *ExamIPClient {
	return &ExamIPClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exam_ip.Hooks(f(g(h())))`.
func (c *ExamIPClient) Use(hooks ...Hook) {
	c.hooks.Exam_IP = append(c.hooks.Exam_IP, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `exam_ip.Intercept(f(g(h())))`.
func (c *ExamIPClient) Intercept(interceptors ...Interceptor) {
	c.inters.Exam_IP = append(c.inters.Exam_IP, interceptors...)
}

// Create returns a builder for creating a Exam_IP entity.
func (c *ExamIPClient) Create() *ExamIPCreate {
	mutation := newExamIPMutation(c.config, OpCreate)
	return &ExamIPCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Exam_IP entities.
func (c *ExamIPClient) CreateBulk(builders ...*ExamIPCreate) *ExamIPCreateBulk {
	return &ExamIPCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Exam_IP.
func (c *ExamIPClient) Update() *ExamIPUpdate {
	mutation := newExamIPMutation(c.config, OpUpdate)
	return &ExamIPUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExamIPClient) UpdateOne(ei *Exam_IP) *ExamIPUpdateOne {
	mutation := newExamIPMutation(c.config, OpUpdateOne, withExam_IP(ei))
	return &ExamIPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExamIPClient) UpdateOneID(id int32) *ExamIPUpdateOne {
	mutation := newExamIPMutation(c.config, OpUpdateOne, withExam_IPID(id))
	return &ExamIPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Exam_IP.
func (c *ExamIPClient) Delete() *ExamIPDelete {
	mutation := newExamIPMutation(c.config, OpDelete)
	return &ExamIPDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExamIPClient) DeleteOne(ei *Exam_IP) *ExamIPDeleteOne {
	return c.DeleteOneID(ei.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExamIPClient) DeleteOneID(id int32) *ExamIPDeleteOne {
	builder := c.Delete().Where(exam_ip.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExamIPDeleteOne{builder}
}

// Query returns a query builder for Exam_IP.
func (c *ExamIPClient) Query() *ExamIPQuery {
	return &ExamIPQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExamIP},
		inters: c.Interceptors(),
	}
}

// Get returns a Exam_IP entity by its id.
func (c *ExamIPClient) Get(ctx context.Context, id int32) (*Exam_IP, error) {
	return c.Query().Where(exam_ip.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExamIPClient) GetX(ctx context.Context, id int32) *Exam_IP {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExamcalIPRef queries the examcal_ip_ref edge of a Exam_IP.
func (c *ExamIPClient) QueryExamcalIPRef(ei *Exam_IP) *ExamCalendarQuery {
	query := (&ExamCalendarClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ei.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_ip.Table, exam_ip.FieldID, id),
			sqlgraph.To(examcalendar.Table, examcalendar.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_ip.ExamcalIPRefTable, exam_ip.ExamcalIPRefColumn),
		)
		fromV = sqlgraph.Neighbors(ei.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPapersIPRef queries the papers_ip_ref edge of a Exam_IP.
func (c *ExamIPClient) QueryPapersIPRef(ei *Exam_IP) *ExamPapersQuery {
	query := (&ExamPapersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ei.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_ip.Table, exam_ip.FieldID, id),
			sqlgraph.To(exampapers.Table, exampapers.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_ip.PapersIPRefTable, exam_ip.PapersIPRefColumn),
		)
		fromV = sqlgraph.Neighbors(ei.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsersIPType queries the users_ip_type edge of a Exam_IP.
func (c *ExamIPClient) QueryUsersIPType(ei *Exam_IP) *UserMasterQuery {
	query := (&UserMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ei.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_ip.Table, exam_ip.FieldID, id),
			sqlgraph.To(usermaster.Table, usermaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_ip.UsersIPTypeTable, exam_ip.UsersIPTypeColumn),
		)
		fromV = sqlgraph.Neighbors(ei.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamApplnIPRef queries the ExamAppln_IP_Ref edge of a Exam_IP.
func (c *ExamIPClient) QueryExamApplnIPRef(ei *Exam_IP) *ExamApplicationsIPQuery {
	query := (&ExamApplicationsIPClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ei.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_ip.Table, exam_ip.FieldID, id),
			sqlgraph.To(exam_applications_ip.Table, exam_applications_ip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_ip.ExamApplnIPRefTable, exam_ip.ExamApplnIPRefColumn),
		)
		fromV = sqlgraph.Neighbors(ei.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotificationsIP queries the notifications_ip edge of a Exam_IP.
func (c *ExamIPClient) QueryNotificationsIP(ei *Exam_IP) *NotificationQuery {
	query := (&NotificationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ei.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_ip.Table, exam_ip.FieldID, id),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_ip.NotificationsIPTable, exam_ip.NotificationsIPColumn),
		)
		fromV = sqlgraph.Neighbors(ei.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExamIPClient) Hooks() []Hook {
	return c.hooks.Exam_IP
}

// Interceptors returns the client interceptors.
func (c *ExamIPClient) Interceptors() []Interceptor {
	return c.inters.Exam_IP
}

func (c *ExamIPClient) mutate(ctx context.Context, m *ExamIPMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExamIPCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExamIPUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExamIPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExamIPDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Exam_IP mutation op: %q", m.Op())
	}
}

// ExamPAClient is a client for the Exam_PA schema.
type ExamPAClient struct {
	config
}

// NewExamPAClient returns a client for the Exam_PA from the given config.
func NewExamPAClient(c config) *ExamPAClient {
	return &ExamPAClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exam_pa.Hooks(f(g(h())))`.
func (c *ExamPAClient) Use(hooks ...Hook) {
	c.hooks.Exam_PA = append(c.hooks.Exam_PA, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `exam_pa.Intercept(f(g(h())))`.
func (c *ExamPAClient) Intercept(interceptors ...Interceptor) {
	c.inters.Exam_PA = append(c.inters.Exam_PA, interceptors...)
}

// Create returns a builder for creating a Exam_PA entity.
func (c *ExamPAClient) Create() *ExamPACreate {
	mutation := newExamPAMutation(c.config, OpCreate)
	return &ExamPACreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Exam_PA entities.
func (c *ExamPAClient) CreateBulk(builders ...*ExamPACreate) *ExamPACreateBulk {
	return &ExamPACreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Exam_PA.
func (c *ExamPAClient) Update() *ExamPAUpdate {
	mutation := newExamPAMutation(c.config, OpUpdate)
	return &ExamPAUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExamPAClient) UpdateOne(ep *Exam_PA) *ExamPAUpdateOne {
	mutation := newExamPAMutation(c.config, OpUpdateOne, withExam_PA(ep))
	return &ExamPAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExamPAClient) UpdateOneID(id int32) *ExamPAUpdateOne {
	mutation := newExamPAMutation(c.config, OpUpdateOne, withExam_PAID(id))
	return &ExamPAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Exam_PA.
func (c *ExamPAClient) Delete() *ExamPADelete {
	mutation := newExamPAMutation(c.config, OpDelete)
	return &ExamPADelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExamPAClient) DeleteOne(ep *Exam_PA) *ExamPADeleteOne {
	return c.DeleteOneID(ep.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExamPAClient) DeleteOneID(id int32) *ExamPADeleteOne {
	builder := c.Delete().Where(exam_pa.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExamPADeleteOne{builder}
}

// Query returns a query builder for Exam_PA.
func (c *ExamPAClient) Query() *ExamPAQuery {
	return &ExamPAQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExamPA},
		inters: c.Interceptors(),
	}
}

// Get returns a Exam_PA entity by its id.
func (c *ExamPAClient) Get(ctx context.Context, id int32) (*Exam_PA, error) {
	return c.Query().Where(exam_pa.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExamPAClient) GetX(ctx context.Context, id int32) *Exam_PA {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExamcalPsRef queries the examcal_ps_ref edge of a Exam_PA.
func (c *ExamPAClient) QueryExamcalPsRef(ep *Exam_PA) *ExamCalendarQuery {
	query := (&ExamCalendarClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_pa.Table, exam_pa.FieldID, id),
			sqlgraph.To(examcalendar.Table, examcalendar.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_pa.ExamcalPsRefTable, exam_pa.ExamcalPsRefColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPapersPsRef queries the papers_ps_ref edge of a Exam_PA.
func (c *ExamPAClient) QueryPapersPsRef(ep *Exam_PA) *ExamPapersQuery {
	query := (&ExamPapersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_pa.Table, exam_pa.FieldID, id),
			sqlgraph.To(exampapers.Table, exampapers.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_pa.PapersPsRefTable, exam_pa.PapersPsRefColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsersPsType queries the users_ps_type edge of a Exam_PA.
func (c *ExamPAClient) QueryUsersPsType(ep *Exam_PA) *UserMasterQuery {
	query := (&UserMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_pa.Table, exam_pa.FieldID, id),
			sqlgraph.To(usermaster.Table, usermaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_pa.UsersPsTypeTable, exam_pa.UsersPsTypeColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamApplnPSRef queries the ExamAppln_PS_Ref edge of a Exam_PA.
func (c *ExamPAClient) QueryExamApplnPSRef(ep *Exam_PA) *ExamApplicationsPSQuery {
	query := (&ExamApplicationsPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_pa.Table, exam_pa.FieldID, id),
			sqlgraph.To(exam_applications_ps.Table, exam_applications_ps.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_pa.ExamApplnPSRefTable, exam_pa.ExamApplnPSRefColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotificationsPs queries the notifications_ps edge of a Exam_PA.
func (c *ExamPAClient) QueryNotificationsPs(ep *Exam_PA) *NotificationQuery {
	query := (&NotificationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_pa.Table, exam_pa.FieldID, id),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_pa.NotificationsPsTable, exam_pa.NotificationsPsColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExamPAClient) Hooks() []Hook {
	return c.hooks.Exam_PA
}

// Interceptors returns the client interceptors.
func (c *ExamPAClient) Interceptors() []Interceptor {
	return c.inters.Exam_PA
}

func (c *ExamPAClient) mutate(ctx context.Context, m *ExamPAMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExamPACreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExamPAUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExamPAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExamPADelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Exam_PA mutation op: %q", m.Op())
	}
}

// ExamPMClient is a client for the Exam_PM schema.
type ExamPMClient struct {
	config
}

// NewExamPMClient returns a client for the Exam_PM from the given config.
func NewExamPMClient(c config) *ExamPMClient {
	return &ExamPMClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exam_pm.Hooks(f(g(h())))`.
func (c *ExamPMClient) Use(hooks ...Hook) {
	c.hooks.Exam_PM = append(c.hooks.Exam_PM, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `exam_pm.Intercept(f(g(h())))`.
func (c *ExamPMClient) Intercept(interceptors ...Interceptor) {
	c.inters.Exam_PM = append(c.inters.Exam_PM, interceptors...)
}

// Create returns a builder for creating a Exam_PM entity.
func (c *ExamPMClient) Create() *ExamPMCreate {
	mutation := newExamPMMutation(c.config, OpCreate)
	return &ExamPMCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Exam_PM entities.
func (c *ExamPMClient) CreateBulk(builders ...*ExamPMCreate) *ExamPMCreateBulk {
	return &ExamPMCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Exam_PM.
func (c *ExamPMClient) Update() *ExamPMUpdate {
	mutation := newExamPMMutation(c.config, OpUpdate)
	return &ExamPMUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExamPMClient) UpdateOne(ep *Exam_PM) *ExamPMUpdateOne {
	mutation := newExamPMMutation(c.config, OpUpdateOne, withExam_PM(ep))
	return &ExamPMUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExamPMClient) UpdateOneID(id int32) *ExamPMUpdateOne {
	mutation := newExamPMMutation(c.config, OpUpdateOne, withExam_PMID(id))
	return &ExamPMUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Exam_PM.
func (c *ExamPMClient) Delete() *ExamPMDelete {
	mutation := newExamPMMutation(c.config, OpDelete)
	return &ExamPMDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExamPMClient) DeleteOne(ep *Exam_PM) *ExamPMDeleteOne {
	return c.DeleteOneID(ep.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExamPMClient) DeleteOneID(id int32) *ExamPMDeleteOne {
	builder := c.Delete().Where(exam_pm.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExamPMDeleteOne{builder}
}

// Query returns a query builder for Exam_PM.
func (c *ExamPMClient) Query() *ExamPMQuery {
	return &ExamPMQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExamPM},
		inters: c.Interceptors(),
	}
}

// Get returns a Exam_PM entity by its id.
func (c *ExamPMClient) Get(ctx context.Context, id int32) (*Exam_PM, error) {
	return c.Query().Where(exam_pm.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExamPMClient) GetX(ctx context.Context, id int32) *Exam_PM {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ExamPMClient) Hooks() []Hook {
	return c.hooks.Exam_PM
}

// Interceptors returns the client interceptors.
func (c *ExamPMClient) Interceptors() []Interceptor {
	return c.inters.Exam_PM
}

func (c *ExamPMClient) mutate(ctx context.Context, m *ExamPMMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExamPMCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExamPMUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExamPMUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExamPMDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Exam_PM mutation op: %q", m.Op())
	}
}

// ExamPSClient is a client for the Exam_PS schema.
type ExamPSClient struct {
	config
}

// NewExamPSClient returns a client for the Exam_PS from the given config.
func NewExamPSClient(c config) *ExamPSClient {
	return &ExamPSClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exam_ps.Hooks(f(g(h())))`.
func (c *ExamPSClient) Use(hooks ...Hook) {
	c.hooks.Exam_PS = append(c.hooks.Exam_PS, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `exam_ps.Intercept(f(g(h())))`.
func (c *ExamPSClient) Intercept(interceptors ...Interceptor) {
	c.inters.Exam_PS = append(c.inters.Exam_PS, interceptors...)
}

// Create returns a builder for creating a Exam_PS entity.
func (c *ExamPSClient) Create() *ExamPSCreate {
	mutation := newExamPSMutation(c.config, OpCreate)
	return &ExamPSCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Exam_PS entities.
func (c *ExamPSClient) CreateBulk(builders ...*ExamPSCreate) *ExamPSCreateBulk {
	return &ExamPSCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Exam_PS.
func (c *ExamPSClient) Update() *ExamPSUpdate {
	mutation := newExamPSMutation(c.config, OpUpdate)
	return &ExamPSUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExamPSClient) UpdateOne(ep *Exam_PS) *ExamPSUpdateOne {
	mutation := newExamPSMutation(c.config, OpUpdateOne, withExam_PS(ep))
	return &ExamPSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExamPSClient) UpdateOneID(id int32) *ExamPSUpdateOne {
	mutation := newExamPSMutation(c.config, OpUpdateOne, withExam_PSID(id))
	return &ExamPSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Exam_PS.
func (c *ExamPSClient) Delete() *ExamPSDelete {
	mutation := newExamPSMutation(c.config, OpDelete)
	return &ExamPSDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExamPSClient) DeleteOne(ep *Exam_PS) *ExamPSDeleteOne {
	return c.DeleteOneID(ep.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExamPSClient) DeleteOneID(id int32) *ExamPSDeleteOne {
	builder := c.Delete().Where(exam_ps.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExamPSDeleteOne{builder}
}

// Query returns a query builder for Exam_PS.
func (c *ExamPSClient) Query() *ExamPSQuery {
	return &ExamPSQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExamPS},
		inters: c.Interceptors(),
	}
}

// Get returns a Exam_PS entity by its id.
func (c *ExamPSClient) Get(ctx context.Context, id int32) (*Exam_PS, error) {
	return c.Query().Where(exam_ps.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExamPSClient) GetX(ctx context.Context, id int32) *Exam_PS {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExamcalPsRef queries the examcal_ps_ref edge of a Exam_PS.
func (c *ExamPSClient) QueryExamcalPsRef(ep *Exam_PS) *ExamCalendarQuery {
	query := (&ExamCalendarClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_ps.Table, exam_ps.FieldID, id),
			sqlgraph.To(examcalendar.Table, examcalendar.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_ps.ExamcalPsRefTable, exam_ps.ExamcalPsRefColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPapersPsRef queries the papers_ps_ref edge of a Exam_PS.
func (c *ExamPSClient) QueryPapersPsRef(ep *Exam_PS) *ExamPapersQuery {
	query := (&ExamPapersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_ps.Table, exam_ps.FieldID, id),
			sqlgraph.To(exampapers.Table, exampapers.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_ps.PapersPsRefTable, exam_ps.PapersPsRefColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsersPsType queries the users_ps_type edge of a Exam_PS.
func (c *ExamPSClient) QueryUsersPsType(ep *Exam_PS) *UserMasterQuery {
	query := (&UserMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_ps.Table, exam_ps.FieldID, id),
			sqlgraph.To(usermaster.Table, usermaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_ps.UsersPsTypeTable, exam_ps.UsersPsTypeColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamApplnPSRef queries the ExamAppln_PS_Ref edge of a Exam_PS.
func (c *ExamPSClient) QueryExamApplnPSRef(ep *Exam_PS) *ExamApplicationsPSQuery {
	query := (&ExamApplicationsPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_ps.Table, exam_ps.FieldID, id),
			sqlgraph.To(exam_applications_ps.Table, exam_applications_ps.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_ps.ExamApplnPSRefTable, exam_ps.ExamApplnPSRefColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotificationsPs queries the notifications_ps edge of a Exam_PS.
func (c *ExamPSClient) QueryNotificationsPs(ep *Exam_PS) *NotificationQuery {
	query := (&NotificationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_ps.Table, exam_ps.FieldID, id),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_ps.NotificationsPsTable, exam_ps.NotificationsPsColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExamPSClient) Hooks() []Hook {
	return c.hooks.Exam_PS
}

// Interceptors returns the client interceptors.
func (c *ExamPSClient) Interceptors() []Interceptor {
	return c.inters.Exam_PS
}

func (c *ExamPSClient) mutate(ctx context.Context, m *ExamPSMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExamPSCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExamPSUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExamPSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExamPSDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Exam_PS mutation op: %q", m.Op())
	}
}

// FacilityClient is a client for the Facility schema.
type FacilityClient struct {
	config
}

// NewFacilityClient returns a client for the Facility from the given config.
func NewFacilityClient(c config) *FacilityClient {
	return &FacilityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `facility.Hooks(f(g(h())))`.
func (c *FacilityClient) Use(hooks ...Hook) {
	c.hooks.Facility = append(c.hooks.Facility, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `facility.Intercept(f(g(h())))`.
func (c *FacilityClient) Intercept(interceptors ...Interceptor) {
	c.inters.Facility = append(c.inters.Facility, interceptors...)
}

// Create returns a builder for creating a Facility entity.
func (c *FacilityClient) Create() *FacilityCreate {
	mutation := newFacilityMutation(c.config, OpCreate)
	return &FacilityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Facility entities.
func (c *FacilityClient) CreateBulk(builders ...*FacilityCreate) *FacilityCreateBulk {
	return &FacilityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Facility.
func (c *FacilityClient) Update() *FacilityUpdate {
	mutation := newFacilityMutation(c.config, OpUpdate)
	return &FacilityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FacilityClient) UpdateOne(f *Facility) *FacilityUpdateOne {
	mutation := newFacilityMutation(c.config, OpUpdateOne, withFacility(f))
	return &FacilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FacilityClient) UpdateOneID(id int32) *FacilityUpdateOne {
	mutation := newFacilityMutation(c.config, OpUpdateOne, withFacilityID(id))
	return &FacilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Facility.
func (c *FacilityClient) Delete() *FacilityDelete {
	mutation := newFacilityMutation(c.config, OpDelete)
	return &FacilityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FacilityClient) DeleteOne(f *Facility) *FacilityDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FacilityClient) DeleteOneID(id int32) *FacilityDeleteOne {
	builder := c.Delete().Where(facility.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FacilityDeleteOne{builder}
}

// Query returns a query builder for Facility.
func (c *FacilityClient) Query() *FacilityQuery {
	return &FacilityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFacility},
		inters: c.Interceptors(),
	}
}

// Get returns a Facility entity by its id.
func (c *FacilityClient) Get(ctx context.Context, id int32) (*Facility, error) {
	return c.Query().Where(facility.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FacilityClient) GetX(ctx context.Context, id int32) *Facility {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDivisions queries the divisions edge of a Facility.
func (c *FacilityClient) QueryDivisions(f *Facility) *DivisionMasterQuery {
	query := (&DivisionMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(facility.Table, facility.FieldID, id),
			sqlgraph.To(divisionmaster.Table, divisionmaster.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, facility.DivisionsTable, facility.DivisionsColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRegions queries the regions edge of a Facility.
func (c *FacilityClient) QueryRegions(f *Facility) *RegionMasterQuery {
	query := (&RegionMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(facility.Table, facility.FieldID, id),
			sqlgraph.To(regionmaster.Table, regionmaster.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, facility.RegionsTable, facility.RegionsColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCircles queries the circles edge of a Facility.
func (c *FacilityClient) QueryCircles(f *Facility) *CircleMasterQuery {
	query := (&CircleMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(facility.Table, facility.FieldID, id),
			sqlgraph.To(circlemaster.Table, circlemaster.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, facility.CirclesTable, facility.CirclesColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCircleRef queries the circle_ref edge of a Facility.
func (c *FacilityClient) QueryCircleRef(f *Facility) *CircleMasterQuery {
	query := (&CircleMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(facility.Table, facility.FieldID, id),
			sqlgraph.To(circlemaster.Table, circlemaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, facility.CircleRefTable, facility.CircleRefColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOfficePSRef queries the Office_PS_Ref edge of a Facility.
func (c *FacilityClient) QueryOfficePSRef(f *Facility) *ExamApplicationsPSQuery {
	query := (&ExamApplicationsPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(facility.Table, facility.FieldID, id),
			sqlgraph.To(exam_applications_ps.Table, exam_applications_ps.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, facility.OfficePSRefTable, facility.OfficePSRefColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOfficeIPRef queries the Office_IP_Ref edge of a Facility.
func (c *FacilityClient) QueryOfficeIPRef(f *Facility) *ExamApplicationsIPQuery {
	query := (&ExamApplicationsIPClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(facility.Table, facility.FieldID, id),
			sqlgraph.To(exam_applications_ip.Table, exam_applications_ip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, facility.OfficeIPRefTable, facility.OfficeIPRefColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FacilityClient) Hooks() []Hook {
	return c.hooks.Facility
}

// Interceptors returns the client interceptors.
func (c *FacilityClient) Interceptors() []Interceptor {
	return c.inters.Facility
}

func (c *FacilityClient) mutate(ctx context.Context, m *FacilityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FacilityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FacilityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FacilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FacilityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Facility mutation op: %q", m.Op())
	}
}

// LoginClient is a client for the Login schema.
type LoginClient struct {
	config
}

// NewLoginClient returns a client for the Login from the given config.
func NewLoginClient(c config) *LoginClient {
	return &LoginClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `login.Hooks(f(g(h())))`.
func (c *LoginClient) Use(hooks ...Hook) {
	c.hooks.Login = append(c.hooks.Login, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `login.Intercept(f(g(h())))`.
func (c *LoginClient) Intercept(interceptors ...Interceptor) {
	c.inters.Login = append(c.inters.Login, interceptors...)
}

// Create returns a builder for creating a Login entity.
func (c *LoginClient) Create() *LoginCreate {
	mutation := newLoginMutation(c.config, OpCreate)
	return &LoginCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Login entities.
func (c *LoginClient) CreateBulk(builders ...*LoginCreate) *LoginCreateBulk {
	return &LoginCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Login.
func (c *LoginClient) Update() *LoginUpdate {
	mutation := newLoginMutation(c.config, OpUpdate)
	return &LoginUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LoginClient) UpdateOne(l *Login) *LoginUpdateOne {
	mutation := newLoginMutation(c.config, OpUpdateOne, withLogin(l))
	return &LoginUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LoginClient) UpdateOneID(id int) *LoginUpdateOne {
	mutation := newLoginMutation(c.config, OpUpdateOne, withLoginID(id))
	return &LoginUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Login.
func (c *LoginClient) Delete() *LoginDelete {
	mutation := newLoginMutation(c.config, OpDelete)
	return &LoginDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LoginClient) DeleteOne(l *Login) *LoginDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LoginClient) DeleteOneID(id int) *LoginDeleteOne {
	builder := c.Delete().Where(login.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LoginDeleteOne{builder}
}

// Query returns a query builder for Login.
func (c *LoginClient) Query() *LoginQuery {
	return &LoginQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLogin},
		inters: c.Interceptors(),
	}
}

// Get returns a Login entity by its id.
func (c *LoginClient) Get(ctx context.Context, id int) (*Login, error) {
	return c.Query().Where(login.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LoginClient) GetX(ctx context.Context, id int) *Login {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LoginClient) Hooks() []Hook {
	return c.hooks.Login
}

// Interceptors returns the client interceptors.
func (c *LoginClient) Interceptors() []Interceptor {
	return c.inters.Login
}

func (c *LoginClient) mutate(ctx context.Context, m *LoginMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LoginCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LoginUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LoginUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LoginDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Login mutation op: %q", m.Op())
	}
}

// NodalOfficerClient is a client for the NodalOfficer schema.
type NodalOfficerClient struct {
	config
}

// NewNodalOfficerClient returns a client for the NodalOfficer from the given config.
func NewNodalOfficerClient(c config) *NodalOfficerClient {
	return &NodalOfficerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `nodalofficer.Hooks(f(g(h())))`.
func (c *NodalOfficerClient) Use(hooks ...Hook) {
	c.hooks.NodalOfficer = append(c.hooks.NodalOfficer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `nodalofficer.Intercept(f(g(h())))`.
func (c *NodalOfficerClient) Intercept(interceptors ...Interceptor) {
	c.inters.NodalOfficer = append(c.inters.NodalOfficer, interceptors...)
}

// Create returns a builder for creating a NodalOfficer entity.
func (c *NodalOfficerClient) Create() *NodalOfficerCreate {
	mutation := newNodalOfficerMutation(c.config, OpCreate)
	return &NodalOfficerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NodalOfficer entities.
func (c *NodalOfficerClient) CreateBulk(builders ...*NodalOfficerCreate) *NodalOfficerCreateBulk {
	return &NodalOfficerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NodalOfficer.
func (c *NodalOfficerClient) Update() *NodalOfficerUpdate {
	mutation := newNodalOfficerMutation(c.config, OpUpdate)
	return &NodalOfficerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NodalOfficerClient) UpdateOne(no *NodalOfficer) *NodalOfficerUpdateOne {
	mutation := newNodalOfficerMutation(c.config, OpUpdateOne, withNodalOfficer(no))
	return &NodalOfficerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NodalOfficerClient) UpdateOneID(id int32) *NodalOfficerUpdateOne {
	mutation := newNodalOfficerMutation(c.config, OpUpdateOne, withNodalOfficerID(id))
	return &NodalOfficerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NodalOfficer.
func (c *NodalOfficerClient) Delete() *NodalOfficerDelete {
	mutation := newNodalOfficerMutation(c.config, OpDelete)
	return &NodalOfficerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NodalOfficerClient) DeleteOne(no *NodalOfficer) *NodalOfficerDeleteOne {
	return c.DeleteOneID(no.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NodalOfficerClient) DeleteOneID(id int32) *NodalOfficerDeleteOne {
	builder := c.Delete().Where(nodalofficer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NodalOfficerDeleteOne{builder}
}

// Query returns a query builder for NodalOfficer.
func (c *NodalOfficerClient) Query() *NodalOfficerQuery {
	return &NodalOfficerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNodalOfficer},
		inters: c.Interceptors(),
	}
}

// Get returns a NodalOfficer entity by its id.
func (c *NodalOfficerClient) Get(ctx context.Context, id int32) (*NodalOfficer, error) {
	return c.Query().Where(nodalofficer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NodalOfficerClient) GetX(ctx context.Context, id int32) *NodalOfficer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCenters queries the centers edge of a NodalOfficer.
func (c *NodalOfficerClient) QueryCenters(no *NodalOfficer) *CenterQuery {
	query := (&CenterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := no.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(nodalofficer.Table, nodalofficer.FieldID, id),
			sqlgraph.To(center.Table, center.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, nodalofficer.CentersTable, nodalofficer.CentersColumn),
		)
		fromV = sqlgraph.Neighbors(no.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExam queries the exam edge of a NodalOfficer.
func (c *NodalOfficerClient) QueryExam(no *NodalOfficer) *ExamQuery {
	query := (&ExamClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := no.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(nodalofficer.Table, nodalofficer.FieldID, id),
			sqlgraph.To(exam.Table, exam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, nodalofficer.ExamTable, nodalofficer.ExamColumn),
		)
		fromV = sqlgraph.Neighbors(no.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotification queries the notification edge of a NodalOfficer.
func (c *NodalOfficerClient) QueryNotification(no *NodalOfficer) *NotificationQuery {
	query := (&NotificationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := no.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(nodalofficer.Table, nodalofficer.FieldID, id),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, nodalofficer.NotificationTable, nodalofficer.NotificationColumn),
		)
		fromV = sqlgraph.Neighbors(no.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NodalOfficerClient) Hooks() []Hook {
	return c.hooks.NodalOfficer
}

// Interceptors returns the client interceptors.
func (c *NodalOfficerClient) Interceptors() []Interceptor {
	return c.inters.NodalOfficer
}

func (c *NodalOfficerClient) mutate(ctx context.Context, m *NodalOfficerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NodalOfficerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NodalOfficerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NodalOfficerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NodalOfficerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NodalOfficer mutation op: %q", m.Op())
	}
}

// NotificationClient is a client for the Notification schema.
type NotificationClient struct {
	config
}

// NewNotificationClient returns a client for the Notification from the given config.
func NewNotificationClient(c config) *NotificationClient {
	return &NotificationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notification.Hooks(f(g(h())))`.
func (c *NotificationClient) Use(hooks ...Hook) {
	c.hooks.Notification = append(c.hooks.Notification, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notification.Intercept(f(g(h())))`.
func (c *NotificationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Notification = append(c.inters.Notification, interceptors...)
}

// Create returns a builder for creating a Notification entity.
func (c *NotificationClient) Create() *NotificationCreate {
	mutation := newNotificationMutation(c.config, OpCreate)
	return &NotificationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Notification entities.
func (c *NotificationClient) CreateBulk(builders ...*NotificationCreate) *NotificationCreateBulk {
	return &NotificationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Notification.
func (c *NotificationClient) Update() *NotificationUpdate {
	mutation := newNotificationMutation(c.config, OpUpdate)
	return &NotificationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotificationClient) UpdateOne(n *Notification) *NotificationUpdateOne {
	mutation := newNotificationMutation(c.config, OpUpdateOne, withNotification(n))
	return &NotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotificationClient) UpdateOneID(id int32) *NotificationUpdateOne {
	mutation := newNotificationMutation(c.config, OpUpdateOne, withNotificationID(id))
	return &NotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Notification.
func (c *NotificationClient) Delete() *NotificationDelete {
	mutation := newNotificationMutation(c.config, OpDelete)
	return &NotificationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotificationClient) DeleteOne(n *Notification) *NotificationDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotificationClient) DeleteOneID(id int32) *NotificationDeleteOne {
	builder := c.Delete().Where(notification.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotificationDeleteOne{builder}
}

// Query returns a query builder for Notification.
func (c *NotificationClient) Query() *NotificationQuery {
	return &NotificationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotification},
		inters: c.Interceptors(),
	}
}

// Get returns a Notification entity by its id.
func (c *NotificationClient) Get(ctx context.Context, id int32) (*Notification, error) {
	return c.Query().Where(notification.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotificationClient) GetX(ctx context.Context, id int32) *Notification {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplications queries the applications edge of a Notification.
func (c *NotificationClient) QueryApplications(n *Notification) *ApplicationQuery {
	query := (&ApplicationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notification.Table, notification.FieldID, id),
			sqlgraph.To(application.Table, application.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, notification.ApplicationsTable, notification.ApplicationsColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCenters queries the centers edge of a Notification.
func (c *NotificationClient) QueryCenters(n *Notification) *CenterQuery {
	query := (&CenterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notification.Table, notification.FieldID, id),
			sqlgraph.To(center.Table, center.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, notification.CentersTable, notification.CentersColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNodalOfficers queries the nodal_officers edge of a Notification.
func (c *NotificationClient) QueryNodalOfficers(n *Notification) *NodalOfficerQuery {
	query := (&NodalOfficerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notification.Table, notification.FieldID, id),
			sqlgraph.To(nodalofficer.Table, nodalofficer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, notification.NodalOfficersTable, notification.NodalOfficersColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExam queries the exam edge of a Notification.
func (c *NotificationClient) QueryExam(n *Notification) *ExamQuery {
	query := (&ExamClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notification.Table, notification.FieldID, id),
			sqlgraph.To(exam.Table, exam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notification.ExamTable, notification.ExamColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVacancyYears queries the vacancy_years edge of a Notification.
func (c *NotificationClient) QueryVacancyYears(n *Notification) *VacancyYearQuery {
	query := (&VacancyYearClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notification.Table, notification.FieldID, id),
			sqlgraph.To(vacancyyear.Table, vacancyyear.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, notification.VacancyYearsTable, notification.VacancyYearsColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyRef queries the notify_ref edge of a Notification.
func (c *NotificationClient) QueryNotifyRef(n *Notification) *NotificationQuery {
	query := (&NotificationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notification.Table, notification.FieldID, id),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, notification.NotifyRefTable, notification.NotifyRefPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotificationsPs queries the notifications_ps edge of a Notification.
func (c *NotificationClient) QueryNotificationsPs(n *Notification) *ExamPSQuery {
	query := (&ExamPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notification.Table, notification.FieldID, id),
			sqlgraph.To(exam_ps.Table, exam_ps.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, notification.NotificationsPsTable, notification.NotificationsPsColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotificationsIP queries the notifications_ip edge of a Notification.
func (c *NotificationClient) QueryNotificationsIP(n *Notification) *ExamIPQuery {
	query := (&ExamIPClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notification.Table, notification.FieldID, id),
			sqlgraph.To(exam_ip.Table, exam_ip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, notification.NotificationsIPTable, notification.NotificationsIPColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotificationClient) Hooks() []Hook {
	return c.hooks.Notification
}

// Interceptors returns the client interceptors.
func (c *NotificationClient) Interceptors() []Interceptor {
	return c.inters.Notification
}

func (c *NotificationClient) mutate(ctx context.Context, m *NotificationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotificationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotificationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotificationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Notification mutation op: %q", m.Op())
	}
}

// PaperTypesClient is a client for the PaperTypes schema.
type PaperTypesClient struct {
	config
}

// NewPaperTypesClient returns a client for the PaperTypes from the given config.
func NewPaperTypesClient(c config) *PaperTypesClient {
	return &PaperTypesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `papertypes.Hooks(f(g(h())))`.
func (c *PaperTypesClient) Use(hooks ...Hook) {
	c.hooks.PaperTypes = append(c.hooks.PaperTypes, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `papertypes.Intercept(f(g(h())))`.
func (c *PaperTypesClient) Intercept(interceptors ...Interceptor) {
	c.inters.PaperTypes = append(c.inters.PaperTypes, interceptors...)
}

// Create returns a builder for creating a PaperTypes entity.
func (c *PaperTypesClient) Create() *PaperTypesCreate {
	mutation := newPaperTypesMutation(c.config, OpCreate)
	return &PaperTypesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaperTypes entities.
func (c *PaperTypesClient) CreateBulk(builders ...*PaperTypesCreate) *PaperTypesCreateBulk {
	return &PaperTypesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaperTypes.
func (c *PaperTypesClient) Update() *PaperTypesUpdate {
	mutation := newPaperTypesMutation(c.config, OpUpdate)
	return &PaperTypesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaperTypesClient) UpdateOne(pt *PaperTypes) *PaperTypesUpdateOne {
	mutation := newPaperTypesMutation(c.config, OpUpdateOne, withPaperTypes(pt))
	return &PaperTypesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaperTypesClient) UpdateOneID(id int32) *PaperTypesUpdateOne {
	mutation := newPaperTypesMutation(c.config, OpUpdateOne, withPaperTypesID(id))
	return &PaperTypesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaperTypes.
func (c *PaperTypesClient) Delete() *PaperTypesDelete {
	mutation := newPaperTypesMutation(c.config, OpDelete)
	return &PaperTypesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaperTypesClient) DeleteOne(pt *PaperTypes) *PaperTypesDeleteOne {
	return c.DeleteOneID(pt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaperTypesClient) DeleteOneID(id int32) *PaperTypesDeleteOne {
	builder := c.Delete().Where(papertypes.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaperTypesDeleteOne{builder}
}

// Query returns a query builder for PaperTypes.
func (c *PaperTypesClient) Query() *PaperTypesQuery {
	return &PaperTypesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePaperTypes},
		inters: c.Interceptors(),
	}
}

// Get returns a PaperTypes entity by its id.
func (c *PaperTypesClient) Get(ctx context.Context, id int32) (*PaperTypes, error) {
	return c.Query().Where(papertypes.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaperTypesClient) GetX(ctx context.Context, id int32) *PaperTypes {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPapercode queries the papercode edge of a PaperTypes.
func (c *PaperTypesClient) QueryPapercode(pt *PaperTypes) *ExamPapersQuery {
	query := (&ExamPapersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(papertypes.Table, papertypes.FieldID, id),
			sqlgraph.To(exampapers.Table, exampapers.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, papertypes.PapercodeTable, papertypes.PapercodeColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaperTypesClient) Hooks() []Hook {
	return c.hooks.PaperTypes
}

// Interceptors returns the client interceptors.
func (c *PaperTypesClient) Interceptors() []Interceptor {
	return c.inters.PaperTypes
}

func (c *PaperTypesClient) mutate(ctx context.Context, m *PaperTypesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaperTypesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaperTypesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaperTypesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaperTypesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PaperTypes mutation op: %q", m.Op())
	}
}

// PlaceOfPreferenceIPClient is a client for the PlaceOfPreferenceIP schema.
type PlaceOfPreferenceIPClient struct {
	config
}

// NewPlaceOfPreferenceIPClient returns a client for the PlaceOfPreferenceIP from the given config.
func NewPlaceOfPreferenceIPClient(c config) *PlaceOfPreferenceIPClient {
	return &PlaceOfPreferenceIPClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `placeofpreferenceip.Hooks(f(g(h())))`.
func (c *PlaceOfPreferenceIPClient) Use(hooks ...Hook) {
	c.hooks.PlaceOfPreferenceIP = append(c.hooks.PlaceOfPreferenceIP, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `placeofpreferenceip.Intercept(f(g(h())))`.
func (c *PlaceOfPreferenceIPClient) Intercept(interceptors ...Interceptor) {
	c.inters.PlaceOfPreferenceIP = append(c.inters.PlaceOfPreferenceIP, interceptors...)
}

// Create returns a builder for creating a PlaceOfPreferenceIP entity.
func (c *PlaceOfPreferenceIPClient) Create() *PlaceOfPreferenceIPCreate {
	mutation := newPlaceOfPreferenceIPMutation(c.config, OpCreate)
	return &PlaceOfPreferenceIPCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PlaceOfPreferenceIP entities.
func (c *PlaceOfPreferenceIPClient) CreateBulk(builders ...*PlaceOfPreferenceIPCreate) *PlaceOfPreferenceIPCreateBulk {
	return &PlaceOfPreferenceIPCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PlaceOfPreferenceIP.
func (c *PlaceOfPreferenceIPClient) Update() *PlaceOfPreferenceIPUpdate {
	mutation := newPlaceOfPreferenceIPMutation(c.config, OpUpdate)
	return &PlaceOfPreferenceIPUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlaceOfPreferenceIPClient) UpdateOne(popi *PlaceOfPreferenceIP) *PlaceOfPreferenceIPUpdateOne {
	mutation := newPlaceOfPreferenceIPMutation(c.config, OpUpdateOne, withPlaceOfPreferenceIP(popi))
	return &PlaceOfPreferenceIPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlaceOfPreferenceIPClient) UpdateOneID(id int32) *PlaceOfPreferenceIPUpdateOne {
	mutation := newPlaceOfPreferenceIPMutation(c.config, OpUpdateOne, withPlaceOfPreferenceIPID(id))
	return &PlaceOfPreferenceIPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PlaceOfPreferenceIP.
func (c *PlaceOfPreferenceIPClient) Delete() *PlaceOfPreferenceIPDelete {
	mutation := newPlaceOfPreferenceIPMutation(c.config, OpDelete)
	return &PlaceOfPreferenceIPDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlaceOfPreferenceIPClient) DeleteOne(popi *PlaceOfPreferenceIP) *PlaceOfPreferenceIPDeleteOne {
	return c.DeleteOneID(popi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlaceOfPreferenceIPClient) DeleteOneID(id int32) *PlaceOfPreferenceIPDeleteOne {
	builder := c.Delete().Where(placeofpreferenceip.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlaceOfPreferenceIPDeleteOne{builder}
}

// Query returns a query builder for PlaceOfPreferenceIP.
func (c *PlaceOfPreferenceIPClient) Query() *PlaceOfPreferenceIPQuery {
	return &PlaceOfPreferenceIPQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePlaceOfPreferenceIP},
		inters: c.Interceptors(),
	}
}

// Get returns a PlaceOfPreferenceIP entity by its id.
func (c *PlaceOfPreferenceIPClient) Get(ctx context.Context, id int32) (*PlaceOfPreferenceIP, error) {
	return c.Query().Where(placeofpreferenceip.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlaceOfPreferenceIPClient) GetX(ctx context.Context, id int32) *PlaceOfPreferenceIP {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplnIPRef queries the ApplnIP_Ref edge of a PlaceOfPreferenceIP.
func (c *PlaceOfPreferenceIPClient) QueryApplnIPRef(popi *PlaceOfPreferenceIP) *ExamApplicationsIPQuery {
	query := (&ExamApplicationsIPClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := popi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(placeofpreferenceip.Table, placeofpreferenceip.FieldID, id),
			sqlgraph.To(exam_applications_ip.Table, exam_applications_ip.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, placeofpreferenceip.ApplnIPRefTable, placeofpreferenceip.ApplnIPRefColumn),
		)
		fromV = sqlgraph.Neighbors(popi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlaceOfPreferenceIPClient) Hooks() []Hook {
	return c.hooks.PlaceOfPreferenceIP
}

// Interceptors returns the client interceptors.
func (c *PlaceOfPreferenceIPClient) Interceptors() []Interceptor {
	return c.inters.PlaceOfPreferenceIP
}

func (c *PlaceOfPreferenceIPClient) mutate(ctx context.Context, m *PlaceOfPreferenceIPMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PlaceOfPreferenceIPCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PlaceOfPreferenceIPUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PlaceOfPreferenceIPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PlaceOfPreferenceIPDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PlaceOfPreferenceIP mutation op: %q", m.Op())
	}
}

// RecommendationsIPApplicationsClient is a client for the RecommendationsIPApplications schema.
type RecommendationsIPApplicationsClient struct {
	config
}

// NewRecommendationsIPApplicationsClient returns a client for the RecommendationsIPApplications from the given config.
func NewRecommendationsIPApplicationsClient(c config) *RecommendationsIPApplicationsClient {
	return &RecommendationsIPApplicationsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `recommendationsipapplications.Hooks(f(g(h())))`.
func (c *RecommendationsIPApplicationsClient) Use(hooks ...Hook) {
	c.hooks.RecommendationsIPApplications = append(c.hooks.RecommendationsIPApplications, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `recommendationsipapplications.Intercept(f(g(h())))`.
func (c *RecommendationsIPApplicationsClient) Intercept(interceptors ...Interceptor) {
	c.inters.RecommendationsIPApplications = append(c.inters.RecommendationsIPApplications, interceptors...)
}

// Create returns a builder for creating a RecommendationsIPApplications entity.
func (c *RecommendationsIPApplicationsClient) Create() *RecommendationsIPApplicationsCreate {
	mutation := newRecommendationsIPApplicationsMutation(c.config, OpCreate)
	return &RecommendationsIPApplicationsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RecommendationsIPApplications entities.
func (c *RecommendationsIPApplicationsClient) CreateBulk(builders ...*RecommendationsIPApplicationsCreate) *RecommendationsIPApplicationsCreateBulk {
	return &RecommendationsIPApplicationsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RecommendationsIPApplications.
func (c *RecommendationsIPApplicationsClient) Update() *RecommendationsIPApplicationsUpdate {
	mutation := newRecommendationsIPApplicationsMutation(c.config, OpUpdate)
	return &RecommendationsIPApplicationsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RecommendationsIPApplicationsClient) UpdateOne(ria *RecommendationsIPApplications) *RecommendationsIPApplicationsUpdateOne {
	mutation := newRecommendationsIPApplicationsMutation(c.config, OpUpdateOne, withRecommendationsIPApplications(ria))
	return &RecommendationsIPApplicationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RecommendationsIPApplicationsClient) UpdateOneID(id int64) *RecommendationsIPApplicationsUpdateOne {
	mutation := newRecommendationsIPApplicationsMutation(c.config, OpUpdateOne, withRecommendationsIPApplicationsID(id))
	return &RecommendationsIPApplicationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RecommendationsIPApplications.
func (c *RecommendationsIPApplicationsClient) Delete() *RecommendationsIPApplicationsDelete {
	mutation := newRecommendationsIPApplicationsMutation(c.config, OpDelete)
	return &RecommendationsIPApplicationsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RecommendationsIPApplicationsClient) DeleteOne(ria *RecommendationsIPApplications) *RecommendationsIPApplicationsDeleteOne {
	return c.DeleteOneID(ria.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RecommendationsIPApplicationsClient) DeleteOneID(id int64) *RecommendationsIPApplicationsDeleteOne {
	builder := c.Delete().Where(recommendationsipapplications.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RecommendationsIPApplicationsDeleteOne{builder}
}

// Query returns a query builder for RecommendationsIPApplications.
func (c *RecommendationsIPApplicationsClient) Query() *RecommendationsIPApplicationsQuery {
	return &RecommendationsIPApplicationsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRecommendationsIPApplications},
		inters: c.Interceptors(),
	}
}

// Get returns a RecommendationsIPApplications entity by its id.
func (c *RecommendationsIPApplicationsClient) Get(ctx context.Context, id int64) (*RecommendationsIPApplications, error) {
	return c.Query().Where(recommendationsipapplications.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RecommendationsIPApplicationsClient) GetX(ctx context.Context, id int64) *RecommendationsIPApplications {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplnRef queries the ApplnRef edge of a RecommendationsIPApplications.
func (c *RecommendationsIPApplicationsClient) QueryApplnRef(ria *RecommendationsIPApplications) *ExamApplicationsIPQuery {
	query := (&ExamApplicationsIPClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ria.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recommendationsipapplications.Table, recommendationsipapplications.FieldID, id),
			sqlgraph.To(exam_applications_ip.Table, exam_applications_ip.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recommendationsipapplications.ApplnRefTable, recommendationsipapplications.ApplnRefColumn),
		)
		fromV = sqlgraph.Neighbors(ria.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RecommendationsIPApplicationsClient) Hooks() []Hook {
	return c.hooks.RecommendationsIPApplications
}

// Interceptors returns the client interceptors.
func (c *RecommendationsIPApplicationsClient) Interceptors() []Interceptor {
	return c.inters.RecommendationsIPApplications
}

func (c *RecommendationsIPApplicationsClient) mutate(ctx context.Context, m *RecommendationsIPApplicationsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RecommendationsIPApplicationsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RecommendationsIPApplicationsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RecommendationsIPApplicationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RecommendationsIPApplicationsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RecommendationsIPApplications mutation op: %q", m.Op())
	}
}

// RegionMasterClient is a client for the RegionMaster schema.
type RegionMasterClient struct {
	config
}

// NewRegionMasterClient returns a client for the RegionMaster from the given config.
func NewRegionMasterClient(c config) *RegionMasterClient {
	return &RegionMasterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `regionmaster.Hooks(f(g(h())))`.
func (c *RegionMasterClient) Use(hooks ...Hook) {
	c.hooks.RegionMaster = append(c.hooks.RegionMaster, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `regionmaster.Intercept(f(g(h())))`.
func (c *RegionMasterClient) Intercept(interceptors ...Interceptor) {
	c.inters.RegionMaster = append(c.inters.RegionMaster, interceptors...)
}

// Create returns a builder for creating a RegionMaster entity.
func (c *RegionMasterClient) Create() *RegionMasterCreate {
	mutation := newRegionMasterMutation(c.config, OpCreate)
	return &RegionMasterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RegionMaster entities.
func (c *RegionMasterClient) CreateBulk(builders ...*RegionMasterCreate) *RegionMasterCreateBulk {
	return &RegionMasterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RegionMaster.
func (c *RegionMasterClient) Update() *RegionMasterUpdate {
	mutation := newRegionMasterMutation(c.config, OpUpdate)
	return &RegionMasterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RegionMasterClient) UpdateOne(rm *RegionMaster) *RegionMasterUpdateOne {
	mutation := newRegionMasterMutation(c.config, OpUpdateOne, withRegionMaster(rm))
	return &RegionMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RegionMasterClient) UpdateOneID(id int32) *RegionMasterUpdateOne {
	mutation := newRegionMasterMutation(c.config, OpUpdateOne, withRegionMasterID(id))
	return &RegionMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RegionMaster.
func (c *RegionMasterClient) Delete() *RegionMasterDelete {
	mutation := newRegionMasterMutation(c.config, OpDelete)
	return &RegionMasterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RegionMasterClient) DeleteOne(rm *RegionMaster) *RegionMasterDeleteOne {
	return c.DeleteOneID(rm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RegionMasterClient) DeleteOneID(id int32) *RegionMasterDeleteOne {
	builder := c.Delete().Where(regionmaster.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RegionMasterDeleteOne{builder}
}

// Query returns a query builder for RegionMaster.
func (c *RegionMasterClient) Query() *RegionMasterQuery {
	return &RegionMasterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRegionMaster},
		inters: c.Interceptors(),
	}
}

// Get returns a RegionMaster entity by its id.
func (c *RegionMasterClient) Get(ctx context.Context, id int32) (*RegionMaster, error) {
	return c.Query().Where(regionmaster.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RegionMasterClient) GetX(ctx context.Context, id int32) *RegionMaster {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCircleRef queries the circle_ref edge of a RegionMaster.
func (c *RegionMasterClient) QueryCircleRef(rm *RegionMaster) *CircleMasterQuery {
	query := (&CircleMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(regionmaster.Table, regionmaster.FieldID, id),
			sqlgraph.To(circlemaster.Table, circlemaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, regionmaster.CircleRefTable, regionmaster.CircleRefColumn),
		)
		fromV = sqlgraph.Neighbors(rm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRegions queries the regions edge of a RegionMaster.
func (c *RegionMasterClient) QueryRegions(rm *RegionMaster) *DivisionMasterQuery {
	query := (&DivisionMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(regionmaster.Table, regionmaster.FieldID, id),
			sqlgraph.To(divisionmaster.Table, divisionmaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, regionmaster.RegionsTable, regionmaster.RegionsColumn),
		)
		fromV = sqlgraph.Neighbors(rm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRegionRefRef queries the region_ref_ref edge of a RegionMaster.
func (c *RegionMasterClient) QueryRegionRefRef(rm *RegionMaster) *FacilityQuery {
	query := (&FacilityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(regionmaster.Table, regionmaster.FieldID, id),
			sqlgraph.To(facility.Table, facility.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, regionmaster.RegionRefRefTable, regionmaster.RegionRefRefColumn),
		)
		fromV = sqlgraph.Neighbors(rm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RegionMasterClient) Hooks() []Hook {
	return c.hooks.RegionMaster
}

// Interceptors returns the client interceptors.
func (c *RegionMasterClient) Interceptors() []Interceptor {
	return c.inters.RegionMaster
}

func (c *RegionMasterClient) mutate(ctx context.Context, m *RegionMasterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RegionMasterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RegionMasterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RegionMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RegionMasterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RegionMaster mutation op: %q", m.Op())
	}
}

// ReversalApplicationIPClient is a client for the Reversal_Application_IP schema.
type ReversalApplicationIPClient struct {
	config
}

// NewReversalApplicationIPClient returns a client for the Reversal_Application_IP from the given config.
func NewReversalApplicationIPClient(c config) *ReversalApplicationIPClient {
	return &ReversalApplicationIPClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `reversal_application_ip.Hooks(f(g(h())))`.
func (c *ReversalApplicationIPClient) Use(hooks ...Hook) {
	c.hooks.Reversal_Application_IP = append(c.hooks.Reversal_Application_IP, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `reversal_application_ip.Intercept(f(g(h())))`.
func (c *ReversalApplicationIPClient) Intercept(interceptors ...Interceptor) {
	c.inters.Reversal_Application_IP = append(c.inters.Reversal_Application_IP, interceptors...)
}

// Create returns a builder for creating a Reversal_Application_IP entity.
func (c *ReversalApplicationIPClient) Create() *ReversalApplicationIPCreate {
	mutation := newReversalApplicationIPMutation(c.config, OpCreate)
	return &ReversalApplicationIPCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Reversal_Application_IP entities.
func (c *ReversalApplicationIPClient) CreateBulk(builders ...*ReversalApplicationIPCreate) *ReversalApplicationIPCreateBulk {
	return &ReversalApplicationIPCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Reversal_Application_IP.
func (c *ReversalApplicationIPClient) Update() *ReversalApplicationIPUpdate {
	mutation := newReversalApplicationIPMutation(c.config, OpUpdate)
	return &ReversalApplicationIPUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReversalApplicationIPClient) UpdateOne(rai *Reversal_Application_IP) *ReversalApplicationIPUpdateOne {
	mutation := newReversalApplicationIPMutation(c.config, OpUpdateOne, withReversal_Application_IP(rai))
	return &ReversalApplicationIPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReversalApplicationIPClient) UpdateOneID(id int64) *ReversalApplicationIPUpdateOne {
	mutation := newReversalApplicationIPMutation(c.config, OpUpdateOne, withReversal_Application_IPID(id))
	return &ReversalApplicationIPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Reversal_Application_IP.
func (c *ReversalApplicationIPClient) Delete() *ReversalApplicationIPDelete {
	mutation := newReversalApplicationIPMutation(c.config, OpDelete)
	return &ReversalApplicationIPDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ReversalApplicationIPClient) DeleteOne(rai *Reversal_Application_IP) *ReversalApplicationIPDeleteOne {
	return c.DeleteOneID(rai.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ReversalApplicationIPClient) DeleteOneID(id int64) *ReversalApplicationIPDeleteOne {
	builder := c.Delete().Where(reversal_application_ip.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReversalApplicationIPDeleteOne{builder}
}

// Query returns a query builder for Reversal_Application_IP.
func (c *ReversalApplicationIPClient) Query() *ReversalApplicationIPQuery {
	return &ReversalApplicationIPQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeReversalApplicationIP},
		inters: c.Interceptors(),
	}
}

// Get returns a Reversal_Application_IP entity by its id.
func (c *ReversalApplicationIPClient) Get(ctx context.Context, id int64) (*Reversal_Application_IP, error) {
	return c.Query().Where(reversal_application_ip.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReversalApplicationIPClient) GetX(ctx context.Context, id int64) *Reversal_Application_IP {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ReversalApplicationIPClient) Hooks() []Hook {
	return c.hooks.Reversal_Application_IP
}

// Interceptors returns the client interceptors.
func (c *ReversalApplicationIPClient) Interceptors() []Interceptor {
	return c.inters.Reversal_Application_IP
}

func (c *ReversalApplicationIPClient) mutate(ctx context.Context, m *ReversalApplicationIPMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ReversalApplicationIPCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ReversalApplicationIPUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ReversalApplicationIPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ReversalApplicationIPDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Reversal_Application_IP mutation op: %q", m.Op())
	}
}

// RoleMasterClient is a client for the RoleMaster schema.
type RoleMasterClient struct {
	config
}

// NewRoleMasterClient returns a client for the RoleMaster from the given config.
func NewRoleMasterClient(c config) *RoleMasterClient {
	return &RoleMasterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rolemaster.Hooks(f(g(h())))`.
func (c *RoleMasterClient) Use(hooks ...Hook) {
	c.hooks.RoleMaster = append(c.hooks.RoleMaster, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rolemaster.Intercept(f(g(h())))`.
func (c *RoleMasterClient) Intercept(interceptors ...Interceptor) {
	c.inters.RoleMaster = append(c.inters.RoleMaster, interceptors...)
}

// Create returns a builder for creating a RoleMaster entity.
func (c *RoleMasterClient) Create() *RoleMasterCreate {
	mutation := newRoleMasterMutation(c.config, OpCreate)
	return &RoleMasterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RoleMaster entities.
func (c *RoleMasterClient) CreateBulk(builders ...*RoleMasterCreate) *RoleMasterCreateBulk {
	return &RoleMasterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RoleMaster.
func (c *RoleMasterClient) Update() *RoleMasterUpdate {
	mutation := newRoleMasterMutation(c.config, OpUpdate)
	return &RoleMasterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleMasterClient) UpdateOne(rm *RoleMaster) *RoleMasterUpdateOne {
	mutation := newRoleMasterMutation(c.config, OpUpdateOne, withRoleMaster(rm))
	return &RoleMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoleMasterClient) UpdateOneID(id int32) *RoleMasterUpdateOne {
	mutation := newRoleMasterMutation(c.config, OpUpdateOne, withRoleMasterID(id))
	return &RoleMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RoleMaster.
func (c *RoleMasterClient) Delete() *RoleMasterDelete {
	mutation := newRoleMasterMutation(c.config, OpDelete)
	return &RoleMasterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoleMasterClient) DeleteOne(rm *RoleMaster) *RoleMasterDeleteOne {
	return c.DeleteOneID(rm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoleMasterClient) DeleteOneID(id int32) *RoleMasterDeleteOne {
	builder := c.Delete().Where(rolemaster.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoleMasterDeleteOne{builder}
}

// Query returns a query builder for RoleMaster.
func (c *RoleMasterClient) Query() *RoleMasterQuery {
	return &RoleMasterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRoleMaster},
		inters: c.Interceptors(),
	}
}

// Get returns a RoleMaster entity by its id.
func (c *RoleMasterClient) Get(ctx context.Context, id int32) (*RoleMaster, error) {
	return c.Query().Where(rolemaster.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoleMasterClient) GetX(ctx context.Context, id int32) *RoleMaster {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoles queries the roles edge of a RoleMaster.
func (c *RoleMasterClient) QueryRoles(rm *RoleMaster) *AdminLoginQuery {
	query := (&AdminLoginClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rolemaster.Table, rolemaster.FieldID, id),
			sqlgraph.To(adminlogin.Table, adminlogin.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rolemaster.RolesTable, rolemaster.RolesColumn),
		)
		fromV = sqlgraph.Neighbors(rm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRolesRef queries the Roles_Ref edge of a RoleMaster.
func (c *RoleMasterClient) QueryRolesRef(rm *RoleMaster) *UserMasterQuery {
	query := (&UserMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rolemaster.Table, rolemaster.FieldID, id),
			sqlgraph.To(usermaster.Table, usermaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rolemaster.RolesRefTable, rolemaster.RolesRefColumn),
		)
		fromV = sqlgraph.Neighbors(rm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRolesPSRef queries the Roles_PS_Ref edge of a RoleMaster.
func (c *RoleMasterClient) QueryRolesPSRef(rm *RoleMaster) *ExamApplicationsPSQuery {
	query := (&ExamApplicationsPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rolemaster.Table, rolemaster.FieldID, id),
			sqlgraph.To(exam_applications_ps.Table, exam_applications_ps.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rolemaster.RolesPSRefTable, rolemaster.RolesPSRefColumn),
		)
		fromV = sqlgraph.Neighbors(rm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRolesIPRef queries the Roles_IP_Ref edge of a RoleMaster.
func (c *RoleMasterClient) QueryRolesIPRef(rm *RoleMaster) *ExamApplicationsIPQuery {
	query := (&ExamApplicationsIPClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rolemaster.Table, rolemaster.FieldID, id),
			sqlgraph.To(exam_applications_ip.Table, exam_applications_ip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rolemaster.RolesIPRefTable, rolemaster.RolesIPRefColumn),
		)
		fromV = sqlgraph.Neighbors(rm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoleMasterClient) Hooks() []Hook {
	return c.hooks.RoleMaster
}

// Interceptors returns the client interceptors.
func (c *RoleMasterClient) Interceptors() []Interceptor {
	return c.inters.RoleMaster
}

func (c *RoleMasterClient) mutate(ctx context.Context, m *RoleMasterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoleMasterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoleMasterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoleMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoleMasterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RoleMaster mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserMasterClient is a client for the UserMaster schema.
type UserMasterClient struct {
	config
}

// NewUserMasterClient returns a client for the UserMaster from the given config.
func NewUserMasterClient(c config) *UserMasterClient {
	return &UserMasterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usermaster.Hooks(f(g(h())))`.
func (c *UserMasterClient) Use(hooks ...Hook) {
	c.hooks.UserMaster = append(c.hooks.UserMaster, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usermaster.Intercept(f(g(h())))`.
func (c *UserMasterClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserMaster = append(c.inters.UserMaster, interceptors...)
}

// Create returns a builder for creating a UserMaster entity.
func (c *UserMasterClient) Create() *UserMasterCreate {
	mutation := newUserMasterMutation(c.config, OpCreate)
	return &UserMasterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserMaster entities.
func (c *UserMasterClient) CreateBulk(builders ...*UserMasterCreate) *UserMasterCreateBulk {
	return &UserMasterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserMaster.
func (c *UserMasterClient) Update() *UserMasterUpdate {
	mutation := newUserMasterMutation(c.config, OpUpdate)
	return &UserMasterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserMasterClient) UpdateOne(um *UserMaster) *UserMasterUpdateOne {
	mutation := newUserMasterMutation(c.config, OpUpdateOne, withUserMaster(um))
	return &UserMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserMasterClient) UpdateOneID(id int64) *UserMasterUpdateOne {
	mutation := newUserMasterMutation(c.config, OpUpdateOne, withUserMasterID(id))
	return &UserMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserMaster.
func (c *UserMasterClient) Delete() *UserMasterDelete {
	mutation := newUserMasterMutation(c.config, OpDelete)
	return &UserMasterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserMasterClient) DeleteOne(um *UserMaster) *UserMasterDeleteOne {
	return c.DeleteOneID(um.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserMasterClient) DeleteOneID(id int64) *UserMasterDeleteOne {
	builder := c.Delete().Where(usermaster.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserMasterDeleteOne{builder}
}

// Query returns a query builder for UserMaster.
func (c *UserMasterClient) Query() *UserMasterQuery {
	return &UserMasterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserMaster},
		inters: c.Interceptors(),
	}
}

// Get returns a UserMaster entity by its id.
func (c *UserMasterClient) Get(ctx context.Context, id int64) (*UserMaster, error) {
	return c.Query().Where(usermaster.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserMasterClient) GetX(ctx context.Context, id int64) *UserMaster {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoles queries the roles edge of a UserMaster.
func (c *UserMasterClient) QueryRoles(um *UserMaster) *RoleMasterQuery {
	query := (&RoleMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := um.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usermaster.Table, usermaster.FieldID, id),
			sqlgraph.To(rolemaster.Table, rolemaster.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usermaster.RolesTable, usermaster.RolesColumn),
		)
		fromV = sqlgraph.Neighbors(um.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsermasterRef queries the UsermasterRef edge of a UserMaster.
func (c *UserMasterClient) QueryUsermasterRef(um *UserMaster) *EmployeeMasterQuery {
	query := (&EmployeeMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := um.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usermaster.Table, usermaster.FieldID, id),
			sqlgraph.To(employeemaster.Table, employeemaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usermaster.UsermasterRefTable, usermaster.UsermasterRefColumn),
		)
		fromV = sqlgraph.Neighbors(um.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsersPSRef queries the UsersPSRef edge of a UserMaster.
func (c *UserMasterClient) QueryUsersPSRef(um *UserMaster) *ExamApplicationsPSQuery {
	query := (&ExamApplicationsPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := um.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usermaster.Table, usermaster.FieldID, id),
			sqlgraph.To(exam_applications_ps.Table, exam_applications_ps.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usermaster.UsersPSRefTable, usermaster.UsersPSRefColumn),
		)
		fromV = sqlgraph.Neighbors(um.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsersIPRef queries the UsersIPRef edge of a UserMaster.
func (c *UserMasterClient) QueryUsersIPRef(um *UserMaster) *ExamApplicationsIPQuery {
	query := (&ExamApplicationsIPClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := um.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usermaster.Table, usermaster.FieldID, id),
			sqlgraph.To(exam_applications_ip.Table, exam_applications_ip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usermaster.UsersIPRefTable, usermaster.UsersIPRefColumn),
		)
		fromV = sqlgraph.Neighbors(um.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsersPsType queries the users_ps_type edge of a UserMaster.
func (c *UserMasterClient) QueryUsersPsType(um *UserMaster) *ExamPSQuery {
	query := (&ExamPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := um.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usermaster.Table, usermaster.FieldID, id),
			sqlgraph.To(exam_ps.Table, exam_ps.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usermaster.UsersPsTypeTable, usermaster.UsersPsTypeColumn),
		)
		fromV = sqlgraph.Neighbors(um.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsersIPType queries the users_ip_type edge of a UserMaster.
func (c *UserMasterClient) QueryUsersIPType(um *UserMaster) *ExamIPQuery {
	query := (&ExamIPClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := um.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usermaster.Table, usermaster.FieldID, id),
			sqlgraph.To(exam_ip.Table, exam_ip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usermaster.UsersIPTypeTable, usermaster.UsersIPTypeColumn),
		)
		fromV = sqlgraph.Neighbors(um.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserMasterClient) Hooks() []Hook {
	return c.hooks.UserMaster
}

// Interceptors returns the client interceptors.
func (c *UserMasterClient) Interceptors() []Interceptor {
	return c.inters.UserMaster
}

func (c *UserMasterClient) mutate(ctx context.Context, m *UserMasterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserMasterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserMasterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserMasterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserMaster mutation op: %q", m.Op())
	}
}

// VacancyYearClient is a client for the VacancyYear schema.
type VacancyYearClient struct {
	config
}

// NewVacancyYearClient returns a client for the VacancyYear from the given config.
func NewVacancyYearClient(c config) *VacancyYearClient {
	return &VacancyYearClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vacancyyear.Hooks(f(g(h())))`.
func (c *VacancyYearClient) Use(hooks ...Hook) {
	c.hooks.VacancyYear = append(c.hooks.VacancyYear, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `vacancyyear.Intercept(f(g(h())))`.
func (c *VacancyYearClient) Intercept(interceptors ...Interceptor) {
	c.inters.VacancyYear = append(c.inters.VacancyYear, interceptors...)
}

// Create returns a builder for creating a VacancyYear entity.
func (c *VacancyYearClient) Create() *VacancyYearCreate {
	mutation := newVacancyYearMutation(c.config, OpCreate)
	return &VacancyYearCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VacancyYear entities.
func (c *VacancyYearClient) CreateBulk(builders ...*VacancyYearCreate) *VacancyYearCreateBulk {
	return &VacancyYearCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VacancyYear.
func (c *VacancyYearClient) Update() *VacancyYearUpdate {
	mutation := newVacancyYearMutation(c.config, OpUpdate)
	return &VacancyYearUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VacancyYearClient) UpdateOne(vy *VacancyYear) *VacancyYearUpdateOne {
	mutation := newVacancyYearMutation(c.config, OpUpdateOne, withVacancyYear(vy))
	return &VacancyYearUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VacancyYearClient) UpdateOneID(id int32) *VacancyYearUpdateOne {
	mutation := newVacancyYearMutation(c.config, OpUpdateOne, withVacancyYearID(id))
	return &VacancyYearUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VacancyYear.
func (c *VacancyYearClient) Delete() *VacancyYearDelete {
	mutation := newVacancyYearMutation(c.config, OpDelete)
	return &VacancyYearDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VacancyYearClient) DeleteOne(vy *VacancyYear) *VacancyYearDeleteOne {
	return c.DeleteOneID(vy.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VacancyYearClient) DeleteOneID(id int32) *VacancyYearDeleteOne {
	builder := c.Delete().Where(vacancyyear.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VacancyYearDeleteOne{builder}
}

// Query returns a query builder for VacancyYear.
func (c *VacancyYearClient) Query() *VacancyYearQuery {
	return &VacancyYearQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVacancyYear},
		inters: c.Interceptors(),
	}
}

// Get returns a VacancyYear entity by its id.
func (c *VacancyYearClient) Get(ctx context.Context, id int32) (*VacancyYear, error) {
	return c.Query().Where(vacancyyear.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VacancyYearClient) GetX(ctx context.Context, id int32) *VacancyYear {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVacancyRef queries the vacancy_ref edge of a VacancyYear.
func (c *VacancyYearClient) QueryVacancyRef(vy *VacancyYear) *ExamCalendarQuery {
	query := (&ExamCalendarClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := vy.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vacancyyear.Table, vacancyyear.FieldID, id),
			sqlgraph.To(examcalendar.Table, examcalendar.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, vacancyyear.VacancyRefTable, vacancyyear.VacancyRefColumn),
		)
		fromV = sqlgraph.Neighbors(vy.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExams queries the exams edge of a VacancyYear.
func (c *VacancyYearClient) QueryExams(vy *VacancyYear) *ExamQuery {
	query := (&ExamClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := vy.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vacancyyear.Table, vacancyyear.FieldID, id),
			sqlgraph.To(exam.Table, exam.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, vacancyyear.ExamsTable, vacancyyear.ExamsColumn),
		)
		fromV = sqlgraph.Neighbors(vy.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VacancyYearClient) Hooks() []Hook {
	return c.hooks.VacancyYear
}

// Interceptors returns the client interceptors.
func (c *VacancyYearClient) Interceptors() []Interceptor {
	return c.inters.VacancyYear
}

func (c *VacancyYearClient) mutate(ctx context.Context, m *VacancyYearMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VacancyYearCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VacancyYearUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VacancyYearUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VacancyYearDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown VacancyYear mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AdminLogin, AgeEligibility, Application, Cadre_Choice_IP, Cadre_Choice_PA,
		Cadre_Choice_PM, Cadre_Choice_PS, Center, CircleMaster, DirectorateUsers,
		Disability, DivisionMaster, Division_Choice_PA, Division_Choice_PM,
		Division_Choice_PS, EligibilityMaster, EmployeeCadre, EmployeeCategory,
		EmployeeDesignation, EmployeeMaster, EmployeePosts, Employees, Exam,
		ExamCalendar, ExamPapers, ExamType, Exam_Applications_IP, Exam_Applications_PS,
		Exam_IP, Exam_PA, Exam_PM, Exam_PS, Facility, Login, NodalOfficer,
		Notification, PaperTypes, PlaceOfPreferenceIP, RecommendationsIPApplications,
		RegionMaster, Reversal_Application_IP, RoleMaster, User, UserMaster,
		VacancyYear []ent.Hook
	}
	inters struct {
		AdminLogin, AgeEligibility, Application, Cadre_Choice_IP, Cadre_Choice_PA,
		Cadre_Choice_PM, Cadre_Choice_PS, Center, CircleMaster, DirectorateUsers,
		Disability, DivisionMaster, Division_Choice_PA, Division_Choice_PM,
		Division_Choice_PS, EligibilityMaster, EmployeeCadre, EmployeeCategory,
		EmployeeDesignation, EmployeeMaster, EmployeePosts, Employees, Exam,
		ExamCalendar, ExamPapers, ExamType, Exam_Applications_IP, Exam_Applications_PS,
		Exam_IP, Exam_PA, Exam_PM, Exam_PS, Facility, Login, NodalOfficer,
		Notification, PaperTypes, PlaceOfPreferenceIP, RecommendationsIPApplications,
		RegionMaster, Reversal_Application_IP, RoleMaster, User, UserMaster,
		VacancyYear []ent.Interceptor
	}
)
