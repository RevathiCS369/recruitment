// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/exam"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Exam is the model entity for the Exam schema.
type Exam struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// ExamName holds the value of the "ExamName" field.
	ExamName string `json:"ExamName,omitempty"`
	// NumOfPapers holds the value of the "NumOfPapers" field.
	NumOfPapers int32 `json:"NumOfPapers,omitempty"`
	// NotificationBy holds the value of the "NotificationBy" field.
	NotificationBy string `json:"NotificationBy,omitempty"`
	// ConductedBy holds the value of the "ConductedBy" field.
	ConductedBy string `json:"ConductedBy,omitempty"`
	// NodalOfficerLevel holds the value of the "NodalOfficerLevel" field.
	NodalOfficerLevel string `json:"NodalOfficerLevel,omitempty"`
	// CalendarCode holds the value of the "CalendarCode" field.
	CalendarCode int32 `json:"CalendarCode,omitempty"`
	// PaperCode holds the value of the "PaperCode" field.
	PaperCode int32 `json:"PaperCode,omitempty"`
	// ExamType holds the value of the "ExamType" field.
	ExamType string `json:"ExamType,omitempty"`
	// TentativeNotificationMandatoryDate holds the value of the "TentativeNotificationMandatoryDate" field.
	TentativeNotificationMandatoryDate bool `json:"TentativeNotificationMandatoryDate,omitempty"`
	// LocalLanguage holds the value of the "LocalLanguage" field.
	LocalLanguage bool `json:"LocalLanguage,omitempty"`
	// OptionForPost holds the value of the "OptionForPost" field.
	OptionForPost bool `json:"OptionForPost,omitempty"`
	// OptionToWriteExamOtherThanParent holds the value of the "OptionToWriteExamOtherThanParent" field.
	OptionToWriteExamOtherThanParent bool `json:"OptionToWriteExamOtherThanParent,omitempty"`
	// OrderNumber holds the value of the "OrderNumber" field.
	OrderNumber string `json:"OrderNumber,omitempty"`
	// Status holds the value of the "Status" field.
	Status string `json:"Status,omitempty"`
	// ExamTypeCode holds the value of the "ExamTypeCode" field.
	ExamTypeCode int32 `json:"ExamTypeCode,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExamQuery when eager-loading is set.
	Edges              ExamEdges `json:"edges"`
	vacancy_year_exams *int32
	selectValues       sql.SelectValues
}

// ExamEdges holds the relations/edges for other nodes in the graph.
type ExamEdges struct {
	// NodalOfficers holds the value of the nodal_officers edge.
	NodalOfficers []*NodalOfficer `json:"nodal_officers,omitempty"`
	// Notifications holds the value of the notifications edge.
	Notifications []*Notification `json:"notifications,omitempty"`
	// ExamsRef holds the value of the exams_ref edge.
	ExamsRef []*ExamCalendar `json:"exams_ref,omitempty"`
	// Papers holds the value of the papers edge.
	Papers []*ExamPapers `json:"papers,omitempty"`
	// ExamEligibility holds the value of the ExamEligibility edge.
	ExamEligibility []*EligibilityMaster `json:"ExamEligibility,omitempty"`
	// ExamsType holds the value of the exams_type edge.
	ExamsType []*ExamType `json:"exams_type,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// NodalOfficersOrErr returns the NodalOfficers value or an error if the edge
// was not loaded in eager-loading.
func (e ExamEdges) NodalOfficersOrErr() ([]*NodalOfficer, error) {
	if e.loadedTypes[0] {
		return e.NodalOfficers, nil
	}
	return nil, &NotLoadedError{edge: "nodal_officers"}
}

// NotificationsOrErr returns the Notifications value or an error if the edge
// was not loaded in eager-loading.
func (e ExamEdges) NotificationsOrErr() ([]*Notification, error) {
	if e.loadedTypes[1] {
		return e.Notifications, nil
	}
	return nil, &NotLoadedError{edge: "notifications"}
}

// ExamsRefOrErr returns the ExamsRef value or an error if the edge
// was not loaded in eager-loading.
func (e ExamEdges) ExamsRefOrErr() ([]*ExamCalendar, error) {
	if e.loadedTypes[2] {
		return e.ExamsRef, nil
	}
	return nil, &NotLoadedError{edge: "exams_ref"}
}

// PapersOrErr returns the Papers value or an error if the edge
// was not loaded in eager-loading.
func (e ExamEdges) PapersOrErr() ([]*ExamPapers, error) {
	if e.loadedTypes[3] {
		return e.Papers, nil
	}
	return nil, &NotLoadedError{edge: "papers"}
}

// ExamEligibilityOrErr returns the ExamEligibility value or an error if the edge
// was not loaded in eager-loading.
func (e ExamEdges) ExamEligibilityOrErr() ([]*EligibilityMaster, error) {
	if e.loadedTypes[4] {
		return e.ExamEligibility, nil
	}
	return nil, &NotLoadedError{edge: "ExamEligibility"}
}

// ExamsTypeOrErr returns the ExamsType value or an error if the edge
// was not loaded in eager-loading.
func (e ExamEdges) ExamsTypeOrErr() ([]*ExamType, error) {
	if e.loadedTypes[5] {
		return e.ExamsType, nil
	}
	return nil, &NotLoadedError{edge: "exams_type"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Exam) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case exam.FieldTentativeNotificationMandatoryDate, exam.FieldLocalLanguage, exam.FieldOptionForPost, exam.FieldOptionToWriteExamOtherThanParent:
			values[i] = new(sql.NullBool)
		case exam.FieldID, exam.FieldNumOfPapers, exam.FieldCalendarCode, exam.FieldPaperCode, exam.FieldExamTypeCode:
			values[i] = new(sql.NullInt64)
		case exam.FieldExamName, exam.FieldNotificationBy, exam.FieldConductedBy, exam.FieldNodalOfficerLevel, exam.FieldExamType, exam.FieldOrderNumber, exam.FieldStatus:
			values[i] = new(sql.NullString)
		case exam.ForeignKeys[0]: // vacancy_year_exams
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Exam fields.
func (e *Exam) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case exam.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int32(value.Int64)
		case exam.FieldExamName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamName", values[i])
			} else if value.Valid {
				e.ExamName = value.String
			}
		case exam.FieldNumOfPapers:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field NumOfPapers", values[i])
			} else if value.Valid {
				e.NumOfPapers = int32(value.Int64)
			}
		case exam.FieldNotificationBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NotificationBy", values[i])
			} else if value.Valid {
				e.NotificationBy = value.String
			}
		case exam.FieldConductedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ConductedBy", values[i])
			} else if value.Valid {
				e.ConductedBy = value.String
			}
		case exam.FieldNodalOfficerLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NodalOfficerLevel", values[i])
			} else if value.Valid {
				e.NodalOfficerLevel = value.String
			}
		case exam.FieldCalendarCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CalendarCode", values[i])
			} else if value.Valid {
				e.CalendarCode = int32(value.Int64)
			}
		case exam.FieldPaperCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field PaperCode", values[i])
			} else if value.Valid {
				e.PaperCode = int32(value.Int64)
			}
		case exam.FieldExamType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamType", values[i])
			} else if value.Valid {
				e.ExamType = value.String
			}
		case exam.FieldTentativeNotificationMandatoryDate:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field TentativeNotificationMandatoryDate", values[i])
			} else if value.Valid {
				e.TentativeNotificationMandatoryDate = value.Bool
			}
		case exam.FieldLocalLanguage:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field LocalLanguage", values[i])
			} else if value.Valid {
				e.LocalLanguage = value.Bool
			}
		case exam.FieldOptionForPost:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field OptionForPost", values[i])
			} else if value.Valid {
				e.OptionForPost = value.Bool
			}
		case exam.FieldOptionToWriteExamOtherThanParent:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field OptionToWriteExamOtherThanParent", values[i])
			} else if value.Valid {
				e.OptionToWriteExamOtherThanParent = value.Bool
			}
		case exam.FieldOrderNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OrderNumber", values[i])
			} else if value.Valid {
				e.OrderNumber = value.String
			}
		case exam.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				e.Status = value.String
			}
		case exam.FieldExamTypeCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamTypeCode", values[i])
			} else if value.Valid {
				e.ExamTypeCode = int32(value.Int64)
			}
		case exam.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field vacancy_year_exams", value)
			} else if value.Valid {
				e.vacancy_year_exams = new(int32)
				*e.vacancy_year_exams = int32(value.Int64)
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Exam.
// This includes values selected through modifiers, order, etc.
func (e *Exam) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryNodalOfficers queries the "nodal_officers" edge of the Exam entity.
func (e *Exam) QueryNodalOfficers() *NodalOfficerQuery {
	return NewExamClient(e.config).QueryNodalOfficers(e)
}

// QueryNotifications queries the "notifications" edge of the Exam entity.
func (e *Exam) QueryNotifications() *NotificationQuery {
	return NewExamClient(e.config).QueryNotifications(e)
}

// QueryExamsRef queries the "exams_ref" edge of the Exam entity.
func (e *Exam) QueryExamsRef() *ExamCalendarQuery {
	return NewExamClient(e.config).QueryExamsRef(e)
}

// QueryPapers queries the "papers" edge of the Exam entity.
func (e *Exam) QueryPapers() *ExamPapersQuery {
	return NewExamClient(e.config).QueryPapers(e)
}

// QueryExamEligibility queries the "ExamEligibility" edge of the Exam entity.
func (e *Exam) QueryExamEligibility() *EligibilityMasterQuery {
	return NewExamClient(e.config).QueryExamEligibility(e)
}

// QueryExamsType queries the "exams_type" edge of the Exam entity.
func (e *Exam) QueryExamsType() *ExamTypeQuery {
	return NewExamClient(e.config).QueryExamsType(e)
}

// Update returns a builder for updating this Exam.
// Note that you need to call Exam.Unwrap() before calling this method if this Exam
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Exam) Update() *ExamUpdateOne {
	return NewExamClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Exam entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Exam) Unwrap() *Exam {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Exam is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Exam) String() string {
	var builder strings.Builder
	builder.WriteString("Exam(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("ExamName=")
	builder.WriteString(e.ExamName)
	builder.WriteString(", ")
	builder.WriteString("NumOfPapers=")
	builder.WriteString(fmt.Sprintf("%v", e.NumOfPapers))
	builder.WriteString(", ")
	builder.WriteString("NotificationBy=")
	builder.WriteString(e.NotificationBy)
	builder.WriteString(", ")
	builder.WriteString("ConductedBy=")
	builder.WriteString(e.ConductedBy)
	builder.WriteString(", ")
	builder.WriteString("NodalOfficerLevel=")
	builder.WriteString(e.NodalOfficerLevel)
	builder.WriteString(", ")
	builder.WriteString("CalendarCode=")
	builder.WriteString(fmt.Sprintf("%v", e.CalendarCode))
	builder.WriteString(", ")
	builder.WriteString("PaperCode=")
	builder.WriteString(fmt.Sprintf("%v", e.PaperCode))
	builder.WriteString(", ")
	builder.WriteString("ExamType=")
	builder.WriteString(e.ExamType)
	builder.WriteString(", ")
	builder.WriteString("TentativeNotificationMandatoryDate=")
	builder.WriteString(fmt.Sprintf("%v", e.TentativeNotificationMandatoryDate))
	builder.WriteString(", ")
	builder.WriteString("LocalLanguage=")
	builder.WriteString(fmt.Sprintf("%v", e.LocalLanguage))
	builder.WriteString(", ")
	builder.WriteString("OptionForPost=")
	builder.WriteString(fmt.Sprintf("%v", e.OptionForPost))
	builder.WriteString(", ")
	builder.WriteString("OptionToWriteExamOtherThanParent=")
	builder.WriteString(fmt.Sprintf("%v", e.OptionToWriteExamOtherThanParent))
	builder.WriteString(", ")
	builder.WriteString("OrderNumber=")
	builder.WriteString(e.OrderNumber)
	builder.WriteString(", ")
	builder.WriteString("Status=")
	builder.WriteString(e.Status)
	builder.WriteString(", ")
	builder.WriteString("ExamTypeCode=")
	builder.WriteString(fmt.Sprintf("%v", e.ExamTypeCode))
	builder.WriteByte(')')
	return builder.String()
}

// Exams is a parsable slice of Exam.
type Exams []*Exam
