// Code generated by ent, DO NOT EDIT.

package disability

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the disability type in the database.
	Label = "disability"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "DisabilityTypeID"
	// FieldDisabilityTypeCode holds the string denoting the disabilitytypecode field in the database.
	FieldDisabilityTypeCode = "disability_type_code"
	// FieldDisabilityTypeDescription holds the string denoting the disabilitytypedescription field in the database.
	FieldDisabilityTypeDescription = "disability_type_description"
	// FieldDisabilityPercentage holds the string denoting the disabilitypercentage field in the database.
	FieldDisabilityPercentage = "disability_percentage"
	// FieldDisabilityFlag holds the string denoting the disabilityflag field in the database.
	FieldDisabilityFlag = "disability_flag"
	// Table holds the table name of the disability in the database.
	Table = "Disability"
)

// Columns holds all SQL columns for disability fields.
var Columns = []string{
	FieldID,
	FieldDisabilityTypeCode,
	FieldDisabilityTypeDescription,
	FieldDisabilityPercentage,
	FieldDisabilityFlag,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// DisabilityFlag defines the type for the "DisabilityFlag" enum field.
type DisabilityFlag string

// DisabilityFlag values.
const (
	DisabilityFlagTemporary DisabilityFlag = "Temporary"
	DisabilityFlagPermanent DisabilityFlag = "Permanent"
)

func (_disabilityflag DisabilityFlag) String() string {
	return string(_disabilityflag)
}

// DisabilityFlagValidator is a validator for the "DisabilityFlag" field enum values. It is called by the builders before save.
func DisabilityFlagValidator(_disabilityflag DisabilityFlag) error {
	switch _disabilityflag {
	case DisabilityFlagTemporary, DisabilityFlagPermanent:
		return nil
	default:
		return fmt.Errorf("disability: invalid enum value for DisabilityFlag field: %q", _disabilityflag)
	}
}

// OrderOption defines the ordering options for the Disability queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDisabilityTypeCode orders the results by the DisabilityTypeCode field.
func ByDisabilityTypeCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabilityTypeCode, opts...).ToFunc()
}

// ByDisabilityTypeDescription orders the results by the DisabilityTypeDescription field.
func ByDisabilityTypeDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabilityTypeDescription, opts...).ToFunc()
}

// ByDisabilityPercentage orders the results by the DisabilityPercentage field.
func ByDisabilityPercentage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabilityPercentage, opts...).ToFunc()
}

// ByDisabilityFlag orders the results by the DisabilityFlag field.
func ByDisabilityFlag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabilityFlag, opts...).ToFunc()
}
