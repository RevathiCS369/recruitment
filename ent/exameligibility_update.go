// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/ageeligibility"
	"recruit/ent/exameligibility"
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamEligibilityUpdate is the builder for updating ExamEligibility entities.
type ExamEligibilityUpdate struct {
	config
	hooks    []Hook
	mutation *ExamEligibilityMutation
}

// Where appends a list predicates to the ExamEligibilityUpdate builder.
func (eeu *ExamEligibilityUpdate) Where(ps ...predicate.ExamEligibility) *ExamEligibilityUpdate {
	eeu.mutation.Where(ps...)
	return eeu
}

// SetExamcode sets the "Examcode" field.
func (eeu *ExamEligibilityUpdate) SetExamcode(i int32) *ExamEligibilityUpdate {
	eeu.mutation.ResetExamcode()
	eeu.mutation.SetExamcode(i)
	return eeu
}

// AddExamcode adds i to the "Examcode" field.
func (eeu *ExamEligibilityUpdate) AddExamcode(i int32) *ExamEligibilityUpdate {
	eeu.mutation.AddExamcode(i)
	return eeu
}

// SetAgeCriteria sets the "AgeCriteria" field.
func (eeu *ExamEligibilityUpdate) SetAgeCriteria(s string) *ExamEligibilityUpdate {
	eeu.mutation.SetAgeCriteria(s)
	return eeu
}

// SetNillableAgeCriteria sets the "AgeCriteria" field if the given value is not nil.
func (eeu *ExamEligibilityUpdate) SetNillableAgeCriteria(s *string) *ExamEligibilityUpdate {
	if s != nil {
		eeu.SetAgeCriteria(*s)
	}
	return eeu
}

// ClearAgeCriteria clears the value of the "AgeCriteria" field.
func (eeu *ExamEligibilityUpdate) ClearAgeCriteria() *ExamEligibilityUpdate {
	eeu.mutation.ClearAgeCriteria()
	return eeu
}

// SetServiceCriteria sets the "ServiceCriteria" field.
func (eeu *ExamEligibilityUpdate) SetServiceCriteria(s string) *ExamEligibilityUpdate {
	eeu.mutation.SetServiceCriteria(s)
	return eeu
}

// SetNillableServiceCriteria sets the "ServiceCriteria" field if the given value is not nil.
func (eeu *ExamEligibilityUpdate) SetNillableServiceCriteria(s *string) *ExamEligibilityUpdate {
	if s != nil {
		eeu.SetServiceCriteria(*s)
	}
	return eeu
}

// ClearServiceCriteria clears the value of the "ServiceCriteria" field.
func (eeu *ExamEligibilityUpdate) ClearServiceCriteria() *ExamEligibilityUpdate {
	eeu.mutation.ClearServiceCriteria()
	return eeu
}

// SetDrivingLicenseCriteria sets the "DrivingLicenseCriteria" field.
func (eeu *ExamEligibilityUpdate) SetDrivingLicenseCriteria(s string) *ExamEligibilityUpdate {
	eeu.mutation.SetDrivingLicenseCriteria(s)
	return eeu
}

// SetNillableDrivingLicenseCriteria sets the "DrivingLicenseCriteria" field if the given value is not nil.
func (eeu *ExamEligibilityUpdate) SetNillableDrivingLicenseCriteria(s *string) *ExamEligibilityUpdate {
	if s != nil {
		eeu.SetDrivingLicenseCriteria(*s)
	}
	return eeu
}

// ClearDrivingLicenseCriteria clears the value of the "DrivingLicenseCriteria" field.
func (eeu *ExamEligibilityUpdate) ClearDrivingLicenseCriteria() *ExamEligibilityUpdate {
	eeu.mutation.ClearDrivingLicenseCriteria()
	return eeu
}

// SetNotifyCode sets the "NotifyCode" field.
func (eeu *ExamEligibilityUpdate) SetNotifyCode(i int32) *ExamEligibilityUpdate {
	eeu.mutation.ResetNotifyCode()
	eeu.mutation.SetNotifyCode(i)
	return eeu
}

// SetNillableNotifyCode sets the "NotifyCode" field if the given value is not nil.
func (eeu *ExamEligibilityUpdate) SetNillableNotifyCode(i *int32) *ExamEligibilityUpdate {
	if i != nil {
		eeu.SetNotifyCode(*i)
	}
	return eeu
}

// AddNotifyCode adds i to the "NotifyCode" field.
func (eeu *ExamEligibilityUpdate) AddNotifyCode(i int32) *ExamEligibilityUpdate {
	eeu.mutation.AddNotifyCode(i)
	return eeu
}

// ClearNotifyCode clears the value of the "NotifyCode" field.
func (eeu *ExamEligibilityUpdate) ClearNotifyCode() *ExamEligibilityUpdate {
	eeu.mutation.ClearNotifyCode()
	return eeu
}

// SetEmployeeCadreID sets the "EmployeeCadreID" field.
func (eeu *ExamEligibilityUpdate) SetEmployeeCadreID(i int32) *ExamEligibilityUpdate {
	eeu.mutation.ResetEmployeeCadreID()
	eeu.mutation.SetEmployeeCadreID(i)
	return eeu
}

// SetNillableEmployeeCadreID sets the "EmployeeCadreID" field if the given value is not nil.
func (eeu *ExamEligibilityUpdate) SetNillableEmployeeCadreID(i *int32) *ExamEligibilityUpdate {
	if i != nil {
		eeu.SetEmployeeCadreID(*i)
	}
	return eeu
}

// AddEmployeeCadreID adds i to the "EmployeeCadreID" field.
func (eeu *ExamEligibilityUpdate) AddEmployeeCadreID(i int32) *ExamEligibilityUpdate {
	eeu.mutation.AddEmployeeCadreID(i)
	return eeu
}

// ClearEmployeeCadreID clears the value of the "EmployeeCadreID" field.
func (eeu *ExamEligibilityUpdate) ClearEmployeeCadreID() *ExamEligibilityUpdate {
	eeu.mutation.ClearEmployeeCadreID()
	return eeu
}

// SetCategoryID sets the "CategoryID" field.
func (eeu *ExamEligibilityUpdate) SetCategoryID(i int32) *ExamEligibilityUpdate {
	eeu.mutation.ResetCategoryID()
	eeu.mutation.SetCategoryID(i)
	return eeu
}

// SetNillableCategoryID sets the "CategoryID" field if the given value is not nil.
func (eeu *ExamEligibilityUpdate) SetNillableCategoryID(i *int32) *ExamEligibilityUpdate {
	if i != nil {
		eeu.SetCategoryID(*i)
	}
	return eeu
}

// AddCategoryID adds i to the "CategoryID" field.
func (eeu *ExamEligibilityUpdate) AddCategoryID(i int32) *ExamEligibilityUpdate {
	eeu.mutation.AddCategoryID(i)
	return eeu
}

// ClearCategoryID clears the value of the "CategoryID" field.
func (eeu *ExamEligibilityUpdate) ClearCategoryID() *ExamEligibilityUpdate {
	eeu.mutation.ClearCategoryID()
	return eeu
}

// AddAgeEligibilityIDs adds the "age_eligibilities" edge to the AgeEligibility entity by IDs.
func (eeu *ExamEligibilityUpdate) AddAgeEligibilityIDs(ids ...int32) *ExamEligibilityUpdate {
	eeu.mutation.AddAgeEligibilityIDs(ids...)
	return eeu
}

// AddAgeEligibilities adds the "age_eligibilities" edges to the AgeEligibility entity.
func (eeu *ExamEligibilityUpdate) AddAgeEligibilities(a ...*AgeEligibility) *ExamEligibilityUpdate {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return eeu.AddAgeEligibilityIDs(ids...)
}

// Mutation returns the ExamEligibilityMutation object of the builder.
func (eeu *ExamEligibilityUpdate) Mutation() *ExamEligibilityMutation {
	return eeu.mutation
}

// ClearAgeEligibilities clears all "age_eligibilities" edges to the AgeEligibility entity.
func (eeu *ExamEligibilityUpdate) ClearAgeEligibilities() *ExamEligibilityUpdate {
	eeu.mutation.ClearAgeEligibilities()
	return eeu
}

// RemoveAgeEligibilityIDs removes the "age_eligibilities" edge to AgeEligibility entities by IDs.
func (eeu *ExamEligibilityUpdate) RemoveAgeEligibilityIDs(ids ...int32) *ExamEligibilityUpdate {
	eeu.mutation.RemoveAgeEligibilityIDs(ids...)
	return eeu
}

// RemoveAgeEligibilities removes "age_eligibilities" edges to AgeEligibility entities.
func (eeu *ExamEligibilityUpdate) RemoveAgeEligibilities(a ...*AgeEligibility) *ExamEligibilityUpdate {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return eeu.RemoveAgeEligibilityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eeu *ExamEligibilityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eeu.sqlSave, eeu.mutation, eeu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eeu *ExamEligibilityUpdate) SaveX(ctx context.Context) int {
	affected, err := eeu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eeu *ExamEligibilityUpdate) Exec(ctx context.Context) error {
	_, err := eeu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eeu *ExamEligibilityUpdate) ExecX(ctx context.Context) {
	if err := eeu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eeu *ExamEligibilityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(exameligibility.Table, exameligibility.Columns, sqlgraph.NewFieldSpec(exameligibility.FieldID, field.TypeInt32))
	if ps := eeu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eeu.mutation.Examcode(); ok {
		_spec.SetField(exameligibility.FieldExamcode, field.TypeInt32, value)
	}
	if value, ok := eeu.mutation.AddedExamcode(); ok {
		_spec.AddField(exameligibility.FieldExamcode, field.TypeInt32, value)
	}
	if value, ok := eeu.mutation.AgeCriteria(); ok {
		_spec.SetField(exameligibility.FieldAgeCriteria, field.TypeString, value)
	}
	if eeu.mutation.AgeCriteriaCleared() {
		_spec.ClearField(exameligibility.FieldAgeCriteria, field.TypeString)
	}
	if value, ok := eeu.mutation.ServiceCriteria(); ok {
		_spec.SetField(exameligibility.FieldServiceCriteria, field.TypeString, value)
	}
	if eeu.mutation.ServiceCriteriaCleared() {
		_spec.ClearField(exameligibility.FieldServiceCriteria, field.TypeString)
	}
	if value, ok := eeu.mutation.DrivingLicenseCriteria(); ok {
		_spec.SetField(exameligibility.FieldDrivingLicenseCriteria, field.TypeString, value)
	}
	if eeu.mutation.DrivingLicenseCriteriaCleared() {
		_spec.ClearField(exameligibility.FieldDrivingLicenseCriteria, field.TypeString)
	}
	if value, ok := eeu.mutation.NotifyCode(); ok {
		_spec.SetField(exameligibility.FieldNotifyCode, field.TypeInt32, value)
	}
	if value, ok := eeu.mutation.AddedNotifyCode(); ok {
		_spec.AddField(exameligibility.FieldNotifyCode, field.TypeInt32, value)
	}
	if eeu.mutation.NotifyCodeCleared() {
		_spec.ClearField(exameligibility.FieldNotifyCode, field.TypeInt32)
	}
	if value, ok := eeu.mutation.EmployeeCadreID(); ok {
		_spec.SetField(exameligibility.FieldEmployeeCadreID, field.TypeInt32, value)
	}
	if value, ok := eeu.mutation.AddedEmployeeCadreID(); ok {
		_spec.AddField(exameligibility.FieldEmployeeCadreID, field.TypeInt32, value)
	}
	if eeu.mutation.EmployeeCadreIDCleared() {
		_spec.ClearField(exameligibility.FieldEmployeeCadreID, field.TypeInt32)
	}
	if value, ok := eeu.mutation.CategoryID(); ok {
		_spec.SetField(exameligibility.FieldCategoryID, field.TypeInt32, value)
	}
	if value, ok := eeu.mutation.AddedCategoryID(); ok {
		_spec.AddField(exameligibility.FieldCategoryID, field.TypeInt32, value)
	}
	if eeu.mutation.CategoryIDCleared() {
		_spec.ClearField(exameligibility.FieldCategoryID, field.TypeInt32)
	}
	if eeu.mutation.AgeEligibilitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exameligibility.AgeEligibilitiesTable,
			Columns: []string{exameligibility.AgeEligibilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ageeligibility.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eeu.mutation.RemovedAgeEligibilitiesIDs(); len(nodes) > 0 && !eeu.mutation.AgeEligibilitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exameligibility.AgeEligibilitiesTable,
			Columns: []string{exameligibility.AgeEligibilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ageeligibility.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eeu.mutation.AgeEligibilitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exameligibility.AgeEligibilitiesTable,
			Columns: []string{exameligibility.AgeEligibilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ageeligibility.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eeu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exameligibility.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eeu.mutation.done = true
	return n, nil
}

// ExamEligibilityUpdateOne is the builder for updating a single ExamEligibility entity.
type ExamEligibilityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExamEligibilityMutation
}

// SetExamcode sets the "Examcode" field.
func (eeuo *ExamEligibilityUpdateOne) SetExamcode(i int32) *ExamEligibilityUpdateOne {
	eeuo.mutation.ResetExamcode()
	eeuo.mutation.SetExamcode(i)
	return eeuo
}

// AddExamcode adds i to the "Examcode" field.
func (eeuo *ExamEligibilityUpdateOne) AddExamcode(i int32) *ExamEligibilityUpdateOne {
	eeuo.mutation.AddExamcode(i)
	return eeuo
}

// SetAgeCriteria sets the "AgeCriteria" field.
func (eeuo *ExamEligibilityUpdateOne) SetAgeCriteria(s string) *ExamEligibilityUpdateOne {
	eeuo.mutation.SetAgeCriteria(s)
	return eeuo
}

// SetNillableAgeCriteria sets the "AgeCriteria" field if the given value is not nil.
func (eeuo *ExamEligibilityUpdateOne) SetNillableAgeCriteria(s *string) *ExamEligibilityUpdateOne {
	if s != nil {
		eeuo.SetAgeCriteria(*s)
	}
	return eeuo
}

// ClearAgeCriteria clears the value of the "AgeCriteria" field.
func (eeuo *ExamEligibilityUpdateOne) ClearAgeCriteria() *ExamEligibilityUpdateOne {
	eeuo.mutation.ClearAgeCriteria()
	return eeuo
}

// SetServiceCriteria sets the "ServiceCriteria" field.
func (eeuo *ExamEligibilityUpdateOne) SetServiceCriteria(s string) *ExamEligibilityUpdateOne {
	eeuo.mutation.SetServiceCriteria(s)
	return eeuo
}

// SetNillableServiceCriteria sets the "ServiceCriteria" field if the given value is not nil.
func (eeuo *ExamEligibilityUpdateOne) SetNillableServiceCriteria(s *string) *ExamEligibilityUpdateOne {
	if s != nil {
		eeuo.SetServiceCriteria(*s)
	}
	return eeuo
}

// ClearServiceCriteria clears the value of the "ServiceCriteria" field.
func (eeuo *ExamEligibilityUpdateOne) ClearServiceCriteria() *ExamEligibilityUpdateOne {
	eeuo.mutation.ClearServiceCriteria()
	return eeuo
}

// SetDrivingLicenseCriteria sets the "DrivingLicenseCriteria" field.
func (eeuo *ExamEligibilityUpdateOne) SetDrivingLicenseCriteria(s string) *ExamEligibilityUpdateOne {
	eeuo.mutation.SetDrivingLicenseCriteria(s)
	return eeuo
}

// SetNillableDrivingLicenseCriteria sets the "DrivingLicenseCriteria" field if the given value is not nil.
func (eeuo *ExamEligibilityUpdateOne) SetNillableDrivingLicenseCriteria(s *string) *ExamEligibilityUpdateOne {
	if s != nil {
		eeuo.SetDrivingLicenseCriteria(*s)
	}
	return eeuo
}

// ClearDrivingLicenseCriteria clears the value of the "DrivingLicenseCriteria" field.
func (eeuo *ExamEligibilityUpdateOne) ClearDrivingLicenseCriteria() *ExamEligibilityUpdateOne {
	eeuo.mutation.ClearDrivingLicenseCriteria()
	return eeuo
}

// SetNotifyCode sets the "NotifyCode" field.
func (eeuo *ExamEligibilityUpdateOne) SetNotifyCode(i int32) *ExamEligibilityUpdateOne {
	eeuo.mutation.ResetNotifyCode()
	eeuo.mutation.SetNotifyCode(i)
	return eeuo
}

// SetNillableNotifyCode sets the "NotifyCode" field if the given value is not nil.
func (eeuo *ExamEligibilityUpdateOne) SetNillableNotifyCode(i *int32) *ExamEligibilityUpdateOne {
	if i != nil {
		eeuo.SetNotifyCode(*i)
	}
	return eeuo
}

// AddNotifyCode adds i to the "NotifyCode" field.
func (eeuo *ExamEligibilityUpdateOne) AddNotifyCode(i int32) *ExamEligibilityUpdateOne {
	eeuo.mutation.AddNotifyCode(i)
	return eeuo
}

// ClearNotifyCode clears the value of the "NotifyCode" field.
func (eeuo *ExamEligibilityUpdateOne) ClearNotifyCode() *ExamEligibilityUpdateOne {
	eeuo.mutation.ClearNotifyCode()
	return eeuo
}

// SetEmployeeCadreID sets the "EmployeeCadreID" field.
func (eeuo *ExamEligibilityUpdateOne) SetEmployeeCadreID(i int32) *ExamEligibilityUpdateOne {
	eeuo.mutation.ResetEmployeeCadreID()
	eeuo.mutation.SetEmployeeCadreID(i)
	return eeuo
}

// SetNillableEmployeeCadreID sets the "EmployeeCadreID" field if the given value is not nil.
func (eeuo *ExamEligibilityUpdateOne) SetNillableEmployeeCadreID(i *int32) *ExamEligibilityUpdateOne {
	if i != nil {
		eeuo.SetEmployeeCadreID(*i)
	}
	return eeuo
}

// AddEmployeeCadreID adds i to the "EmployeeCadreID" field.
func (eeuo *ExamEligibilityUpdateOne) AddEmployeeCadreID(i int32) *ExamEligibilityUpdateOne {
	eeuo.mutation.AddEmployeeCadreID(i)
	return eeuo
}

// ClearEmployeeCadreID clears the value of the "EmployeeCadreID" field.
func (eeuo *ExamEligibilityUpdateOne) ClearEmployeeCadreID() *ExamEligibilityUpdateOne {
	eeuo.mutation.ClearEmployeeCadreID()
	return eeuo
}

// SetCategoryID sets the "CategoryID" field.
func (eeuo *ExamEligibilityUpdateOne) SetCategoryID(i int32) *ExamEligibilityUpdateOne {
	eeuo.mutation.ResetCategoryID()
	eeuo.mutation.SetCategoryID(i)
	return eeuo
}

// SetNillableCategoryID sets the "CategoryID" field if the given value is not nil.
func (eeuo *ExamEligibilityUpdateOne) SetNillableCategoryID(i *int32) *ExamEligibilityUpdateOne {
	if i != nil {
		eeuo.SetCategoryID(*i)
	}
	return eeuo
}

// AddCategoryID adds i to the "CategoryID" field.
func (eeuo *ExamEligibilityUpdateOne) AddCategoryID(i int32) *ExamEligibilityUpdateOne {
	eeuo.mutation.AddCategoryID(i)
	return eeuo
}

// ClearCategoryID clears the value of the "CategoryID" field.
func (eeuo *ExamEligibilityUpdateOne) ClearCategoryID() *ExamEligibilityUpdateOne {
	eeuo.mutation.ClearCategoryID()
	return eeuo
}

// AddAgeEligibilityIDs adds the "age_eligibilities" edge to the AgeEligibility entity by IDs.
func (eeuo *ExamEligibilityUpdateOne) AddAgeEligibilityIDs(ids ...int32) *ExamEligibilityUpdateOne {
	eeuo.mutation.AddAgeEligibilityIDs(ids...)
	return eeuo
}

// AddAgeEligibilities adds the "age_eligibilities" edges to the AgeEligibility entity.
func (eeuo *ExamEligibilityUpdateOne) AddAgeEligibilities(a ...*AgeEligibility) *ExamEligibilityUpdateOne {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return eeuo.AddAgeEligibilityIDs(ids...)
}

// Mutation returns the ExamEligibilityMutation object of the builder.
func (eeuo *ExamEligibilityUpdateOne) Mutation() *ExamEligibilityMutation {
	return eeuo.mutation
}

// ClearAgeEligibilities clears all "age_eligibilities" edges to the AgeEligibility entity.
func (eeuo *ExamEligibilityUpdateOne) ClearAgeEligibilities() *ExamEligibilityUpdateOne {
	eeuo.mutation.ClearAgeEligibilities()
	return eeuo
}

// RemoveAgeEligibilityIDs removes the "age_eligibilities" edge to AgeEligibility entities by IDs.
func (eeuo *ExamEligibilityUpdateOne) RemoveAgeEligibilityIDs(ids ...int32) *ExamEligibilityUpdateOne {
	eeuo.mutation.RemoveAgeEligibilityIDs(ids...)
	return eeuo
}

// RemoveAgeEligibilities removes "age_eligibilities" edges to AgeEligibility entities.
func (eeuo *ExamEligibilityUpdateOne) RemoveAgeEligibilities(a ...*AgeEligibility) *ExamEligibilityUpdateOne {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return eeuo.RemoveAgeEligibilityIDs(ids...)
}

// Where appends a list predicates to the ExamEligibilityUpdate builder.
func (eeuo *ExamEligibilityUpdateOne) Where(ps ...predicate.ExamEligibility) *ExamEligibilityUpdateOne {
	eeuo.mutation.Where(ps...)
	return eeuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eeuo *ExamEligibilityUpdateOne) Select(field string, fields ...string) *ExamEligibilityUpdateOne {
	eeuo.fields = append([]string{field}, fields...)
	return eeuo
}

// Save executes the query and returns the updated ExamEligibility entity.
func (eeuo *ExamEligibilityUpdateOne) Save(ctx context.Context) (*ExamEligibility, error) {
	return withHooks(ctx, eeuo.sqlSave, eeuo.mutation, eeuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eeuo *ExamEligibilityUpdateOne) SaveX(ctx context.Context) *ExamEligibility {
	node, err := eeuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eeuo *ExamEligibilityUpdateOne) Exec(ctx context.Context) error {
	_, err := eeuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eeuo *ExamEligibilityUpdateOne) ExecX(ctx context.Context) {
	if err := eeuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eeuo *ExamEligibilityUpdateOne) sqlSave(ctx context.Context) (_node *ExamEligibility, err error) {
	_spec := sqlgraph.NewUpdateSpec(exameligibility.Table, exameligibility.Columns, sqlgraph.NewFieldSpec(exameligibility.FieldID, field.TypeInt32))
	id, ok := eeuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExamEligibility.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eeuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exameligibility.FieldID)
		for _, f := range fields {
			if !exameligibility.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exameligibility.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eeuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eeuo.mutation.Examcode(); ok {
		_spec.SetField(exameligibility.FieldExamcode, field.TypeInt32, value)
	}
	if value, ok := eeuo.mutation.AddedExamcode(); ok {
		_spec.AddField(exameligibility.FieldExamcode, field.TypeInt32, value)
	}
	if value, ok := eeuo.mutation.AgeCriteria(); ok {
		_spec.SetField(exameligibility.FieldAgeCriteria, field.TypeString, value)
	}
	if eeuo.mutation.AgeCriteriaCleared() {
		_spec.ClearField(exameligibility.FieldAgeCriteria, field.TypeString)
	}
	if value, ok := eeuo.mutation.ServiceCriteria(); ok {
		_spec.SetField(exameligibility.FieldServiceCriteria, field.TypeString, value)
	}
	if eeuo.mutation.ServiceCriteriaCleared() {
		_spec.ClearField(exameligibility.FieldServiceCriteria, field.TypeString)
	}
	if value, ok := eeuo.mutation.DrivingLicenseCriteria(); ok {
		_spec.SetField(exameligibility.FieldDrivingLicenseCriteria, field.TypeString, value)
	}
	if eeuo.mutation.DrivingLicenseCriteriaCleared() {
		_spec.ClearField(exameligibility.FieldDrivingLicenseCriteria, field.TypeString)
	}
	if value, ok := eeuo.mutation.NotifyCode(); ok {
		_spec.SetField(exameligibility.FieldNotifyCode, field.TypeInt32, value)
	}
	if value, ok := eeuo.mutation.AddedNotifyCode(); ok {
		_spec.AddField(exameligibility.FieldNotifyCode, field.TypeInt32, value)
	}
	if eeuo.mutation.NotifyCodeCleared() {
		_spec.ClearField(exameligibility.FieldNotifyCode, field.TypeInt32)
	}
	if value, ok := eeuo.mutation.EmployeeCadreID(); ok {
		_spec.SetField(exameligibility.FieldEmployeeCadreID, field.TypeInt32, value)
	}
	if value, ok := eeuo.mutation.AddedEmployeeCadreID(); ok {
		_spec.AddField(exameligibility.FieldEmployeeCadreID, field.TypeInt32, value)
	}
	if eeuo.mutation.EmployeeCadreIDCleared() {
		_spec.ClearField(exameligibility.FieldEmployeeCadreID, field.TypeInt32)
	}
	if value, ok := eeuo.mutation.CategoryID(); ok {
		_spec.SetField(exameligibility.FieldCategoryID, field.TypeInt32, value)
	}
	if value, ok := eeuo.mutation.AddedCategoryID(); ok {
		_spec.AddField(exameligibility.FieldCategoryID, field.TypeInt32, value)
	}
	if eeuo.mutation.CategoryIDCleared() {
		_spec.ClearField(exameligibility.FieldCategoryID, field.TypeInt32)
	}
	if eeuo.mutation.AgeEligibilitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exameligibility.AgeEligibilitiesTable,
			Columns: []string{exameligibility.AgeEligibilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ageeligibility.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eeuo.mutation.RemovedAgeEligibilitiesIDs(); len(nodes) > 0 && !eeuo.mutation.AgeEligibilitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exameligibility.AgeEligibilitiesTable,
			Columns: []string{exameligibility.AgeEligibilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ageeligibility.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eeuo.mutation.AgeEligibilitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exameligibility.AgeEligibilitiesTable,
			Columns: []string{exameligibility.AgeEligibilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ageeligibility.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ExamEligibility{config: eeuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eeuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exameligibility.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eeuo.mutation.done = true
	return _node, nil
}
