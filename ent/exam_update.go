// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/exam"
	"recruit/ent/examcalendar"
	"recruit/ent/exampapers"
	"recruit/ent/nodalofficer"
	"recruit/ent/notification"
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamUpdate is the builder for updating Exam entities.
type ExamUpdate struct {
	config
	hooks    []Hook
	mutation *ExamMutation
}

// Where appends a list predicates to the ExamUpdate builder.
func (eu *ExamUpdate) Where(ps ...predicate.Exam) *ExamUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetExamName sets the "ExamName" field.
func (eu *ExamUpdate) SetExamName(s string) *ExamUpdate {
	eu.mutation.SetExamName(s)
	return eu
}

// SetNumOfPapers sets the "NumOfPapers" field.
func (eu *ExamUpdate) SetNumOfPapers(i int32) *ExamUpdate {
	eu.mutation.ResetNumOfPapers()
	eu.mutation.SetNumOfPapers(i)
	return eu
}

// AddNumOfPapers adds i to the "NumOfPapers" field.
func (eu *ExamUpdate) AddNumOfPapers(i int32) *ExamUpdate {
	eu.mutation.AddNumOfPapers(i)
	return eu
}

// SetNotificationBy sets the "NotificationBy" field.
func (eu *ExamUpdate) SetNotificationBy(s string) *ExamUpdate {
	eu.mutation.SetNotificationBy(s)
	return eu
}

// SetConductedBy sets the "ConductedBy" field.
func (eu *ExamUpdate) SetConductedBy(s string) *ExamUpdate {
	eu.mutation.SetConductedBy(s)
	return eu
}

// SetNodalOfficerLevel sets the "NodalOfficerLevel" field.
func (eu *ExamUpdate) SetNodalOfficerLevel(i int32) *ExamUpdate {
	eu.mutation.ResetNodalOfficerLevel()
	eu.mutation.SetNodalOfficerLevel(i)
	return eu
}

// SetNillableNodalOfficerLevel sets the "NodalOfficerLevel" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableNodalOfficerLevel(i *int32) *ExamUpdate {
	if i != nil {
		eu.SetNodalOfficerLevel(*i)
	}
	return eu
}

// AddNodalOfficerLevel adds i to the "NodalOfficerLevel" field.
func (eu *ExamUpdate) AddNodalOfficerLevel(i int32) *ExamUpdate {
	eu.mutation.AddNodalOfficerLevel(i)
	return eu
}

// ClearNodalOfficerLevel clears the value of the "NodalOfficerLevel" field.
func (eu *ExamUpdate) ClearNodalOfficerLevel() *ExamUpdate {
	eu.mutation.ClearNodalOfficerLevel()
	return eu
}

// SetCalendarCode sets the "CalendarCode" field.
func (eu *ExamUpdate) SetCalendarCode(i int32) *ExamUpdate {
	eu.mutation.ResetCalendarCode()
	eu.mutation.SetCalendarCode(i)
	return eu
}

// SetNillableCalendarCode sets the "CalendarCode" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableCalendarCode(i *int32) *ExamUpdate {
	if i != nil {
		eu.SetCalendarCode(*i)
	}
	return eu
}

// AddCalendarCode adds i to the "CalendarCode" field.
func (eu *ExamUpdate) AddCalendarCode(i int32) *ExamUpdate {
	eu.mutation.AddCalendarCode(i)
	return eu
}

// ClearCalendarCode clears the value of the "CalendarCode" field.
func (eu *ExamUpdate) ClearCalendarCode() *ExamUpdate {
	eu.mutation.ClearCalendarCode()
	return eu
}

// SetPaperCode sets the "PaperCode" field.
func (eu *ExamUpdate) SetPaperCode(i int32) *ExamUpdate {
	eu.mutation.ResetPaperCode()
	eu.mutation.SetPaperCode(i)
	return eu
}

// SetNillablePaperCode sets the "PaperCode" field if the given value is not nil.
func (eu *ExamUpdate) SetNillablePaperCode(i *int32) *ExamUpdate {
	if i != nil {
		eu.SetPaperCode(*i)
	}
	return eu
}

// AddPaperCode adds i to the "PaperCode" field.
func (eu *ExamUpdate) AddPaperCode(i int32) *ExamUpdate {
	eu.mutation.AddPaperCode(i)
	return eu
}

// ClearPaperCode clears the value of the "PaperCode" field.
func (eu *ExamUpdate) ClearPaperCode() *ExamUpdate {
	eu.mutation.ClearPaperCode()
	return eu
}

// AddNodalOfficerIDs adds the "nodal_officers" edge to the NodalOfficer entity by IDs.
func (eu *ExamUpdate) AddNodalOfficerIDs(ids ...int32) *ExamUpdate {
	eu.mutation.AddNodalOfficerIDs(ids...)
	return eu
}

// AddNodalOfficers adds the "nodal_officers" edges to the NodalOfficer entity.
func (eu *ExamUpdate) AddNodalOfficers(n ...*NodalOfficer) *ExamUpdate {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return eu.AddNodalOfficerIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (eu *ExamUpdate) AddNotificationIDs(ids ...int32) *ExamUpdate {
	eu.mutation.AddNotificationIDs(ids...)
	return eu
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (eu *ExamUpdate) AddNotifications(n ...*Notification) *ExamUpdate {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return eu.AddNotificationIDs(ids...)
}

// AddExamsRefIDs adds the "exams_ref" edge to the ExamCalendar entity by IDs.
func (eu *ExamUpdate) AddExamsRefIDs(ids ...int32) *ExamUpdate {
	eu.mutation.AddExamsRefIDs(ids...)
	return eu
}

// AddExamsRef adds the "exams_ref" edges to the ExamCalendar entity.
func (eu *ExamUpdate) AddExamsRef(e ...*ExamCalendar) *ExamUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddExamsRefIDs(ids...)
}

// AddPaperIDs adds the "papers" edge to the ExamPapers entity by IDs.
func (eu *ExamUpdate) AddPaperIDs(ids ...int32) *ExamUpdate {
	eu.mutation.AddPaperIDs(ids...)
	return eu
}

// AddPapers adds the "papers" edges to the ExamPapers entity.
func (eu *ExamUpdate) AddPapers(e ...*ExamPapers) *ExamUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddPaperIDs(ids...)
}

// Mutation returns the ExamMutation object of the builder.
func (eu *ExamUpdate) Mutation() *ExamMutation {
	return eu.mutation
}

// ClearNodalOfficers clears all "nodal_officers" edges to the NodalOfficer entity.
func (eu *ExamUpdate) ClearNodalOfficers() *ExamUpdate {
	eu.mutation.ClearNodalOfficers()
	return eu
}

// RemoveNodalOfficerIDs removes the "nodal_officers" edge to NodalOfficer entities by IDs.
func (eu *ExamUpdate) RemoveNodalOfficerIDs(ids ...int32) *ExamUpdate {
	eu.mutation.RemoveNodalOfficerIDs(ids...)
	return eu
}

// RemoveNodalOfficers removes "nodal_officers" edges to NodalOfficer entities.
func (eu *ExamUpdate) RemoveNodalOfficers(n ...*NodalOfficer) *ExamUpdate {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return eu.RemoveNodalOfficerIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (eu *ExamUpdate) ClearNotifications() *ExamUpdate {
	eu.mutation.ClearNotifications()
	return eu
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (eu *ExamUpdate) RemoveNotificationIDs(ids ...int32) *ExamUpdate {
	eu.mutation.RemoveNotificationIDs(ids...)
	return eu
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (eu *ExamUpdate) RemoveNotifications(n ...*Notification) *ExamUpdate {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return eu.RemoveNotificationIDs(ids...)
}

// ClearExamsRef clears all "exams_ref" edges to the ExamCalendar entity.
func (eu *ExamUpdate) ClearExamsRef() *ExamUpdate {
	eu.mutation.ClearExamsRef()
	return eu
}

// RemoveExamsRefIDs removes the "exams_ref" edge to ExamCalendar entities by IDs.
func (eu *ExamUpdate) RemoveExamsRefIDs(ids ...int32) *ExamUpdate {
	eu.mutation.RemoveExamsRefIDs(ids...)
	return eu
}

// RemoveExamsRef removes "exams_ref" edges to ExamCalendar entities.
func (eu *ExamUpdate) RemoveExamsRef(e ...*ExamCalendar) *ExamUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveExamsRefIDs(ids...)
}

// ClearPapers clears all "papers" edges to the ExamPapers entity.
func (eu *ExamUpdate) ClearPapers() *ExamUpdate {
	eu.mutation.ClearPapers()
	return eu
}

// RemovePaperIDs removes the "papers" edge to ExamPapers entities by IDs.
func (eu *ExamUpdate) RemovePaperIDs(ids ...int32) *ExamUpdate {
	eu.mutation.RemovePaperIDs(ids...)
	return eu
}

// RemovePapers removes "papers" edges to ExamPapers entities.
func (eu *ExamUpdate) RemovePapers(e ...*ExamPapers) *ExamUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemovePaperIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExamUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExamUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExamUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExamUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *ExamUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(exam.Table, exam.Columns, sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.ExamName(); ok {
		_spec.SetField(exam.FieldExamName, field.TypeString, value)
	}
	if value, ok := eu.mutation.NumOfPapers(); ok {
		_spec.SetField(exam.FieldNumOfPapers, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.AddedNumOfPapers(); ok {
		_spec.AddField(exam.FieldNumOfPapers, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.NotificationBy(); ok {
		_spec.SetField(exam.FieldNotificationBy, field.TypeString, value)
	}
	if value, ok := eu.mutation.ConductedBy(); ok {
		_spec.SetField(exam.FieldConductedBy, field.TypeString, value)
	}
	if value, ok := eu.mutation.NodalOfficerLevel(); ok {
		_spec.SetField(exam.FieldNodalOfficerLevel, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.AddedNodalOfficerLevel(); ok {
		_spec.AddField(exam.FieldNodalOfficerLevel, field.TypeInt32, value)
	}
	if eu.mutation.NodalOfficerLevelCleared() {
		_spec.ClearField(exam.FieldNodalOfficerLevel, field.TypeInt32)
	}
	if value, ok := eu.mutation.CalendarCode(); ok {
		_spec.SetField(exam.FieldCalendarCode, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.AddedCalendarCode(); ok {
		_spec.AddField(exam.FieldCalendarCode, field.TypeInt32, value)
	}
	if eu.mutation.CalendarCodeCleared() {
		_spec.ClearField(exam.FieldCalendarCode, field.TypeInt32)
	}
	if value, ok := eu.mutation.PaperCode(); ok {
		_spec.SetField(exam.FieldPaperCode, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.AddedPaperCode(); ok {
		_spec.AddField(exam.FieldPaperCode, field.TypeInt32, value)
	}
	if eu.mutation.PaperCodeCleared() {
		_spec.ClearField(exam.FieldPaperCode, field.TypeInt32)
	}
	if eu.mutation.NodalOfficersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.NodalOfficersTable,
			Columns: []string{exam.NodalOfficersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodalofficer.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedNodalOfficersIDs(); len(nodes) > 0 && !eu.mutation.NodalOfficersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.NodalOfficersTable,
			Columns: []string{exam.NodalOfficersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodalofficer.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.NodalOfficersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.NodalOfficersTable,
			Columns: []string{exam.NodalOfficersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodalofficer.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.NotificationsTable,
			Columns: []string{exam.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !eu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.NotificationsTable,
			Columns: []string{exam.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.NotificationsTable,
			Columns: []string{exam.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ExamsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamsRefTable,
			Columns: []string{exam.ExamsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedExamsRefIDs(); len(nodes) > 0 && !eu.mutation.ExamsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamsRefTable,
			Columns: []string{exam.ExamsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ExamsRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamsRefTable,
			Columns: []string{exam.ExamsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.PapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.PapersTable,
			Columns: []string{exam.PapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedPapersIDs(); len(nodes) > 0 && !eu.mutation.PapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.PapersTable,
			Columns: []string{exam.PapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.PapersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.PapersTable,
			Columns: []string{exam.PapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exam.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// ExamUpdateOne is the builder for updating a single Exam entity.
type ExamUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExamMutation
}

// SetExamName sets the "ExamName" field.
func (euo *ExamUpdateOne) SetExamName(s string) *ExamUpdateOne {
	euo.mutation.SetExamName(s)
	return euo
}

// SetNumOfPapers sets the "NumOfPapers" field.
func (euo *ExamUpdateOne) SetNumOfPapers(i int32) *ExamUpdateOne {
	euo.mutation.ResetNumOfPapers()
	euo.mutation.SetNumOfPapers(i)
	return euo
}

// AddNumOfPapers adds i to the "NumOfPapers" field.
func (euo *ExamUpdateOne) AddNumOfPapers(i int32) *ExamUpdateOne {
	euo.mutation.AddNumOfPapers(i)
	return euo
}

// SetNotificationBy sets the "NotificationBy" field.
func (euo *ExamUpdateOne) SetNotificationBy(s string) *ExamUpdateOne {
	euo.mutation.SetNotificationBy(s)
	return euo
}

// SetConductedBy sets the "ConductedBy" field.
func (euo *ExamUpdateOne) SetConductedBy(s string) *ExamUpdateOne {
	euo.mutation.SetConductedBy(s)
	return euo
}

// SetNodalOfficerLevel sets the "NodalOfficerLevel" field.
func (euo *ExamUpdateOne) SetNodalOfficerLevel(i int32) *ExamUpdateOne {
	euo.mutation.ResetNodalOfficerLevel()
	euo.mutation.SetNodalOfficerLevel(i)
	return euo
}

// SetNillableNodalOfficerLevel sets the "NodalOfficerLevel" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableNodalOfficerLevel(i *int32) *ExamUpdateOne {
	if i != nil {
		euo.SetNodalOfficerLevel(*i)
	}
	return euo
}

// AddNodalOfficerLevel adds i to the "NodalOfficerLevel" field.
func (euo *ExamUpdateOne) AddNodalOfficerLevel(i int32) *ExamUpdateOne {
	euo.mutation.AddNodalOfficerLevel(i)
	return euo
}

// ClearNodalOfficerLevel clears the value of the "NodalOfficerLevel" field.
func (euo *ExamUpdateOne) ClearNodalOfficerLevel() *ExamUpdateOne {
	euo.mutation.ClearNodalOfficerLevel()
	return euo
}

// SetCalendarCode sets the "CalendarCode" field.
func (euo *ExamUpdateOne) SetCalendarCode(i int32) *ExamUpdateOne {
	euo.mutation.ResetCalendarCode()
	euo.mutation.SetCalendarCode(i)
	return euo
}

// SetNillableCalendarCode sets the "CalendarCode" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableCalendarCode(i *int32) *ExamUpdateOne {
	if i != nil {
		euo.SetCalendarCode(*i)
	}
	return euo
}

// AddCalendarCode adds i to the "CalendarCode" field.
func (euo *ExamUpdateOne) AddCalendarCode(i int32) *ExamUpdateOne {
	euo.mutation.AddCalendarCode(i)
	return euo
}

// ClearCalendarCode clears the value of the "CalendarCode" field.
func (euo *ExamUpdateOne) ClearCalendarCode() *ExamUpdateOne {
	euo.mutation.ClearCalendarCode()
	return euo
}

// SetPaperCode sets the "PaperCode" field.
func (euo *ExamUpdateOne) SetPaperCode(i int32) *ExamUpdateOne {
	euo.mutation.ResetPaperCode()
	euo.mutation.SetPaperCode(i)
	return euo
}

// SetNillablePaperCode sets the "PaperCode" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillablePaperCode(i *int32) *ExamUpdateOne {
	if i != nil {
		euo.SetPaperCode(*i)
	}
	return euo
}

// AddPaperCode adds i to the "PaperCode" field.
func (euo *ExamUpdateOne) AddPaperCode(i int32) *ExamUpdateOne {
	euo.mutation.AddPaperCode(i)
	return euo
}

// ClearPaperCode clears the value of the "PaperCode" field.
func (euo *ExamUpdateOne) ClearPaperCode() *ExamUpdateOne {
	euo.mutation.ClearPaperCode()
	return euo
}

// AddNodalOfficerIDs adds the "nodal_officers" edge to the NodalOfficer entity by IDs.
func (euo *ExamUpdateOne) AddNodalOfficerIDs(ids ...int32) *ExamUpdateOne {
	euo.mutation.AddNodalOfficerIDs(ids...)
	return euo
}

// AddNodalOfficers adds the "nodal_officers" edges to the NodalOfficer entity.
func (euo *ExamUpdateOne) AddNodalOfficers(n ...*NodalOfficer) *ExamUpdateOne {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return euo.AddNodalOfficerIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (euo *ExamUpdateOne) AddNotificationIDs(ids ...int32) *ExamUpdateOne {
	euo.mutation.AddNotificationIDs(ids...)
	return euo
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (euo *ExamUpdateOne) AddNotifications(n ...*Notification) *ExamUpdateOne {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return euo.AddNotificationIDs(ids...)
}

// AddExamsRefIDs adds the "exams_ref" edge to the ExamCalendar entity by IDs.
func (euo *ExamUpdateOne) AddExamsRefIDs(ids ...int32) *ExamUpdateOne {
	euo.mutation.AddExamsRefIDs(ids...)
	return euo
}

// AddExamsRef adds the "exams_ref" edges to the ExamCalendar entity.
func (euo *ExamUpdateOne) AddExamsRef(e ...*ExamCalendar) *ExamUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddExamsRefIDs(ids...)
}

// AddPaperIDs adds the "papers" edge to the ExamPapers entity by IDs.
func (euo *ExamUpdateOne) AddPaperIDs(ids ...int32) *ExamUpdateOne {
	euo.mutation.AddPaperIDs(ids...)
	return euo
}

// AddPapers adds the "papers" edges to the ExamPapers entity.
func (euo *ExamUpdateOne) AddPapers(e ...*ExamPapers) *ExamUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddPaperIDs(ids...)
}

// Mutation returns the ExamMutation object of the builder.
func (euo *ExamUpdateOne) Mutation() *ExamMutation {
	return euo.mutation
}

// ClearNodalOfficers clears all "nodal_officers" edges to the NodalOfficer entity.
func (euo *ExamUpdateOne) ClearNodalOfficers() *ExamUpdateOne {
	euo.mutation.ClearNodalOfficers()
	return euo
}

// RemoveNodalOfficerIDs removes the "nodal_officers" edge to NodalOfficer entities by IDs.
func (euo *ExamUpdateOne) RemoveNodalOfficerIDs(ids ...int32) *ExamUpdateOne {
	euo.mutation.RemoveNodalOfficerIDs(ids...)
	return euo
}

// RemoveNodalOfficers removes "nodal_officers" edges to NodalOfficer entities.
func (euo *ExamUpdateOne) RemoveNodalOfficers(n ...*NodalOfficer) *ExamUpdateOne {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return euo.RemoveNodalOfficerIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (euo *ExamUpdateOne) ClearNotifications() *ExamUpdateOne {
	euo.mutation.ClearNotifications()
	return euo
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (euo *ExamUpdateOne) RemoveNotificationIDs(ids ...int32) *ExamUpdateOne {
	euo.mutation.RemoveNotificationIDs(ids...)
	return euo
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (euo *ExamUpdateOne) RemoveNotifications(n ...*Notification) *ExamUpdateOne {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return euo.RemoveNotificationIDs(ids...)
}

// ClearExamsRef clears all "exams_ref" edges to the ExamCalendar entity.
func (euo *ExamUpdateOne) ClearExamsRef() *ExamUpdateOne {
	euo.mutation.ClearExamsRef()
	return euo
}

// RemoveExamsRefIDs removes the "exams_ref" edge to ExamCalendar entities by IDs.
func (euo *ExamUpdateOne) RemoveExamsRefIDs(ids ...int32) *ExamUpdateOne {
	euo.mutation.RemoveExamsRefIDs(ids...)
	return euo
}

// RemoveExamsRef removes "exams_ref" edges to ExamCalendar entities.
func (euo *ExamUpdateOne) RemoveExamsRef(e ...*ExamCalendar) *ExamUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveExamsRefIDs(ids...)
}

// ClearPapers clears all "papers" edges to the ExamPapers entity.
func (euo *ExamUpdateOne) ClearPapers() *ExamUpdateOne {
	euo.mutation.ClearPapers()
	return euo
}

// RemovePaperIDs removes the "papers" edge to ExamPapers entities by IDs.
func (euo *ExamUpdateOne) RemovePaperIDs(ids ...int32) *ExamUpdateOne {
	euo.mutation.RemovePaperIDs(ids...)
	return euo
}

// RemovePapers removes "papers" edges to ExamPapers entities.
func (euo *ExamUpdateOne) RemovePapers(e ...*ExamPapers) *ExamUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemovePaperIDs(ids...)
}

// Where appends a list predicates to the ExamUpdate builder.
func (euo *ExamUpdateOne) Where(ps ...predicate.Exam) *ExamUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExamUpdateOne) Select(field string, fields ...string) *ExamUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Exam entity.
func (euo *ExamUpdateOne) Save(ctx context.Context) (*Exam, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExamUpdateOne) SaveX(ctx context.Context) *Exam {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExamUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExamUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *ExamUpdateOne) sqlSave(ctx context.Context) (_node *Exam, err error) {
	_spec := sqlgraph.NewUpdateSpec(exam.Table, exam.Columns, sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Exam.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exam.FieldID)
		for _, f := range fields {
			if !exam.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exam.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.ExamName(); ok {
		_spec.SetField(exam.FieldExamName, field.TypeString, value)
	}
	if value, ok := euo.mutation.NumOfPapers(); ok {
		_spec.SetField(exam.FieldNumOfPapers, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.AddedNumOfPapers(); ok {
		_spec.AddField(exam.FieldNumOfPapers, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.NotificationBy(); ok {
		_spec.SetField(exam.FieldNotificationBy, field.TypeString, value)
	}
	if value, ok := euo.mutation.ConductedBy(); ok {
		_spec.SetField(exam.FieldConductedBy, field.TypeString, value)
	}
	if value, ok := euo.mutation.NodalOfficerLevel(); ok {
		_spec.SetField(exam.FieldNodalOfficerLevel, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.AddedNodalOfficerLevel(); ok {
		_spec.AddField(exam.FieldNodalOfficerLevel, field.TypeInt32, value)
	}
	if euo.mutation.NodalOfficerLevelCleared() {
		_spec.ClearField(exam.FieldNodalOfficerLevel, field.TypeInt32)
	}
	if value, ok := euo.mutation.CalendarCode(); ok {
		_spec.SetField(exam.FieldCalendarCode, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.AddedCalendarCode(); ok {
		_spec.AddField(exam.FieldCalendarCode, field.TypeInt32, value)
	}
	if euo.mutation.CalendarCodeCleared() {
		_spec.ClearField(exam.FieldCalendarCode, field.TypeInt32)
	}
	if value, ok := euo.mutation.PaperCode(); ok {
		_spec.SetField(exam.FieldPaperCode, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.AddedPaperCode(); ok {
		_spec.AddField(exam.FieldPaperCode, field.TypeInt32, value)
	}
	if euo.mutation.PaperCodeCleared() {
		_spec.ClearField(exam.FieldPaperCode, field.TypeInt32)
	}
	if euo.mutation.NodalOfficersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.NodalOfficersTable,
			Columns: []string{exam.NodalOfficersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodalofficer.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedNodalOfficersIDs(); len(nodes) > 0 && !euo.mutation.NodalOfficersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.NodalOfficersTable,
			Columns: []string{exam.NodalOfficersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodalofficer.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.NodalOfficersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.NodalOfficersTable,
			Columns: []string{exam.NodalOfficersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodalofficer.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.NotificationsTable,
			Columns: []string{exam.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !euo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.NotificationsTable,
			Columns: []string{exam.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.NotificationsTable,
			Columns: []string{exam.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ExamsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamsRefTable,
			Columns: []string{exam.ExamsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedExamsRefIDs(); len(nodes) > 0 && !euo.mutation.ExamsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamsRefTable,
			Columns: []string{exam.ExamsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ExamsRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamsRefTable,
			Columns: []string{exam.ExamsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.PapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.PapersTable,
			Columns: []string{exam.PapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedPapersIDs(); len(nodes) > 0 && !euo.mutation.PapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.PapersTable,
			Columns: []string{exam.PapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.PapersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.PapersTable,
			Columns: []string{exam.PapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Exam{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exam.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
