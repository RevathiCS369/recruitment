// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/center"
	"recruit/ent/nodalofficer"
	"recruit/ent/notification"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Center is the model entity for the Center schema.
type Center struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// NotifyCode holds the value of the "NotifyCode" field.
	NotifyCode int32 `json:"NotifyCode,omitempty"`
	// NodalOfficerCode holds the value of the "NodalOfficerCode" field.
	NodalOfficerCode int32 `json:"NodalOfficerCode,omitempty"`
	// CenterName holds the value of the "CenterName" field.
	CenterName string `json:"CenterName,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CenterQuery when eager-loading is set.
	Edges               CenterEdges `json:"edges"`
	exam_papers_centers *int32
	selectValues        sql.SelectValues
}

// CenterEdges holds the relations/edges for other nodes in the graph.
type CenterEdges struct {
	// Applications holds the value of the applications edge.
	Applications []*Application `json:"applications,omitempty"`
	// NodalOfficer holds the value of the nodal_officer edge.
	NodalOfficer *NodalOfficer `json:"nodal_officer,omitempty"`
	// Notification holds the value of the notification edge.
	Notification *Notification `json:"notification,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ApplicationsOrErr returns the Applications value or an error if the edge
// was not loaded in eager-loading.
func (e CenterEdges) ApplicationsOrErr() ([]*Application, error) {
	if e.loadedTypes[0] {
		return e.Applications, nil
	}
	return nil, &NotLoadedError{edge: "applications"}
}

// NodalOfficerOrErr returns the NodalOfficer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CenterEdges) NodalOfficerOrErr() (*NodalOfficer, error) {
	if e.loadedTypes[1] {
		if e.NodalOfficer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: nodalofficer.Label}
		}
		return e.NodalOfficer, nil
	}
	return nil, &NotLoadedError{edge: "nodal_officer"}
}

// NotificationOrErr returns the Notification value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CenterEdges) NotificationOrErr() (*Notification, error) {
	if e.loadedTypes[2] {
		if e.Notification == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: notification.Label}
		}
		return e.Notification, nil
	}
	return nil, &NotLoadedError{edge: "notification"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Center) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case center.FieldID, center.FieldNotifyCode, center.FieldNodalOfficerCode:
			values[i] = new(sql.NullInt64)
		case center.FieldCenterName:
			values[i] = new(sql.NullString)
		case center.ForeignKeys[0]: // exam_papers_centers
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Center fields.
func (c *Center) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case center.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int32(value.Int64)
		case center.FieldNotifyCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field NotifyCode", values[i])
			} else if value.Valid {
				c.NotifyCode = int32(value.Int64)
			}
		case center.FieldNodalOfficerCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field NodalOfficerCode", values[i])
			} else if value.Valid {
				c.NodalOfficerCode = int32(value.Int64)
			}
		case center.FieldCenterName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CenterName", values[i])
			} else if value.Valid {
				c.CenterName = value.String
			}
		case center.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exam_papers_centers", value)
			} else if value.Valid {
				c.exam_papers_centers = new(int32)
				*c.exam_papers_centers = int32(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Center.
// This includes values selected through modifiers, order, etc.
func (c *Center) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryApplications queries the "applications" edge of the Center entity.
func (c *Center) QueryApplications() *ApplicationQuery {
	return NewCenterClient(c.config).QueryApplications(c)
}

// QueryNodalOfficer queries the "nodal_officer" edge of the Center entity.
func (c *Center) QueryNodalOfficer() *NodalOfficerQuery {
	return NewCenterClient(c.config).QueryNodalOfficer(c)
}

// QueryNotification queries the "notification" edge of the Center entity.
func (c *Center) QueryNotification() *NotificationQuery {
	return NewCenterClient(c.config).QueryNotification(c)
}

// Update returns a builder for updating this Center.
// Note that you need to call Center.Unwrap() before calling this method if this Center
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Center) Update() *CenterUpdateOne {
	return NewCenterClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Center entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Center) Unwrap() *Center {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Center is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Center) String() string {
	var builder strings.Builder
	builder.WriteString("Center(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("NotifyCode=")
	builder.WriteString(fmt.Sprintf("%v", c.NotifyCode))
	builder.WriteString(", ")
	builder.WriteString("NodalOfficerCode=")
	builder.WriteString(fmt.Sprintf("%v", c.NodalOfficerCode))
	builder.WriteString(", ")
	builder.WriteString("CenterName=")
	builder.WriteString(c.CenterName)
	builder.WriteByte(')')
	return builder.String()
}

// Centers is a parsable slice of Center.
type Centers []*Center
