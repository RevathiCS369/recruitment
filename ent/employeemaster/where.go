// Code generated by ent, DO NOT EDIT.

package employeemaster

import (
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldID, id))
}

// EmployeeID applies equality check predicate on the "EmployeeID" field. It's identical to EmployeeIDEQ.
func EmployeeID(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmployeeID, v))
}

// EmployeeName applies equality check predicate on the "EmployeeName" field. It's identical to EmployeeNameEQ.
func EmployeeName(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmployeeName, v))
}

// DOB applies equality check predicate on the "DOB" field. It's identical to DOBEQ.
func DOB(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldDOB, v))
}

// MobileNumber applies equality check predicate on the "MobileNumber" field. It's identical to MobileNumberEQ.
func MobileNumber(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldMobileNumber, v))
}

// EmailID applies equality check predicate on the "EmailID" field. It's identical to EmailIDEQ.
func EmailID(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmailID, v))
}

// EmployeeCategoryCode applies equality check predicate on the "EmployeeCategoryCode" field. It's identical to EmployeeCategoryCodeEQ.
func EmployeeCategoryCode(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmployeeCategoryCode, v))
}

// EmployeeCategory applies equality check predicate on the "EmployeeCategory" field. It's identical to EmployeeCategoryEQ.
func EmployeeCategory(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmployeeCategory, v))
}

// PostCode applies equality check predicate on the "PostCode" field. It's identical to PostCodeEQ.
func PostCode(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldPostCode, v))
}

// EmployeePost applies equality check predicate on the "EmployeePost" field. It's identical to EmployeePostEQ.
func EmployeePost(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmployeePost, v))
}

// FacilityID applies equality check predicate on the "FacilityID" field. It's identical to FacilityIDEQ.
func FacilityID(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldFacilityID, v))
}

// DCCS applies equality check predicate on the "DCCS" field. It's identical to DCCSEQ.
func DCCS(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldDCCS, v))
}

// DCInPresentCadre applies equality check predicate on the "DCInPresentCadre" field. It's identical to DCInPresentCadreEQ.
func DCInPresentCadre(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldDCInPresentCadre, v))
}

// UpdatedAt applies equality check predicate on the "UpdatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedBy applies equality check predicate on the "UpdatedBy" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldUpdatedBy, v))
}

// Cadre applies equality check predicate on the "Cadre" field. It's identical to CadreEQ.
func Cadre(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldCadre, v))
}

// EmployeeIDEQ applies the EQ predicate on the "EmployeeID" field.
func EmployeeIDEQ(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmployeeID, v))
}

// EmployeeIDNEQ applies the NEQ predicate on the "EmployeeID" field.
func EmployeeIDNEQ(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldEmployeeID, v))
}

// EmployeeIDIn applies the In predicate on the "EmployeeID" field.
func EmployeeIDIn(vs ...int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldEmployeeID, vs...))
}

// EmployeeIDNotIn applies the NotIn predicate on the "EmployeeID" field.
func EmployeeIDNotIn(vs ...int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldEmployeeID, vs...))
}

// EmployeeIDGT applies the GT predicate on the "EmployeeID" field.
func EmployeeIDGT(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldEmployeeID, v))
}

// EmployeeIDGTE applies the GTE predicate on the "EmployeeID" field.
func EmployeeIDGTE(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldEmployeeID, v))
}

// EmployeeIDLT applies the LT predicate on the "EmployeeID" field.
func EmployeeIDLT(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldEmployeeID, v))
}

// EmployeeIDLTE applies the LTE predicate on the "EmployeeID" field.
func EmployeeIDLTE(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldEmployeeID, v))
}

// EmployeeNameEQ applies the EQ predicate on the "EmployeeName" field.
func EmployeeNameEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmployeeName, v))
}

// EmployeeNameNEQ applies the NEQ predicate on the "EmployeeName" field.
func EmployeeNameNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldEmployeeName, v))
}

// EmployeeNameIn applies the In predicate on the "EmployeeName" field.
func EmployeeNameIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldEmployeeName, vs...))
}

// EmployeeNameNotIn applies the NotIn predicate on the "EmployeeName" field.
func EmployeeNameNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldEmployeeName, vs...))
}

// EmployeeNameGT applies the GT predicate on the "EmployeeName" field.
func EmployeeNameGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldEmployeeName, v))
}

// EmployeeNameGTE applies the GTE predicate on the "EmployeeName" field.
func EmployeeNameGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldEmployeeName, v))
}

// EmployeeNameLT applies the LT predicate on the "EmployeeName" field.
func EmployeeNameLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldEmployeeName, v))
}

// EmployeeNameLTE applies the LTE predicate on the "EmployeeName" field.
func EmployeeNameLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldEmployeeName, v))
}

// EmployeeNameContains applies the Contains predicate on the "EmployeeName" field.
func EmployeeNameContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldEmployeeName, v))
}

// EmployeeNameHasPrefix applies the HasPrefix predicate on the "EmployeeName" field.
func EmployeeNameHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldEmployeeName, v))
}

// EmployeeNameHasSuffix applies the HasSuffix predicate on the "EmployeeName" field.
func EmployeeNameHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldEmployeeName, v))
}

// EmployeeNameIsNil applies the IsNil predicate on the "EmployeeName" field.
func EmployeeNameIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldEmployeeName))
}

// EmployeeNameNotNil applies the NotNil predicate on the "EmployeeName" field.
func EmployeeNameNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldEmployeeName))
}

// EmployeeNameEqualFold applies the EqualFold predicate on the "EmployeeName" field.
func EmployeeNameEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldEmployeeName, v))
}

// EmployeeNameContainsFold applies the ContainsFold predicate on the "EmployeeName" field.
func EmployeeNameContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldEmployeeName, v))
}

// DOBEQ applies the EQ predicate on the "DOB" field.
func DOBEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldDOB, v))
}

// DOBNEQ applies the NEQ predicate on the "DOB" field.
func DOBNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldDOB, v))
}

// DOBIn applies the In predicate on the "DOB" field.
func DOBIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldDOB, vs...))
}

// DOBNotIn applies the NotIn predicate on the "DOB" field.
func DOBNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldDOB, vs...))
}

// DOBGT applies the GT predicate on the "DOB" field.
func DOBGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldDOB, v))
}

// DOBGTE applies the GTE predicate on the "DOB" field.
func DOBGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldDOB, v))
}

// DOBLT applies the LT predicate on the "DOB" field.
func DOBLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldDOB, v))
}

// DOBLTE applies the LTE predicate on the "DOB" field.
func DOBLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldDOB, v))
}

// DOBContains applies the Contains predicate on the "DOB" field.
func DOBContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldDOB, v))
}

// DOBHasPrefix applies the HasPrefix predicate on the "DOB" field.
func DOBHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldDOB, v))
}

// DOBHasSuffix applies the HasSuffix predicate on the "DOB" field.
func DOBHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldDOB, v))
}

// DOBIsNil applies the IsNil predicate on the "DOB" field.
func DOBIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldDOB))
}

// DOBNotNil applies the NotNil predicate on the "DOB" field.
func DOBNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldDOB))
}

// DOBEqualFold applies the EqualFold predicate on the "DOB" field.
func DOBEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldDOB, v))
}

// DOBContainsFold applies the ContainsFold predicate on the "DOB" field.
func DOBContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldDOB, v))
}

// GenderEQ applies the EQ predicate on the "Gender" field.
func GenderEQ(v Gender) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "Gender" field.
func GenderNEQ(v Gender) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "Gender" field.
func GenderIn(vs ...Gender) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "Gender" field.
func GenderNotIn(vs ...Gender) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldGender, vs...))
}

// MobileNumberEQ applies the EQ predicate on the "MobileNumber" field.
func MobileNumberEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldMobileNumber, v))
}

// MobileNumberNEQ applies the NEQ predicate on the "MobileNumber" field.
func MobileNumberNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldMobileNumber, v))
}

// MobileNumberIn applies the In predicate on the "MobileNumber" field.
func MobileNumberIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldMobileNumber, vs...))
}

// MobileNumberNotIn applies the NotIn predicate on the "MobileNumber" field.
func MobileNumberNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldMobileNumber, vs...))
}

// MobileNumberGT applies the GT predicate on the "MobileNumber" field.
func MobileNumberGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldMobileNumber, v))
}

// MobileNumberGTE applies the GTE predicate on the "MobileNumber" field.
func MobileNumberGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldMobileNumber, v))
}

// MobileNumberLT applies the LT predicate on the "MobileNumber" field.
func MobileNumberLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldMobileNumber, v))
}

// MobileNumberLTE applies the LTE predicate on the "MobileNumber" field.
func MobileNumberLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldMobileNumber, v))
}

// MobileNumberContains applies the Contains predicate on the "MobileNumber" field.
func MobileNumberContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldMobileNumber, v))
}

// MobileNumberHasPrefix applies the HasPrefix predicate on the "MobileNumber" field.
func MobileNumberHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldMobileNumber, v))
}

// MobileNumberHasSuffix applies the HasSuffix predicate on the "MobileNumber" field.
func MobileNumberHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldMobileNumber, v))
}

// MobileNumberIsNil applies the IsNil predicate on the "MobileNumber" field.
func MobileNumberIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldMobileNumber))
}

// MobileNumberNotNil applies the NotNil predicate on the "MobileNumber" field.
func MobileNumberNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldMobileNumber))
}

// MobileNumberEqualFold applies the EqualFold predicate on the "MobileNumber" field.
func MobileNumberEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldMobileNumber, v))
}

// MobileNumberContainsFold applies the ContainsFold predicate on the "MobileNumber" field.
func MobileNumberContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldMobileNumber, v))
}

// EmailIDEQ applies the EQ predicate on the "EmailID" field.
func EmailIDEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmailID, v))
}

// EmailIDNEQ applies the NEQ predicate on the "EmailID" field.
func EmailIDNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldEmailID, v))
}

// EmailIDIn applies the In predicate on the "EmailID" field.
func EmailIDIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldEmailID, vs...))
}

// EmailIDNotIn applies the NotIn predicate on the "EmailID" field.
func EmailIDNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldEmailID, vs...))
}

// EmailIDGT applies the GT predicate on the "EmailID" field.
func EmailIDGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldEmailID, v))
}

// EmailIDGTE applies the GTE predicate on the "EmailID" field.
func EmailIDGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldEmailID, v))
}

// EmailIDLT applies the LT predicate on the "EmailID" field.
func EmailIDLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldEmailID, v))
}

// EmailIDLTE applies the LTE predicate on the "EmailID" field.
func EmailIDLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldEmailID, v))
}

// EmailIDContains applies the Contains predicate on the "EmailID" field.
func EmailIDContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldEmailID, v))
}

// EmailIDHasPrefix applies the HasPrefix predicate on the "EmailID" field.
func EmailIDHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldEmailID, v))
}

// EmailIDHasSuffix applies the HasSuffix predicate on the "EmailID" field.
func EmailIDHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldEmailID, v))
}

// EmailIDIsNil applies the IsNil predicate on the "EmailID" field.
func EmailIDIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldEmailID))
}

// EmailIDNotNil applies the NotNil predicate on the "EmailID" field.
func EmailIDNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldEmailID))
}

// EmailIDEqualFold applies the EqualFold predicate on the "EmailID" field.
func EmailIDEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldEmailID, v))
}

// EmailIDContainsFold applies the ContainsFold predicate on the "EmailID" field.
func EmailIDContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldEmailID, v))
}

// EmployeeCategoryCodeEQ applies the EQ predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmployeeCategoryCode, v))
}

// EmployeeCategoryCodeNEQ applies the NEQ predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldEmployeeCategoryCode, v))
}

// EmployeeCategoryCodeIn applies the In predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldEmployeeCategoryCode, vs...))
}

// EmployeeCategoryCodeNotIn applies the NotIn predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldEmployeeCategoryCode, vs...))
}

// EmployeeCategoryCodeGT applies the GT predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldEmployeeCategoryCode, v))
}

// EmployeeCategoryCodeGTE applies the GTE predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldEmployeeCategoryCode, v))
}

// EmployeeCategoryCodeLT applies the LT predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldEmployeeCategoryCode, v))
}

// EmployeeCategoryCodeLTE applies the LTE predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldEmployeeCategoryCode, v))
}

// EmployeeCategoryCodeContains applies the Contains predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldEmployeeCategoryCode, v))
}

// EmployeeCategoryCodeHasPrefix applies the HasPrefix predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldEmployeeCategoryCode, v))
}

// EmployeeCategoryCodeHasSuffix applies the HasSuffix predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldEmployeeCategoryCode, v))
}

// EmployeeCategoryCodeIsNil applies the IsNil predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldEmployeeCategoryCode))
}

// EmployeeCategoryCodeNotNil applies the NotNil predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldEmployeeCategoryCode))
}

// EmployeeCategoryCodeEqualFold applies the EqualFold predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldEmployeeCategoryCode, v))
}

// EmployeeCategoryCodeContainsFold applies the ContainsFold predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldEmployeeCategoryCode, v))
}

// EmployeeCategoryEQ applies the EQ predicate on the "EmployeeCategory" field.
func EmployeeCategoryEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmployeeCategory, v))
}

// EmployeeCategoryNEQ applies the NEQ predicate on the "EmployeeCategory" field.
func EmployeeCategoryNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldEmployeeCategory, v))
}

// EmployeeCategoryIn applies the In predicate on the "EmployeeCategory" field.
func EmployeeCategoryIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldEmployeeCategory, vs...))
}

// EmployeeCategoryNotIn applies the NotIn predicate on the "EmployeeCategory" field.
func EmployeeCategoryNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldEmployeeCategory, vs...))
}

// EmployeeCategoryGT applies the GT predicate on the "EmployeeCategory" field.
func EmployeeCategoryGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldEmployeeCategory, v))
}

// EmployeeCategoryGTE applies the GTE predicate on the "EmployeeCategory" field.
func EmployeeCategoryGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldEmployeeCategory, v))
}

// EmployeeCategoryLT applies the LT predicate on the "EmployeeCategory" field.
func EmployeeCategoryLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldEmployeeCategory, v))
}

// EmployeeCategoryLTE applies the LTE predicate on the "EmployeeCategory" field.
func EmployeeCategoryLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldEmployeeCategory, v))
}

// EmployeeCategoryContains applies the Contains predicate on the "EmployeeCategory" field.
func EmployeeCategoryContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldEmployeeCategory, v))
}

// EmployeeCategoryHasPrefix applies the HasPrefix predicate on the "EmployeeCategory" field.
func EmployeeCategoryHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldEmployeeCategory, v))
}

// EmployeeCategoryHasSuffix applies the HasSuffix predicate on the "EmployeeCategory" field.
func EmployeeCategoryHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldEmployeeCategory, v))
}

// EmployeeCategoryIsNil applies the IsNil predicate on the "EmployeeCategory" field.
func EmployeeCategoryIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldEmployeeCategory))
}

// EmployeeCategoryNotNil applies the NotNil predicate on the "EmployeeCategory" field.
func EmployeeCategoryNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldEmployeeCategory))
}

// EmployeeCategoryEqualFold applies the EqualFold predicate on the "EmployeeCategory" field.
func EmployeeCategoryEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldEmployeeCategory, v))
}

// EmployeeCategoryContainsFold applies the ContainsFold predicate on the "EmployeeCategory" field.
func EmployeeCategoryContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldEmployeeCategory, v))
}

// PostCodeEQ applies the EQ predicate on the "PostCode" field.
func PostCodeEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldPostCode, v))
}

// PostCodeNEQ applies the NEQ predicate on the "PostCode" field.
func PostCodeNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldPostCode, v))
}

// PostCodeIn applies the In predicate on the "PostCode" field.
func PostCodeIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldPostCode, vs...))
}

// PostCodeNotIn applies the NotIn predicate on the "PostCode" field.
func PostCodeNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldPostCode, vs...))
}

// PostCodeGT applies the GT predicate on the "PostCode" field.
func PostCodeGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldPostCode, v))
}

// PostCodeGTE applies the GTE predicate on the "PostCode" field.
func PostCodeGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldPostCode, v))
}

// PostCodeLT applies the LT predicate on the "PostCode" field.
func PostCodeLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldPostCode, v))
}

// PostCodeLTE applies the LTE predicate on the "PostCode" field.
func PostCodeLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldPostCode, v))
}

// PostCodeContains applies the Contains predicate on the "PostCode" field.
func PostCodeContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldPostCode, v))
}

// PostCodeHasPrefix applies the HasPrefix predicate on the "PostCode" field.
func PostCodeHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldPostCode, v))
}

// PostCodeHasSuffix applies the HasSuffix predicate on the "PostCode" field.
func PostCodeHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldPostCode, v))
}

// PostCodeIsNil applies the IsNil predicate on the "PostCode" field.
func PostCodeIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldPostCode))
}

// PostCodeNotNil applies the NotNil predicate on the "PostCode" field.
func PostCodeNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldPostCode))
}

// PostCodeEqualFold applies the EqualFold predicate on the "PostCode" field.
func PostCodeEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldPostCode, v))
}

// PostCodeContainsFold applies the ContainsFold predicate on the "PostCode" field.
func PostCodeContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldPostCode, v))
}

// EmployeePostEQ applies the EQ predicate on the "EmployeePost" field.
func EmployeePostEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmployeePost, v))
}

// EmployeePostNEQ applies the NEQ predicate on the "EmployeePost" field.
func EmployeePostNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldEmployeePost, v))
}

// EmployeePostIn applies the In predicate on the "EmployeePost" field.
func EmployeePostIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldEmployeePost, vs...))
}

// EmployeePostNotIn applies the NotIn predicate on the "EmployeePost" field.
func EmployeePostNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldEmployeePost, vs...))
}

// EmployeePostGT applies the GT predicate on the "EmployeePost" field.
func EmployeePostGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldEmployeePost, v))
}

// EmployeePostGTE applies the GTE predicate on the "EmployeePost" field.
func EmployeePostGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldEmployeePost, v))
}

// EmployeePostLT applies the LT predicate on the "EmployeePost" field.
func EmployeePostLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldEmployeePost, v))
}

// EmployeePostLTE applies the LTE predicate on the "EmployeePost" field.
func EmployeePostLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldEmployeePost, v))
}

// EmployeePostContains applies the Contains predicate on the "EmployeePost" field.
func EmployeePostContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldEmployeePost, v))
}

// EmployeePostHasPrefix applies the HasPrefix predicate on the "EmployeePost" field.
func EmployeePostHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldEmployeePost, v))
}

// EmployeePostHasSuffix applies the HasSuffix predicate on the "EmployeePost" field.
func EmployeePostHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldEmployeePost, v))
}

// EmployeePostIsNil applies the IsNil predicate on the "EmployeePost" field.
func EmployeePostIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldEmployeePost))
}

// EmployeePostNotNil applies the NotNil predicate on the "EmployeePost" field.
func EmployeePostNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldEmployeePost))
}

// EmployeePostEqualFold applies the EqualFold predicate on the "EmployeePost" field.
func EmployeePostEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldEmployeePost, v))
}

// EmployeePostContainsFold applies the ContainsFold predicate on the "EmployeePost" field.
func EmployeePostContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldEmployeePost, v))
}

// FacilityIDEQ applies the EQ predicate on the "FacilityID" field.
func FacilityIDEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldFacilityID, v))
}

// FacilityIDNEQ applies the NEQ predicate on the "FacilityID" field.
func FacilityIDNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldFacilityID, v))
}

// FacilityIDIn applies the In predicate on the "FacilityID" field.
func FacilityIDIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldFacilityID, vs...))
}

// FacilityIDNotIn applies the NotIn predicate on the "FacilityID" field.
func FacilityIDNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldFacilityID, vs...))
}

// FacilityIDGT applies the GT predicate on the "FacilityID" field.
func FacilityIDGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldFacilityID, v))
}

// FacilityIDGTE applies the GTE predicate on the "FacilityID" field.
func FacilityIDGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldFacilityID, v))
}

// FacilityIDLT applies the LT predicate on the "FacilityID" field.
func FacilityIDLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldFacilityID, v))
}

// FacilityIDLTE applies the LTE predicate on the "FacilityID" field.
func FacilityIDLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldFacilityID, v))
}

// FacilityIDContains applies the Contains predicate on the "FacilityID" field.
func FacilityIDContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldFacilityID, v))
}

// FacilityIDHasPrefix applies the HasPrefix predicate on the "FacilityID" field.
func FacilityIDHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldFacilityID, v))
}

// FacilityIDHasSuffix applies the HasSuffix predicate on the "FacilityID" field.
func FacilityIDHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldFacilityID, v))
}

// FacilityIDIsNil applies the IsNil predicate on the "FacilityID" field.
func FacilityIDIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldFacilityID))
}

// FacilityIDNotNil applies the NotNil predicate on the "FacilityID" field.
func FacilityIDNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldFacilityID))
}

// FacilityIDEqualFold applies the EqualFold predicate on the "FacilityID" field.
func FacilityIDEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldFacilityID, v))
}

// FacilityIDContainsFold applies the ContainsFold predicate on the "FacilityID" field.
func FacilityIDContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldFacilityID, v))
}

// DCCSEQ applies the EQ predicate on the "DCCS" field.
func DCCSEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldDCCS, v))
}

// DCCSNEQ applies the NEQ predicate on the "DCCS" field.
func DCCSNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldDCCS, v))
}

// DCCSIn applies the In predicate on the "DCCS" field.
func DCCSIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldDCCS, vs...))
}

// DCCSNotIn applies the NotIn predicate on the "DCCS" field.
func DCCSNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldDCCS, vs...))
}

// DCCSGT applies the GT predicate on the "DCCS" field.
func DCCSGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldDCCS, v))
}

// DCCSGTE applies the GTE predicate on the "DCCS" field.
func DCCSGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldDCCS, v))
}

// DCCSLT applies the LT predicate on the "DCCS" field.
func DCCSLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldDCCS, v))
}

// DCCSLTE applies the LTE predicate on the "DCCS" field.
func DCCSLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldDCCS, v))
}

// DCCSContains applies the Contains predicate on the "DCCS" field.
func DCCSContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldDCCS, v))
}

// DCCSHasPrefix applies the HasPrefix predicate on the "DCCS" field.
func DCCSHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldDCCS, v))
}

// DCCSHasSuffix applies the HasSuffix predicate on the "DCCS" field.
func DCCSHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldDCCS, v))
}

// DCCSIsNil applies the IsNil predicate on the "DCCS" field.
func DCCSIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldDCCS))
}

// DCCSNotNil applies the NotNil predicate on the "DCCS" field.
func DCCSNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldDCCS))
}

// DCCSEqualFold applies the EqualFold predicate on the "DCCS" field.
func DCCSEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldDCCS, v))
}

// DCCSContainsFold applies the ContainsFold predicate on the "DCCS" field.
func DCCSContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldDCCS, v))
}

// DCInPresentCadreEQ applies the EQ predicate on the "DCInPresentCadre" field.
func DCInPresentCadreEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldDCInPresentCadre, v))
}

// DCInPresentCadreNEQ applies the NEQ predicate on the "DCInPresentCadre" field.
func DCInPresentCadreNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldDCInPresentCadre, v))
}

// DCInPresentCadreIn applies the In predicate on the "DCInPresentCadre" field.
func DCInPresentCadreIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldDCInPresentCadre, vs...))
}

// DCInPresentCadreNotIn applies the NotIn predicate on the "DCInPresentCadre" field.
func DCInPresentCadreNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldDCInPresentCadre, vs...))
}

// DCInPresentCadreGT applies the GT predicate on the "DCInPresentCadre" field.
func DCInPresentCadreGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldDCInPresentCadre, v))
}

// DCInPresentCadreGTE applies the GTE predicate on the "DCInPresentCadre" field.
func DCInPresentCadreGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldDCInPresentCadre, v))
}

// DCInPresentCadreLT applies the LT predicate on the "DCInPresentCadre" field.
func DCInPresentCadreLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldDCInPresentCadre, v))
}

// DCInPresentCadreLTE applies the LTE predicate on the "DCInPresentCadre" field.
func DCInPresentCadreLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldDCInPresentCadre, v))
}

// DCInPresentCadreContains applies the Contains predicate on the "DCInPresentCadre" field.
func DCInPresentCadreContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldDCInPresentCadre, v))
}

// DCInPresentCadreHasPrefix applies the HasPrefix predicate on the "DCInPresentCadre" field.
func DCInPresentCadreHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldDCInPresentCadre, v))
}

// DCInPresentCadreHasSuffix applies the HasSuffix predicate on the "DCInPresentCadre" field.
func DCInPresentCadreHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldDCInPresentCadre, v))
}

// DCInPresentCadreIsNil applies the IsNil predicate on the "DCInPresentCadre" field.
func DCInPresentCadreIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldDCInPresentCadre))
}

// DCInPresentCadreNotNil applies the NotNil predicate on the "DCInPresentCadre" field.
func DCInPresentCadreNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldDCInPresentCadre))
}

// DCInPresentCadreEqualFold applies the EqualFold predicate on the "DCInPresentCadre" field.
func DCInPresentCadreEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldDCInPresentCadre, v))
}

// DCInPresentCadreContainsFold applies the ContainsFold predicate on the "DCInPresentCadre" field.
func DCInPresentCadreContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldDCInPresentCadre, v))
}

// UpdatedAtEQ applies the EQ predicate on the "UpdatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "UpdatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "UpdatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "UpdatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "UpdatedAt" field.
func UpdatedAtGT(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "UpdatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "UpdatedAt" field.
func UpdatedAtLT(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "UpdatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "UpdatedAt" field.
func UpdatedAtIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "UpdatedAt" field.
func UpdatedAtNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldUpdatedAt))
}

// UpdatedByEQ applies the EQ predicate on the "UpdatedBy" field.
func UpdatedByEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "UpdatedBy" field.
func UpdatedByNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "UpdatedBy" field.
func UpdatedByIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "UpdatedBy" field.
func UpdatedByNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "UpdatedBy" field.
func UpdatedByGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "UpdatedBy" field.
func UpdatedByGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "UpdatedBy" field.
func UpdatedByLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "UpdatedBy" field.
func UpdatedByLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "UpdatedBy" field.
func UpdatedByContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "UpdatedBy" field.
func UpdatedByHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "UpdatedBy" field.
func UpdatedByHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "UpdatedBy" field.
func UpdatedByIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "UpdatedBy" field.
func UpdatedByNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "UpdatedBy" field.
func UpdatedByEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "UpdatedBy" field.
func UpdatedByContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// CadreEQ applies the EQ predicate on the "Cadre" field.
func CadreEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldCadre, v))
}

// CadreNEQ applies the NEQ predicate on the "Cadre" field.
func CadreNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldCadre, v))
}

// CadreIn applies the In predicate on the "Cadre" field.
func CadreIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldCadre, vs...))
}

// CadreNotIn applies the NotIn predicate on the "Cadre" field.
func CadreNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldCadre, vs...))
}

// CadreGT applies the GT predicate on the "Cadre" field.
func CadreGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldCadre, v))
}

// CadreGTE applies the GTE predicate on the "Cadre" field.
func CadreGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldCadre, v))
}

// CadreLT applies the LT predicate on the "Cadre" field.
func CadreLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldCadre, v))
}

// CadreLTE applies the LTE predicate on the "Cadre" field.
func CadreLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldCadre, v))
}

// CadreContains applies the Contains predicate on the "Cadre" field.
func CadreContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldCadre, v))
}

// CadreHasPrefix applies the HasPrefix predicate on the "Cadre" field.
func CadreHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldCadre, v))
}

// CadreHasSuffix applies the HasSuffix predicate on the "Cadre" field.
func CadreHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldCadre, v))
}

// CadreIsNil applies the IsNil predicate on the "Cadre" field.
func CadreIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldCadre))
}

// CadreNotNil applies the NotNil predicate on the "Cadre" field.
func CadreNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldCadre))
}

// CadreEqualFold applies the EqualFold predicate on the "Cadre" field.
func CadreEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldCadre, v))
}

// CadreContainsFold applies the ContainsFold predicate on the "Cadre" field.
func CadreContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldCadre, v))
}

// HasUsermasterRef applies the HasEdge predicate on the "UsermasterRef" edge.
func HasUsermasterRef() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsermasterRefTable, UsermasterRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsermasterRefWith applies the HasEdge predicate on the "UsermasterRef" edge with a given conditions (other predicates).
func HasUsermasterRefWith(preds ...predicate.UserMaster) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(func(s *sql.Selector) {
		step := newUsermasterRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmpRef applies the HasEdge predicate on the "Emp_Ref" edge.
func HasEmpRef() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EmpRefTable, EmpRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmpRefWith applies the HasEdge predicate on the "Emp_Ref" edge with a given conditions (other predicates).
func HasEmpRefWith(preds ...predicate.Exam_Applications_PS) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(func(s *sql.Selector) {
		step := newEmpRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EmployeeMaster) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EmployeeMaster) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EmployeeMaster) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(func(s *sql.Selector) {
		p(s.Not())
	})
}
