// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/circlemaster"
	"recruit/ent/facility"
	"recruit/ent/predicate"
	"recruit/ent/regionmaster"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FacilityUpdate is the builder for updating Facility entities.
type FacilityUpdate struct {
	config
	hooks    []Hook
	mutation *FacilityMutation
}

// Where appends a list predicates to the FacilityUpdate builder.
func (fu *FacilityUpdate) Where(ps ...predicate.Facility) *FacilityUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetFacilityCode sets the "FacilityCode" field.
func (fu *FacilityUpdate) SetFacilityCode(s string) *FacilityUpdate {
	fu.mutation.SetFacilityCode(s)
	return fu
}

// SetOfficeType sets the "OfficeType" field.
func (fu *FacilityUpdate) SetOfficeType(s string) *FacilityUpdate {
	fu.mutation.SetOfficeType(s)
	return fu
}

// SetFacilityName sets the "FacilityName" field.
func (fu *FacilityUpdate) SetFacilityName(s string) *FacilityUpdate {
	fu.mutation.SetFacilityName(s)
	return fu
}

// SetReportingOfficeType sets the "ReportingOfficeType" field.
func (fu *FacilityUpdate) SetReportingOfficeType(s string) *FacilityUpdate {
	fu.mutation.SetReportingOfficeType(s)
	return fu
}

// SetNillableReportingOfficeType sets the "ReportingOfficeType" field if the given value is not nil.
func (fu *FacilityUpdate) SetNillableReportingOfficeType(s *string) *FacilityUpdate {
	if s != nil {
		fu.SetReportingOfficeType(*s)
	}
	return fu
}

// ClearReportingOfficeType clears the value of the "ReportingOfficeType" field.
func (fu *FacilityUpdate) ClearReportingOfficeType() *FacilityUpdate {
	fu.mutation.ClearReportingOfficeType()
	return fu
}

// SetReportingOfficeCode sets the "ReportingOfficeCode" field.
func (fu *FacilityUpdate) SetReportingOfficeCode(s string) *FacilityUpdate {
	fu.mutation.SetReportingOfficeCode(s)
	return fu
}

// SetNillableReportingOfficeCode sets the "ReportingOfficeCode" field if the given value is not nil.
func (fu *FacilityUpdate) SetNillableReportingOfficeCode(s *string) *FacilityUpdate {
	if s != nil {
		fu.SetReportingOfficeCode(*s)
	}
	return fu
}

// ClearReportingOfficeCode clears the value of the "ReportingOfficeCode" field.
func (fu *FacilityUpdate) ClearReportingOfficeCode() *FacilityUpdate {
	fu.mutation.ClearReportingOfficeCode()
	return fu
}

// SetEmailID sets the "EmailID" field.
func (fu *FacilityUpdate) SetEmailID(s string) *FacilityUpdate {
	fu.mutation.SetEmailID(s)
	return fu
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (fu *FacilityUpdate) SetNillableEmailID(s *string) *FacilityUpdate {
	if s != nil {
		fu.SetEmailID(*s)
	}
	return fu
}

// ClearEmailID clears the value of the "EmailID" field.
func (fu *FacilityUpdate) ClearEmailID() *FacilityUpdate {
	fu.mutation.ClearEmailID()
	return fu
}

// SetMobileNumber sets the "MobileNumber" field.
func (fu *FacilityUpdate) SetMobileNumber(i int32) *FacilityUpdate {
	fu.mutation.ResetMobileNumber()
	fu.mutation.SetMobileNumber(i)
	return fu
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (fu *FacilityUpdate) SetNillableMobileNumber(i *int32) *FacilityUpdate {
	if i != nil {
		fu.SetMobileNumber(*i)
	}
	return fu
}

// AddMobileNumber adds i to the "MobileNumber" field.
func (fu *FacilityUpdate) AddMobileNumber(i int32) *FacilityUpdate {
	fu.mutation.AddMobileNumber(i)
	return fu
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (fu *FacilityUpdate) ClearMobileNumber() *FacilityUpdate {
	fu.mutation.ClearMobileNumber()
	return fu
}

// SetDivisionCode sets the "DivisionCode" field.
func (fu *FacilityUpdate) SetDivisionCode(i int32) *FacilityUpdate {
	fu.mutation.ResetDivisionCode()
	fu.mutation.SetDivisionCode(i)
	return fu
}

// SetNillableDivisionCode sets the "DivisionCode" field if the given value is not nil.
func (fu *FacilityUpdate) SetNillableDivisionCode(i *int32) *FacilityUpdate {
	if i != nil {
		fu.SetDivisionCode(*i)
	}
	return fu
}

// AddDivisionCode adds i to the "DivisionCode" field.
func (fu *FacilityUpdate) AddDivisionCode(i int32) *FacilityUpdate {
	fu.mutation.AddDivisionCode(i)
	return fu
}

// ClearDivisionCode clears the value of the "DivisionCode" field.
func (fu *FacilityUpdate) ClearDivisionCode() *FacilityUpdate {
	fu.mutation.ClearDivisionCode()
	return fu
}

// SetRegionCode sets the "RegionCode" field.
func (fu *FacilityUpdate) SetRegionCode(i int32) *FacilityUpdate {
	fu.mutation.ResetRegionCode()
	fu.mutation.SetRegionCode(i)
	return fu
}

// SetNillableRegionCode sets the "RegionCode" field if the given value is not nil.
func (fu *FacilityUpdate) SetNillableRegionCode(i *int32) *FacilityUpdate {
	if i != nil {
		fu.SetRegionCode(*i)
	}
	return fu
}

// AddRegionCode adds i to the "RegionCode" field.
func (fu *FacilityUpdate) AddRegionCode(i int32) *FacilityUpdate {
	fu.mutation.AddRegionCode(i)
	return fu
}

// ClearRegionCode clears the value of the "RegionCode" field.
func (fu *FacilityUpdate) ClearRegionCode() *FacilityUpdate {
	fu.mutation.ClearRegionCode()
	return fu
}

// SetCircleCode sets the "CircleCode" field.
func (fu *FacilityUpdate) SetCircleCode(i int32) *FacilityUpdate {
	fu.mutation.ResetCircleCode()
	fu.mutation.SetCircleCode(i)
	return fu
}

// SetNillableCircleCode sets the "CircleCode" field if the given value is not nil.
func (fu *FacilityUpdate) SetNillableCircleCode(i *int32) *FacilityUpdate {
	if i != nil {
		fu.SetCircleCode(*i)
	}
	return fu
}

// AddCircleCode adds i to the "CircleCode" field.
func (fu *FacilityUpdate) AddCircleCode(i int32) *FacilityUpdate {
	fu.mutation.AddCircleCode(i)
	return fu
}

// ClearCircleCode clears the value of the "CircleCode" field.
func (fu *FacilityUpdate) ClearCircleCode() *FacilityUpdate {
	fu.mutation.ClearCircleCode()
	return fu
}

// AddRegionRefIDs adds the "region_ref" edge to the RegionMaster entity by IDs.
func (fu *FacilityUpdate) AddRegionRefIDs(ids ...int32) *FacilityUpdate {
	fu.mutation.AddRegionRefIDs(ids...)
	return fu
}

// AddRegionRef adds the "region_ref" edges to the RegionMaster entity.
func (fu *FacilityUpdate) AddRegionRef(r ...*RegionMaster) *FacilityUpdate {
	ids := make([]int32, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return fu.AddRegionRefIDs(ids...)
}

// AddCircleRefIDs adds the "circle_ref" edge to the CircleMaster entity by IDs.
func (fu *FacilityUpdate) AddCircleRefIDs(ids ...int32) *FacilityUpdate {
	fu.mutation.AddCircleRefIDs(ids...)
	return fu
}

// AddCircleRef adds the "circle_ref" edges to the CircleMaster entity.
func (fu *FacilityUpdate) AddCircleRef(c ...*CircleMaster) *FacilityUpdate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fu.AddCircleRefIDs(ids...)
}

// Mutation returns the FacilityMutation object of the builder.
func (fu *FacilityUpdate) Mutation() *FacilityMutation {
	return fu.mutation
}

// ClearRegionRef clears all "region_ref" edges to the RegionMaster entity.
func (fu *FacilityUpdate) ClearRegionRef() *FacilityUpdate {
	fu.mutation.ClearRegionRef()
	return fu
}

// RemoveRegionRefIDs removes the "region_ref" edge to RegionMaster entities by IDs.
func (fu *FacilityUpdate) RemoveRegionRefIDs(ids ...int32) *FacilityUpdate {
	fu.mutation.RemoveRegionRefIDs(ids...)
	return fu
}

// RemoveRegionRef removes "region_ref" edges to RegionMaster entities.
func (fu *FacilityUpdate) RemoveRegionRef(r ...*RegionMaster) *FacilityUpdate {
	ids := make([]int32, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return fu.RemoveRegionRefIDs(ids...)
}

// ClearCircleRef clears all "circle_ref" edges to the CircleMaster entity.
func (fu *FacilityUpdate) ClearCircleRef() *FacilityUpdate {
	fu.mutation.ClearCircleRef()
	return fu
}

// RemoveCircleRefIDs removes the "circle_ref" edge to CircleMaster entities by IDs.
func (fu *FacilityUpdate) RemoveCircleRefIDs(ids ...int32) *FacilityUpdate {
	fu.mutation.RemoveCircleRefIDs(ids...)
	return fu
}

// RemoveCircleRef removes "circle_ref" edges to CircleMaster entities.
func (fu *FacilityUpdate) RemoveCircleRef(c ...*CircleMaster) *FacilityUpdate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fu.RemoveCircleRefIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FacilityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FacilityUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FacilityUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FacilityUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fu *FacilityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(facility.Table, facility.Columns, sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.FacilityCode(); ok {
		_spec.SetField(facility.FieldFacilityCode, field.TypeString, value)
	}
	if value, ok := fu.mutation.OfficeType(); ok {
		_spec.SetField(facility.FieldOfficeType, field.TypeString, value)
	}
	if value, ok := fu.mutation.FacilityName(); ok {
		_spec.SetField(facility.FieldFacilityName, field.TypeString, value)
	}
	if value, ok := fu.mutation.ReportingOfficeType(); ok {
		_spec.SetField(facility.FieldReportingOfficeType, field.TypeString, value)
	}
	if fu.mutation.ReportingOfficeTypeCleared() {
		_spec.ClearField(facility.FieldReportingOfficeType, field.TypeString)
	}
	if value, ok := fu.mutation.ReportingOfficeCode(); ok {
		_spec.SetField(facility.FieldReportingOfficeCode, field.TypeString, value)
	}
	if fu.mutation.ReportingOfficeCodeCleared() {
		_spec.ClearField(facility.FieldReportingOfficeCode, field.TypeString)
	}
	if value, ok := fu.mutation.EmailID(); ok {
		_spec.SetField(facility.FieldEmailID, field.TypeString, value)
	}
	if fu.mutation.EmailIDCleared() {
		_spec.ClearField(facility.FieldEmailID, field.TypeString)
	}
	if value, ok := fu.mutation.MobileNumber(); ok {
		_spec.SetField(facility.FieldMobileNumber, field.TypeInt32, value)
	}
	if value, ok := fu.mutation.AddedMobileNumber(); ok {
		_spec.AddField(facility.FieldMobileNumber, field.TypeInt32, value)
	}
	if fu.mutation.MobileNumberCleared() {
		_spec.ClearField(facility.FieldMobileNumber, field.TypeInt32)
	}
	if value, ok := fu.mutation.DivisionCode(); ok {
		_spec.SetField(facility.FieldDivisionCode, field.TypeInt32, value)
	}
	if value, ok := fu.mutation.AddedDivisionCode(); ok {
		_spec.AddField(facility.FieldDivisionCode, field.TypeInt32, value)
	}
	if fu.mutation.DivisionCodeCleared() {
		_spec.ClearField(facility.FieldDivisionCode, field.TypeInt32)
	}
	if value, ok := fu.mutation.RegionCode(); ok {
		_spec.SetField(facility.FieldRegionCode, field.TypeInt32, value)
	}
	if value, ok := fu.mutation.AddedRegionCode(); ok {
		_spec.AddField(facility.FieldRegionCode, field.TypeInt32, value)
	}
	if fu.mutation.RegionCodeCleared() {
		_spec.ClearField(facility.FieldRegionCode, field.TypeInt32)
	}
	if value, ok := fu.mutation.CircleCode(); ok {
		_spec.SetField(facility.FieldCircleCode, field.TypeInt32, value)
	}
	if value, ok := fu.mutation.AddedCircleCode(); ok {
		_spec.AddField(facility.FieldCircleCode, field.TypeInt32, value)
	}
	if fu.mutation.CircleCodeCleared() {
		_spec.ClearField(facility.FieldCircleCode, field.TypeInt32)
	}
	if fu.mutation.RegionRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   facility.RegionRefTable,
			Columns: []string{facility.RegionRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionmaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedRegionRefIDs(); len(nodes) > 0 && !fu.mutation.RegionRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   facility.RegionRefTable,
			Columns: []string{facility.RegionRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionmaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RegionRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   facility.RegionRefTable,
			Columns: []string{facility.RegionRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionmaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.CircleRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   facility.CircleRefTable,
			Columns: []string{facility.CircleRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlemaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedCircleRefIDs(); len(nodes) > 0 && !fu.mutation.CircleRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   facility.CircleRefTable,
			Columns: []string{facility.CircleRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.CircleRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   facility.CircleRefTable,
			Columns: []string{facility.CircleRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{facility.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FacilityUpdateOne is the builder for updating a single Facility entity.
type FacilityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FacilityMutation
}

// SetFacilityCode sets the "FacilityCode" field.
func (fuo *FacilityUpdateOne) SetFacilityCode(s string) *FacilityUpdateOne {
	fuo.mutation.SetFacilityCode(s)
	return fuo
}

// SetOfficeType sets the "OfficeType" field.
func (fuo *FacilityUpdateOne) SetOfficeType(s string) *FacilityUpdateOne {
	fuo.mutation.SetOfficeType(s)
	return fuo
}

// SetFacilityName sets the "FacilityName" field.
func (fuo *FacilityUpdateOne) SetFacilityName(s string) *FacilityUpdateOne {
	fuo.mutation.SetFacilityName(s)
	return fuo
}

// SetReportingOfficeType sets the "ReportingOfficeType" field.
func (fuo *FacilityUpdateOne) SetReportingOfficeType(s string) *FacilityUpdateOne {
	fuo.mutation.SetReportingOfficeType(s)
	return fuo
}

// SetNillableReportingOfficeType sets the "ReportingOfficeType" field if the given value is not nil.
func (fuo *FacilityUpdateOne) SetNillableReportingOfficeType(s *string) *FacilityUpdateOne {
	if s != nil {
		fuo.SetReportingOfficeType(*s)
	}
	return fuo
}

// ClearReportingOfficeType clears the value of the "ReportingOfficeType" field.
func (fuo *FacilityUpdateOne) ClearReportingOfficeType() *FacilityUpdateOne {
	fuo.mutation.ClearReportingOfficeType()
	return fuo
}

// SetReportingOfficeCode sets the "ReportingOfficeCode" field.
func (fuo *FacilityUpdateOne) SetReportingOfficeCode(s string) *FacilityUpdateOne {
	fuo.mutation.SetReportingOfficeCode(s)
	return fuo
}

// SetNillableReportingOfficeCode sets the "ReportingOfficeCode" field if the given value is not nil.
func (fuo *FacilityUpdateOne) SetNillableReportingOfficeCode(s *string) *FacilityUpdateOne {
	if s != nil {
		fuo.SetReportingOfficeCode(*s)
	}
	return fuo
}

// ClearReportingOfficeCode clears the value of the "ReportingOfficeCode" field.
func (fuo *FacilityUpdateOne) ClearReportingOfficeCode() *FacilityUpdateOne {
	fuo.mutation.ClearReportingOfficeCode()
	return fuo
}

// SetEmailID sets the "EmailID" field.
func (fuo *FacilityUpdateOne) SetEmailID(s string) *FacilityUpdateOne {
	fuo.mutation.SetEmailID(s)
	return fuo
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (fuo *FacilityUpdateOne) SetNillableEmailID(s *string) *FacilityUpdateOne {
	if s != nil {
		fuo.SetEmailID(*s)
	}
	return fuo
}

// ClearEmailID clears the value of the "EmailID" field.
func (fuo *FacilityUpdateOne) ClearEmailID() *FacilityUpdateOne {
	fuo.mutation.ClearEmailID()
	return fuo
}

// SetMobileNumber sets the "MobileNumber" field.
func (fuo *FacilityUpdateOne) SetMobileNumber(i int32) *FacilityUpdateOne {
	fuo.mutation.ResetMobileNumber()
	fuo.mutation.SetMobileNumber(i)
	return fuo
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (fuo *FacilityUpdateOne) SetNillableMobileNumber(i *int32) *FacilityUpdateOne {
	if i != nil {
		fuo.SetMobileNumber(*i)
	}
	return fuo
}

// AddMobileNumber adds i to the "MobileNumber" field.
func (fuo *FacilityUpdateOne) AddMobileNumber(i int32) *FacilityUpdateOne {
	fuo.mutation.AddMobileNumber(i)
	return fuo
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (fuo *FacilityUpdateOne) ClearMobileNumber() *FacilityUpdateOne {
	fuo.mutation.ClearMobileNumber()
	return fuo
}

// SetDivisionCode sets the "DivisionCode" field.
func (fuo *FacilityUpdateOne) SetDivisionCode(i int32) *FacilityUpdateOne {
	fuo.mutation.ResetDivisionCode()
	fuo.mutation.SetDivisionCode(i)
	return fuo
}

// SetNillableDivisionCode sets the "DivisionCode" field if the given value is not nil.
func (fuo *FacilityUpdateOne) SetNillableDivisionCode(i *int32) *FacilityUpdateOne {
	if i != nil {
		fuo.SetDivisionCode(*i)
	}
	return fuo
}

// AddDivisionCode adds i to the "DivisionCode" field.
func (fuo *FacilityUpdateOne) AddDivisionCode(i int32) *FacilityUpdateOne {
	fuo.mutation.AddDivisionCode(i)
	return fuo
}

// ClearDivisionCode clears the value of the "DivisionCode" field.
func (fuo *FacilityUpdateOne) ClearDivisionCode() *FacilityUpdateOne {
	fuo.mutation.ClearDivisionCode()
	return fuo
}

// SetRegionCode sets the "RegionCode" field.
func (fuo *FacilityUpdateOne) SetRegionCode(i int32) *FacilityUpdateOne {
	fuo.mutation.ResetRegionCode()
	fuo.mutation.SetRegionCode(i)
	return fuo
}

// SetNillableRegionCode sets the "RegionCode" field if the given value is not nil.
func (fuo *FacilityUpdateOne) SetNillableRegionCode(i *int32) *FacilityUpdateOne {
	if i != nil {
		fuo.SetRegionCode(*i)
	}
	return fuo
}

// AddRegionCode adds i to the "RegionCode" field.
func (fuo *FacilityUpdateOne) AddRegionCode(i int32) *FacilityUpdateOne {
	fuo.mutation.AddRegionCode(i)
	return fuo
}

// ClearRegionCode clears the value of the "RegionCode" field.
func (fuo *FacilityUpdateOne) ClearRegionCode() *FacilityUpdateOne {
	fuo.mutation.ClearRegionCode()
	return fuo
}

// SetCircleCode sets the "CircleCode" field.
func (fuo *FacilityUpdateOne) SetCircleCode(i int32) *FacilityUpdateOne {
	fuo.mutation.ResetCircleCode()
	fuo.mutation.SetCircleCode(i)
	return fuo
}

// SetNillableCircleCode sets the "CircleCode" field if the given value is not nil.
func (fuo *FacilityUpdateOne) SetNillableCircleCode(i *int32) *FacilityUpdateOne {
	if i != nil {
		fuo.SetCircleCode(*i)
	}
	return fuo
}

// AddCircleCode adds i to the "CircleCode" field.
func (fuo *FacilityUpdateOne) AddCircleCode(i int32) *FacilityUpdateOne {
	fuo.mutation.AddCircleCode(i)
	return fuo
}

// ClearCircleCode clears the value of the "CircleCode" field.
func (fuo *FacilityUpdateOne) ClearCircleCode() *FacilityUpdateOne {
	fuo.mutation.ClearCircleCode()
	return fuo
}

// AddRegionRefIDs adds the "region_ref" edge to the RegionMaster entity by IDs.
func (fuo *FacilityUpdateOne) AddRegionRefIDs(ids ...int32) *FacilityUpdateOne {
	fuo.mutation.AddRegionRefIDs(ids...)
	return fuo
}

// AddRegionRef adds the "region_ref" edges to the RegionMaster entity.
func (fuo *FacilityUpdateOne) AddRegionRef(r ...*RegionMaster) *FacilityUpdateOne {
	ids := make([]int32, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return fuo.AddRegionRefIDs(ids...)
}

// AddCircleRefIDs adds the "circle_ref" edge to the CircleMaster entity by IDs.
func (fuo *FacilityUpdateOne) AddCircleRefIDs(ids ...int32) *FacilityUpdateOne {
	fuo.mutation.AddCircleRefIDs(ids...)
	return fuo
}

// AddCircleRef adds the "circle_ref" edges to the CircleMaster entity.
func (fuo *FacilityUpdateOne) AddCircleRef(c ...*CircleMaster) *FacilityUpdateOne {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fuo.AddCircleRefIDs(ids...)
}

// Mutation returns the FacilityMutation object of the builder.
func (fuo *FacilityUpdateOne) Mutation() *FacilityMutation {
	return fuo.mutation
}

// ClearRegionRef clears all "region_ref" edges to the RegionMaster entity.
func (fuo *FacilityUpdateOne) ClearRegionRef() *FacilityUpdateOne {
	fuo.mutation.ClearRegionRef()
	return fuo
}

// RemoveRegionRefIDs removes the "region_ref" edge to RegionMaster entities by IDs.
func (fuo *FacilityUpdateOne) RemoveRegionRefIDs(ids ...int32) *FacilityUpdateOne {
	fuo.mutation.RemoveRegionRefIDs(ids...)
	return fuo
}

// RemoveRegionRef removes "region_ref" edges to RegionMaster entities.
func (fuo *FacilityUpdateOne) RemoveRegionRef(r ...*RegionMaster) *FacilityUpdateOne {
	ids := make([]int32, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return fuo.RemoveRegionRefIDs(ids...)
}

// ClearCircleRef clears all "circle_ref" edges to the CircleMaster entity.
func (fuo *FacilityUpdateOne) ClearCircleRef() *FacilityUpdateOne {
	fuo.mutation.ClearCircleRef()
	return fuo
}

// RemoveCircleRefIDs removes the "circle_ref" edge to CircleMaster entities by IDs.
func (fuo *FacilityUpdateOne) RemoveCircleRefIDs(ids ...int32) *FacilityUpdateOne {
	fuo.mutation.RemoveCircleRefIDs(ids...)
	return fuo
}

// RemoveCircleRef removes "circle_ref" edges to CircleMaster entities.
func (fuo *FacilityUpdateOne) RemoveCircleRef(c ...*CircleMaster) *FacilityUpdateOne {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fuo.RemoveCircleRefIDs(ids...)
}

// Where appends a list predicates to the FacilityUpdate builder.
func (fuo *FacilityUpdateOne) Where(ps ...predicate.Facility) *FacilityUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FacilityUpdateOne) Select(field string, fields ...string) *FacilityUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Facility entity.
func (fuo *FacilityUpdateOne) Save(ctx context.Context) (*Facility, error) {
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FacilityUpdateOne) SaveX(ctx context.Context) *Facility {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FacilityUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FacilityUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuo *FacilityUpdateOne) sqlSave(ctx context.Context) (_node *Facility, err error) {
	_spec := sqlgraph.NewUpdateSpec(facility.Table, facility.Columns, sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Facility.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, facility.FieldID)
		for _, f := range fields {
			if !facility.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != facility.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.FacilityCode(); ok {
		_spec.SetField(facility.FieldFacilityCode, field.TypeString, value)
	}
	if value, ok := fuo.mutation.OfficeType(); ok {
		_spec.SetField(facility.FieldOfficeType, field.TypeString, value)
	}
	if value, ok := fuo.mutation.FacilityName(); ok {
		_spec.SetField(facility.FieldFacilityName, field.TypeString, value)
	}
	if value, ok := fuo.mutation.ReportingOfficeType(); ok {
		_spec.SetField(facility.FieldReportingOfficeType, field.TypeString, value)
	}
	if fuo.mutation.ReportingOfficeTypeCleared() {
		_spec.ClearField(facility.FieldReportingOfficeType, field.TypeString)
	}
	if value, ok := fuo.mutation.ReportingOfficeCode(); ok {
		_spec.SetField(facility.FieldReportingOfficeCode, field.TypeString, value)
	}
	if fuo.mutation.ReportingOfficeCodeCleared() {
		_spec.ClearField(facility.FieldReportingOfficeCode, field.TypeString)
	}
	if value, ok := fuo.mutation.EmailID(); ok {
		_spec.SetField(facility.FieldEmailID, field.TypeString, value)
	}
	if fuo.mutation.EmailIDCleared() {
		_spec.ClearField(facility.FieldEmailID, field.TypeString)
	}
	if value, ok := fuo.mutation.MobileNumber(); ok {
		_spec.SetField(facility.FieldMobileNumber, field.TypeInt32, value)
	}
	if value, ok := fuo.mutation.AddedMobileNumber(); ok {
		_spec.AddField(facility.FieldMobileNumber, field.TypeInt32, value)
	}
	if fuo.mutation.MobileNumberCleared() {
		_spec.ClearField(facility.FieldMobileNumber, field.TypeInt32)
	}
	if value, ok := fuo.mutation.DivisionCode(); ok {
		_spec.SetField(facility.FieldDivisionCode, field.TypeInt32, value)
	}
	if value, ok := fuo.mutation.AddedDivisionCode(); ok {
		_spec.AddField(facility.FieldDivisionCode, field.TypeInt32, value)
	}
	if fuo.mutation.DivisionCodeCleared() {
		_spec.ClearField(facility.FieldDivisionCode, field.TypeInt32)
	}
	if value, ok := fuo.mutation.RegionCode(); ok {
		_spec.SetField(facility.FieldRegionCode, field.TypeInt32, value)
	}
	if value, ok := fuo.mutation.AddedRegionCode(); ok {
		_spec.AddField(facility.FieldRegionCode, field.TypeInt32, value)
	}
	if fuo.mutation.RegionCodeCleared() {
		_spec.ClearField(facility.FieldRegionCode, field.TypeInt32)
	}
	if value, ok := fuo.mutation.CircleCode(); ok {
		_spec.SetField(facility.FieldCircleCode, field.TypeInt32, value)
	}
	if value, ok := fuo.mutation.AddedCircleCode(); ok {
		_spec.AddField(facility.FieldCircleCode, field.TypeInt32, value)
	}
	if fuo.mutation.CircleCodeCleared() {
		_spec.ClearField(facility.FieldCircleCode, field.TypeInt32)
	}
	if fuo.mutation.RegionRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   facility.RegionRefTable,
			Columns: []string{facility.RegionRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionmaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedRegionRefIDs(); len(nodes) > 0 && !fuo.mutation.RegionRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   facility.RegionRefTable,
			Columns: []string{facility.RegionRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionmaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RegionRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   facility.RegionRefTable,
			Columns: []string{facility.RegionRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionmaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.CircleRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   facility.CircleRefTable,
			Columns: []string{facility.CircleRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlemaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedCircleRefIDs(); len(nodes) > 0 && !fuo.mutation.CircleRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   facility.CircleRefTable,
			Columns: []string{facility.CircleRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.CircleRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   facility.CircleRefTable,
			Columns: []string{facility.CircleRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Facility{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{facility.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
