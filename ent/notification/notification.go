// Code generated by ent, DO NOT EDIT.

package notification

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the notification type in the database.
	Label = "notification"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "NotifyCode"
	// FieldExamCode holds the string denoting the examcode field in the database.
	FieldExamCode = "exam_code"
	// FieldExamYear holds the string denoting the examyear field in the database.
	FieldExamYear = "exam_year"
	// FieldApplicationStartDate holds the string denoting the applicationstartdate field in the database.
	FieldApplicationStartDate = "application_start_date"
	// FieldApplicationEndDate holds the string denoting the applicationenddate field in the database.
	FieldApplicationEndDate = "application_end_date"
	// FieldVerificationDateByController holds the string denoting the verificationdatebycontroller field in the database.
	FieldVerificationDateByController = "verification_date_by_controller"
	// FieldCorrectionDateByCandidate holds the string denoting the correctiondatebycandidate field in the database.
	FieldCorrectionDateByCandidate = "correction_date_by_candidate"
	// FieldCorrectionVeriyDateByController holds the string denoting the correctionveriydatebycontroller field in the database.
	FieldCorrectionVeriyDateByController = "correction_veriy_date_by_controller"
	// FieldHallTicketAllotmentDateByNodalOfficer holds the string denoting the hallticketallotmentdatebynodalofficer field in the database.
	FieldHallTicketAllotmentDateByNodalOfficer = "hall_ticket_allotment_date_by_nodal_officer"
	// FieldHallTicketDownloadDate holds the string denoting the hallticketdownloaddate field in the database.
	FieldHallTicketDownloadDate = "hall_ticket_download_date"
	// FieldNotifyFile holds the string denoting the notifyfile field in the database.
	FieldNotifyFile = "notify_file"
	// FieldSyllabusFile holds the string denoting the syllabusfile field in the database.
	FieldSyllabusFile = "syllabus_file"
	// FieldVacanciesFile holds the string denoting the vacanciesfile field in the database.
	FieldVacanciesFile = "vacancies_file"
	// EdgeApplications holds the string denoting the applications edge name in mutations.
	EdgeApplications = "applications"
	// EdgeCenters holds the string denoting the centers edge name in mutations.
	EdgeCenters = "centers"
	// EdgeNodalOfficers holds the string denoting the nodal_officers edge name in mutations.
	EdgeNodalOfficers = "nodal_officers"
	// EdgeExam holds the string denoting the exam edge name in mutations.
	EdgeExam = "exam"
	// EdgeVacancyYears holds the string denoting the vacancy_years edge name in mutations.
	EdgeVacancyYears = "vacancy_years"
	// EdgeNotifyRef holds the string denoting the notify_ref edge name in mutations.
	EdgeNotifyRef = "notify_ref"
	// ApplicationFieldID holds the string denoting the ID field of the Application.
	ApplicationFieldID = "ApplicationCode"
	// CenterFieldID holds the string denoting the ID field of the Center.
	CenterFieldID = "CenterCode"
	// NodalOfficerFieldID holds the string denoting the ID field of the NodalOfficer.
	NodalOfficerFieldID = "NodalOfficerCode"
	// ExamFieldID holds the string denoting the ID field of the Exam.
	ExamFieldID = "ExamCode"
	// VacancyYearFieldID holds the string denoting the ID field of the VacancyYear.
	VacancyYearFieldID = "VacancyYearCode"
	// Table holds the table name of the notification in the database.
	Table = "Notification"
	// ApplicationsTable is the table that holds the applications relation/edge.
	ApplicationsTable = "Application"
	// ApplicationsInverseTable is the table name for the Application entity.
	// It exists in this package in order to avoid circular dependency with the "application" package.
	ApplicationsInverseTable = "Application"
	// ApplicationsColumn is the table column denoting the applications relation/edge.
	ApplicationsColumn = "notify_code"
	// CentersTable is the table that holds the centers relation/edge.
	CentersTable = "Center"
	// CentersInverseTable is the table name for the Center entity.
	// It exists in this package in order to avoid circular dependency with the "center" package.
	CentersInverseTable = "Center"
	// CentersColumn is the table column denoting the centers relation/edge.
	CentersColumn = "notify_code"
	// NodalOfficersTable is the table that holds the nodal_officers relation/edge.
	NodalOfficersTable = "NodalOfficers"
	// NodalOfficersInverseTable is the table name for the NodalOfficer entity.
	// It exists in this package in order to avoid circular dependency with the "nodalofficer" package.
	NodalOfficersInverseTable = "NodalOfficers"
	// NodalOfficersColumn is the table column denoting the nodal_officers relation/edge.
	NodalOfficersColumn = "notify_code"
	// ExamTable is the table that holds the exam relation/edge.
	ExamTable = "Notification"
	// ExamInverseTable is the table name for the Exam entity.
	// It exists in this package in order to avoid circular dependency with the "exam" package.
	ExamInverseTable = "Exam"
	// ExamColumn is the table column denoting the exam relation/edge.
	ExamColumn = "exam_code"
	// VacancyYearsTable is the table that holds the vacancy_years relation/edge.
	VacancyYearsTable = "VacancyYears"
	// VacancyYearsInverseTable is the table name for the VacancyYear entity.
	// It exists in this package in order to avoid circular dependency with the "vacancyyear" package.
	VacancyYearsInverseTable = "VacancyYears"
	// VacancyYearsColumn is the table column denoting the vacancy_years relation/edge.
	VacancyYearsColumn = "notification_vacancy_years"
	// NotifyRefTable is the table that holds the notify_ref relation/edge. The primary key declared below.
	NotifyRefTable = "notification_notify_ref"
)

// Columns holds all SQL columns for notification fields.
var Columns = []string{
	FieldID,
	FieldExamCode,
	FieldExamYear,
	FieldApplicationStartDate,
	FieldApplicationEndDate,
	FieldVerificationDateByController,
	FieldCorrectionDateByCandidate,
	FieldCorrectionVeriyDateByController,
	FieldHallTicketAllotmentDateByNodalOfficer,
	FieldHallTicketDownloadDate,
	FieldNotifyFile,
	FieldSyllabusFile,
	FieldVacanciesFile,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "Notification"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"exam_calendar_notify_ref",
}

var (
	// NotifyRefPrimaryKey and NotifyRefColumn2 are the table columns denoting the
	// primary key for the notify_ref relation (M2M).
	NotifyRefPrimaryKey = []string{"notification_id", "notify_ref_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Notification queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByExamCode orders the results by the ExamCode field.
func ByExamCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamCode, opts...).ToFunc()
}

// ByExamYear orders the results by the ExamYear field.
func ByExamYear(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamYear, opts...).ToFunc()
}

// ByApplicationStartDate orders the results by the ApplicationStartDate field.
func ByApplicationStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicationStartDate, opts...).ToFunc()
}

// ByApplicationEndDate orders the results by the ApplicationEndDate field.
func ByApplicationEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicationEndDate, opts...).ToFunc()
}

// ByVerificationDateByController orders the results by the VerificationDateByController field.
func ByVerificationDateByController(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerificationDateByController, opts...).ToFunc()
}

// ByCorrectionDateByCandidate orders the results by the CorrectionDateByCandidate field.
func ByCorrectionDateByCandidate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCorrectionDateByCandidate, opts...).ToFunc()
}

// ByCorrectionVeriyDateByController orders the results by the CorrectionVeriyDateByController field.
func ByCorrectionVeriyDateByController(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCorrectionVeriyDateByController, opts...).ToFunc()
}

// ByHallTicketAllotmentDateByNodalOfficer orders the results by the HallTicketAllotmentDateByNodalOfficer field.
func ByHallTicketAllotmentDateByNodalOfficer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHallTicketAllotmentDateByNodalOfficer, opts...).ToFunc()
}

// ByHallTicketDownloadDate orders the results by the HallTicketDownloadDate field.
func ByHallTicketDownloadDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHallTicketDownloadDate, opts...).ToFunc()
}

// ByNotifyFile orders the results by the NotifyFile field.
func ByNotifyFile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotifyFile, opts...).ToFunc()
}

// BySyllabusFile orders the results by the SyllabusFile field.
func BySyllabusFile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSyllabusFile, opts...).ToFunc()
}

// ByVacanciesFile orders the results by the VacanciesFile field.
func ByVacanciesFile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVacanciesFile, opts...).ToFunc()
}

// ByApplicationsCount orders the results by applications count.
func ByApplicationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newApplicationsStep(), opts...)
	}
}

// ByApplications orders the results by applications terms.
func ByApplications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplicationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCentersCount orders the results by centers count.
func ByCentersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCentersStep(), opts...)
	}
}

// ByCenters orders the results by centers terms.
func ByCenters(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCentersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNodalOfficersCount orders the results by nodal_officers count.
func ByNodalOfficersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNodalOfficersStep(), opts...)
	}
}

// ByNodalOfficers orders the results by nodal_officers terms.
func ByNodalOfficers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNodalOfficersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExamField orders the results by exam field.
func ByExamField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamStep(), sql.OrderByField(field, opts...))
	}
}

// ByVacancyYearsCount orders the results by vacancy_years count.
func ByVacancyYearsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVacancyYearsStep(), opts...)
	}
}

// ByVacancyYears orders the results by vacancy_years terms.
func ByVacancyYears(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVacancyYearsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNotifyRefCount orders the results by notify_ref count.
func ByNotifyRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNotifyRefStep(), opts...)
	}
}

// ByNotifyRef orders the results by notify_ref terms.
func ByNotifyRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotifyRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newApplicationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplicationsInverseTable, ApplicationFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ApplicationsTable, ApplicationsColumn),
	)
}
func newCentersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CentersInverseTable, CenterFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CentersTable, CentersColumn),
	)
}
func newNodalOfficersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NodalOfficersInverseTable, NodalOfficerFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NodalOfficersTable, NodalOfficersColumn),
	)
}
func newExamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamInverseTable, ExamFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ExamTable, ExamColumn),
	)
}
func newVacancyYearsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VacancyYearsInverseTable, VacancyYearFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VacancyYearsTable, VacancyYearsColumn),
	)
}
func newNotifyRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, NotifyRefTable, NotifyRefPrimaryKey...),
	)
}
