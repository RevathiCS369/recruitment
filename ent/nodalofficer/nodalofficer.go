// Code generated by ent, DO NOT EDIT.

package nodalofficer

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the nodalofficer type in the database.
	Label = "nodal_officer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "NodalOfficerCode"
	// FieldNodalOfficerName holds the string denoting the nodalofficername field in the database.
	FieldNodalOfficerName = "nodal_officer_name"
	// FieldDesignationID holds the string denoting the designationid field in the database.
	FieldDesignationID = "designation_id"
	// FieldEmailID holds the string denoting the emailid field in the database.
	FieldEmailID = "email_id"
	// FieldMobileNumber holds the string denoting the mobilenumber field in the database.
	FieldMobileNumber = "mobile_number"
	// FieldNotifyCode holds the string denoting the notifycode field in the database.
	FieldNotifyCode = "notify_code"
	// FieldExamCode holds the string denoting the examcode field in the database.
	FieldExamCode = "exam_code"
	// FieldHallTicketApproved holds the string denoting the hallticketapproved field in the database.
	FieldHallTicketApproved = "hall_ticket_approved"
	// EdgeCenters holds the string denoting the centers edge name in mutations.
	EdgeCenters = "centers"
	// EdgeExam holds the string denoting the exam edge name in mutations.
	EdgeExam = "exam"
	// EdgeNotification holds the string denoting the notification edge name in mutations.
	EdgeNotification = "notification"
	// CenterFieldID holds the string denoting the ID field of the Center.
	CenterFieldID = "CenterCode"
	// ExamFieldID holds the string denoting the ID field of the Exam.
	ExamFieldID = "ExamCode"
	// NotificationFieldID holds the string denoting the ID field of the Notification.
	NotificationFieldID = "NotifyCode"
	// Table holds the table name of the nodalofficer in the database.
	Table = "NodalOfficers"
	// CentersTable is the table that holds the centers relation/edge.
	CentersTable = "Center"
	// CentersInverseTable is the table name for the Center entity.
	// It exists in this package in order to avoid circular dependency with the "center" package.
	CentersInverseTable = "Center"
	// CentersColumn is the table column denoting the centers relation/edge.
	CentersColumn = "nodal_officer_code"
	// ExamTable is the table that holds the exam relation/edge.
	ExamTable = "NodalOfficers"
	// ExamInverseTable is the table name for the Exam entity.
	// It exists in this package in order to avoid circular dependency with the "exam" package.
	ExamInverseTable = "Exam"
	// ExamColumn is the table column denoting the exam relation/edge.
	ExamColumn = "exam_code"
	// NotificationTable is the table that holds the notification relation/edge.
	NotificationTable = "NodalOfficers"
	// NotificationInverseTable is the table name for the Notification entity.
	// It exists in this package in order to avoid circular dependency with the "notification" package.
	NotificationInverseTable = "Notification"
	// NotificationColumn is the table column denoting the notification relation/edge.
	NotificationColumn = "notify_code"
)

// Columns holds all SQL columns for nodalofficer fields.
var Columns = []string{
	FieldID,
	FieldNodalOfficerName,
	FieldDesignationID,
	FieldEmailID,
	FieldMobileNumber,
	FieldNotifyCode,
	FieldExamCode,
	FieldHallTicketApproved,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the NodalOfficer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNodalOfficerName orders the results by the NodalOfficerName field.
func ByNodalOfficerName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNodalOfficerName, opts...).ToFunc()
}

// ByDesignationID orders the results by the DesignationID field.
func ByDesignationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesignationID, opts...).ToFunc()
}

// ByEmailID orders the results by the EmailID field.
func ByEmailID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailID, opts...).ToFunc()
}

// ByMobileNumber orders the results by the MobileNumber field.
func ByMobileNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobileNumber, opts...).ToFunc()
}

// ByNotifyCode orders the results by the NotifyCode field.
func ByNotifyCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotifyCode, opts...).ToFunc()
}

// ByExamCode orders the results by the ExamCode field.
func ByExamCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamCode, opts...).ToFunc()
}

// ByHallTicketApproved orders the results by the HallTicketApproved field.
func ByHallTicketApproved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHallTicketApproved, opts...).ToFunc()
}

// ByCentersCount orders the results by centers count.
func ByCentersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCentersStep(), opts...)
	}
}

// ByCenters orders the results by centers terms.
func ByCenters(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCentersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExamField orders the results by exam field.
func ByExamField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamStep(), sql.OrderByField(field, opts...))
	}
}

// ByNotificationField orders the results by notification field.
func ByNotificationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotificationStep(), sql.OrderByField(field, opts...))
	}
}
func newCentersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CentersInverseTable, CenterFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CentersTable, CentersColumn),
	)
}
func newExamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamInverseTable, ExamFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ExamTable, ExamColumn),
	)
}
func newNotificationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotificationInverseTable, NotificationFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, NotificationTable, NotificationColumn),
	)
}
