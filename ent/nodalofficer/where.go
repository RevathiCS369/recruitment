// Code generated by ent, DO NOT EDIT.

package nodalofficer

import (
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldLTE(FieldID, id))
}

// NodalOfficerName applies equality check predicate on the "NodalOfficerName" field. It's identical to NodalOfficerNameEQ.
func NodalOfficerName(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldEQ(FieldNodalOfficerName, v))
}

// DesignationID applies equality check predicate on the "DesignationID" field. It's identical to DesignationIDEQ.
func DesignationID(v int32) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldEQ(FieldDesignationID, v))
}

// EmailID applies equality check predicate on the "EmailID" field. It's identical to EmailIDEQ.
func EmailID(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldEQ(FieldEmailID, v))
}

// MobileNumber applies equality check predicate on the "MobileNumber" field. It's identical to MobileNumberEQ.
func MobileNumber(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldEQ(FieldMobileNumber, v))
}

// NotifyCode applies equality check predicate on the "NotifyCode" field. It's identical to NotifyCodeEQ.
func NotifyCode(v int32) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldEQ(FieldNotifyCode, v))
}

// ExamCode applies equality check predicate on the "ExamCode" field. It's identical to ExamCodeEQ.
func ExamCode(v int32) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldEQ(FieldExamCode, v))
}

// HallTicketApproved applies equality check predicate on the "HallTicketApproved" field. It's identical to HallTicketApprovedEQ.
func HallTicketApproved(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldEQ(FieldHallTicketApproved, v))
}

// NodalOfficerNameEQ applies the EQ predicate on the "NodalOfficerName" field.
func NodalOfficerNameEQ(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldEQ(FieldNodalOfficerName, v))
}

// NodalOfficerNameNEQ applies the NEQ predicate on the "NodalOfficerName" field.
func NodalOfficerNameNEQ(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldNEQ(FieldNodalOfficerName, v))
}

// NodalOfficerNameIn applies the In predicate on the "NodalOfficerName" field.
func NodalOfficerNameIn(vs ...string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldIn(FieldNodalOfficerName, vs...))
}

// NodalOfficerNameNotIn applies the NotIn predicate on the "NodalOfficerName" field.
func NodalOfficerNameNotIn(vs ...string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldNotIn(FieldNodalOfficerName, vs...))
}

// NodalOfficerNameGT applies the GT predicate on the "NodalOfficerName" field.
func NodalOfficerNameGT(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldGT(FieldNodalOfficerName, v))
}

// NodalOfficerNameGTE applies the GTE predicate on the "NodalOfficerName" field.
func NodalOfficerNameGTE(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldGTE(FieldNodalOfficerName, v))
}

// NodalOfficerNameLT applies the LT predicate on the "NodalOfficerName" field.
func NodalOfficerNameLT(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldLT(FieldNodalOfficerName, v))
}

// NodalOfficerNameLTE applies the LTE predicate on the "NodalOfficerName" field.
func NodalOfficerNameLTE(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldLTE(FieldNodalOfficerName, v))
}

// NodalOfficerNameContains applies the Contains predicate on the "NodalOfficerName" field.
func NodalOfficerNameContains(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldContains(FieldNodalOfficerName, v))
}

// NodalOfficerNameHasPrefix applies the HasPrefix predicate on the "NodalOfficerName" field.
func NodalOfficerNameHasPrefix(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldHasPrefix(FieldNodalOfficerName, v))
}

// NodalOfficerNameHasSuffix applies the HasSuffix predicate on the "NodalOfficerName" field.
func NodalOfficerNameHasSuffix(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldHasSuffix(FieldNodalOfficerName, v))
}

// NodalOfficerNameEqualFold applies the EqualFold predicate on the "NodalOfficerName" field.
func NodalOfficerNameEqualFold(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldEqualFold(FieldNodalOfficerName, v))
}

// NodalOfficerNameContainsFold applies the ContainsFold predicate on the "NodalOfficerName" field.
func NodalOfficerNameContainsFold(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldContainsFold(FieldNodalOfficerName, v))
}

// DesignationIDEQ applies the EQ predicate on the "DesignationID" field.
func DesignationIDEQ(v int32) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldEQ(FieldDesignationID, v))
}

// DesignationIDNEQ applies the NEQ predicate on the "DesignationID" field.
func DesignationIDNEQ(v int32) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldNEQ(FieldDesignationID, v))
}

// DesignationIDIn applies the In predicate on the "DesignationID" field.
func DesignationIDIn(vs ...int32) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldIn(FieldDesignationID, vs...))
}

// DesignationIDNotIn applies the NotIn predicate on the "DesignationID" field.
func DesignationIDNotIn(vs ...int32) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldNotIn(FieldDesignationID, vs...))
}

// DesignationIDGT applies the GT predicate on the "DesignationID" field.
func DesignationIDGT(v int32) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldGT(FieldDesignationID, v))
}

// DesignationIDGTE applies the GTE predicate on the "DesignationID" field.
func DesignationIDGTE(v int32) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldGTE(FieldDesignationID, v))
}

// DesignationIDLT applies the LT predicate on the "DesignationID" field.
func DesignationIDLT(v int32) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldLT(FieldDesignationID, v))
}

// DesignationIDLTE applies the LTE predicate on the "DesignationID" field.
func DesignationIDLTE(v int32) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldLTE(FieldDesignationID, v))
}

// EmailIDEQ applies the EQ predicate on the "EmailID" field.
func EmailIDEQ(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldEQ(FieldEmailID, v))
}

// EmailIDNEQ applies the NEQ predicate on the "EmailID" field.
func EmailIDNEQ(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldNEQ(FieldEmailID, v))
}

// EmailIDIn applies the In predicate on the "EmailID" field.
func EmailIDIn(vs ...string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldIn(FieldEmailID, vs...))
}

// EmailIDNotIn applies the NotIn predicate on the "EmailID" field.
func EmailIDNotIn(vs ...string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldNotIn(FieldEmailID, vs...))
}

// EmailIDGT applies the GT predicate on the "EmailID" field.
func EmailIDGT(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldGT(FieldEmailID, v))
}

// EmailIDGTE applies the GTE predicate on the "EmailID" field.
func EmailIDGTE(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldGTE(FieldEmailID, v))
}

// EmailIDLT applies the LT predicate on the "EmailID" field.
func EmailIDLT(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldLT(FieldEmailID, v))
}

// EmailIDLTE applies the LTE predicate on the "EmailID" field.
func EmailIDLTE(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldLTE(FieldEmailID, v))
}

// EmailIDContains applies the Contains predicate on the "EmailID" field.
func EmailIDContains(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldContains(FieldEmailID, v))
}

// EmailIDHasPrefix applies the HasPrefix predicate on the "EmailID" field.
func EmailIDHasPrefix(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldHasPrefix(FieldEmailID, v))
}

// EmailIDHasSuffix applies the HasSuffix predicate on the "EmailID" field.
func EmailIDHasSuffix(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldHasSuffix(FieldEmailID, v))
}

// EmailIDEqualFold applies the EqualFold predicate on the "EmailID" field.
func EmailIDEqualFold(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldEqualFold(FieldEmailID, v))
}

// EmailIDContainsFold applies the ContainsFold predicate on the "EmailID" field.
func EmailIDContainsFold(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldContainsFold(FieldEmailID, v))
}

// MobileNumberEQ applies the EQ predicate on the "MobileNumber" field.
func MobileNumberEQ(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldEQ(FieldMobileNumber, v))
}

// MobileNumberNEQ applies the NEQ predicate on the "MobileNumber" field.
func MobileNumberNEQ(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldNEQ(FieldMobileNumber, v))
}

// MobileNumberIn applies the In predicate on the "MobileNumber" field.
func MobileNumberIn(vs ...string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldIn(FieldMobileNumber, vs...))
}

// MobileNumberNotIn applies the NotIn predicate on the "MobileNumber" field.
func MobileNumberNotIn(vs ...string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldNotIn(FieldMobileNumber, vs...))
}

// MobileNumberGT applies the GT predicate on the "MobileNumber" field.
func MobileNumberGT(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldGT(FieldMobileNumber, v))
}

// MobileNumberGTE applies the GTE predicate on the "MobileNumber" field.
func MobileNumberGTE(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldGTE(FieldMobileNumber, v))
}

// MobileNumberLT applies the LT predicate on the "MobileNumber" field.
func MobileNumberLT(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldLT(FieldMobileNumber, v))
}

// MobileNumberLTE applies the LTE predicate on the "MobileNumber" field.
func MobileNumberLTE(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldLTE(FieldMobileNumber, v))
}

// MobileNumberContains applies the Contains predicate on the "MobileNumber" field.
func MobileNumberContains(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldContains(FieldMobileNumber, v))
}

// MobileNumberHasPrefix applies the HasPrefix predicate on the "MobileNumber" field.
func MobileNumberHasPrefix(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldHasPrefix(FieldMobileNumber, v))
}

// MobileNumberHasSuffix applies the HasSuffix predicate on the "MobileNumber" field.
func MobileNumberHasSuffix(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldHasSuffix(FieldMobileNumber, v))
}

// MobileNumberEqualFold applies the EqualFold predicate on the "MobileNumber" field.
func MobileNumberEqualFold(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldEqualFold(FieldMobileNumber, v))
}

// MobileNumberContainsFold applies the ContainsFold predicate on the "MobileNumber" field.
func MobileNumberContainsFold(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldContainsFold(FieldMobileNumber, v))
}

// NotifyCodeEQ applies the EQ predicate on the "NotifyCode" field.
func NotifyCodeEQ(v int32) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldEQ(FieldNotifyCode, v))
}

// NotifyCodeNEQ applies the NEQ predicate on the "NotifyCode" field.
func NotifyCodeNEQ(v int32) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldNEQ(FieldNotifyCode, v))
}

// NotifyCodeIn applies the In predicate on the "NotifyCode" field.
func NotifyCodeIn(vs ...int32) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldIn(FieldNotifyCode, vs...))
}

// NotifyCodeNotIn applies the NotIn predicate on the "NotifyCode" field.
func NotifyCodeNotIn(vs ...int32) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldNotIn(FieldNotifyCode, vs...))
}

// NotifyCodeIsNil applies the IsNil predicate on the "NotifyCode" field.
func NotifyCodeIsNil() predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldIsNull(FieldNotifyCode))
}

// NotifyCodeNotNil applies the NotNil predicate on the "NotifyCode" field.
func NotifyCodeNotNil() predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldNotNull(FieldNotifyCode))
}

// ExamCodeEQ applies the EQ predicate on the "ExamCode" field.
func ExamCodeEQ(v int32) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldEQ(FieldExamCode, v))
}

// ExamCodeNEQ applies the NEQ predicate on the "ExamCode" field.
func ExamCodeNEQ(v int32) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldNEQ(FieldExamCode, v))
}

// ExamCodeIn applies the In predicate on the "ExamCode" field.
func ExamCodeIn(vs ...int32) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldIn(FieldExamCode, vs...))
}

// ExamCodeNotIn applies the NotIn predicate on the "ExamCode" field.
func ExamCodeNotIn(vs ...int32) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldNotIn(FieldExamCode, vs...))
}

// ExamCodeIsNil applies the IsNil predicate on the "ExamCode" field.
func ExamCodeIsNil() predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldIsNull(FieldExamCode))
}

// ExamCodeNotNil applies the NotNil predicate on the "ExamCode" field.
func ExamCodeNotNil() predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldNotNull(FieldExamCode))
}

// HallTicketApprovedEQ applies the EQ predicate on the "HallTicketApproved" field.
func HallTicketApprovedEQ(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldEQ(FieldHallTicketApproved, v))
}

// HallTicketApprovedNEQ applies the NEQ predicate on the "HallTicketApproved" field.
func HallTicketApprovedNEQ(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldNEQ(FieldHallTicketApproved, v))
}

// HallTicketApprovedIn applies the In predicate on the "HallTicketApproved" field.
func HallTicketApprovedIn(vs ...string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldIn(FieldHallTicketApproved, vs...))
}

// HallTicketApprovedNotIn applies the NotIn predicate on the "HallTicketApproved" field.
func HallTicketApprovedNotIn(vs ...string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldNotIn(FieldHallTicketApproved, vs...))
}

// HallTicketApprovedGT applies the GT predicate on the "HallTicketApproved" field.
func HallTicketApprovedGT(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldGT(FieldHallTicketApproved, v))
}

// HallTicketApprovedGTE applies the GTE predicate on the "HallTicketApproved" field.
func HallTicketApprovedGTE(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldGTE(FieldHallTicketApproved, v))
}

// HallTicketApprovedLT applies the LT predicate on the "HallTicketApproved" field.
func HallTicketApprovedLT(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldLT(FieldHallTicketApproved, v))
}

// HallTicketApprovedLTE applies the LTE predicate on the "HallTicketApproved" field.
func HallTicketApprovedLTE(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldLTE(FieldHallTicketApproved, v))
}

// HallTicketApprovedContains applies the Contains predicate on the "HallTicketApproved" field.
func HallTicketApprovedContains(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldContains(FieldHallTicketApproved, v))
}

// HallTicketApprovedHasPrefix applies the HasPrefix predicate on the "HallTicketApproved" field.
func HallTicketApprovedHasPrefix(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldHasPrefix(FieldHallTicketApproved, v))
}

// HallTicketApprovedHasSuffix applies the HasSuffix predicate on the "HallTicketApproved" field.
func HallTicketApprovedHasSuffix(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldHasSuffix(FieldHallTicketApproved, v))
}

// HallTicketApprovedIsNil applies the IsNil predicate on the "HallTicketApproved" field.
func HallTicketApprovedIsNil() predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldIsNull(FieldHallTicketApproved))
}

// HallTicketApprovedNotNil applies the NotNil predicate on the "HallTicketApproved" field.
func HallTicketApprovedNotNil() predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldNotNull(FieldHallTicketApproved))
}

// HallTicketApprovedEqualFold applies the EqualFold predicate on the "HallTicketApproved" field.
func HallTicketApprovedEqualFold(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldEqualFold(FieldHallTicketApproved, v))
}

// HallTicketApprovedContainsFold applies the ContainsFold predicate on the "HallTicketApproved" field.
func HallTicketApprovedContainsFold(v string) predicate.NodalOfficer {
	return predicate.NodalOfficer(sql.FieldContainsFold(FieldHallTicketApproved, v))
}

// HasCenters applies the HasEdge predicate on the "centers" edge.
func HasCenters() predicate.NodalOfficer {
	return predicate.NodalOfficer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CentersTable, CentersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCentersWith applies the HasEdge predicate on the "centers" edge with a given conditions (other predicates).
func HasCentersWith(preds ...predicate.Center) predicate.NodalOfficer {
	return predicate.NodalOfficer(func(s *sql.Selector) {
		step := newCentersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExam applies the HasEdge predicate on the "exam" edge.
func HasExam() predicate.NodalOfficer {
	return predicate.NodalOfficer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExamTable, ExamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamWith applies the HasEdge predicate on the "exam" edge with a given conditions (other predicates).
func HasExamWith(preds ...predicate.Exam) predicate.NodalOfficer {
	return predicate.NodalOfficer(func(s *sql.Selector) {
		step := newExamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNotification applies the HasEdge predicate on the "notification" edge.
func HasNotification() predicate.NodalOfficer {
	return predicate.NodalOfficer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NotificationTable, NotificationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotificationWith applies the HasEdge predicate on the "notification" edge with a given conditions (other predicates).
func HasNotificationWith(preds ...predicate.Notification) predicate.NodalOfficer {
	return predicate.NodalOfficer(func(s *sql.Selector) {
		step := newNotificationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NodalOfficer) predicate.NodalOfficer {
	return predicate.NodalOfficer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NodalOfficer) predicate.NodalOfficer {
	return predicate.NodalOfficer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NodalOfficer) predicate.NodalOfficer {
	return predicate.NodalOfficer(func(s *sql.Selector) {
		p(s.Not())
	})
}
