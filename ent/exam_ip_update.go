// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/exam_applications_ip"
	"recruit/ent/exam_ip"
	"recruit/ent/examcalendar"
	"recruit/ent/exampapers"
	"recruit/ent/notification"
	"recruit/ent/predicate"
	"recruit/ent/usermaster"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamIPUpdate is the builder for updating Exam_IP entities.
type ExamIPUpdate struct {
	config
	hooks    []Hook
	mutation *ExamIPMutation
}

// Where appends a list predicates to the ExamIPUpdate builder.
func (eiu *ExamIPUpdate) Where(ps ...predicate.Exam_IP) *ExamIPUpdate {
	eiu.mutation.Where(ps...)
	return eiu
}

// SetExamNameCode sets the "ExamNameCode" field.
func (eiu *ExamIPUpdate) SetExamNameCode(s string) *ExamIPUpdate {
	eiu.mutation.SetExamNameCode(s)
	return eiu
}

// SetNillableExamNameCode sets the "ExamNameCode" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableExamNameCode(s *string) *ExamIPUpdate {
	if s != nil {
		eiu.SetExamNameCode(*s)
	}
	return eiu
}

// ClearExamNameCode clears the value of the "ExamNameCode" field.
func (eiu *ExamIPUpdate) ClearExamNameCode() *ExamIPUpdate {
	eiu.mutation.ClearExamNameCode()
	return eiu
}

// SetExamName sets the "ExamName" field.
func (eiu *ExamIPUpdate) SetExamName(s string) *ExamIPUpdate {
	eiu.mutation.SetExamName(s)
	return eiu
}

// SetExamType sets the "ExamType" field.
func (eiu *ExamIPUpdate) SetExamType(s string) *ExamIPUpdate {
	eiu.mutation.SetExamType(s)
	return eiu
}

// SetNotificationCode sets the "NotificationCode" field.
func (eiu *ExamIPUpdate) SetNotificationCode(i int32) *ExamIPUpdate {
	eiu.mutation.ResetNotificationCode()
	eiu.mutation.SetNotificationCode(i)
	return eiu
}

// SetNillableNotificationCode sets the "NotificationCode" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableNotificationCode(i *int32) *ExamIPUpdate {
	if i != nil {
		eiu.SetNotificationCode(*i)
	}
	return eiu
}

// AddNotificationCode adds i to the "NotificationCode" field.
func (eiu *ExamIPUpdate) AddNotificationCode(i int32) *ExamIPUpdate {
	eiu.mutation.AddNotificationCode(i)
	return eiu
}

// ClearNotificationCode clears the value of the "NotificationCode" field.
func (eiu *ExamIPUpdate) ClearNotificationCode() *ExamIPUpdate {
	eiu.mutation.ClearNotificationCode()
	return eiu
}

// SetConductedBy sets the "ConductedBy" field.
func (eiu *ExamIPUpdate) SetConductedBy(s string) *ExamIPUpdate {
	eiu.mutation.SetConductedBy(s)
	return eiu
}

// SetNodalOffice sets the "NodalOffice" field.
func (eiu *ExamIPUpdate) SetNodalOffice(s string) *ExamIPUpdate {
	eiu.mutation.SetNodalOffice(s)
	return eiu
}

// SetNillableNodalOffice sets the "NodalOffice" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableNodalOffice(s *string) *ExamIPUpdate {
	if s != nil {
		eiu.SetNodalOffice(*s)
	}
	return eiu
}

// ClearNodalOffice clears the value of the "NodalOffice" field.
func (eiu *ExamIPUpdate) ClearNodalOffice() *ExamIPUpdate {
	eiu.mutation.ClearNodalOffice()
	return eiu
}

// SetCalendarCode sets the "CalendarCode" field.
func (eiu *ExamIPUpdate) SetCalendarCode(i int32) *ExamIPUpdate {
	eiu.mutation.ResetCalendarCode()
	eiu.mutation.SetCalendarCode(i)
	return eiu
}

// SetNillableCalendarCode sets the "CalendarCode" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableCalendarCode(i *int32) *ExamIPUpdate {
	if i != nil {
		eiu.SetCalendarCode(*i)
	}
	return eiu
}

// AddCalendarCode adds i to the "CalendarCode" field.
func (eiu *ExamIPUpdate) AddCalendarCode(i int32) *ExamIPUpdate {
	eiu.mutation.AddCalendarCode(i)
	return eiu
}

// ClearCalendarCode clears the value of the "CalendarCode" field.
func (eiu *ExamIPUpdate) ClearCalendarCode() *ExamIPUpdate {
	eiu.mutation.ClearCalendarCode()
	return eiu
}

// SetPaperCode sets the "PaperCode" field.
func (eiu *ExamIPUpdate) SetPaperCode(i int32) *ExamIPUpdate {
	eiu.mutation.ResetPaperCode()
	eiu.mutation.SetPaperCode(i)
	return eiu
}

// SetNillablePaperCode sets the "PaperCode" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillablePaperCode(i *int32) *ExamIPUpdate {
	if i != nil {
		eiu.SetPaperCode(*i)
	}
	return eiu
}

// AddPaperCode adds i to the "PaperCode" field.
func (eiu *ExamIPUpdate) AddPaperCode(i int32) *ExamIPUpdate {
	eiu.mutation.AddPaperCode(i)
	return eiu
}

// ClearPaperCode clears the value of the "PaperCode" field.
func (eiu *ExamIPUpdate) ClearPaperCode() *ExamIPUpdate {
	eiu.mutation.ClearPaperCode()
	return eiu
}

// SetEligibleCadre sets the "EligibleCadre" field.
func (eiu *ExamIPUpdate) SetEligibleCadre(s string) *ExamIPUpdate {
	eiu.mutation.SetEligibleCadre(s)
	return eiu
}

// SetNillableEligibleCadre sets the "EligibleCadre" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableEligibleCadre(s *string) *ExamIPUpdate {
	if s != nil {
		eiu.SetEligibleCadre(*s)
	}
	return eiu
}

// ClearEligibleCadre clears the value of the "EligibleCadre" field.
func (eiu *ExamIPUpdate) ClearEligibleCadre() *ExamIPUpdate {
	eiu.mutation.ClearEligibleCadre()
	return eiu
}

// SetEligiblePost1 sets the "EligiblePost1" field.
func (eiu *ExamIPUpdate) SetEligiblePost1(s string) *ExamIPUpdate {
	eiu.mutation.SetEligiblePost1(s)
	return eiu
}

// SetNillableEligiblePost1 sets the "EligiblePost1" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableEligiblePost1(s *string) *ExamIPUpdate {
	if s != nil {
		eiu.SetEligiblePost1(*s)
	}
	return eiu
}

// ClearEligiblePost1 clears the value of the "EligiblePost1" field.
func (eiu *ExamIPUpdate) ClearEligiblePost1() *ExamIPUpdate {
	eiu.mutation.ClearEligiblePost1()
	return eiu
}

// SetEligiblePost2 sets the "EligiblePost2" field.
func (eiu *ExamIPUpdate) SetEligiblePost2(s string) *ExamIPUpdate {
	eiu.mutation.SetEligiblePost2(s)
	return eiu
}

// SetNillableEligiblePost2 sets the "EligiblePost2" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableEligiblePost2(s *string) *ExamIPUpdate {
	if s != nil {
		eiu.SetEligiblePost2(*s)
	}
	return eiu
}

// ClearEligiblePost2 clears the value of the "EligiblePost2" field.
func (eiu *ExamIPUpdate) ClearEligiblePost2() *ExamIPUpdate {
	eiu.mutation.ClearEligiblePost2()
	return eiu
}

// SetEligiblePost3 sets the "EligiblePost3" field.
func (eiu *ExamIPUpdate) SetEligiblePost3(s string) *ExamIPUpdate {
	eiu.mutation.SetEligiblePost3(s)
	return eiu
}

// SetNillableEligiblePost3 sets the "EligiblePost3" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableEligiblePost3(s *string) *ExamIPUpdate {
	if s != nil {
		eiu.SetEligiblePost3(*s)
	}
	return eiu
}

// ClearEligiblePost3 clears the value of the "EligiblePost3" field.
func (eiu *ExamIPUpdate) ClearEligiblePost3() *ExamIPUpdate {
	eiu.mutation.ClearEligiblePost3()
	return eiu
}

// SetEligiblePost4 sets the "EligiblePost4" field.
func (eiu *ExamIPUpdate) SetEligiblePost4(s string) *ExamIPUpdate {
	eiu.mutation.SetEligiblePost4(s)
	return eiu
}

// SetNillableEligiblePost4 sets the "EligiblePost4" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableEligiblePost4(s *string) *ExamIPUpdate {
	if s != nil {
		eiu.SetEligiblePost4(*s)
	}
	return eiu
}

// ClearEligiblePost4 clears the value of the "EligiblePost4" field.
func (eiu *ExamIPUpdate) ClearEligiblePost4() *ExamIPUpdate {
	eiu.mutation.ClearEligiblePost4()
	return eiu
}

// SetEligiblePost5 sets the "EligiblePost5" field.
func (eiu *ExamIPUpdate) SetEligiblePost5(s string) *ExamIPUpdate {
	eiu.mutation.SetEligiblePost5(s)
	return eiu
}

// SetNillableEligiblePost5 sets the "EligiblePost5" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableEligiblePost5(s *string) *ExamIPUpdate {
	if s != nil {
		eiu.SetEligiblePost5(*s)
	}
	return eiu
}

// ClearEligiblePost5 clears the value of the "EligiblePost5" field.
func (eiu *ExamIPUpdate) ClearEligiblePost5() *ExamIPUpdate {
	eiu.mutation.ClearEligiblePost5()
	return eiu
}

// SetExamPost1 sets the "ExamPost1" field.
func (eiu *ExamIPUpdate) SetExamPost1(s string) *ExamIPUpdate {
	eiu.mutation.SetExamPost1(s)
	return eiu
}

// SetNillableExamPost1 sets the "ExamPost1" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableExamPost1(s *string) *ExamIPUpdate {
	if s != nil {
		eiu.SetExamPost1(*s)
	}
	return eiu
}

// ClearExamPost1 clears the value of the "ExamPost1" field.
func (eiu *ExamIPUpdate) ClearExamPost1() *ExamIPUpdate {
	eiu.mutation.ClearExamPost1()
	return eiu
}

// SetExamPost2 sets the "ExamPost2" field.
func (eiu *ExamIPUpdate) SetExamPost2(s string) *ExamIPUpdate {
	eiu.mutation.SetExamPost2(s)
	return eiu
}

// SetNillableExamPost2 sets the "ExamPost2" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableExamPost2(s *string) *ExamIPUpdate {
	if s != nil {
		eiu.SetExamPost2(*s)
	}
	return eiu
}

// ClearExamPost2 clears the value of the "ExamPost2" field.
func (eiu *ExamIPUpdate) ClearExamPost2() *ExamIPUpdate {
	eiu.mutation.ClearExamPost2()
	return eiu
}

// SetExamPost3 sets the "ExamPost3" field.
func (eiu *ExamIPUpdate) SetExamPost3(s string) *ExamIPUpdate {
	eiu.mutation.SetExamPost3(s)
	return eiu
}

// SetNillableExamPost3 sets the "ExamPost3" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableExamPost3(s *string) *ExamIPUpdate {
	if s != nil {
		eiu.SetExamPost3(*s)
	}
	return eiu
}

// ClearExamPost3 clears the value of the "ExamPost3" field.
func (eiu *ExamIPUpdate) ClearExamPost3() *ExamIPUpdate {
	eiu.mutation.ClearExamPost3()
	return eiu
}

// SetExamPost4 sets the "ExamPost4" field.
func (eiu *ExamIPUpdate) SetExamPost4(s string) *ExamIPUpdate {
	eiu.mutation.SetExamPost4(s)
	return eiu
}

// SetNillableExamPost4 sets the "ExamPost4" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableExamPost4(s *string) *ExamIPUpdate {
	if s != nil {
		eiu.SetExamPost4(*s)
	}
	return eiu
}

// ClearExamPost4 clears the value of the "ExamPost4" field.
func (eiu *ExamIPUpdate) ClearExamPost4() *ExamIPUpdate {
	eiu.mutation.ClearExamPost4()
	return eiu
}

// SetExamPost5 sets the "ExamPost5" field.
func (eiu *ExamIPUpdate) SetExamPost5(s string) *ExamIPUpdate {
	eiu.mutation.SetExamPost5(s)
	return eiu
}

// SetNillableExamPost5 sets the "ExamPost5" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableExamPost5(s *string) *ExamIPUpdate {
	if s != nil {
		eiu.SetExamPost5(*s)
	}
	return eiu
}

// ClearExamPost5 clears the value of the "ExamPost5" field.
func (eiu *ExamIPUpdate) ClearExamPost5() *ExamIPUpdate {
	eiu.mutation.ClearExamPost5()
	return eiu
}

// SetEducationCriteria sets the "EducationCriteria" field.
func (eiu *ExamIPUpdate) SetEducationCriteria(s string) *ExamIPUpdate {
	eiu.mutation.SetEducationCriteria(s)
	return eiu
}

// SetNillableEducationCriteria sets the "EducationCriteria" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableEducationCriteria(s *string) *ExamIPUpdate {
	if s != nil {
		eiu.SetEducationCriteria(*s)
	}
	return eiu
}

// ClearEducationCriteria clears the value of the "EducationCriteria" field.
func (eiu *ExamIPUpdate) ClearEducationCriteria() *ExamIPUpdate {
	eiu.mutation.ClearEducationCriteria()
	return eiu
}

// SetCategoryAgeLimitGEN sets the "CategoryAgeLimitGEN" field.
func (eiu *ExamIPUpdate) SetCategoryAgeLimitGEN(s string) *ExamIPUpdate {
	eiu.mutation.SetCategoryAgeLimitGEN(s)
	return eiu
}

// SetNillableCategoryAgeLimitGEN sets the "CategoryAgeLimitGEN" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableCategoryAgeLimitGEN(s *string) *ExamIPUpdate {
	if s != nil {
		eiu.SetCategoryAgeLimitGEN(*s)
	}
	return eiu
}

// ClearCategoryAgeLimitGEN clears the value of the "CategoryAgeLimitGEN" field.
func (eiu *ExamIPUpdate) ClearCategoryAgeLimitGEN() *ExamIPUpdate {
	eiu.mutation.ClearCategoryAgeLimitGEN()
	return eiu
}

// SetCategoryAgeLimitSC sets the "CategoryAgeLimitSC" field.
func (eiu *ExamIPUpdate) SetCategoryAgeLimitSC(s string) *ExamIPUpdate {
	eiu.mutation.SetCategoryAgeLimitSC(s)
	return eiu
}

// SetNillableCategoryAgeLimitSC sets the "CategoryAgeLimitSC" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableCategoryAgeLimitSC(s *string) *ExamIPUpdate {
	if s != nil {
		eiu.SetCategoryAgeLimitSC(*s)
	}
	return eiu
}

// ClearCategoryAgeLimitSC clears the value of the "CategoryAgeLimitSC" field.
func (eiu *ExamIPUpdate) ClearCategoryAgeLimitSC() *ExamIPUpdate {
	eiu.mutation.ClearCategoryAgeLimitSC()
	return eiu
}

// SetCategoryAgeLimitST sets the "CategoryAgeLimitST" field.
func (eiu *ExamIPUpdate) SetCategoryAgeLimitST(s string) *ExamIPUpdate {
	eiu.mutation.SetCategoryAgeLimitST(s)
	return eiu
}

// SetNillableCategoryAgeLimitST sets the "CategoryAgeLimitST" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableCategoryAgeLimitST(s *string) *ExamIPUpdate {
	if s != nil {
		eiu.SetCategoryAgeLimitST(*s)
	}
	return eiu
}

// ClearCategoryAgeLimitST clears the value of the "CategoryAgeLimitST" field.
func (eiu *ExamIPUpdate) ClearCategoryAgeLimitST() *ExamIPUpdate {
	eiu.mutation.ClearCategoryAgeLimitST()
	return eiu
}

// SetServiceYears sets the "ServiceYears" field.
func (eiu *ExamIPUpdate) SetServiceYears(s string) *ExamIPUpdate {
	eiu.mutation.SetServiceYears(s)
	return eiu
}

// SetNillableServiceYears sets the "ServiceYears" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableServiceYears(s *string) *ExamIPUpdate {
	if s != nil {
		eiu.SetServiceYears(*s)
	}
	return eiu
}

// ClearServiceYears clears the value of the "ServiceYears" field.
func (eiu *ExamIPUpdate) ClearServiceYears() *ExamIPUpdate {
	eiu.mutation.ClearServiceYears()
	return eiu
}

// SetDrivingLicenseRequired sets the "DrivingLicenseRequired" field.
func (eiu *ExamIPUpdate) SetDrivingLicenseRequired(s string) *ExamIPUpdate {
	eiu.mutation.SetDrivingLicenseRequired(s)
	return eiu
}

// SetNillableDrivingLicenseRequired sets the "DrivingLicenseRequired" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableDrivingLicenseRequired(s *string) *ExamIPUpdate {
	if s != nil {
		eiu.SetDrivingLicenseRequired(*s)
	}
	return eiu
}

// ClearDrivingLicenseRequired clears the value of the "DrivingLicenseRequired" field.
func (eiu *ExamIPUpdate) ClearDrivingLicenseRequired() *ExamIPUpdate {
	eiu.mutation.ClearDrivingLicenseRequired()
	return eiu
}

// SetExamPaperCode sets the "ExamPaperCode" field.
func (eiu *ExamIPUpdate) SetExamPaperCode(s string) *ExamIPUpdate {
	eiu.mutation.SetExamPaperCode(s)
	return eiu
}

// SetNillableExamPaperCode sets the "ExamPaperCode" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableExamPaperCode(s *string) *ExamIPUpdate {
	if s != nil {
		eiu.SetExamPaperCode(*s)
	}
	return eiu
}

// ClearExamPaperCode clears the value of the "ExamPaperCode" field.
func (eiu *ExamIPUpdate) ClearExamPaperCode() *ExamIPUpdate {
	eiu.mutation.ClearExamPaperCode()
	return eiu
}

// SetExamPaper1 sets the "ExamPaper1" field.
func (eiu *ExamIPUpdate) SetExamPaper1(s string) *ExamIPUpdate {
	eiu.mutation.SetExamPaper1(s)
	return eiu
}

// SetNillableExamPaper1 sets the "ExamPaper1" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableExamPaper1(s *string) *ExamIPUpdate {
	if s != nil {
		eiu.SetExamPaper1(*s)
	}
	return eiu
}

// ClearExamPaper1 clears the value of the "ExamPaper1" field.
func (eiu *ExamIPUpdate) ClearExamPaper1() *ExamIPUpdate {
	eiu.mutation.ClearExamPaper1()
	return eiu
}

// SetExamPaper2 sets the "ExamPaper2" field.
func (eiu *ExamIPUpdate) SetExamPaper2(s string) *ExamIPUpdate {
	eiu.mutation.SetExamPaper2(s)
	return eiu
}

// SetNillableExamPaper2 sets the "ExamPaper2" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableExamPaper2(s *string) *ExamIPUpdate {
	if s != nil {
		eiu.SetExamPaper2(*s)
	}
	return eiu
}

// ClearExamPaper2 clears the value of the "ExamPaper2" field.
func (eiu *ExamIPUpdate) ClearExamPaper2() *ExamIPUpdate {
	eiu.mutation.ClearExamPaper2()
	return eiu
}

// SetExamPaper3 sets the "ExamPaper3" field.
func (eiu *ExamIPUpdate) SetExamPaper3(s string) *ExamIPUpdate {
	eiu.mutation.SetExamPaper3(s)
	return eiu
}

// SetNillableExamPaper3 sets the "ExamPaper3" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableExamPaper3(s *string) *ExamIPUpdate {
	if s != nil {
		eiu.SetExamPaper3(*s)
	}
	return eiu
}

// ClearExamPaper3 clears the value of the "ExamPaper3" field.
func (eiu *ExamIPUpdate) ClearExamPaper3() *ExamIPUpdate {
	eiu.mutation.ClearExamPaper3()
	return eiu
}

// SetExamPaper4 sets the "ExamPaper4" field.
func (eiu *ExamIPUpdate) SetExamPaper4(s string) *ExamIPUpdate {
	eiu.mutation.SetExamPaper4(s)
	return eiu
}

// SetNillableExamPaper4 sets the "ExamPaper4" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableExamPaper4(s *string) *ExamIPUpdate {
	if s != nil {
		eiu.SetExamPaper4(*s)
	}
	return eiu
}

// ClearExamPaper4 clears the value of the "ExamPaper4" field.
func (eiu *ExamIPUpdate) ClearExamPaper4() *ExamIPUpdate {
	eiu.mutation.ClearExamPaper4()
	return eiu
}

// SetExamPaper5 sets the "ExamPaper5" field.
func (eiu *ExamIPUpdate) SetExamPaper5(s string) *ExamIPUpdate {
	eiu.mutation.SetExamPaper5(s)
	return eiu
}

// SetNillableExamPaper5 sets the "ExamPaper5" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableExamPaper5(s *string) *ExamIPUpdate {
	if s != nil {
		eiu.SetExamPaper5(*s)
	}
	return eiu
}

// ClearExamPaper5 clears the value of the "ExamPaper5" field.
func (eiu *ExamIPUpdate) ClearExamPaper5() *ExamIPUpdate {
	eiu.mutation.ClearExamPaper5()
	return eiu
}

// SetExamPaper6 sets the "ExamPaper6" field.
func (eiu *ExamIPUpdate) SetExamPaper6(s string) *ExamIPUpdate {
	eiu.mutation.SetExamPaper6(s)
	return eiu
}

// SetNillableExamPaper6 sets the "ExamPaper6" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableExamPaper6(s *string) *ExamIPUpdate {
	if s != nil {
		eiu.SetExamPaper6(*s)
	}
	return eiu
}

// ClearExamPaper6 clears the value of the "ExamPaper6" field.
func (eiu *ExamIPUpdate) ClearExamPaper6() *ExamIPUpdate {
	eiu.mutation.ClearExamPaper6()
	return eiu
}

// SetPayLevelEligibilty sets the "PayLevelEligibilty" field.
func (eiu *ExamIPUpdate) SetPayLevelEligibilty(b bool) *ExamIPUpdate {
	eiu.mutation.SetPayLevelEligibilty(b)
	return eiu
}

// SetNillablePayLevelEligibilty sets the "PayLevelEligibilty" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillablePayLevelEligibilty(b *bool) *ExamIPUpdate {
	if b != nil {
		eiu.SetPayLevelEligibilty(*b)
	}
	return eiu
}

// ClearPayLevelEligibilty clears the value of the "PayLevelEligibilty" field.
func (eiu *ExamIPUpdate) ClearPayLevelEligibilty() *ExamIPUpdate {
	eiu.mutation.ClearPayLevelEligibilty()
	return eiu
}

// SetCategoryMinMarksSCSTPH sets the "CategoryMinMarksSCSTPH" field.
func (eiu *ExamIPUpdate) SetCategoryMinMarksSCSTPH(s string) *ExamIPUpdate {
	eiu.mutation.SetCategoryMinMarksSCSTPH(s)
	return eiu
}

// SetNillableCategoryMinMarksSCSTPH sets the "CategoryMinMarksSCSTPH" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableCategoryMinMarksSCSTPH(s *string) *ExamIPUpdate {
	if s != nil {
		eiu.SetCategoryMinMarksSCSTPH(*s)
	}
	return eiu
}

// ClearCategoryMinMarksSCSTPH clears the value of the "CategoryMinMarksSCSTPH" field.
func (eiu *ExamIPUpdate) ClearCategoryMinMarksSCSTPH() *ExamIPUpdate {
	eiu.mutation.ClearCategoryMinMarksSCSTPH()
	return eiu
}

// SetCategoryMinMarksGENOBC sets the "CategoryMinMarksGENOBC" field.
func (eiu *ExamIPUpdate) SetCategoryMinMarksGENOBC(s string) *ExamIPUpdate {
	eiu.mutation.SetCategoryMinMarksGENOBC(s)
	return eiu
}

// SetNillableCategoryMinMarksGENOBC sets the "CategoryMinMarksGENOBC" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableCategoryMinMarksGENOBC(s *string) *ExamIPUpdate {
	if s != nil {
		eiu.SetCategoryMinMarksGENOBC(*s)
	}
	return eiu
}

// ClearCategoryMinMarksGENOBC clears the value of the "CategoryMinMarksGENOBC" field.
func (eiu *ExamIPUpdate) ClearCategoryMinMarksGENOBC() *ExamIPUpdate {
	eiu.mutation.ClearCategoryMinMarksGENOBC()
	return eiu
}

// SetLocalLanguageAllowed sets the "LocalLanguageAllowed" field.
func (eiu *ExamIPUpdate) SetLocalLanguageAllowed(b bool) *ExamIPUpdate {
	eiu.mutation.SetLocalLanguageAllowed(b)
	return eiu
}

// SetNillableLocalLanguageAllowed sets the "LocalLanguageAllowed" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableLocalLanguageAllowed(b *bool) *ExamIPUpdate {
	if b != nil {
		eiu.SetLocalLanguageAllowed(*b)
	}
	return eiu
}

// ClearLocalLanguageAllowed clears the value of the "LocalLanguageAllowed" field.
func (eiu *ExamIPUpdate) ClearLocalLanguageAllowed() *ExamIPUpdate {
	eiu.mutation.ClearLocalLanguageAllowed()
	return eiu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (eiu *ExamIPUpdate) SetUpdatedAt(t time.Time) *ExamIPUpdate {
	eiu.mutation.SetUpdatedAt(t)
	return eiu
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableUpdatedAt(t *time.Time) *ExamIPUpdate {
	if t != nil {
		eiu.SetUpdatedAt(*t)
	}
	return eiu
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (eiu *ExamIPUpdate) ClearUpdatedAt() *ExamIPUpdate {
	eiu.mutation.ClearUpdatedAt()
	return eiu
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (eiu *ExamIPUpdate) SetUpdatedBy(s string) *ExamIPUpdate {
	eiu.mutation.SetUpdatedBy(s)
	return eiu
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (eiu *ExamIPUpdate) SetNillableUpdatedBy(s *string) *ExamIPUpdate {
	if s != nil {
		eiu.SetUpdatedBy(*s)
	}
	return eiu
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (eiu *ExamIPUpdate) ClearUpdatedBy() *ExamIPUpdate {
	eiu.mutation.ClearUpdatedBy()
	return eiu
}

// AddExamcalIPRefIDs adds the "examcal_ip_ref" edge to the ExamCalendar entity by IDs.
func (eiu *ExamIPUpdate) AddExamcalIPRefIDs(ids ...int32) *ExamIPUpdate {
	eiu.mutation.AddExamcalIPRefIDs(ids...)
	return eiu
}

// AddExamcalIPRef adds the "examcal_ip_ref" edges to the ExamCalendar entity.
func (eiu *ExamIPUpdate) AddExamcalIPRef(e ...*ExamCalendar) *ExamIPUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eiu.AddExamcalIPRefIDs(ids...)
}

// AddPapersIPRefIDs adds the "papers_ip_ref" edge to the ExamPapers entity by IDs.
func (eiu *ExamIPUpdate) AddPapersIPRefIDs(ids ...int32) *ExamIPUpdate {
	eiu.mutation.AddPapersIPRefIDs(ids...)
	return eiu
}

// AddPapersIPRef adds the "papers_ip_ref" edges to the ExamPapers entity.
func (eiu *ExamIPUpdate) AddPapersIPRef(e ...*ExamPapers) *ExamIPUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eiu.AddPapersIPRefIDs(ids...)
}

// AddUsersIPTypeIDs adds the "users_ip_type" edge to the UserMaster entity by IDs.
func (eiu *ExamIPUpdate) AddUsersIPTypeIDs(ids ...int64) *ExamIPUpdate {
	eiu.mutation.AddUsersIPTypeIDs(ids...)
	return eiu
}

// AddUsersIPType adds the "users_ip_type" edges to the UserMaster entity.
func (eiu *ExamIPUpdate) AddUsersIPType(u ...*UserMaster) *ExamIPUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eiu.AddUsersIPTypeIDs(ids...)
}

// AddExamApplnIPRefIDs adds the "ExamAppln_IP_Ref" edge to the Exam_Applications_IP entity by IDs.
func (eiu *ExamIPUpdate) AddExamApplnIPRefIDs(ids ...int64) *ExamIPUpdate {
	eiu.mutation.AddExamApplnIPRefIDs(ids...)
	return eiu
}

// AddExamApplnIPRef adds the "ExamAppln_IP_Ref" edges to the Exam_Applications_IP entity.
func (eiu *ExamIPUpdate) AddExamApplnIPRef(e ...*Exam_Applications_IP) *ExamIPUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eiu.AddExamApplnIPRefIDs(ids...)
}

// AddNotificationsIPIDs adds the "notifications_ip" edge to the Notification entity by IDs.
func (eiu *ExamIPUpdate) AddNotificationsIPIDs(ids ...int32) *ExamIPUpdate {
	eiu.mutation.AddNotificationsIPIDs(ids...)
	return eiu
}

// AddNotificationsIP adds the "notifications_ip" edges to the Notification entity.
func (eiu *ExamIPUpdate) AddNotificationsIP(n ...*Notification) *ExamIPUpdate {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return eiu.AddNotificationsIPIDs(ids...)
}

// Mutation returns the ExamIPMutation object of the builder.
func (eiu *ExamIPUpdate) Mutation() *ExamIPMutation {
	return eiu.mutation
}

// ClearExamcalIPRef clears all "examcal_ip_ref" edges to the ExamCalendar entity.
func (eiu *ExamIPUpdate) ClearExamcalIPRef() *ExamIPUpdate {
	eiu.mutation.ClearExamcalIPRef()
	return eiu
}

// RemoveExamcalIPRefIDs removes the "examcal_ip_ref" edge to ExamCalendar entities by IDs.
func (eiu *ExamIPUpdate) RemoveExamcalIPRefIDs(ids ...int32) *ExamIPUpdate {
	eiu.mutation.RemoveExamcalIPRefIDs(ids...)
	return eiu
}

// RemoveExamcalIPRef removes "examcal_ip_ref" edges to ExamCalendar entities.
func (eiu *ExamIPUpdate) RemoveExamcalIPRef(e ...*ExamCalendar) *ExamIPUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eiu.RemoveExamcalIPRefIDs(ids...)
}

// ClearPapersIPRef clears all "papers_ip_ref" edges to the ExamPapers entity.
func (eiu *ExamIPUpdate) ClearPapersIPRef() *ExamIPUpdate {
	eiu.mutation.ClearPapersIPRef()
	return eiu
}

// RemovePapersIPRefIDs removes the "papers_ip_ref" edge to ExamPapers entities by IDs.
func (eiu *ExamIPUpdate) RemovePapersIPRefIDs(ids ...int32) *ExamIPUpdate {
	eiu.mutation.RemovePapersIPRefIDs(ids...)
	return eiu
}

// RemovePapersIPRef removes "papers_ip_ref" edges to ExamPapers entities.
func (eiu *ExamIPUpdate) RemovePapersIPRef(e ...*ExamPapers) *ExamIPUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eiu.RemovePapersIPRefIDs(ids...)
}

// ClearUsersIPType clears all "users_ip_type" edges to the UserMaster entity.
func (eiu *ExamIPUpdate) ClearUsersIPType() *ExamIPUpdate {
	eiu.mutation.ClearUsersIPType()
	return eiu
}

// RemoveUsersIPTypeIDs removes the "users_ip_type" edge to UserMaster entities by IDs.
func (eiu *ExamIPUpdate) RemoveUsersIPTypeIDs(ids ...int64) *ExamIPUpdate {
	eiu.mutation.RemoveUsersIPTypeIDs(ids...)
	return eiu
}

// RemoveUsersIPType removes "users_ip_type" edges to UserMaster entities.
func (eiu *ExamIPUpdate) RemoveUsersIPType(u ...*UserMaster) *ExamIPUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eiu.RemoveUsersIPTypeIDs(ids...)
}

// ClearExamApplnIPRef clears all "ExamAppln_IP_Ref" edges to the Exam_Applications_IP entity.
func (eiu *ExamIPUpdate) ClearExamApplnIPRef() *ExamIPUpdate {
	eiu.mutation.ClearExamApplnIPRef()
	return eiu
}

// RemoveExamApplnIPRefIDs removes the "ExamAppln_IP_Ref" edge to Exam_Applications_IP entities by IDs.
func (eiu *ExamIPUpdate) RemoveExamApplnIPRefIDs(ids ...int64) *ExamIPUpdate {
	eiu.mutation.RemoveExamApplnIPRefIDs(ids...)
	return eiu
}

// RemoveExamApplnIPRef removes "ExamAppln_IP_Ref" edges to Exam_Applications_IP entities.
func (eiu *ExamIPUpdate) RemoveExamApplnIPRef(e ...*Exam_Applications_IP) *ExamIPUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eiu.RemoveExamApplnIPRefIDs(ids...)
}

// ClearNotificationsIP clears all "notifications_ip" edges to the Notification entity.
func (eiu *ExamIPUpdate) ClearNotificationsIP() *ExamIPUpdate {
	eiu.mutation.ClearNotificationsIP()
	return eiu
}

// RemoveNotificationsIPIDs removes the "notifications_ip" edge to Notification entities by IDs.
func (eiu *ExamIPUpdate) RemoveNotificationsIPIDs(ids ...int32) *ExamIPUpdate {
	eiu.mutation.RemoveNotificationsIPIDs(ids...)
	return eiu
}

// RemoveNotificationsIP removes "notifications_ip" edges to Notification entities.
func (eiu *ExamIPUpdate) RemoveNotificationsIP(n ...*Notification) *ExamIPUpdate {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return eiu.RemoveNotificationsIPIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eiu *ExamIPUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eiu.sqlSave, eiu.mutation, eiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eiu *ExamIPUpdate) SaveX(ctx context.Context) int {
	affected, err := eiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eiu *ExamIPUpdate) Exec(ctx context.Context) error {
	_, err := eiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eiu *ExamIPUpdate) ExecX(ctx context.Context) {
	if err := eiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eiu *ExamIPUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(exam_ip.Table, exam_ip.Columns, sqlgraph.NewFieldSpec(exam_ip.FieldID, field.TypeInt32))
	if ps := eiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eiu.mutation.ExamNameCode(); ok {
		_spec.SetField(exam_ip.FieldExamNameCode, field.TypeString, value)
	}
	if eiu.mutation.ExamNameCodeCleared() {
		_spec.ClearField(exam_ip.FieldExamNameCode, field.TypeString)
	}
	if value, ok := eiu.mutation.ExamName(); ok {
		_spec.SetField(exam_ip.FieldExamName, field.TypeString, value)
	}
	if value, ok := eiu.mutation.ExamType(); ok {
		_spec.SetField(exam_ip.FieldExamType, field.TypeString, value)
	}
	if value, ok := eiu.mutation.NotificationCode(); ok {
		_spec.SetField(exam_ip.FieldNotificationCode, field.TypeInt32, value)
	}
	if value, ok := eiu.mutation.AddedNotificationCode(); ok {
		_spec.AddField(exam_ip.FieldNotificationCode, field.TypeInt32, value)
	}
	if eiu.mutation.NotificationCodeCleared() {
		_spec.ClearField(exam_ip.FieldNotificationCode, field.TypeInt32)
	}
	if value, ok := eiu.mutation.ConductedBy(); ok {
		_spec.SetField(exam_ip.FieldConductedBy, field.TypeString, value)
	}
	if value, ok := eiu.mutation.NodalOffice(); ok {
		_spec.SetField(exam_ip.FieldNodalOffice, field.TypeString, value)
	}
	if eiu.mutation.NodalOfficeCleared() {
		_spec.ClearField(exam_ip.FieldNodalOffice, field.TypeString)
	}
	if value, ok := eiu.mutation.CalendarCode(); ok {
		_spec.SetField(exam_ip.FieldCalendarCode, field.TypeInt32, value)
	}
	if value, ok := eiu.mutation.AddedCalendarCode(); ok {
		_spec.AddField(exam_ip.FieldCalendarCode, field.TypeInt32, value)
	}
	if eiu.mutation.CalendarCodeCleared() {
		_spec.ClearField(exam_ip.FieldCalendarCode, field.TypeInt32)
	}
	if value, ok := eiu.mutation.PaperCode(); ok {
		_spec.SetField(exam_ip.FieldPaperCode, field.TypeInt32, value)
	}
	if value, ok := eiu.mutation.AddedPaperCode(); ok {
		_spec.AddField(exam_ip.FieldPaperCode, field.TypeInt32, value)
	}
	if eiu.mutation.PaperCodeCleared() {
		_spec.ClearField(exam_ip.FieldPaperCode, field.TypeInt32)
	}
	if value, ok := eiu.mutation.EligibleCadre(); ok {
		_spec.SetField(exam_ip.FieldEligibleCadre, field.TypeString, value)
	}
	if eiu.mutation.EligibleCadreCleared() {
		_spec.ClearField(exam_ip.FieldEligibleCadre, field.TypeString)
	}
	if value, ok := eiu.mutation.EligiblePost1(); ok {
		_spec.SetField(exam_ip.FieldEligiblePost1, field.TypeString, value)
	}
	if eiu.mutation.EligiblePost1Cleared() {
		_spec.ClearField(exam_ip.FieldEligiblePost1, field.TypeString)
	}
	if value, ok := eiu.mutation.EligiblePost2(); ok {
		_spec.SetField(exam_ip.FieldEligiblePost2, field.TypeString, value)
	}
	if eiu.mutation.EligiblePost2Cleared() {
		_spec.ClearField(exam_ip.FieldEligiblePost2, field.TypeString)
	}
	if value, ok := eiu.mutation.EligiblePost3(); ok {
		_spec.SetField(exam_ip.FieldEligiblePost3, field.TypeString, value)
	}
	if eiu.mutation.EligiblePost3Cleared() {
		_spec.ClearField(exam_ip.FieldEligiblePost3, field.TypeString)
	}
	if value, ok := eiu.mutation.EligiblePost4(); ok {
		_spec.SetField(exam_ip.FieldEligiblePost4, field.TypeString, value)
	}
	if eiu.mutation.EligiblePost4Cleared() {
		_spec.ClearField(exam_ip.FieldEligiblePost4, field.TypeString)
	}
	if value, ok := eiu.mutation.EligiblePost5(); ok {
		_spec.SetField(exam_ip.FieldEligiblePost5, field.TypeString, value)
	}
	if eiu.mutation.EligiblePost5Cleared() {
		_spec.ClearField(exam_ip.FieldEligiblePost5, field.TypeString)
	}
	if value, ok := eiu.mutation.ExamPost1(); ok {
		_spec.SetField(exam_ip.FieldExamPost1, field.TypeString, value)
	}
	if eiu.mutation.ExamPost1Cleared() {
		_spec.ClearField(exam_ip.FieldExamPost1, field.TypeString)
	}
	if value, ok := eiu.mutation.ExamPost2(); ok {
		_spec.SetField(exam_ip.FieldExamPost2, field.TypeString, value)
	}
	if eiu.mutation.ExamPost2Cleared() {
		_spec.ClearField(exam_ip.FieldExamPost2, field.TypeString)
	}
	if value, ok := eiu.mutation.ExamPost3(); ok {
		_spec.SetField(exam_ip.FieldExamPost3, field.TypeString, value)
	}
	if eiu.mutation.ExamPost3Cleared() {
		_spec.ClearField(exam_ip.FieldExamPost3, field.TypeString)
	}
	if value, ok := eiu.mutation.ExamPost4(); ok {
		_spec.SetField(exam_ip.FieldExamPost4, field.TypeString, value)
	}
	if eiu.mutation.ExamPost4Cleared() {
		_spec.ClearField(exam_ip.FieldExamPost4, field.TypeString)
	}
	if value, ok := eiu.mutation.ExamPost5(); ok {
		_spec.SetField(exam_ip.FieldExamPost5, field.TypeString, value)
	}
	if eiu.mutation.ExamPost5Cleared() {
		_spec.ClearField(exam_ip.FieldExamPost5, field.TypeString)
	}
	if value, ok := eiu.mutation.EducationCriteria(); ok {
		_spec.SetField(exam_ip.FieldEducationCriteria, field.TypeString, value)
	}
	if eiu.mutation.EducationCriteriaCleared() {
		_spec.ClearField(exam_ip.FieldEducationCriteria, field.TypeString)
	}
	if value, ok := eiu.mutation.CategoryAgeLimitGEN(); ok {
		_spec.SetField(exam_ip.FieldCategoryAgeLimitGEN, field.TypeString, value)
	}
	if eiu.mutation.CategoryAgeLimitGENCleared() {
		_spec.ClearField(exam_ip.FieldCategoryAgeLimitGEN, field.TypeString)
	}
	if value, ok := eiu.mutation.CategoryAgeLimitSC(); ok {
		_spec.SetField(exam_ip.FieldCategoryAgeLimitSC, field.TypeString, value)
	}
	if eiu.mutation.CategoryAgeLimitSCCleared() {
		_spec.ClearField(exam_ip.FieldCategoryAgeLimitSC, field.TypeString)
	}
	if value, ok := eiu.mutation.CategoryAgeLimitST(); ok {
		_spec.SetField(exam_ip.FieldCategoryAgeLimitST, field.TypeString, value)
	}
	if eiu.mutation.CategoryAgeLimitSTCleared() {
		_spec.ClearField(exam_ip.FieldCategoryAgeLimitST, field.TypeString)
	}
	if value, ok := eiu.mutation.ServiceYears(); ok {
		_spec.SetField(exam_ip.FieldServiceYears, field.TypeString, value)
	}
	if eiu.mutation.ServiceYearsCleared() {
		_spec.ClearField(exam_ip.FieldServiceYears, field.TypeString)
	}
	if value, ok := eiu.mutation.DrivingLicenseRequired(); ok {
		_spec.SetField(exam_ip.FieldDrivingLicenseRequired, field.TypeString, value)
	}
	if eiu.mutation.DrivingLicenseRequiredCleared() {
		_spec.ClearField(exam_ip.FieldDrivingLicenseRequired, field.TypeString)
	}
	if value, ok := eiu.mutation.ExamPaperCode(); ok {
		_spec.SetField(exam_ip.FieldExamPaperCode, field.TypeString, value)
	}
	if eiu.mutation.ExamPaperCodeCleared() {
		_spec.ClearField(exam_ip.FieldExamPaperCode, field.TypeString)
	}
	if value, ok := eiu.mutation.ExamPaper1(); ok {
		_spec.SetField(exam_ip.FieldExamPaper1, field.TypeString, value)
	}
	if eiu.mutation.ExamPaper1Cleared() {
		_spec.ClearField(exam_ip.FieldExamPaper1, field.TypeString)
	}
	if value, ok := eiu.mutation.ExamPaper2(); ok {
		_spec.SetField(exam_ip.FieldExamPaper2, field.TypeString, value)
	}
	if eiu.mutation.ExamPaper2Cleared() {
		_spec.ClearField(exam_ip.FieldExamPaper2, field.TypeString)
	}
	if value, ok := eiu.mutation.ExamPaper3(); ok {
		_spec.SetField(exam_ip.FieldExamPaper3, field.TypeString, value)
	}
	if eiu.mutation.ExamPaper3Cleared() {
		_spec.ClearField(exam_ip.FieldExamPaper3, field.TypeString)
	}
	if value, ok := eiu.mutation.ExamPaper4(); ok {
		_spec.SetField(exam_ip.FieldExamPaper4, field.TypeString, value)
	}
	if eiu.mutation.ExamPaper4Cleared() {
		_spec.ClearField(exam_ip.FieldExamPaper4, field.TypeString)
	}
	if value, ok := eiu.mutation.ExamPaper5(); ok {
		_spec.SetField(exam_ip.FieldExamPaper5, field.TypeString, value)
	}
	if eiu.mutation.ExamPaper5Cleared() {
		_spec.ClearField(exam_ip.FieldExamPaper5, field.TypeString)
	}
	if value, ok := eiu.mutation.ExamPaper6(); ok {
		_spec.SetField(exam_ip.FieldExamPaper6, field.TypeString, value)
	}
	if eiu.mutation.ExamPaper6Cleared() {
		_spec.ClearField(exam_ip.FieldExamPaper6, field.TypeString)
	}
	if value, ok := eiu.mutation.PayLevelEligibilty(); ok {
		_spec.SetField(exam_ip.FieldPayLevelEligibilty, field.TypeBool, value)
	}
	if eiu.mutation.PayLevelEligibiltyCleared() {
		_spec.ClearField(exam_ip.FieldPayLevelEligibilty, field.TypeBool)
	}
	if value, ok := eiu.mutation.CategoryMinMarksSCSTPH(); ok {
		_spec.SetField(exam_ip.FieldCategoryMinMarksSCSTPH, field.TypeString, value)
	}
	if eiu.mutation.CategoryMinMarksSCSTPHCleared() {
		_spec.ClearField(exam_ip.FieldCategoryMinMarksSCSTPH, field.TypeString)
	}
	if value, ok := eiu.mutation.CategoryMinMarksGENOBC(); ok {
		_spec.SetField(exam_ip.FieldCategoryMinMarksGENOBC, field.TypeString, value)
	}
	if eiu.mutation.CategoryMinMarksGENOBCCleared() {
		_spec.ClearField(exam_ip.FieldCategoryMinMarksGENOBC, field.TypeString)
	}
	if value, ok := eiu.mutation.LocalLanguageAllowed(); ok {
		_spec.SetField(exam_ip.FieldLocalLanguageAllowed, field.TypeBool, value)
	}
	if eiu.mutation.LocalLanguageAllowedCleared() {
		_spec.ClearField(exam_ip.FieldLocalLanguageAllowed, field.TypeBool)
	}
	if value, ok := eiu.mutation.UpdatedAt(); ok {
		_spec.SetField(exam_ip.FieldUpdatedAt, field.TypeTime, value)
	}
	if eiu.mutation.UpdatedAtCleared() {
		_spec.ClearField(exam_ip.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := eiu.mutation.UpdatedBy(); ok {
		_spec.SetField(exam_ip.FieldUpdatedBy, field.TypeString, value)
	}
	if eiu.mutation.UpdatedByCleared() {
		_spec.ClearField(exam_ip.FieldUpdatedBy, field.TypeString)
	}
	if eiu.mutation.ExamcalIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.ExamcalIPRefTable,
			Columns: []string{exam_ip.ExamcalIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiu.mutation.RemovedExamcalIPRefIDs(); len(nodes) > 0 && !eiu.mutation.ExamcalIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.ExamcalIPRefTable,
			Columns: []string{exam_ip.ExamcalIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiu.mutation.ExamcalIPRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.ExamcalIPRefTable,
			Columns: []string{exam_ip.ExamcalIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eiu.mutation.PapersIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.PapersIPRefTable,
			Columns: []string{exam_ip.PapersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiu.mutation.RemovedPapersIPRefIDs(); len(nodes) > 0 && !eiu.mutation.PapersIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.PapersIPRefTable,
			Columns: []string{exam_ip.PapersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiu.mutation.PapersIPRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.PapersIPRefTable,
			Columns: []string{exam_ip.PapersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eiu.mutation.UsersIPTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.UsersIPTypeTable,
			Columns: []string{exam_ip.UsersIPTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiu.mutation.RemovedUsersIPTypeIDs(); len(nodes) > 0 && !eiu.mutation.UsersIPTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.UsersIPTypeTable,
			Columns: []string{exam_ip.UsersIPTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiu.mutation.UsersIPTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.UsersIPTypeTable,
			Columns: []string{exam_ip.UsersIPTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eiu.mutation.ExamApplnIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.ExamApplnIPRefTable,
			Columns: []string{exam_ip.ExamApplnIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiu.mutation.RemovedExamApplnIPRefIDs(); len(nodes) > 0 && !eiu.mutation.ExamApplnIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.ExamApplnIPRefTable,
			Columns: []string{exam_ip.ExamApplnIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiu.mutation.ExamApplnIPRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.ExamApplnIPRefTable,
			Columns: []string{exam_ip.ExamApplnIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eiu.mutation.NotificationsIPCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.NotificationsIPTable,
			Columns: []string{exam_ip.NotificationsIPColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiu.mutation.RemovedNotificationsIPIDs(); len(nodes) > 0 && !eiu.mutation.NotificationsIPCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.NotificationsIPTable,
			Columns: []string{exam_ip.NotificationsIPColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiu.mutation.NotificationsIPIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.NotificationsIPTable,
			Columns: []string{exam_ip.NotificationsIPColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exam_ip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eiu.mutation.done = true
	return n, nil
}

// ExamIPUpdateOne is the builder for updating a single Exam_IP entity.
type ExamIPUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExamIPMutation
}

// SetExamNameCode sets the "ExamNameCode" field.
func (eiuo *ExamIPUpdateOne) SetExamNameCode(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetExamNameCode(s)
	return eiuo
}

// SetNillableExamNameCode sets the "ExamNameCode" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableExamNameCode(s *string) *ExamIPUpdateOne {
	if s != nil {
		eiuo.SetExamNameCode(*s)
	}
	return eiuo
}

// ClearExamNameCode clears the value of the "ExamNameCode" field.
func (eiuo *ExamIPUpdateOne) ClearExamNameCode() *ExamIPUpdateOne {
	eiuo.mutation.ClearExamNameCode()
	return eiuo
}

// SetExamName sets the "ExamName" field.
func (eiuo *ExamIPUpdateOne) SetExamName(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetExamName(s)
	return eiuo
}

// SetExamType sets the "ExamType" field.
func (eiuo *ExamIPUpdateOne) SetExamType(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetExamType(s)
	return eiuo
}

// SetNotificationCode sets the "NotificationCode" field.
func (eiuo *ExamIPUpdateOne) SetNotificationCode(i int32) *ExamIPUpdateOne {
	eiuo.mutation.ResetNotificationCode()
	eiuo.mutation.SetNotificationCode(i)
	return eiuo
}

// SetNillableNotificationCode sets the "NotificationCode" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableNotificationCode(i *int32) *ExamIPUpdateOne {
	if i != nil {
		eiuo.SetNotificationCode(*i)
	}
	return eiuo
}

// AddNotificationCode adds i to the "NotificationCode" field.
func (eiuo *ExamIPUpdateOne) AddNotificationCode(i int32) *ExamIPUpdateOne {
	eiuo.mutation.AddNotificationCode(i)
	return eiuo
}

// ClearNotificationCode clears the value of the "NotificationCode" field.
func (eiuo *ExamIPUpdateOne) ClearNotificationCode() *ExamIPUpdateOne {
	eiuo.mutation.ClearNotificationCode()
	return eiuo
}

// SetConductedBy sets the "ConductedBy" field.
func (eiuo *ExamIPUpdateOne) SetConductedBy(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetConductedBy(s)
	return eiuo
}

// SetNodalOffice sets the "NodalOffice" field.
func (eiuo *ExamIPUpdateOne) SetNodalOffice(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetNodalOffice(s)
	return eiuo
}

// SetNillableNodalOffice sets the "NodalOffice" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableNodalOffice(s *string) *ExamIPUpdateOne {
	if s != nil {
		eiuo.SetNodalOffice(*s)
	}
	return eiuo
}

// ClearNodalOffice clears the value of the "NodalOffice" field.
func (eiuo *ExamIPUpdateOne) ClearNodalOffice() *ExamIPUpdateOne {
	eiuo.mutation.ClearNodalOffice()
	return eiuo
}

// SetCalendarCode sets the "CalendarCode" field.
func (eiuo *ExamIPUpdateOne) SetCalendarCode(i int32) *ExamIPUpdateOne {
	eiuo.mutation.ResetCalendarCode()
	eiuo.mutation.SetCalendarCode(i)
	return eiuo
}

// SetNillableCalendarCode sets the "CalendarCode" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableCalendarCode(i *int32) *ExamIPUpdateOne {
	if i != nil {
		eiuo.SetCalendarCode(*i)
	}
	return eiuo
}

// AddCalendarCode adds i to the "CalendarCode" field.
func (eiuo *ExamIPUpdateOne) AddCalendarCode(i int32) *ExamIPUpdateOne {
	eiuo.mutation.AddCalendarCode(i)
	return eiuo
}

// ClearCalendarCode clears the value of the "CalendarCode" field.
func (eiuo *ExamIPUpdateOne) ClearCalendarCode() *ExamIPUpdateOne {
	eiuo.mutation.ClearCalendarCode()
	return eiuo
}

// SetPaperCode sets the "PaperCode" field.
func (eiuo *ExamIPUpdateOne) SetPaperCode(i int32) *ExamIPUpdateOne {
	eiuo.mutation.ResetPaperCode()
	eiuo.mutation.SetPaperCode(i)
	return eiuo
}

// SetNillablePaperCode sets the "PaperCode" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillablePaperCode(i *int32) *ExamIPUpdateOne {
	if i != nil {
		eiuo.SetPaperCode(*i)
	}
	return eiuo
}

// AddPaperCode adds i to the "PaperCode" field.
func (eiuo *ExamIPUpdateOne) AddPaperCode(i int32) *ExamIPUpdateOne {
	eiuo.mutation.AddPaperCode(i)
	return eiuo
}

// ClearPaperCode clears the value of the "PaperCode" field.
func (eiuo *ExamIPUpdateOne) ClearPaperCode() *ExamIPUpdateOne {
	eiuo.mutation.ClearPaperCode()
	return eiuo
}

// SetEligibleCadre sets the "EligibleCadre" field.
func (eiuo *ExamIPUpdateOne) SetEligibleCadre(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetEligibleCadre(s)
	return eiuo
}

// SetNillableEligibleCadre sets the "EligibleCadre" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableEligibleCadre(s *string) *ExamIPUpdateOne {
	if s != nil {
		eiuo.SetEligibleCadre(*s)
	}
	return eiuo
}

// ClearEligibleCadre clears the value of the "EligibleCadre" field.
func (eiuo *ExamIPUpdateOne) ClearEligibleCadre() *ExamIPUpdateOne {
	eiuo.mutation.ClearEligibleCadre()
	return eiuo
}

// SetEligiblePost1 sets the "EligiblePost1" field.
func (eiuo *ExamIPUpdateOne) SetEligiblePost1(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetEligiblePost1(s)
	return eiuo
}

// SetNillableEligiblePost1 sets the "EligiblePost1" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableEligiblePost1(s *string) *ExamIPUpdateOne {
	if s != nil {
		eiuo.SetEligiblePost1(*s)
	}
	return eiuo
}

// ClearEligiblePost1 clears the value of the "EligiblePost1" field.
func (eiuo *ExamIPUpdateOne) ClearEligiblePost1() *ExamIPUpdateOne {
	eiuo.mutation.ClearEligiblePost1()
	return eiuo
}

// SetEligiblePost2 sets the "EligiblePost2" field.
func (eiuo *ExamIPUpdateOne) SetEligiblePost2(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetEligiblePost2(s)
	return eiuo
}

// SetNillableEligiblePost2 sets the "EligiblePost2" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableEligiblePost2(s *string) *ExamIPUpdateOne {
	if s != nil {
		eiuo.SetEligiblePost2(*s)
	}
	return eiuo
}

// ClearEligiblePost2 clears the value of the "EligiblePost2" field.
func (eiuo *ExamIPUpdateOne) ClearEligiblePost2() *ExamIPUpdateOne {
	eiuo.mutation.ClearEligiblePost2()
	return eiuo
}

// SetEligiblePost3 sets the "EligiblePost3" field.
func (eiuo *ExamIPUpdateOne) SetEligiblePost3(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetEligiblePost3(s)
	return eiuo
}

// SetNillableEligiblePost3 sets the "EligiblePost3" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableEligiblePost3(s *string) *ExamIPUpdateOne {
	if s != nil {
		eiuo.SetEligiblePost3(*s)
	}
	return eiuo
}

// ClearEligiblePost3 clears the value of the "EligiblePost3" field.
func (eiuo *ExamIPUpdateOne) ClearEligiblePost3() *ExamIPUpdateOne {
	eiuo.mutation.ClearEligiblePost3()
	return eiuo
}

// SetEligiblePost4 sets the "EligiblePost4" field.
func (eiuo *ExamIPUpdateOne) SetEligiblePost4(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetEligiblePost4(s)
	return eiuo
}

// SetNillableEligiblePost4 sets the "EligiblePost4" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableEligiblePost4(s *string) *ExamIPUpdateOne {
	if s != nil {
		eiuo.SetEligiblePost4(*s)
	}
	return eiuo
}

// ClearEligiblePost4 clears the value of the "EligiblePost4" field.
func (eiuo *ExamIPUpdateOne) ClearEligiblePost4() *ExamIPUpdateOne {
	eiuo.mutation.ClearEligiblePost4()
	return eiuo
}

// SetEligiblePost5 sets the "EligiblePost5" field.
func (eiuo *ExamIPUpdateOne) SetEligiblePost5(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetEligiblePost5(s)
	return eiuo
}

// SetNillableEligiblePost5 sets the "EligiblePost5" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableEligiblePost5(s *string) *ExamIPUpdateOne {
	if s != nil {
		eiuo.SetEligiblePost5(*s)
	}
	return eiuo
}

// ClearEligiblePost5 clears the value of the "EligiblePost5" field.
func (eiuo *ExamIPUpdateOne) ClearEligiblePost5() *ExamIPUpdateOne {
	eiuo.mutation.ClearEligiblePost5()
	return eiuo
}

// SetExamPost1 sets the "ExamPost1" field.
func (eiuo *ExamIPUpdateOne) SetExamPost1(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetExamPost1(s)
	return eiuo
}

// SetNillableExamPost1 sets the "ExamPost1" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableExamPost1(s *string) *ExamIPUpdateOne {
	if s != nil {
		eiuo.SetExamPost1(*s)
	}
	return eiuo
}

// ClearExamPost1 clears the value of the "ExamPost1" field.
func (eiuo *ExamIPUpdateOne) ClearExamPost1() *ExamIPUpdateOne {
	eiuo.mutation.ClearExamPost1()
	return eiuo
}

// SetExamPost2 sets the "ExamPost2" field.
func (eiuo *ExamIPUpdateOne) SetExamPost2(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetExamPost2(s)
	return eiuo
}

// SetNillableExamPost2 sets the "ExamPost2" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableExamPost2(s *string) *ExamIPUpdateOne {
	if s != nil {
		eiuo.SetExamPost2(*s)
	}
	return eiuo
}

// ClearExamPost2 clears the value of the "ExamPost2" field.
func (eiuo *ExamIPUpdateOne) ClearExamPost2() *ExamIPUpdateOne {
	eiuo.mutation.ClearExamPost2()
	return eiuo
}

// SetExamPost3 sets the "ExamPost3" field.
func (eiuo *ExamIPUpdateOne) SetExamPost3(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetExamPost3(s)
	return eiuo
}

// SetNillableExamPost3 sets the "ExamPost3" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableExamPost3(s *string) *ExamIPUpdateOne {
	if s != nil {
		eiuo.SetExamPost3(*s)
	}
	return eiuo
}

// ClearExamPost3 clears the value of the "ExamPost3" field.
func (eiuo *ExamIPUpdateOne) ClearExamPost3() *ExamIPUpdateOne {
	eiuo.mutation.ClearExamPost3()
	return eiuo
}

// SetExamPost4 sets the "ExamPost4" field.
func (eiuo *ExamIPUpdateOne) SetExamPost4(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetExamPost4(s)
	return eiuo
}

// SetNillableExamPost4 sets the "ExamPost4" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableExamPost4(s *string) *ExamIPUpdateOne {
	if s != nil {
		eiuo.SetExamPost4(*s)
	}
	return eiuo
}

// ClearExamPost4 clears the value of the "ExamPost4" field.
func (eiuo *ExamIPUpdateOne) ClearExamPost4() *ExamIPUpdateOne {
	eiuo.mutation.ClearExamPost4()
	return eiuo
}

// SetExamPost5 sets the "ExamPost5" field.
func (eiuo *ExamIPUpdateOne) SetExamPost5(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetExamPost5(s)
	return eiuo
}

// SetNillableExamPost5 sets the "ExamPost5" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableExamPost5(s *string) *ExamIPUpdateOne {
	if s != nil {
		eiuo.SetExamPost5(*s)
	}
	return eiuo
}

// ClearExamPost5 clears the value of the "ExamPost5" field.
func (eiuo *ExamIPUpdateOne) ClearExamPost5() *ExamIPUpdateOne {
	eiuo.mutation.ClearExamPost5()
	return eiuo
}

// SetEducationCriteria sets the "EducationCriteria" field.
func (eiuo *ExamIPUpdateOne) SetEducationCriteria(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetEducationCriteria(s)
	return eiuo
}

// SetNillableEducationCriteria sets the "EducationCriteria" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableEducationCriteria(s *string) *ExamIPUpdateOne {
	if s != nil {
		eiuo.SetEducationCriteria(*s)
	}
	return eiuo
}

// ClearEducationCriteria clears the value of the "EducationCriteria" field.
func (eiuo *ExamIPUpdateOne) ClearEducationCriteria() *ExamIPUpdateOne {
	eiuo.mutation.ClearEducationCriteria()
	return eiuo
}

// SetCategoryAgeLimitGEN sets the "CategoryAgeLimitGEN" field.
func (eiuo *ExamIPUpdateOne) SetCategoryAgeLimitGEN(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetCategoryAgeLimitGEN(s)
	return eiuo
}

// SetNillableCategoryAgeLimitGEN sets the "CategoryAgeLimitGEN" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableCategoryAgeLimitGEN(s *string) *ExamIPUpdateOne {
	if s != nil {
		eiuo.SetCategoryAgeLimitGEN(*s)
	}
	return eiuo
}

// ClearCategoryAgeLimitGEN clears the value of the "CategoryAgeLimitGEN" field.
func (eiuo *ExamIPUpdateOne) ClearCategoryAgeLimitGEN() *ExamIPUpdateOne {
	eiuo.mutation.ClearCategoryAgeLimitGEN()
	return eiuo
}

// SetCategoryAgeLimitSC sets the "CategoryAgeLimitSC" field.
func (eiuo *ExamIPUpdateOne) SetCategoryAgeLimitSC(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetCategoryAgeLimitSC(s)
	return eiuo
}

// SetNillableCategoryAgeLimitSC sets the "CategoryAgeLimitSC" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableCategoryAgeLimitSC(s *string) *ExamIPUpdateOne {
	if s != nil {
		eiuo.SetCategoryAgeLimitSC(*s)
	}
	return eiuo
}

// ClearCategoryAgeLimitSC clears the value of the "CategoryAgeLimitSC" field.
func (eiuo *ExamIPUpdateOne) ClearCategoryAgeLimitSC() *ExamIPUpdateOne {
	eiuo.mutation.ClearCategoryAgeLimitSC()
	return eiuo
}

// SetCategoryAgeLimitST sets the "CategoryAgeLimitST" field.
func (eiuo *ExamIPUpdateOne) SetCategoryAgeLimitST(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetCategoryAgeLimitST(s)
	return eiuo
}

// SetNillableCategoryAgeLimitST sets the "CategoryAgeLimitST" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableCategoryAgeLimitST(s *string) *ExamIPUpdateOne {
	if s != nil {
		eiuo.SetCategoryAgeLimitST(*s)
	}
	return eiuo
}

// ClearCategoryAgeLimitST clears the value of the "CategoryAgeLimitST" field.
func (eiuo *ExamIPUpdateOne) ClearCategoryAgeLimitST() *ExamIPUpdateOne {
	eiuo.mutation.ClearCategoryAgeLimitST()
	return eiuo
}

// SetServiceYears sets the "ServiceYears" field.
func (eiuo *ExamIPUpdateOne) SetServiceYears(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetServiceYears(s)
	return eiuo
}

// SetNillableServiceYears sets the "ServiceYears" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableServiceYears(s *string) *ExamIPUpdateOne {
	if s != nil {
		eiuo.SetServiceYears(*s)
	}
	return eiuo
}

// ClearServiceYears clears the value of the "ServiceYears" field.
func (eiuo *ExamIPUpdateOne) ClearServiceYears() *ExamIPUpdateOne {
	eiuo.mutation.ClearServiceYears()
	return eiuo
}

// SetDrivingLicenseRequired sets the "DrivingLicenseRequired" field.
func (eiuo *ExamIPUpdateOne) SetDrivingLicenseRequired(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetDrivingLicenseRequired(s)
	return eiuo
}

// SetNillableDrivingLicenseRequired sets the "DrivingLicenseRequired" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableDrivingLicenseRequired(s *string) *ExamIPUpdateOne {
	if s != nil {
		eiuo.SetDrivingLicenseRequired(*s)
	}
	return eiuo
}

// ClearDrivingLicenseRequired clears the value of the "DrivingLicenseRequired" field.
func (eiuo *ExamIPUpdateOne) ClearDrivingLicenseRequired() *ExamIPUpdateOne {
	eiuo.mutation.ClearDrivingLicenseRequired()
	return eiuo
}

// SetExamPaperCode sets the "ExamPaperCode" field.
func (eiuo *ExamIPUpdateOne) SetExamPaperCode(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetExamPaperCode(s)
	return eiuo
}

// SetNillableExamPaperCode sets the "ExamPaperCode" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableExamPaperCode(s *string) *ExamIPUpdateOne {
	if s != nil {
		eiuo.SetExamPaperCode(*s)
	}
	return eiuo
}

// ClearExamPaperCode clears the value of the "ExamPaperCode" field.
func (eiuo *ExamIPUpdateOne) ClearExamPaperCode() *ExamIPUpdateOne {
	eiuo.mutation.ClearExamPaperCode()
	return eiuo
}

// SetExamPaper1 sets the "ExamPaper1" field.
func (eiuo *ExamIPUpdateOne) SetExamPaper1(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetExamPaper1(s)
	return eiuo
}

// SetNillableExamPaper1 sets the "ExamPaper1" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableExamPaper1(s *string) *ExamIPUpdateOne {
	if s != nil {
		eiuo.SetExamPaper1(*s)
	}
	return eiuo
}

// ClearExamPaper1 clears the value of the "ExamPaper1" field.
func (eiuo *ExamIPUpdateOne) ClearExamPaper1() *ExamIPUpdateOne {
	eiuo.mutation.ClearExamPaper1()
	return eiuo
}

// SetExamPaper2 sets the "ExamPaper2" field.
func (eiuo *ExamIPUpdateOne) SetExamPaper2(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetExamPaper2(s)
	return eiuo
}

// SetNillableExamPaper2 sets the "ExamPaper2" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableExamPaper2(s *string) *ExamIPUpdateOne {
	if s != nil {
		eiuo.SetExamPaper2(*s)
	}
	return eiuo
}

// ClearExamPaper2 clears the value of the "ExamPaper2" field.
func (eiuo *ExamIPUpdateOne) ClearExamPaper2() *ExamIPUpdateOne {
	eiuo.mutation.ClearExamPaper2()
	return eiuo
}

// SetExamPaper3 sets the "ExamPaper3" field.
func (eiuo *ExamIPUpdateOne) SetExamPaper3(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetExamPaper3(s)
	return eiuo
}

// SetNillableExamPaper3 sets the "ExamPaper3" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableExamPaper3(s *string) *ExamIPUpdateOne {
	if s != nil {
		eiuo.SetExamPaper3(*s)
	}
	return eiuo
}

// ClearExamPaper3 clears the value of the "ExamPaper3" field.
func (eiuo *ExamIPUpdateOne) ClearExamPaper3() *ExamIPUpdateOne {
	eiuo.mutation.ClearExamPaper3()
	return eiuo
}

// SetExamPaper4 sets the "ExamPaper4" field.
func (eiuo *ExamIPUpdateOne) SetExamPaper4(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetExamPaper4(s)
	return eiuo
}

// SetNillableExamPaper4 sets the "ExamPaper4" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableExamPaper4(s *string) *ExamIPUpdateOne {
	if s != nil {
		eiuo.SetExamPaper4(*s)
	}
	return eiuo
}

// ClearExamPaper4 clears the value of the "ExamPaper4" field.
func (eiuo *ExamIPUpdateOne) ClearExamPaper4() *ExamIPUpdateOne {
	eiuo.mutation.ClearExamPaper4()
	return eiuo
}

// SetExamPaper5 sets the "ExamPaper5" field.
func (eiuo *ExamIPUpdateOne) SetExamPaper5(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetExamPaper5(s)
	return eiuo
}

// SetNillableExamPaper5 sets the "ExamPaper5" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableExamPaper5(s *string) *ExamIPUpdateOne {
	if s != nil {
		eiuo.SetExamPaper5(*s)
	}
	return eiuo
}

// ClearExamPaper5 clears the value of the "ExamPaper5" field.
func (eiuo *ExamIPUpdateOne) ClearExamPaper5() *ExamIPUpdateOne {
	eiuo.mutation.ClearExamPaper5()
	return eiuo
}

// SetExamPaper6 sets the "ExamPaper6" field.
func (eiuo *ExamIPUpdateOne) SetExamPaper6(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetExamPaper6(s)
	return eiuo
}

// SetNillableExamPaper6 sets the "ExamPaper6" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableExamPaper6(s *string) *ExamIPUpdateOne {
	if s != nil {
		eiuo.SetExamPaper6(*s)
	}
	return eiuo
}

// ClearExamPaper6 clears the value of the "ExamPaper6" field.
func (eiuo *ExamIPUpdateOne) ClearExamPaper6() *ExamIPUpdateOne {
	eiuo.mutation.ClearExamPaper6()
	return eiuo
}

// SetPayLevelEligibilty sets the "PayLevelEligibilty" field.
func (eiuo *ExamIPUpdateOne) SetPayLevelEligibilty(b bool) *ExamIPUpdateOne {
	eiuo.mutation.SetPayLevelEligibilty(b)
	return eiuo
}

// SetNillablePayLevelEligibilty sets the "PayLevelEligibilty" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillablePayLevelEligibilty(b *bool) *ExamIPUpdateOne {
	if b != nil {
		eiuo.SetPayLevelEligibilty(*b)
	}
	return eiuo
}

// ClearPayLevelEligibilty clears the value of the "PayLevelEligibilty" field.
func (eiuo *ExamIPUpdateOne) ClearPayLevelEligibilty() *ExamIPUpdateOne {
	eiuo.mutation.ClearPayLevelEligibilty()
	return eiuo
}

// SetCategoryMinMarksSCSTPH sets the "CategoryMinMarksSCSTPH" field.
func (eiuo *ExamIPUpdateOne) SetCategoryMinMarksSCSTPH(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetCategoryMinMarksSCSTPH(s)
	return eiuo
}

// SetNillableCategoryMinMarksSCSTPH sets the "CategoryMinMarksSCSTPH" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableCategoryMinMarksSCSTPH(s *string) *ExamIPUpdateOne {
	if s != nil {
		eiuo.SetCategoryMinMarksSCSTPH(*s)
	}
	return eiuo
}

// ClearCategoryMinMarksSCSTPH clears the value of the "CategoryMinMarksSCSTPH" field.
func (eiuo *ExamIPUpdateOne) ClearCategoryMinMarksSCSTPH() *ExamIPUpdateOne {
	eiuo.mutation.ClearCategoryMinMarksSCSTPH()
	return eiuo
}

// SetCategoryMinMarksGENOBC sets the "CategoryMinMarksGENOBC" field.
func (eiuo *ExamIPUpdateOne) SetCategoryMinMarksGENOBC(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetCategoryMinMarksGENOBC(s)
	return eiuo
}

// SetNillableCategoryMinMarksGENOBC sets the "CategoryMinMarksGENOBC" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableCategoryMinMarksGENOBC(s *string) *ExamIPUpdateOne {
	if s != nil {
		eiuo.SetCategoryMinMarksGENOBC(*s)
	}
	return eiuo
}

// ClearCategoryMinMarksGENOBC clears the value of the "CategoryMinMarksGENOBC" field.
func (eiuo *ExamIPUpdateOne) ClearCategoryMinMarksGENOBC() *ExamIPUpdateOne {
	eiuo.mutation.ClearCategoryMinMarksGENOBC()
	return eiuo
}

// SetLocalLanguageAllowed sets the "LocalLanguageAllowed" field.
func (eiuo *ExamIPUpdateOne) SetLocalLanguageAllowed(b bool) *ExamIPUpdateOne {
	eiuo.mutation.SetLocalLanguageAllowed(b)
	return eiuo
}

// SetNillableLocalLanguageAllowed sets the "LocalLanguageAllowed" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableLocalLanguageAllowed(b *bool) *ExamIPUpdateOne {
	if b != nil {
		eiuo.SetLocalLanguageAllowed(*b)
	}
	return eiuo
}

// ClearLocalLanguageAllowed clears the value of the "LocalLanguageAllowed" field.
func (eiuo *ExamIPUpdateOne) ClearLocalLanguageAllowed() *ExamIPUpdateOne {
	eiuo.mutation.ClearLocalLanguageAllowed()
	return eiuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (eiuo *ExamIPUpdateOne) SetUpdatedAt(t time.Time) *ExamIPUpdateOne {
	eiuo.mutation.SetUpdatedAt(t)
	return eiuo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableUpdatedAt(t *time.Time) *ExamIPUpdateOne {
	if t != nil {
		eiuo.SetUpdatedAt(*t)
	}
	return eiuo
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (eiuo *ExamIPUpdateOne) ClearUpdatedAt() *ExamIPUpdateOne {
	eiuo.mutation.ClearUpdatedAt()
	return eiuo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (eiuo *ExamIPUpdateOne) SetUpdatedBy(s string) *ExamIPUpdateOne {
	eiuo.mutation.SetUpdatedBy(s)
	return eiuo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (eiuo *ExamIPUpdateOne) SetNillableUpdatedBy(s *string) *ExamIPUpdateOne {
	if s != nil {
		eiuo.SetUpdatedBy(*s)
	}
	return eiuo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (eiuo *ExamIPUpdateOne) ClearUpdatedBy() *ExamIPUpdateOne {
	eiuo.mutation.ClearUpdatedBy()
	return eiuo
}

// AddExamcalIPRefIDs adds the "examcal_ip_ref" edge to the ExamCalendar entity by IDs.
func (eiuo *ExamIPUpdateOne) AddExamcalIPRefIDs(ids ...int32) *ExamIPUpdateOne {
	eiuo.mutation.AddExamcalIPRefIDs(ids...)
	return eiuo
}

// AddExamcalIPRef adds the "examcal_ip_ref" edges to the ExamCalendar entity.
func (eiuo *ExamIPUpdateOne) AddExamcalIPRef(e ...*ExamCalendar) *ExamIPUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eiuo.AddExamcalIPRefIDs(ids...)
}

// AddPapersIPRefIDs adds the "papers_ip_ref" edge to the ExamPapers entity by IDs.
func (eiuo *ExamIPUpdateOne) AddPapersIPRefIDs(ids ...int32) *ExamIPUpdateOne {
	eiuo.mutation.AddPapersIPRefIDs(ids...)
	return eiuo
}

// AddPapersIPRef adds the "papers_ip_ref" edges to the ExamPapers entity.
func (eiuo *ExamIPUpdateOne) AddPapersIPRef(e ...*ExamPapers) *ExamIPUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eiuo.AddPapersIPRefIDs(ids...)
}

// AddUsersIPTypeIDs adds the "users_ip_type" edge to the UserMaster entity by IDs.
func (eiuo *ExamIPUpdateOne) AddUsersIPTypeIDs(ids ...int64) *ExamIPUpdateOne {
	eiuo.mutation.AddUsersIPTypeIDs(ids...)
	return eiuo
}

// AddUsersIPType adds the "users_ip_type" edges to the UserMaster entity.
func (eiuo *ExamIPUpdateOne) AddUsersIPType(u ...*UserMaster) *ExamIPUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eiuo.AddUsersIPTypeIDs(ids...)
}

// AddExamApplnIPRefIDs adds the "ExamAppln_IP_Ref" edge to the Exam_Applications_IP entity by IDs.
func (eiuo *ExamIPUpdateOne) AddExamApplnIPRefIDs(ids ...int64) *ExamIPUpdateOne {
	eiuo.mutation.AddExamApplnIPRefIDs(ids...)
	return eiuo
}

// AddExamApplnIPRef adds the "ExamAppln_IP_Ref" edges to the Exam_Applications_IP entity.
func (eiuo *ExamIPUpdateOne) AddExamApplnIPRef(e ...*Exam_Applications_IP) *ExamIPUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eiuo.AddExamApplnIPRefIDs(ids...)
}

// AddNotificationsIPIDs adds the "notifications_ip" edge to the Notification entity by IDs.
func (eiuo *ExamIPUpdateOne) AddNotificationsIPIDs(ids ...int32) *ExamIPUpdateOne {
	eiuo.mutation.AddNotificationsIPIDs(ids...)
	return eiuo
}

// AddNotificationsIP adds the "notifications_ip" edges to the Notification entity.
func (eiuo *ExamIPUpdateOne) AddNotificationsIP(n ...*Notification) *ExamIPUpdateOne {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return eiuo.AddNotificationsIPIDs(ids...)
}

// Mutation returns the ExamIPMutation object of the builder.
func (eiuo *ExamIPUpdateOne) Mutation() *ExamIPMutation {
	return eiuo.mutation
}

// ClearExamcalIPRef clears all "examcal_ip_ref" edges to the ExamCalendar entity.
func (eiuo *ExamIPUpdateOne) ClearExamcalIPRef() *ExamIPUpdateOne {
	eiuo.mutation.ClearExamcalIPRef()
	return eiuo
}

// RemoveExamcalIPRefIDs removes the "examcal_ip_ref" edge to ExamCalendar entities by IDs.
func (eiuo *ExamIPUpdateOne) RemoveExamcalIPRefIDs(ids ...int32) *ExamIPUpdateOne {
	eiuo.mutation.RemoveExamcalIPRefIDs(ids...)
	return eiuo
}

// RemoveExamcalIPRef removes "examcal_ip_ref" edges to ExamCalendar entities.
func (eiuo *ExamIPUpdateOne) RemoveExamcalIPRef(e ...*ExamCalendar) *ExamIPUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eiuo.RemoveExamcalIPRefIDs(ids...)
}

// ClearPapersIPRef clears all "papers_ip_ref" edges to the ExamPapers entity.
func (eiuo *ExamIPUpdateOne) ClearPapersIPRef() *ExamIPUpdateOne {
	eiuo.mutation.ClearPapersIPRef()
	return eiuo
}

// RemovePapersIPRefIDs removes the "papers_ip_ref" edge to ExamPapers entities by IDs.
func (eiuo *ExamIPUpdateOne) RemovePapersIPRefIDs(ids ...int32) *ExamIPUpdateOne {
	eiuo.mutation.RemovePapersIPRefIDs(ids...)
	return eiuo
}

// RemovePapersIPRef removes "papers_ip_ref" edges to ExamPapers entities.
func (eiuo *ExamIPUpdateOne) RemovePapersIPRef(e ...*ExamPapers) *ExamIPUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eiuo.RemovePapersIPRefIDs(ids...)
}

// ClearUsersIPType clears all "users_ip_type" edges to the UserMaster entity.
func (eiuo *ExamIPUpdateOne) ClearUsersIPType() *ExamIPUpdateOne {
	eiuo.mutation.ClearUsersIPType()
	return eiuo
}

// RemoveUsersIPTypeIDs removes the "users_ip_type" edge to UserMaster entities by IDs.
func (eiuo *ExamIPUpdateOne) RemoveUsersIPTypeIDs(ids ...int64) *ExamIPUpdateOne {
	eiuo.mutation.RemoveUsersIPTypeIDs(ids...)
	return eiuo
}

// RemoveUsersIPType removes "users_ip_type" edges to UserMaster entities.
func (eiuo *ExamIPUpdateOne) RemoveUsersIPType(u ...*UserMaster) *ExamIPUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eiuo.RemoveUsersIPTypeIDs(ids...)
}

// ClearExamApplnIPRef clears all "ExamAppln_IP_Ref" edges to the Exam_Applications_IP entity.
func (eiuo *ExamIPUpdateOne) ClearExamApplnIPRef() *ExamIPUpdateOne {
	eiuo.mutation.ClearExamApplnIPRef()
	return eiuo
}

// RemoveExamApplnIPRefIDs removes the "ExamAppln_IP_Ref" edge to Exam_Applications_IP entities by IDs.
func (eiuo *ExamIPUpdateOne) RemoveExamApplnIPRefIDs(ids ...int64) *ExamIPUpdateOne {
	eiuo.mutation.RemoveExamApplnIPRefIDs(ids...)
	return eiuo
}

// RemoveExamApplnIPRef removes "ExamAppln_IP_Ref" edges to Exam_Applications_IP entities.
func (eiuo *ExamIPUpdateOne) RemoveExamApplnIPRef(e ...*Exam_Applications_IP) *ExamIPUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eiuo.RemoveExamApplnIPRefIDs(ids...)
}

// ClearNotificationsIP clears all "notifications_ip" edges to the Notification entity.
func (eiuo *ExamIPUpdateOne) ClearNotificationsIP() *ExamIPUpdateOne {
	eiuo.mutation.ClearNotificationsIP()
	return eiuo
}

// RemoveNotificationsIPIDs removes the "notifications_ip" edge to Notification entities by IDs.
func (eiuo *ExamIPUpdateOne) RemoveNotificationsIPIDs(ids ...int32) *ExamIPUpdateOne {
	eiuo.mutation.RemoveNotificationsIPIDs(ids...)
	return eiuo
}

// RemoveNotificationsIP removes "notifications_ip" edges to Notification entities.
func (eiuo *ExamIPUpdateOne) RemoveNotificationsIP(n ...*Notification) *ExamIPUpdateOne {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return eiuo.RemoveNotificationsIPIDs(ids...)
}

// Where appends a list predicates to the ExamIPUpdate builder.
func (eiuo *ExamIPUpdateOne) Where(ps ...predicate.Exam_IP) *ExamIPUpdateOne {
	eiuo.mutation.Where(ps...)
	return eiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eiuo *ExamIPUpdateOne) Select(field string, fields ...string) *ExamIPUpdateOne {
	eiuo.fields = append([]string{field}, fields...)
	return eiuo
}

// Save executes the query and returns the updated Exam_IP entity.
func (eiuo *ExamIPUpdateOne) Save(ctx context.Context) (*Exam_IP, error) {
	return withHooks(ctx, eiuo.sqlSave, eiuo.mutation, eiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eiuo *ExamIPUpdateOne) SaveX(ctx context.Context) *Exam_IP {
	node, err := eiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eiuo *ExamIPUpdateOne) Exec(ctx context.Context) error {
	_, err := eiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eiuo *ExamIPUpdateOne) ExecX(ctx context.Context) {
	if err := eiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eiuo *ExamIPUpdateOne) sqlSave(ctx context.Context) (_node *Exam_IP, err error) {
	_spec := sqlgraph.NewUpdateSpec(exam_ip.Table, exam_ip.Columns, sqlgraph.NewFieldSpec(exam_ip.FieldID, field.TypeInt32))
	id, ok := eiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Exam_IP.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exam_ip.FieldID)
		for _, f := range fields {
			if !exam_ip.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exam_ip.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eiuo.mutation.ExamNameCode(); ok {
		_spec.SetField(exam_ip.FieldExamNameCode, field.TypeString, value)
	}
	if eiuo.mutation.ExamNameCodeCleared() {
		_spec.ClearField(exam_ip.FieldExamNameCode, field.TypeString)
	}
	if value, ok := eiuo.mutation.ExamName(); ok {
		_spec.SetField(exam_ip.FieldExamName, field.TypeString, value)
	}
	if value, ok := eiuo.mutation.ExamType(); ok {
		_spec.SetField(exam_ip.FieldExamType, field.TypeString, value)
	}
	if value, ok := eiuo.mutation.NotificationCode(); ok {
		_spec.SetField(exam_ip.FieldNotificationCode, field.TypeInt32, value)
	}
	if value, ok := eiuo.mutation.AddedNotificationCode(); ok {
		_spec.AddField(exam_ip.FieldNotificationCode, field.TypeInt32, value)
	}
	if eiuo.mutation.NotificationCodeCleared() {
		_spec.ClearField(exam_ip.FieldNotificationCode, field.TypeInt32)
	}
	if value, ok := eiuo.mutation.ConductedBy(); ok {
		_spec.SetField(exam_ip.FieldConductedBy, field.TypeString, value)
	}
	if value, ok := eiuo.mutation.NodalOffice(); ok {
		_spec.SetField(exam_ip.FieldNodalOffice, field.TypeString, value)
	}
	if eiuo.mutation.NodalOfficeCleared() {
		_spec.ClearField(exam_ip.FieldNodalOffice, field.TypeString)
	}
	if value, ok := eiuo.mutation.CalendarCode(); ok {
		_spec.SetField(exam_ip.FieldCalendarCode, field.TypeInt32, value)
	}
	if value, ok := eiuo.mutation.AddedCalendarCode(); ok {
		_spec.AddField(exam_ip.FieldCalendarCode, field.TypeInt32, value)
	}
	if eiuo.mutation.CalendarCodeCleared() {
		_spec.ClearField(exam_ip.FieldCalendarCode, field.TypeInt32)
	}
	if value, ok := eiuo.mutation.PaperCode(); ok {
		_spec.SetField(exam_ip.FieldPaperCode, field.TypeInt32, value)
	}
	if value, ok := eiuo.mutation.AddedPaperCode(); ok {
		_spec.AddField(exam_ip.FieldPaperCode, field.TypeInt32, value)
	}
	if eiuo.mutation.PaperCodeCleared() {
		_spec.ClearField(exam_ip.FieldPaperCode, field.TypeInt32)
	}
	if value, ok := eiuo.mutation.EligibleCadre(); ok {
		_spec.SetField(exam_ip.FieldEligibleCadre, field.TypeString, value)
	}
	if eiuo.mutation.EligibleCadreCleared() {
		_spec.ClearField(exam_ip.FieldEligibleCadre, field.TypeString)
	}
	if value, ok := eiuo.mutation.EligiblePost1(); ok {
		_spec.SetField(exam_ip.FieldEligiblePost1, field.TypeString, value)
	}
	if eiuo.mutation.EligiblePost1Cleared() {
		_spec.ClearField(exam_ip.FieldEligiblePost1, field.TypeString)
	}
	if value, ok := eiuo.mutation.EligiblePost2(); ok {
		_spec.SetField(exam_ip.FieldEligiblePost2, field.TypeString, value)
	}
	if eiuo.mutation.EligiblePost2Cleared() {
		_spec.ClearField(exam_ip.FieldEligiblePost2, field.TypeString)
	}
	if value, ok := eiuo.mutation.EligiblePost3(); ok {
		_spec.SetField(exam_ip.FieldEligiblePost3, field.TypeString, value)
	}
	if eiuo.mutation.EligiblePost3Cleared() {
		_spec.ClearField(exam_ip.FieldEligiblePost3, field.TypeString)
	}
	if value, ok := eiuo.mutation.EligiblePost4(); ok {
		_spec.SetField(exam_ip.FieldEligiblePost4, field.TypeString, value)
	}
	if eiuo.mutation.EligiblePost4Cleared() {
		_spec.ClearField(exam_ip.FieldEligiblePost4, field.TypeString)
	}
	if value, ok := eiuo.mutation.EligiblePost5(); ok {
		_spec.SetField(exam_ip.FieldEligiblePost5, field.TypeString, value)
	}
	if eiuo.mutation.EligiblePost5Cleared() {
		_spec.ClearField(exam_ip.FieldEligiblePost5, field.TypeString)
	}
	if value, ok := eiuo.mutation.ExamPost1(); ok {
		_spec.SetField(exam_ip.FieldExamPost1, field.TypeString, value)
	}
	if eiuo.mutation.ExamPost1Cleared() {
		_spec.ClearField(exam_ip.FieldExamPost1, field.TypeString)
	}
	if value, ok := eiuo.mutation.ExamPost2(); ok {
		_spec.SetField(exam_ip.FieldExamPost2, field.TypeString, value)
	}
	if eiuo.mutation.ExamPost2Cleared() {
		_spec.ClearField(exam_ip.FieldExamPost2, field.TypeString)
	}
	if value, ok := eiuo.mutation.ExamPost3(); ok {
		_spec.SetField(exam_ip.FieldExamPost3, field.TypeString, value)
	}
	if eiuo.mutation.ExamPost3Cleared() {
		_spec.ClearField(exam_ip.FieldExamPost3, field.TypeString)
	}
	if value, ok := eiuo.mutation.ExamPost4(); ok {
		_spec.SetField(exam_ip.FieldExamPost4, field.TypeString, value)
	}
	if eiuo.mutation.ExamPost4Cleared() {
		_spec.ClearField(exam_ip.FieldExamPost4, field.TypeString)
	}
	if value, ok := eiuo.mutation.ExamPost5(); ok {
		_spec.SetField(exam_ip.FieldExamPost5, field.TypeString, value)
	}
	if eiuo.mutation.ExamPost5Cleared() {
		_spec.ClearField(exam_ip.FieldExamPost5, field.TypeString)
	}
	if value, ok := eiuo.mutation.EducationCriteria(); ok {
		_spec.SetField(exam_ip.FieldEducationCriteria, field.TypeString, value)
	}
	if eiuo.mutation.EducationCriteriaCleared() {
		_spec.ClearField(exam_ip.FieldEducationCriteria, field.TypeString)
	}
	if value, ok := eiuo.mutation.CategoryAgeLimitGEN(); ok {
		_spec.SetField(exam_ip.FieldCategoryAgeLimitGEN, field.TypeString, value)
	}
	if eiuo.mutation.CategoryAgeLimitGENCleared() {
		_spec.ClearField(exam_ip.FieldCategoryAgeLimitGEN, field.TypeString)
	}
	if value, ok := eiuo.mutation.CategoryAgeLimitSC(); ok {
		_spec.SetField(exam_ip.FieldCategoryAgeLimitSC, field.TypeString, value)
	}
	if eiuo.mutation.CategoryAgeLimitSCCleared() {
		_spec.ClearField(exam_ip.FieldCategoryAgeLimitSC, field.TypeString)
	}
	if value, ok := eiuo.mutation.CategoryAgeLimitST(); ok {
		_spec.SetField(exam_ip.FieldCategoryAgeLimitST, field.TypeString, value)
	}
	if eiuo.mutation.CategoryAgeLimitSTCleared() {
		_spec.ClearField(exam_ip.FieldCategoryAgeLimitST, field.TypeString)
	}
	if value, ok := eiuo.mutation.ServiceYears(); ok {
		_spec.SetField(exam_ip.FieldServiceYears, field.TypeString, value)
	}
	if eiuo.mutation.ServiceYearsCleared() {
		_spec.ClearField(exam_ip.FieldServiceYears, field.TypeString)
	}
	if value, ok := eiuo.mutation.DrivingLicenseRequired(); ok {
		_spec.SetField(exam_ip.FieldDrivingLicenseRequired, field.TypeString, value)
	}
	if eiuo.mutation.DrivingLicenseRequiredCleared() {
		_spec.ClearField(exam_ip.FieldDrivingLicenseRequired, field.TypeString)
	}
	if value, ok := eiuo.mutation.ExamPaperCode(); ok {
		_spec.SetField(exam_ip.FieldExamPaperCode, field.TypeString, value)
	}
	if eiuo.mutation.ExamPaperCodeCleared() {
		_spec.ClearField(exam_ip.FieldExamPaperCode, field.TypeString)
	}
	if value, ok := eiuo.mutation.ExamPaper1(); ok {
		_spec.SetField(exam_ip.FieldExamPaper1, field.TypeString, value)
	}
	if eiuo.mutation.ExamPaper1Cleared() {
		_spec.ClearField(exam_ip.FieldExamPaper1, field.TypeString)
	}
	if value, ok := eiuo.mutation.ExamPaper2(); ok {
		_spec.SetField(exam_ip.FieldExamPaper2, field.TypeString, value)
	}
	if eiuo.mutation.ExamPaper2Cleared() {
		_spec.ClearField(exam_ip.FieldExamPaper2, field.TypeString)
	}
	if value, ok := eiuo.mutation.ExamPaper3(); ok {
		_spec.SetField(exam_ip.FieldExamPaper3, field.TypeString, value)
	}
	if eiuo.mutation.ExamPaper3Cleared() {
		_spec.ClearField(exam_ip.FieldExamPaper3, field.TypeString)
	}
	if value, ok := eiuo.mutation.ExamPaper4(); ok {
		_spec.SetField(exam_ip.FieldExamPaper4, field.TypeString, value)
	}
	if eiuo.mutation.ExamPaper4Cleared() {
		_spec.ClearField(exam_ip.FieldExamPaper4, field.TypeString)
	}
	if value, ok := eiuo.mutation.ExamPaper5(); ok {
		_spec.SetField(exam_ip.FieldExamPaper5, field.TypeString, value)
	}
	if eiuo.mutation.ExamPaper5Cleared() {
		_spec.ClearField(exam_ip.FieldExamPaper5, field.TypeString)
	}
	if value, ok := eiuo.mutation.ExamPaper6(); ok {
		_spec.SetField(exam_ip.FieldExamPaper6, field.TypeString, value)
	}
	if eiuo.mutation.ExamPaper6Cleared() {
		_spec.ClearField(exam_ip.FieldExamPaper6, field.TypeString)
	}
	if value, ok := eiuo.mutation.PayLevelEligibilty(); ok {
		_spec.SetField(exam_ip.FieldPayLevelEligibilty, field.TypeBool, value)
	}
	if eiuo.mutation.PayLevelEligibiltyCleared() {
		_spec.ClearField(exam_ip.FieldPayLevelEligibilty, field.TypeBool)
	}
	if value, ok := eiuo.mutation.CategoryMinMarksSCSTPH(); ok {
		_spec.SetField(exam_ip.FieldCategoryMinMarksSCSTPH, field.TypeString, value)
	}
	if eiuo.mutation.CategoryMinMarksSCSTPHCleared() {
		_spec.ClearField(exam_ip.FieldCategoryMinMarksSCSTPH, field.TypeString)
	}
	if value, ok := eiuo.mutation.CategoryMinMarksGENOBC(); ok {
		_spec.SetField(exam_ip.FieldCategoryMinMarksGENOBC, field.TypeString, value)
	}
	if eiuo.mutation.CategoryMinMarksGENOBCCleared() {
		_spec.ClearField(exam_ip.FieldCategoryMinMarksGENOBC, field.TypeString)
	}
	if value, ok := eiuo.mutation.LocalLanguageAllowed(); ok {
		_spec.SetField(exam_ip.FieldLocalLanguageAllowed, field.TypeBool, value)
	}
	if eiuo.mutation.LocalLanguageAllowedCleared() {
		_spec.ClearField(exam_ip.FieldLocalLanguageAllowed, field.TypeBool)
	}
	if value, ok := eiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(exam_ip.FieldUpdatedAt, field.TypeTime, value)
	}
	if eiuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(exam_ip.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := eiuo.mutation.UpdatedBy(); ok {
		_spec.SetField(exam_ip.FieldUpdatedBy, field.TypeString, value)
	}
	if eiuo.mutation.UpdatedByCleared() {
		_spec.ClearField(exam_ip.FieldUpdatedBy, field.TypeString)
	}
	if eiuo.mutation.ExamcalIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.ExamcalIPRefTable,
			Columns: []string{exam_ip.ExamcalIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiuo.mutation.RemovedExamcalIPRefIDs(); len(nodes) > 0 && !eiuo.mutation.ExamcalIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.ExamcalIPRefTable,
			Columns: []string{exam_ip.ExamcalIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiuo.mutation.ExamcalIPRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.ExamcalIPRefTable,
			Columns: []string{exam_ip.ExamcalIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eiuo.mutation.PapersIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.PapersIPRefTable,
			Columns: []string{exam_ip.PapersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiuo.mutation.RemovedPapersIPRefIDs(); len(nodes) > 0 && !eiuo.mutation.PapersIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.PapersIPRefTable,
			Columns: []string{exam_ip.PapersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiuo.mutation.PapersIPRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.PapersIPRefTable,
			Columns: []string{exam_ip.PapersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eiuo.mutation.UsersIPTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.UsersIPTypeTable,
			Columns: []string{exam_ip.UsersIPTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiuo.mutation.RemovedUsersIPTypeIDs(); len(nodes) > 0 && !eiuo.mutation.UsersIPTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.UsersIPTypeTable,
			Columns: []string{exam_ip.UsersIPTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiuo.mutation.UsersIPTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.UsersIPTypeTable,
			Columns: []string{exam_ip.UsersIPTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eiuo.mutation.ExamApplnIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.ExamApplnIPRefTable,
			Columns: []string{exam_ip.ExamApplnIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiuo.mutation.RemovedExamApplnIPRefIDs(); len(nodes) > 0 && !eiuo.mutation.ExamApplnIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.ExamApplnIPRefTable,
			Columns: []string{exam_ip.ExamApplnIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiuo.mutation.ExamApplnIPRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.ExamApplnIPRefTable,
			Columns: []string{exam_ip.ExamApplnIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eiuo.mutation.NotificationsIPCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.NotificationsIPTable,
			Columns: []string{exam_ip.NotificationsIPColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiuo.mutation.RemovedNotificationsIPIDs(); len(nodes) > 0 && !eiuo.mutation.NotificationsIPCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.NotificationsIPTable,
			Columns: []string{exam_ip.NotificationsIPColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiuo.mutation.NotificationsIPIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_ip.NotificationsIPTable,
			Columns: []string{exam_ip.NotificationsIPColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Exam_IP{config: eiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exam_ip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eiuo.mutation.done = true
	return _node, nil
}
