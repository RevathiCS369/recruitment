// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/ageeligibility"
	"recruit/ent/exameligibility"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamEligibilityCreate is the builder for creating a ExamEligibility entity.
type ExamEligibilityCreate struct {
	config
	mutation *ExamEligibilityMutation
	hooks    []Hook
}

// SetExamcode sets the "Examcode" field.
func (eec *ExamEligibilityCreate) SetExamcode(i int32) *ExamEligibilityCreate {
	eec.mutation.SetExamcode(i)
	return eec
}

// SetAgeCriteria sets the "AgeCriteria" field.
func (eec *ExamEligibilityCreate) SetAgeCriteria(s string) *ExamEligibilityCreate {
	eec.mutation.SetAgeCriteria(s)
	return eec
}

// SetNillableAgeCriteria sets the "AgeCriteria" field if the given value is not nil.
func (eec *ExamEligibilityCreate) SetNillableAgeCriteria(s *string) *ExamEligibilityCreate {
	if s != nil {
		eec.SetAgeCriteria(*s)
	}
	return eec
}

// SetServiceCriteria sets the "ServiceCriteria" field.
func (eec *ExamEligibilityCreate) SetServiceCriteria(s string) *ExamEligibilityCreate {
	eec.mutation.SetServiceCriteria(s)
	return eec
}

// SetNillableServiceCriteria sets the "ServiceCriteria" field if the given value is not nil.
func (eec *ExamEligibilityCreate) SetNillableServiceCriteria(s *string) *ExamEligibilityCreate {
	if s != nil {
		eec.SetServiceCriteria(*s)
	}
	return eec
}

// SetDrivingLicenseCriteria sets the "DrivingLicenseCriteria" field.
func (eec *ExamEligibilityCreate) SetDrivingLicenseCriteria(s string) *ExamEligibilityCreate {
	eec.mutation.SetDrivingLicenseCriteria(s)
	return eec
}

// SetNillableDrivingLicenseCriteria sets the "DrivingLicenseCriteria" field if the given value is not nil.
func (eec *ExamEligibilityCreate) SetNillableDrivingLicenseCriteria(s *string) *ExamEligibilityCreate {
	if s != nil {
		eec.SetDrivingLicenseCriteria(*s)
	}
	return eec
}

// SetNotifyCode sets the "NotifyCode" field.
func (eec *ExamEligibilityCreate) SetNotifyCode(i int32) *ExamEligibilityCreate {
	eec.mutation.SetNotifyCode(i)
	return eec
}

// SetNillableNotifyCode sets the "NotifyCode" field if the given value is not nil.
func (eec *ExamEligibilityCreate) SetNillableNotifyCode(i *int32) *ExamEligibilityCreate {
	if i != nil {
		eec.SetNotifyCode(*i)
	}
	return eec
}

// SetEmployeeCadreID sets the "EmployeeCadreID" field.
func (eec *ExamEligibilityCreate) SetEmployeeCadreID(i int32) *ExamEligibilityCreate {
	eec.mutation.SetEmployeeCadreID(i)
	return eec
}

// SetNillableEmployeeCadreID sets the "EmployeeCadreID" field if the given value is not nil.
func (eec *ExamEligibilityCreate) SetNillableEmployeeCadreID(i *int32) *ExamEligibilityCreate {
	if i != nil {
		eec.SetEmployeeCadreID(*i)
	}
	return eec
}

// SetCategoryID sets the "CategoryID" field.
func (eec *ExamEligibilityCreate) SetCategoryID(i int32) *ExamEligibilityCreate {
	eec.mutation.SetCategoryID(i)
	return eec
}

// SetNillableCategoryID sets the "CategoryID" field if the given value is not nil.
func (eec *ExamEligibilityCreate) SetNillableCategoryID(i *int32) *ExamEligibilityCreate {
	if i != nil {
		eec.SetCategoryID(*i)
	}
	return eec
}

// SetID sets the "id" field.
func (eec *ExamEligibilityCreate) SetID(i int32) *ExamEligibilityCreate {
	eec.mutation.SetID(i)
	return eec
}

// AddAgeEligibilityIDs adds the "age_eligibilities" edge to the AgeEligibility entity by IDs.
func (eec *ExamEligibilityCreate) AddAgeEligibilityIDs(ids ...int32) *ExamEligibilityCreate {
	eec.mutation.AddAgeEligibilityIDs(ids...)
	return eec
}

// AddAgeEligibilities adds the "age_eligibilities" edges to the AgeEligibility entity.
func (eec *ExamEligibilityCreate) AddAgeEligibilities(a ...*AgeEligibility) *ExamEligibilityCreate {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return eec.AddAgeEligibilityIDs(ids...)
}

// Mutation returns the ExamEligibilityMutation object of the builder.
func (eec *ExamEligibilityCreate) Mutation() *ExamEligibilityMutation {
	return eec.mutation
}

// Save creates the ExamEligibility in the database.
func (eec *ExamEligibilityCreate) Save(ctx context.Context) (*ExamEligibility, error) {
	return withHooks(ctx, eec.sqlSave, eec.mutation, eec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (eec *ExamEligibilityCreate) SaveX(ctx context.Context) *ExamEligibility {
	v, err := eec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eec *ExamEligibilityCreate) Exec(ctx context.Context) error {
	_, err := eec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eec *ExamEligibilityCreate) ExecX(ctx context.Context) {
	if err := eec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eec *ExamEligibilityCreate) check() error {
	if _, ok := eec.mutation.Examcode(); !ok {
		return &ValidationError{Name: "Examcode", err: errors.New(`ent: missing required field "ExamEligibility.Examcode"`)}
	}
	return nil
}

func (eec *ExamEligibilityCreate) sqlSave(ctx context.Context) (*ExamEligibility, error) {
	if err := eec.check(); err != nil {
		return nil, err
	}
	_node, _spec := eec.createSpec()
	if err := sqlgraph.CreateNode(ctx, eec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	eec.mutation.id = &_node.ID
	eec.mutation.done = true
	return _node, nil
}

func (eec *ExamEligibilityCreate) createSpec() (*ExamEligibility, *sqlgraph.CreateSpec) {
	var (
		_node = &ExamEligibility{config: eec.config}
		_spec = sqlgraph.NewCreateSpec(exameligibility.Table, sqlgraph.NewFieldSpec(exameligibility.FieldID, field.TypeInt32))
	)
	if id, ok := eec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := eec.mutation.Examcode(); ok {
		_spec.SetField(exameligibility.FieldExamcode, field.TypeInt32, value)
		_node.Examcode = value
	}
	if value, ok := eec.mutation.AgeCriteria(); ok {
		_spec.SetField(exameligibility.FieldAgeCriteria, field.TypeString, value)
		_node.AgeCriteria = value
	}
	if value, ok := eec.mutation.ServiceCriteria(); ok {
		_spec.SetField(exameligibility.FieldServiceCriteria, field.TypeString, value)
		_node.ServiceCriteria = value
	}
	if value, ok := eec.mutation.DrivingLicenseCriteria(); ok {
		_spec.SetField(exameligibility.FieldDrivingLicenseCriteria, field.TypeString, value)
		_node.DrivingLicenseCriteria = value
	}
	if value, ok := eec.mutation.NotifyCode(); ok {
		_spec.SetField(exameligibility.FieldNotifyCode, field.TypeInt32, value)
		_node.NotifyCode = value
	}
	if value, ok := eec.mutation.EmployeeCadreID(); ok {
		_spec.SetField(exameligibility.FieldEmployeeCadreID, field.TypeInt32, value)
		_node.EmployeeCadreID = value
	}
	if value, ok := eec.mutation.CategoryID(); ok {
		_spec.SetField(exameligibility.FieldCategoryID, field.TypeInt32, value)
		_node.CategoryID = value
	}
	if nodes := eec.mutation.AgeEligibilitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exameligibility.AgeEligibilitiesTable,
			Columns: []string{exameligibility.AgeEligibilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ageeligibility.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExamEligibilityCreateBulk is the builder for creating many ExamEligibility entities in bulk.
type ExamEligibilityCreateBulk struct {
	config
	builders []*ExamEligibilityCreate
}

// Save creates the ExamEligibility entities in the database.
func (eecb *ExamEligibilityCreateBulk) Save(ctx context.Context) ([]*ExamEligibility, error) {
	specs := make([]*sqlgraph.CreateSpec, len(eecb.builders))
	nodes := make([]*ExamEligibility, len(eecb.builders))
	mutators := make([]Mutator, len(eecb.builders))
	for i := range eecb.builders {
		func(i int, root context.Context) {
			builder := eecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExamEligibilityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eecb *ExamEligibilityCreateBulk) SaveX(ctx context.Context) []*ExamEligibility {
	v, err := eecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eecb *ExamEligibilityCreateBulk) Exec(ctx context.Context) error {
	_, err := eecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eecb *ExamEligibilityCreateBulk) ExecX(ctx context.Context) {
	if err := eecb.Exec(ctx); err != nil {
		panic(err)
	}
}
