// Code generated by ent, DO NOT EDIT.

package exam

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the exam type in the database.
	Label = "exam"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "ExamCode"
	// FieldExamName holds the string denoting the examname field in the database.
	FieldExamName = "exam_name"
	// FieldNumOfPapers holds the string denoting the numofpapers field in the database.
	FieldNumOfPapers = "num_of_papers"
	// FieldNotificationBy holds the string denoting the notificationby field in the database.
	FieldNotificationBy = "notification_by"
	// FieldConductedBy holds the string denoting the conductedby field in the database.
	FieldConductedBy = "conducted_by"
	// FieldNodalOfficerLevel holds the string denoting the nodalofficerlevel field in the database.
	FieldNodalOfficerLevel = "nodal_officer_level"
	// FieldCalendarCode holds the string denoting the calendarcode field in the database.
	FieldCalendarCode = "calendar_code"
	// FieldPaperCode holds the string denoting the papercode field in the database.
	FieldPaperCode = "paper_code"
	// FieldExamType holds the string denoting the examtype field in the database.
	FieldExamType = "exam_type"
	// FieldTentativeNotificationMandatoryDate holds the string denoting the tentativenotificationmandatorydate field in the database.
	FieldTentativeNotificationMandatoryDate = "tentative_notification_mandatory_date"
	// FieldLocalLanguage holds the string denoting the locallanguage field in the database.
	FieldLocalLanguage = "local_language"
	// FieldOptionForPost holds the string denoting the optionforpost field in the database.
	FieldOptionForPost = "option_for_post"
	// FieldOptionToWriteExamOtherThanParent holds the string denoting the optiontowriteexamotherthanparent field in the database.
	FieldOptionToWriteExamOtherThanParent = "option_to_write_exam_other_than_parent"
	// FieldOrderNumber holds the string denoting the ordernumber field in the database.
	FieldOrderNumber = "order_number"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldExamTypeCode holds the string denoting the examtypecode field in the database.
	FieldExamTypeCode = "exam_type_code"
	// EdgeNodalOfficers holds the string denoting the nodal_officers edge name in mutations.
	EdgeNodalOfficers = "nodal_officers"
	// EdgeNotifications holds the string denoting the notifications edge name in mutations.
	EdgeNotifications = "notifications"
	// EdgeExamsRef holds the string denoting the exams_ref edge name in mutations.
	EdgeExamsRef = "exams_ref"
	// EdgePapers holds the string denoting the papers edge name in mutations.
	EdgePapers = "papers"
	// EdgeExamEligibility holds the string denoting the exameligibility edge name in mutations.
	EdgeExamEligibility = "ExamEligibility"
	// EdgeExamsType holds the string denoting the exams_type edge name in mutations.
	EdgeExamsType = "exams_type"
	// NodalOfficerFieldID holds the string denoting the ID field of the NodalOfficer.
	NodalOfficerFieldID = "NodalOfficerCode"
	// NotificationFieldID holds the string denoting the ID field of the Notification.
	NotificationFieldID = "NotifyCode"
	// ExamCalendarFieldID holds the string denoting the ID field of the ExamCalendar.
	ExamCalendarFieldID = "CalendarCode"
	// ExamPapersFieldID holds the string denoting the ID field of the ExamPapers.
	ExamPapersFieldID = "PaperCode"
	// EligibilityMasterFieldID holds the string denoting the ID field of the EligibilityMaster.
	EligibilityMasterFieldID = "EligibilityCode"
	// ExamTypeFieldID holds the string denoting the ID field of the ExamType.
	ExamTypeFieldID = "ExamTypeCode"
	// Table holds the table name of the exam in the database.
	Table = "Exam"
	// NodalOfficersTable is the table that holds the nodal_officers relation/edge.
	NodalOfficersTable = "NodalOfficers"
	// NodalOfficersInverseTable is the table name for the NodalOfficer entity.
	// It exists in this package in order to avoid circular dependency with the "nodalofficer" package.
	NodalOfficersInverseTable = "NodalOfficers"
	// NodalOfficersColumn is the table column denoting the nodal_officers relation/edge.
	NodalOfficersColumn = "exam_code"
	// NotificationsTable is the table that holds the notifications relation/edge.
	NotificationsTable = "Notification"
	// NotificationsInverseTable is the table name for the Notification entity.
	// It exists in this package in order to avoid circular dependency with the "notification" package.
	NotificationsInverseTable = "Notification"
	// NotificationsColumn is the table column denoting the notifications relation/edge.
	NotificationsColumn = "exam_code"
	// ExamsRefTable is the table that holds the exams_ref relation/edge.
	ExamsRefTable = "ExamCalendar"
	// ExamsRefInverseTable is the table name for the ExamCalendar entity.
	// It exists in this package in order to avoid circular dependency with the "examcalendar" package.
	ExamsRefInverseTable = "ExamCalendar"
	// ExamsRefColumn is the table column denoting the exams_ref relation/edge.
	ExamsRefColumn = "exam_code"
	// PapersTable is the table that holds the papers relation/edge.
	PapersTable = "ExamPapers"
	// PapersInverseTable is the table name for the ExamPapers entity.
	// It exists in this package in order to avoid circular dependency with the "exampapers" package.
	PapersInverseTable = "ExamPapers"
	// PapersColumn is the table column denoting the papers relation/edge.
	PapersColumn = "exam_code"
	// ExamEligibilityTable is the table that holds the ExamEligibility relation/edge.
	ExamEligibilityTable = "EligibilityMaster"
	// ExamEligibilityInverseTable is the table name for the EligibilityMaster entity.
	// It exists in this package in order to avoid circular dependency with the "eligibilitymaster" package.
	ExamEligibilityInverseTable = "EligibilityMaster"
	// ExamEligibilityColumn is the table column denoting the ExamEligibility relation/edge.
	ExamEligibilityColumn = "exam_code"
	// ExamsTypeTable is the table that holds the exams_type relation/edge.
	ExamsTypeTable = "ExamType"
	// ExamsTypeInverseTable is the table name for the ExamType entity.
	// It exists in this package in order to avoid circular dependency with the "examtype" package.
	ExamsTypeInverseTable = "ExamType"
	// ExamsTypeColumn is the table column denoting the exams_type relation/edge.
	ExamsTypeColumn = "exam_code"
)

// Columns holds all SQL columns for exam fields.
var Columns = []string{
	FieldID,
	FieldExamName,
	FieldNumOfPapers,
	FieldNotificationBy,
	FieldConductedBy,
	FieldNodalOfficerLevel,
	FieldCalendarCode,
	FieldPaperCode,
	FieldExamType,
	FieldTentativeNotificationMandatoryDate,
	FieldLocalLanguage,
	FieldOptionForPost,
	FieldOptionToWriteExamOtherThanParent,
	FieldOrderNumber,
	FieldStatus,
	FieldExamTypeCode,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "Exam"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"vacancy_year_exams",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTentativeNotificationMandatoryDate holds the default value on creation for the "TentativeNotificationMandatoryDate" field.
	DefaultTentativeNotificationMandatoryDate bool
	// DefaultLocalLanguage holds the default value on creation for the "LocalLanguage" field.
	DefaultLocalLanguage bool
	// DefaultOptionForPost holds the default value on creation for the "OptionForPost" field.
	DefaultOptionForPost bool
	// DefaultOptionToWriteExamOtherThanParent holds the default value on creation for the "OptionToWriteExamOtherThanParent" field.
	DefaultOptionToWriteExamOtherThanParent bool
)

// OrderOption defines the ordering options for the Exam queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByExamName orders the results by the ExamName field.
func ByExamName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamName, opts...).ToFunc()
}

// ByNumOfPapers orders the results by the NumOfPapers field.
func ByNumOfPapers(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumOfPapers, opts...).ToFunc()
}

// ByNotificationBy orders the results by the NotificationBy field.
func ByNotificationBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotificationBy, opts...).ToFunc()
}

// ByConductedBy orders the results by the ConductedBy field.
func ByConductedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConductedBy, opts...).ToFunc()
}

// ByNodalOfficerLevel orders the results by the NodalOfficerLevel field.
func ByNodalOfficerLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNodalOfficerLevel, opts...).ToFunc()
}

// ByCalendarCode orders the results by the CalendarCode field.
func ByCalendarCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCalendarCode, opts...).ToFunc()
}

// ByPaperCode orders the results by the PaperCode field.
func ByPaperCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaperCode, opts...).ToFunc()
}

// ByExamType orders the results by the ExamType field.
func ByExamType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamType, opts...).ToFunc()
}

// ByTentativeNotificationMandatoryDate orders the results by the TentativeNotificationMandatoryDate field.
func ByTentativeNotificationMandatoryDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTentativeNotificationMandatoryDate, opts...).ToFunc()
}

// ByLocalLanguage orders the results by the LocalLanguage field.
func ByLocalLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalLanguage, opts...).ToFunc()
}

// ByOptionForPost orders the results by the OptionForPost field.
func ByOptionForPost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOptionForPost, opts...).ToFunc()
}

// ByOptionToWriteExamOtherThanParent orders the results by the OptionToWriteExamOtherThanParent field.
func ByOptionToWriteExamOtherThanParent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOptionToWriteExamOtherThanParent, opts...).ToFunc()
}

// ByOrderNumber orders the results by the OrderNumber field.
func ByOrderNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderNumber, opts...).ToFunc()
}

// ByStatus orders the results by the Status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByExamTypeCode orders the results by the ExamTypeCode field.
func ByExamTypeCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamTypeCode, opts...).ToFunc()
}

// ByNodalOfficersCount orders the results by nodal_officers count.
func ByNodalOfficersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNodalOfficersStep(), opts...)
	}
}

// ByNodalOfficers orders the results by nodal_officers terms.
func ByNodalOfficers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNodalOfficersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNotificationsCount orders the results by notifications count.
func ByNotificationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNotificationsStep(), opts...)
	}
}

// ByNotifications orders the results by notifications terms.
func ByNotifications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotificationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExamsRefCount orders the results by exams_ref count.
func ByExamsRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExamsRefStep(), opts...)
	}
}

// ByExamsRef orders the results by exams_ref terms.
func ByExamsRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamsRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPapersCount orders the results by papers count.
func ByPapersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPapersStep(), opts...)
	}
}

// ByPapers orders the results by papers terms.
func ByPapers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPapersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExamEligibilityCount orders the results by ExamEligibility count.
func ByExamEligibilityCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExamEligibilityStep(), opts...)
	}
}

// ByExamEligibility orders the results by ExamEligibility terms.
func ByExamEligibility(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamEligibilityStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExamsTypeCount orders the results by exams_type count.
func ByExamsTypeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExamsTypeStep(), opts...)
	}
}

// ByExamsType orders the results by exams_type terms.
func ByExamsType(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamsTypeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newNodalOfficersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NodalOfficersInverseTable, NodalOfficerFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NodalOfficersTable, NodalOfficersColumn),
	)
}
func newNotificationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotificationsInverseTable, NotificationFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NotificationsTable, NotificationsColumn),
	)
}
func newExamsRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamsRefInverseTable, ExamCalendarFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExamsRefTable, ExamsRefColumn),
	)
}
func newPapersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PapersInverseTable, ExamPapersFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PapersTable, PapersColumn),
	)
}
func newExamEligibilityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamEligibilityInverseTable, EligibilityMasterFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExamEligibilityTable, ExamEligibilityColumn),
	)
}
func newExamsTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamsTypeInverseTable, ExamTypeFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExamsTypeTable, ExamsTypeColumn),
	)
}
