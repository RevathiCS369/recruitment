// Code generated by ent, DO NOT EDIT.

package exam

import (
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldID, id))
}

// ExamName applies equality check predicate on the "ExamName" field. It's identical to ExamNameEQ.
func ExamName(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldExamName, v))
}

// NumOfPapers applies equality check predicate on the "NumOfPapers" field. It's identical to NumOfPapersEQ.
func NumOfPapers(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldNumOfPapers, v))
}

// NotificationBy applies equality check predicate on the "NotificationBy" field. It's identical to NotificationByEQ.
func NotificationBy(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldNotificationBy, v))
}

// ConductedBy applies equality check predicate on the "ConductedBy" field. It's identical to ConductedByEQ.
func ConductedBy(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldConductedBy, v))
}

// NodalOfficerLevel applies equality check predicate on the "NodalOfficerLevel" field. It's identical to NodalOfficerLevelEQ.
func NodalOfficerLevel(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldNodalOfficerLevel, v))
}

// CalendarCode applies equality check predicate on the "CalendarCode" field. It's identical to CalendarCodeEQ.
func CalendarCode(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldCalendarCode, v))
}

// PaperCode applies equality check predicate on the "PaperCode" field. It's identical to PaperCodeEQ.
func PaperCode(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldPaperCode, v))
}

// ExamType applies equality check predicate on the "ExamType" field. It's identical to ExamTypeEQ.
func ExamType(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldExamType, v))
}

// TentativeNotificationMandatoryDate applies equality check predicate on the "TentativeNotificationMandatoryDate" field. It's identical to TentativeNotificationMandatoryDateEQ.
func TentativeNotificationMandatoryDate(v bool) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldTentativeNotificationMandatoryDate, v))
}

// LocalLanguage applies equality check predicate on the "LocalLanguage" field. It's identical to LocalLanguageEQ.
func LocalLanguage(v bool) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldLocalLanguage, v))
}

// OptionForPost applies equality check predicate on the "OptionForPost" field. It's identical to OptionForPostEQ.
func OptionForPost(v bool) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldOptionForPost, v))
}

// OptionToWriteExamOtherThanParent applies equality check predicate on the "OptionToWriteExamOtherThanParent" field. It's identical to OptionToWriteExamOtherThanParentEQ.
func OptionToWriteExamOtherThanParent(v bool) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldOptionToWriteExamOtherThanParent, v))
}

// OrderNumber applies equality check predicate on the "OrderNumber" field. It's identical to OrderNumberEQ.
func OrderNumber(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldOrderNumber, v))
}

// Status applies equality check predicate on the "Status" field. It's identical to StatusEQ.
func Status(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldStatus, v))
}

// ExamTypeCode applies equality check predicate on the "ExamTypeCode" field. It's identical to ExamTypeCodeEQ.
func ExamTypeCode(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldExamTypeCode, v))
}

// ExamNameEQ applies the EQ predicate on the "ExamName" field.
func ExamNameEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldExamName, v))
}

// ExamNameNEQ applies the NEQ predicate on the "ExamName" field.
func ExamNameNEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldExamName, v))
}

// ExamNameIn applies the In predicate on the "ExamName" field.
func ExamNameIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldExamName, vs...))
}

// ExamNameNotIn applies the NotIn predicate on the "ExamName" field.
func ExamNameNotIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldExamName, vs...))
}

// ExamNameGT applies the GT predicate on the "ExamName" field.
func ExamNameGT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldExamName, v))
}

// ExamNameGTE applies the GTE predicate on the "ExamName" field.
func ExamNameGTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldExamName, v))
}

// ExamNameLT applies the LT predicate on the "ExamName" field.
func ExamNameLT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldExamName, v))
}

// ExamNameLTE applies the LTE predicate on the "ExamName" field.
func ExamNameLTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldExamName, v))
}

// ExamNameContains applies the Contains predicate on the "ExamName" field.
func ExamNameContains(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContains(FieldExamName, v))
}

// ExamNameHasPrefix applies the HasPrefix predicate on the "ExamName" field.
func ExamNameHasPrefix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasPrefix(FieldExamName, v))
}

// ExamNameHasSuffix applies the HasSuffix predicate on the "ExamName" field.
func ExamNameHasSuffix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasSuffix(FieldExamName, v))
}

// ExamNameEqualFold applies the EqualFold predicate on the "ExamName" field.
func ExamNameEqualFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEqualFold(FieldExamName, v))
}

// ExamNameContainsFold applies the ContainsFold predicate on the "ExamName" field.
func ExamNameContainsFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContainsFold(FieldExamName, v))
}

// NumOfPapersEQ applies the EQ predicate on the "NumOfPapers" field.
func NumOfPapersEQ(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldNumOfPapers, v))
}

// NumOfPapersNEQ applies the NEQ predicate on the "NumOfPapers" field.
func NumOfPapersNEQ(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldNumOfPapers, v))
}

// NumOfPapersIn applies the In predicate on the "NumOfPapers" field.
func NumOfPapersIn(vs ...int32) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldNumOfPapers, vs...))
}

// NumOfPapersNotIn applies the NotIn predicate on the "NumOfPapers" field.
func NumOfPapersNotIn(vs ...int32) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldNumOfPapers, vs...))
}

// NumOfPapersGT applies the GT predicate on the "NumOfPapers" field.
func NumOfPapersGT(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldNumOfPapers, v))
}

// NumOfPapersGTE applies the GTE predicate on the "NumOfPapers" field.
func NumOfPapersGTE(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldNumOfPapers, v))
}

// NumOfPapersLT applies the LT predicate on the "NumOfPapers" field.
func NumOfPapersLT(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldNumOfPapers, v))
}

// NumOfPapersLTE applies the LTE predicate on the "NumOfPapers" field.
func NumOfPapersLTE(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldNumOfPapers, v))
}

// NotificationByEQ applies the EQ predicate on the "NotificationBy" field.
func NotificationByEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldNotificationBy, v))
}

// NotificationByNEQ applies the NEQ predicate on the "NotificationBy" field.
func NotificationByNEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldNotificationBy, v))
}

// NotificationByIn applies the In predicate on the "NotificationBy" field.
func NotificationByIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldNotificationBy, vs...))
}

// NotificationByNotIn applies the NotIn predicate on the "NotificationBy" field.
func NotificationByNotIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldNotificationBy, vs...))
}

// NotificationByGT applies the GT predicate on the "NotificationBy" field.
func NotificationByGT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldNotificationBy, v))
}

// NotificationByGTE applies the GTE predicate on the "NotificationBy" field.
func NotificationByGTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldNotificationBy, v))
}

// NotificationByLT applies the LT predicate on the "NotificationBy" field.
func NotificationByLT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldNotificationBy, v))
}

// NotificationByLTE applies the LTE predicate on the "NotificationBy" field.
func NotificationByLTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldNotificationBy, v))
}

// NotificationByContains applies the Contains predicate on the "NotificationBy" field.
func NotificationByContains(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContains(FieldNotificationBy, v))
}

// NotificationByHasPrefix applies the HasPrefix predicate on the "NotificationBy" field.
func NotificationByHasPrefix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasPrefix(FieldNotificationBy, v))
}

// NotificationByHasSuffix applies the HasSuffix predicate on the "NotificationBy" field.
func NotificationByHasSuffix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasSuffix(FieldNotificationBy, v))
}

// NotificationByEqualFold applies the EqualFold predicate on the "NotificationBy" field.
func NotificationByEqualFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEqualFold(FieldNotificationBy, v))
}

// NotificationByContainsFold applies the ContainsFold predicate on the "NotificationBy" field.
func NotificationByContainsFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContainsFold(FieldNotificationBy, v))
}

// ConductedByEQ applies the EQ predicate on the "ConductedBy" field.
func ConductedByEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldConductedBy, v))
}

// ConductedByNEQ applies the NEQ predicate on the "ConductedBy" field.
func ConductedByNEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldConductedBy, v))
}

// ConductedByIn applies the In predicate on the "ConductedBy" field.
func ConductedByIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldConductedBy, vs...))
}

// ConductedByNotIn applies the NotIn predicate on the "ConductedBy" field.
func ConductedByNotIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldConductedBy, vs...))
}

// ConductedByGT applies the GT predicate on the "ConductedBy" field.
func ConductedByGT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldConductedBy, v))
}

// ConductedByGTE applies the GTE predicate on the "ConductedBy" field.
func ConductedByGTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldConductedBy, v))
}

// ConductedByLT applies the LT predicate on the "ConductedBy" field.
func ConductedByLT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldConductedBy, v))
}

// ConductedByLTE applies the LTE predicate on the "ConductedBy" field.
func ConductedByLTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldConductedBy, v))
}

// ConductedByContains applies the Contains predicate on the "ConductedBy" field.
func ConductedByContains(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContains(FieldConductedBy, v))
}

// ConductedByHasPrefix applies the HasPrefix predicate on the "ConductedBy" field.
func ConductedByHasPrefix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasPrefix(FieldConductedBy, v))
}

// ConductedByHasSuffix applies the HasSuffix predicate on the "ConductedBy" field.
func ConductedByHasSuffix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasSuffix(FieldConductedBy, v))
}

// ConductedByEqualFold applies the EqualFold predicate on the "ConductedBy" field.
func ConductedByEqualFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEqualFold(FieldConductedBy, v))
}

// ConductedByContainsFold applies the ContainsFold predicate on the "ConductedBy" field.
func ConductedByContainsFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContainsFold(FieldConductedBy, v))
}

// NodalOfficerLevelEQ applies the EQ predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldNodalOfficerLevel, v))
}

// NodalOfficerLevelNEQ applies the NEQ predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelNEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldNodalOfficerLevel, v))
}

// NodalOfficerLevelIn applies the In predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldNodalOfficerLevel, vs...))
}

// NodalOfficerLevelNotIn applies the NotIn predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelNotIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldNodalOfficerLevel, vs...))
}

// NodalOfficerLevelGT applies the GT predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelGT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldNodalOfficerLevel, v))
}

// NodalOfficerLevelGTE applies the GTE predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelGTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldNodalOfficerLevel, v))
}

// NodalOfficerLevelLT applies the LT predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelLT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldNodalOfficerLevel, v))
}

// NodalOfficerLevelLTE applies the LTE predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelLTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldNodalOfficerLevel, v))
}

// NodalOfficerLevelContains applies the Contains predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelContains(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContains(FieldNodalOfficerLevel, v))
}

// NodalOfficerLevelHasPrefix applies the HasPrefix predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelHasPrefix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasPrefix(FieldNodalOfficerLevel, v))
}

// NodalOfficerLevelHasSuffix applies the HasSuffix predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelHasSuffix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasSuffix(FieldNodalOfficerLevel, v))
}

// NodalOfficerLevelIsNil applies the IsNil predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldNodalOfficerLevel))
}

// NodalOfficerLevelNotNil applies the NotNil predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldNodalOfficerLevel))
}

// NodalOfficerLevelEqualFold applies the EqualFold predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelEqualFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEqualFold(FieldNodalOfficerLevel, v))
}

// NodalOfficerLevelContainsFold applies the ContainsFold predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelContainsFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContainsFold(FieldNodalOfficerLevel, v))
}

// CalendarCodeEQ applies the EQ predicate on the "CalendarCode" field.
func CalendarCodeEQ(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldCalendarCode, v))
}

// CalendarCodeNEQ applies the NEQ predicate on the "CalendarCode" field.
func CalendarCodeNEQ(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldCalendarCode, v))
}

// CalendarCodeIn applies the In predicate on the "CalendarCode" field.
func CalendarCodeIn(vs ...int32) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldCalendarCode, vs...))
}

// CalendarCodeNotIn applies the NotIn predicate on the "CalendarCode" field.
func CalendarCodeNotIn(vs ...int32) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldCalendarCode, vs...))
}

// CalendarCodeGT applies the GT predicate on the "CalendarCode" field.
func CalendarCodeGT(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldCalendarCode, v))
}

// CalendarCodeGTE applies the GTE predicate on the "CalendarCode" field.
func CalendarCodeGTE(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldCalendarCode, v))
}

// CalendarCodeLT applies the LT predicate on the "CalendarCode" field.
func CalendarCodeLT(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldCalendarCode, v))
}

// CalendarCodeLTE applies the LTE predicate on the "CalendarCode" field.
func CalendarCodeLTE(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldCalendarCode, v))
}

// CalendarCodeIsNil applies the IsNil predicate on the "CalendarCode" field.
func CalendarCodeIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldCalendarCode))
}

// CalendarCodeNotNil applies the NotNil predicate on the "CalendarCode" field.
func CalendarCodeNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldCalendarCode))
}

// PaperCodeEQ applies the EQ predicate on the "PaperCode" field.
func PaperCodeEQ(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldPaperCode, v))
}

// PaperCodeNEQ applies the NEQ predicate on the "PaperCode" field.
func PaperCodeNEQ(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldPaperCode, v))
}

// PaperCodeIn applies the In predicate on the "PaperCode" field.
func PaperCodeIn(vs ...int32) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldPaperCode, vs...))
}

// PaperCodeNotIn applies the NotIn predicate on the "PaperCode" field.
func PaperCodeNotIn(vs ...int32) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldPaperCode, vs...))
}

// PaperCodeGT applies the GT predicate on the "PaperCode" field.
func PaperCodeGT(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldPaperCode, v))
}

// PaperCodeGTE applies the GTE predicate on the "PaperCode" field.
func PaperCodeGTE(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldPaperCode, v))
}

// PaperCodeLT applies the LT predicate on the "PaperCode" field.
func PaperCodeLT(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldPaperCode, v))
}

// PaperCodeLTE applies the LTE predicate on the "PaperCode" field.
func PaperCodeLTE(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldPaperCode, v))
}

// PaperCodeIsNil applies the IsNil predicate on the "PaperCode" field.
func PaperCodeIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldPaperCode))
}

// PaperCodeNotNil applies the NotNil predicate on the "PaperCode" field.
func PaperCodeNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldPaperCode))
}

// ExamTypeEQ applies the EQ predicate on the "ExamType" field.
func ExamTypeEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldExamType, v))
}

// ExamTypeNEQ applies the NEQ predicate on the "ExamType" field.
func ExamTypeNEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldExamType, v))
}

// ExamTypeIn applies the In predicate on the "ExamType" field.
func ExamTypeIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldExamType, vs...))
}

// ExamTypeNotIn applies the NotIn predicate on the "ExamType" field.
func ExamTypeNotIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldExamType, vs...))
}

// ExamTypeGT applies the GT predicate on the "ExamType" field.
func ExamTypeGT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldExamType, v))
}

// ExamTypeGTE applies the GTE predicate on the "ExamType" field.
func ExamTypeGTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldExamType, v))
}

// ExamTypeLT applies the LT predicate on the "ExamType" field.
func ExamTypeLT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldExamType, v))
}

// ExamTypeLTE applies the LTE predicate on the "ExamType" field.
func ExamTypeLTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldExamType, v))
}

// ExamTypeContains applies the Contains predicate on the "ExamType" field.
func ExamTypeContains(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContains(FieldExamType, v))
}

// ExamTypeHasPrefix applies the HasPrefix predicate on the "ExamType" field.
func ExamTypeHasPrefix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasPrefix(FieldExamType, v))
}

// ExamTypeHasSuffix applies the HasSuffix predicate on the "ExamType" field.
func ExamTypeHasSuffix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasSuffix(FieldExamType, v))
}

// ExamTypeEqualFold applies the EqualFold predicate on the "ExamType" field.
func ExamTypeEqualFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEqualFold(FieldExamType, v))
}

// ExamTypeContainsFold applies the ContainsFold predicate on the "ExamType" field.
func ExamTypeContainsFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContainsFold(FieldExamType, v))
}

// TentativeNotificationMandatoryDateEQ applies the EQ predicate on the "TentativeNotificationMandatoryDate" field.
func TentativeNotificationMandatoryDateEQ(v bool) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldTentativeNotificationMandatoryDate, v))
}

// TentativeNotificationMandatoryDateNEQ applies the NEQ predicate on the "TentativeNotificationMandatoryDate" field.
func TentativeNotificationMandatoryDateNEQ(v bool) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldTentativeNotificationMandatoryDate, v))
}

// LocalLanguageEQ applies the EQ predicate on the "LocalLanguage" field.
func LocalLanguageEQ(v bool) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldLocalLanguage, v))
}

// LocalLanguageNEQ applies the NEQ predicate on the "LocalLanguage" field.
func LocalLanguageNEQ(v bool) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldLocalLanguage, v))
}

// OptionForPostEQ applies the EQ predicate on the "OptionForPost" field.
func OptionForPostEQ(v bool) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldOptionForPost, v))
}

// OptionForPostNEQ applies the NEQ predicate on the "OptionForPost" field.
func OptionForPostNEQ(v bool) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldOptionForPost, v))
}

// OptionToWriteExamOtherThanParentEQ applies the EQ predicate on the "OptionToWriteExamOtherThanParent" field.
func OptionToWriteExamOtherThanParentEQ(v bool) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldOptionToWriteExamOtherThanParent, v))
}

// OptionToWriteExamOtherThanParentNEQ applies the NEQ predicate on the "OptionToWriteExamOtherThanParent" field.
func OptionToWriteExamOtherThanParentNEQ(v bool) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldOptionToWriteExamOtherThanParent, v))
}

// OrderNumberEQ applies the EQ predicate on the "OrderNumber" field.
func OrderNumberEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldOrderNumber, v))
}

// OrderNumberNEQ applies the NEQ predicate on the "OrderNumber" field.
func OrderNumberNEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldOrderNumber, v))
}

// OrderNumberIn applies the In predicate on the "OrderNumber" field.
func OrderNumberIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldOrderNumber, vs...))
}

// OrderNumberNotIn applies the NotIn predicate on the "OrderNumber" field.
func OrderNumberNotIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldOrderNumber, vs...))
}

// OrderNumberGT applies the GT predicate on the "OrderNumber" field.
func OrderNumberGT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldOrderNumber, v))
}

// OrderNumberGTE applies the GTE predicate on the "OrderNumber" field.
func OrderNumberGTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldOrderNumber, v))
}

// OrderNumberLT applies the LT predicate on the "OrderNumber" field.
func OrderNumberLT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldOrderNumber, v))
}

// OrderNumberLTE applies the LTE predicate on the "OrderNumber" field.
func OrderNumberLTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldOrderNumber, v))
}

// OrderNumberContains applies the Contains predicate on the "OrderNumber" field.
func OrderNumberContains(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContains(FieldOrderNumber, v))
}

// OrderNumberHasPrefix applies the HasPrefix predicate on the "OrderNumber" field.
func OrderNumberHasPrefix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasPrefix(FieldOrderNumber, v))
}

// OrderNumberHasSuffix applies the HasSuffix predicate on the "OrderNumber" field.
func OrderNumberHasSuffix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasSuffix(FieldOrderNumber, v))
}

// OrderNumberIsNil applies the IsNil predicate on the "OrderNumber" field.
func OrderNumberIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldOrderNumber))
}

// OrderNumberNotNil applies the NotNil predicate on the "OrderNumber" field.
func OrderNumberNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldOrderNumber))
}

// OrderNumberEqualFold applies the EqualFold predicate on the "OrderNumber" field.
func OrderNumberEqualFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEqualFold(FieldOrderNumber, v))
}

// OrderNumberContainsFold applies the ContainsFold predicate on the "OrderNumber" field.
func OrderNumberContainsFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContainsFold(FieldOrderNumber, v))
}

// StatusEQ applies the EQ predicate on the "Status" field.
func StatusEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "Status" field.
func StatusNEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "Status" field.
func StatusIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "Status" field.
func StatusNotIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "Status" field.
func StatusGT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "Status" field.
func StatusGTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "Status" field.
func StatusLT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "Status" field.
func StatusLTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "Status" field.
func StatusContains(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "Status" field.
func StatusHasPrefix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "Status" field.
func StatusHasSuffix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "Status" field.
func StatusEqualFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "Status" field.
func StatusContainsFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContainsFold(FieldStatus, v))
}

// ExamTypeCodeEQ applies the EQ predicate on the "ExamTypeCode" field.
func ExamTypeCodeEQ(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldExamTypeCode, v))
}

// ExamTypeCodeNEQ applies the NEQ predicate on the "ExamTypeCode" field.
func ExamTypeCodeNEQ(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldExamTypeCode, v))
}

// ExamTypeCodeIn applies the In predicate on the "ExamTypeCode" field.
func ExamTypeCodeIn(vs ...int32) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldExamTypeCode, vs...))
}

// ExamTypeCodeNotIn applies the NotIn predicate on the "ExamTypeCode" field.
func ExamTypeCodeNotIn(vs ...int32) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldExamTypeCode, vs...))
}

// ExamTypeCodeGT applies the GT predicate on the "ExamTypeCode" field.
func ExamTypeCodeGT(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldExamTypeCode, v))
}

// ExamTypeCodeGTE applies the GTE predicate on the "ExamTypeCode" field.
func ExamTypeCodeGTE(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldExamTypeCode, v))
}

// ExamTypeCodeLT applies the LT predicate on the "ExamTypeCode" field.
func ExamTypeCodeLT(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldExamTypeCode, v))
}

// ExamTypeCodeLTE applies the LTE predicate on the "ExamTypeCode" field.
func ExamTypeCodeLTE(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldExamTypeCode, v))
}

// ExamTypeCodeIsNil applies the IsNil predicate on the "ExamTypeCode" field.
func ExamTypeCodeIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldExamTypeCode))
}

// ExamTypeCodeNotNil applies the NotNil predicate on the "ExamTypeCode" field.
func ExamTypeCodeNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldExamTypeCode))
}

// HasNodalOfficers applies the HasEdge predicate on the "nodal_officers" edge.
func HasNodalOfficers() predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NodalOfficersTable, NodalOfficersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNodalOfficersWith applies the HasEdge predicate on the "nodal_officers" edge with a given conditions (other predicates).
func HasNodalOfficersWith(preds ...predicate.NodalOfficer) predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := newNodalOfficersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNotifications applies the HasEdge predicate on the "notifications" edge.
func HasNotifications() predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NotificationsTable, NotificationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotificationsWith applies the HasEdge predicate on the "notifications" edge with a given conditions (other predicates).
func HasNotificationsWith(preds ...predicate.Notification) predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := newNotificationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamsRef applies the HasEdge predicate on the "exams_ref" edge.
func HasExamsRef() predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamsRefTable, ExamsRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamsRefWith applies the HasEdge predicate on the "exams_ref" edge with a given conditions (other predicates).
func HasExamsRefWith(preds ...predicate.ExamCalendar) predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := newExamsRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPapers applies the HasEdge predicate on the "papers" edge.
func HasPapers() predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PapersTable, PapersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPapersWith applies the HasEdge predicate on the "papers" edge with a given conditions (other predicates).
func HasPapersWith(preds ...predicate.ExamPapers) predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := newPapersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamEligibility applies the HasEdge predicate on the "ExamEligibility" edge.
func HasExamEligibility() predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamEligibilityTable, ExamEligibilityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamEligibilityWith applies the HasEdge predicate on the "ExamEligibility" edge with a given conditions (other predicates).
func HasExamEligibilityWith(preds ...predicate.EligibilityMaster) predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := newExamEligibilityStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamsType applies the HasEdge predicate on the "exams_type" edge.
func HasExamsType() predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamsTypeTable, ExamsTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamsTypeWith applies the HasEdge predicate on the "exams_type" edge with a given conditions (other predicates).
func HasExamsTypeWith(preds ...predicate.ExamType) predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := newExamsTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Exam) predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Exam) predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Exam) predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		p(s.Not())
	})
}
