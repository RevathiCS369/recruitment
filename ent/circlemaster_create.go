// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/circlemaster"
	"recruit/ent/facility"
	"recruit/ent/regionmaster"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CircleMasterCreate is the builder for creating a CircleMaster entity.
type CircleMasterCreate struct {
	config
	mutation *CircleMasterMutation
	hooks    []Hook
}

// SetCircleCode sets the "CircleCode" field.
func (cmc *CircleMasterCreate) SetCircleCode(i int32) *CircleMasterCreate {
	cmc.mutation.SetCircleCode(i)
	return cmc
}

// SetCircleOfficeId sets the "CircleOfficeId" field.
func (cmc *CircleMasterCreate) SetCircleOfficeId(s string) *CircleMasterCreate {
	cmc.mutation.SetCircleOfficeId(s)
	return cmc
}

// SetCircleOfficeName sets the "CircleOfficeName" field.
func (cmc *CircleMasterCreate) SetCircleOfficeName(s string) *CircleMasterCreate {
	cmc.mutation.SetCircleOfficeName(s)
	return cmc
}

// SetOfficeType sets the "OfficeType" field.
func (cmc *CircleMasterCreate) SetOfficeType(s string) *CircleMasterCreate {
	cmc.mutation.SetOfficeType(s)
	return cmc
}

// SetEmailID sets the "EmailID" field.
func (cmc *CircleMasterCreate) SetEmailID(s string) *CircleMasterCreate {
	cmc.mutation.SetEmailID(s)
	return cmc
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (cmc *CircleMasterCreate) SetNillableEmailID(s *string) *CircleMasterCreate {
	if s != nil {
		cmc.SetEmailID(*s)
	}
	return cmc
}

// SetMobileNumber sets the "MobileNumber" field.
func (cmc *CircleMasterCreate) SetMobileNumber(i int32) *CircleMasterCreate {
	cmc.mutation.SetMobileNumber(i)
	return cmc
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (cmc *CircleMasterCreate) SetNillableMobileNumber(i *int32) *CircleMasterCreate {
	if i != nil {
		cmc.SetMobileNumber(*i)
	}
	return cmc
}

// SetID sets the "id" field.
func (cmc *CircleMasterCreate) SetID(i int32) *CircleMasterCreate {
	cmc.mutation.SetID(i)
	return cmc
}

// AddRegionRefIDs adds the "region_ref" edge to the RegionMaster entity by IDs.
func (cmc *CircleMasterCreate) AddRegionRefIDs(ids ...int32) *CircleMasterCreate {
	cmc.mutation.AddRegionRefIDs(ids...)
	return cmc
}

// AddRegionRef adds the "region_ref" edges to the RegionMaster entity.
func (cmc *CircleMasterCreate) AddRegionRef(r ...*RegionMaster) *CircleMasterCreate {
	ids := make([]int32, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cmc.AddRegionRefIDs(ids...)
}

// AddCircleRefIDs adds the "circle_ref" edge to the Facility entity by IDs.
func (cmc *CircleMasterCreate) AddCircleRefIDs(ids ...int32) *CircleMasterCreate {
	cmc.mutation.AddCircleRefIDs(ids...)
	return cmc
}

// AddCircleRef adds the "circle_ref" edges to the Facility entity.
func (cmc *CircleMasterCreate) AddCircleRef(f ...*Facility) *CircleMasterCreate {
	ids := make([]int32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cmc.AddCircleRefIDs(ids...)
}

// Mutation returns the CircleMasterMutation object of the builder.
func (cmc *CircleMasterCreate) Mutation() *CircleMasterMutation {
	return cmc.mutation
}

// Save creates the CircleMaster in the database.
func (cmc *CircleMasterCreate) Save(ctx context.Context) (*CircleMaster, error) {
	return withHooks(ctx, cmc.sqlSave, cmc.mutation, cmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cmc *CircleMasterCreate) SaveX(ctx context.Context) *CircleMaster {
	v, err := cmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmc *CircleMasterCreate) Exec(ctx context.Context) error {
	_, err := cmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmc *CircleMasterCreate) ExecX(ctx context.Context) {
	if err := cmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmc *CircleMasterCreate) check() error {
	if _, ok := cmc.mutation.CircleCode(); !ok {
		return &ValidationError{Name: "CircleCode", err: errors.New(`ent: missing required field "CircleMaster.CircleCode"`)}
	}
	if _, ok := cmc.mutation.CircleOfficeId(); !ok {
		return &ValidationError{Name: "CircleOfficeId", err: errors.New(`ent: missing required field "CircleMaster.CircleOfficeId"`)}
	}
	if _, ok := cmc.mutation.CircleOfficeName(); !ok {
		return &ValidationError{Name: "CircleOfficeName", err: errors.New(`ent: missing required field "CircleMaster.CircleOfficeName"`)}
	}
	if _, ok := cmc.mutation.OfficeType(); !ok {
		return &ValidationError{Name: "OfficeType", err: errors.New(`ent: missing required field "CircleMaster.OfficeType"`)}
	}
	return nil
}

func (cmc *CircleMasterCreate) sqlSave(ctx context.Context) (*CircleMaster, error) {
	if err := cmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	cmc.mutation.id = &_node.ID
	cmc.mutation.done = true
	return _node, nil
}

func (cmc *CircleMasterCreate) createSpec() (*CircleMaster, *sqlgraph.CreateSpec) {
	var (
		_node = &CircleMaster{config: cmc.config}
		_spec = sqlgraph.NewCreateSpec(circlemaster.Table, sqlgraph.NewFieldSpec(circlemaster.FieldID, field.TypeInt32))
	)
	if id, ok := cmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cmc.mutation.CircleCode(); ok {
		_spec.SetField(circlemaster.FieldCircleCode, field.TypeInt32, value)
		_node.CircleCode = value
	}
	if value, ok := cmc.mutation.CircleOfficeId(); ok {
		_spec.SetField(circlemaster.FieldCircleOfficeId, field.TypeString, value)
		_node.CircleOfficeId = value
	}
	if value, ok := cmc.mutation.CircleOfficeName(); ok {
		_spec.SetField(circlemaster.FieldCircleOfficeName, field.TypeString, value)
		_node.CircleOfficeName = value
	}
	if value, ok := cmc.mutation.OfficeType(); ok {
		_spec.SetField(circlemaster.FieldOfficeType, field.TypeString, value)
		_node.OfficeType = value
	}
	if value, ok := cmc.mutation.EmailID(); ok {
		_spec.SetField(circlemaster.FieldEmailID, field.TypeString, value)
		_node.EmailID = value
	}
	if value, ok := cmc.mutation.MobileNumber(); ok {
		_spec.SetField(circlemaster.FieldMobileNumber, field.TypeInt32, value)
		_node.MobileNumber = value
	}
	if nodes := cmc.mutation.RegionRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlemaster.RegionRefTable,
			Columns: []string{circlemaster.RegionRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionmaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cmc.mutation.CircleRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlemaster.CircleRefTable,
			Columns: []string{circlemaster.CircleRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CircleMasterCreateBulk is the builder for creating many CircleMaster entities in bulk.
type CircleMasterCreateBulk struct {
	config
	builders []*CircleMasterCreate
}

// Save creates the CircleMaster entities in the database.
func (cmcb *CircleMasterCreateBulk) Save(ctx context.Context) ([]*CircleMaster, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cmcb.builders))
	nodes := make([]*CircleMaster, len(cmcb.builders))
	mutators := make([]Mutator, len(cmcb.builders))
	for i := range cmcb.builders {
		func(i int, root context.Context) {
			builder := cmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CircleMasterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cmcb *CircleMasterCreateBulk) SaveX(ctx context.Context) []*CircleMaster {
	v, err := cmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmcb *CircleMasterCreateBulk) Exec(ctx context.Context) error {
	_, err := cmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmcb *CircleMasterCreateBulk) ExecX(ctx context.Context) {
	if err := cmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
