// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/exam_applications_ps"
	"recruit/ent/exam_ps"
	"recruit/ent/facility"
	"recruit/ent/rolemaster"
	"recruit/ent/usermaster"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamApplicationsPSCreate is the builder for creating a Exam_Applications_PS entity.
type ExamApplicationsPSCreate struct {
	config
	mutation *ExamApplicationsPSMutation
	hooks    []Hook
}

// SetApplicationNumber sets the "ApplicationNumber" field.
func (eapc *ExamApplicationsPSCreate) SetApplicationNumber(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetApplicationNumber(s)
	return eapc
}

// SetNillableApplicationNumber sets the "ApplicationNumber" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableApplicationNumber(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetApplicationNumber(*s)
	}
	return eapc
}

// SetEmployeeID sets the "EmployeeID" field.
func (eapc *ExamApplicationsPSCreate) SetEmployeeID(i int64) *ExamApplicationsPSCreate {
	eapc.mutation.SetEmployeeID(i)
	return eapc
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableEmployeeID(i *int64) *ExamApplicationsPSCreate {
	if i != nil {
		eapc.SetEmployeeID(*i)
	}
	return eapc
}

// SetEmployeeName sets the "EmployeeName" field.
func (eapc *ExamApplicationsPSCreate) SetEmployeeName(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetEmployeeName(s)
	return eapc
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableEmployeeName(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetEmployeeName(*s)
	}
	return eapc
}

// SetDOB sets the "DOB" field.
func (eapc *ExamApplicationsPSCreate) SetDOB(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetDOB(s)
	return eapc
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableDOB(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetDOB(*s)
	}
	return eapc
}

// SetGender sets the "Gender" field.
func (eapc *ExamApplicationsPSCreate) SetGender(eap exam_applications_ps.Gender) *ExamApplicationsPSCreate {
	eapc.mutation.SetGender(eap)
	return eapc
}

// SetMobileNumber sets the "MobileNumber" field.
func (eapc *ExamApplicationsPSCreate) SetMobileNumber(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetMobileNumber(s)
	return eapc
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableMobileNumber(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetMobileNumber(*s)
	}
	return eapc
}

// SetEmailID sets the "EmailID" field.
func (eapc *ExamApplicationsPSCreate) SetEmailID(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetEmailID(s)
	return eapc
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableEmailID(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetEmailID(*s)
	}
	return eapc
}

// SetEmployeeCategory sets the "EmployeeCategory" field.
func (eapc *ExamApplicationsPSCreate) SetEmployeeCategory(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetEmployeeCategory(s)
	return eapc
}

// SetNillableEmployeeCategory sets the "EmployeeCategory" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableEmployeeCategory(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetEmployeeCategory(*s)
	}
	return eapc
}

// SetCadre sets the "Cadre" field.
func (eapc *ExamApplicationsPSCreate) SetCadre(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetCadre(s)
	return eapc
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableCadre(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetCadre(*s)
	}
	return eapc
}

// SetEmployeePost sets the "EmployeePost" field.
func (eapc *ExamApplicationsPSCreate) SetEmployeePost(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetEmployeePost(s)
	return eapc
}

// SetNillableEmployeePost sets the "EmployeePost" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableEmployeePost(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetEmployeePost(*s)
	}
	return eapc
}

// SetFacilityID sets the "FacilityID" field.
func (eapc *ExamApplicationsPSCreate) SetFacilityID(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetFacilityID(s)
	return eapc
}

// SetNillableFacilityID sets the "FacilityID" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableFacilityID(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetFacilityID(*s)
	}
	return eapc
}

// SetDCCS sets the "DCCS" field.
func (eapc *ExamApplicationsPSCreate) SetDCCS(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetDCCS(s)
	return eapc
}

// SetNillableDCCS sets the "DCCS" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableDCCS(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetDCCS(*s)
	}
	return eapc
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (eapc *ExamApplicationsPSCreate) SetDCInPresentCadre(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetDCInPresentCadre(s)
	return eapc
}

// SetNillableDCInPresentCadre sets the "DCInPresentCadre" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableDCInPresentCadre(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetDCInPresentCadre(*s)
	}
	return eapc
}

// SetDeputationOfficeId sets the "DeputationOfficeId" field.
func (eapc *ExamApplicationsPSCreate) SetDeputationOfficeId(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetDeputationOfficeId(s)
	return eapc
}

// SetNillableDeputationOfficeId sets the "DeputationOfficeId" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableDeputationOfficeId(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetDeputationOfficeId(*s)
	}
	return eapc
}

// SetDisabilityType sets the "DisabilityType" field.
func (eapc *ExamApplicationsPSCreate) SetDisabilityType(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetDisabilityType(s)
	return eapc
}

// SetNillableDisabilityType sets the "DisabilityType" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableDisabilityType(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetDisabilityType(*s)
	}
	return eapc
}

// SetDisabilityPercentage sets the "DisabilityPercentage" field.
func (eapc *ExamApplicationsPSCreate) SetDisabilityPercentage(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetDisabilityPercentage(s)
	return eapc
}

// SetNillableDisabilityPercentage sets the "DisabilityPercentage" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableDisabilityPercentage(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetDisabilityPercentage(*s)
	}
	return eapc
}

// SetEducation sets the "Education" field.
func (eapc *ExamApplicationsPSCreate) SetEducation(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetEducation(s)
	return eapc
}

// SetNillableEducation sets the "Education" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableEducation(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetEducation(*s)
	}
	return eapc
}

// SetExamNameCode sets the "ExamNameCode" field.
func (eapc *ExamApplicationsPSCreate) SetExamNameCode(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetExamNameCode(s)
	return eapc
}

// SetNillableExamNameCode sets the "ExamNameCode" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableExamNameCode(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetExamNameCode(*s)
	}
	return eapc
}

// SetExamYear sets the "ExamYear" field.
func (eapc *ExamApplicationsPSCreate) SetExamYear(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetExamYear(s)
	return eapc
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableExamYear(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetExamYear(*s)
	}
	return eapc
}

// SetExamName sets the "ExamName" field.
func (eapc *ExamApplicationsPSCreate) SetExamName(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetExamName(s)
	return eapc
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableExamName(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetExamName(*s)
	}
	return eapc
}

// SetCentrePreference sets the "CentrePreference" field.
func (eapc *ExamApplicationsPSCreate) SetCentrePreference(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetCentrePreference(s)
	return eapc
}

// SetNillableCentrePreference sets the "CentrePreference" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableCentrePreference(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetCentrePreference(*s)
	}
	return eapc
}

// SetSignature sets the "Signature" field.
func (eapc *ExamApplicationsPSCreate) SetSignature(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetSignature(s)
	return eapc
}

// SetNillableSignature sets the "Signature" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableSignature(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetSignature(*s)
	}
	return eapc
}

// SetPhoto sets the "Photo" field.
func (eapc *ExamApplicationsPSCreate) SetPhoto(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetPhoto(s)
	return eapc
}

// SetNillablePhoto sets the "Photo" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillablePhoto(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetPhoto(*s)
	}
	return eapc
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (eapc *ExamApplicationsPSCreate) SetApplicationStatus(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetApplicationStatus(s)
	return eapc
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableApplicationStatus(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetApplicationStatus(*s)
	}
	return eapc
}

// SetApplnSubmittedDate sets the "ApplnSubmittedDate" field.
func (eapc *ExamApplicationsPSCreate) SetApplnSubmittedDate(t time.Time) *ExamApplicationsPSCreate {
	eapc.mutation.SetApplnSubmittedDate(t)
	return eapc
}

// SetNillableApplnSubmittedDate sets the "ApplnSubmittedDate" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableApplnSubmittedDate(t *time.Time) *ExamApplicationsPSCreate {
	if t != nil {
		eapc.SetApplnSubmittedDate(*t)
	}
	return eapc
}

// SetVARemarks sets the "VA_Remarks" field.
func (eapc *ExamApplicationsPSCreate) SetVARemarks(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetVARemarks(s)
	return eapc
}

// SetNillableVARemarks sets the "VA_Remarks" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableVARemarks(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetVARemarks(*s)
	}
	return eapc
}

// SetVAUserName sets the "VA_UserName" field.
func (eapc *ExamApplicationsPSCreate) SetVAUserName(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetVAUserName(s)
	return eapc
}

// SetNillableVAUserName sets the "VA_UserName" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableVAUserName(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetVAUserName(*s)
	}
	return eapc
}

// SetVADate sets the "VA_Date" field.
func (eapc *ExamApplicationsPSCreate) SetVADate(t time.Time) *ExamApplicationsPSCreate {
	eapc.mutation.SetVADate(t)
	return eapc
}

// SetNillableVADate sets the "VA_Date" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableVADate(t *time.Time) *ExamApplicationsPSCreate {
	if t != nil {
		eapc.SetVADate(*t)
	}
	return eapc
}

// SetCARemarks sets the "CA_Remarks" field.
func (eapc *ExamApplicationsPSCreate) SetCARemarks(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetCARemarks(s)
	return eapc
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableCARemarks(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetCARemarks(*s)
	}
	return eapc
}

// SetCAUserName sets the "CA_UserName" field.
func (eapc *ExamApplicationsPSCreate) SetCAUserName(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetCAUserName(s)
	return eapc
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableCAUserName(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetCAUserName(*s)
	}
	return eapc
}

// SetCADate sets the "CA_Date" field.
func (eapc *ExamApplicationsPSCreate) SetCADate(t time.Time) *ExamApplicationsPSCreate {
	eapc.mutation.SetCADate(t)
	return eapc
}

// SetNillableCADate sets the "CA_Date" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableCADate(t *time.Time) *ExamApplicationsPSCreate {
	if t != nil {
		eapc.SetCADate(*t)
	}
	return eapc
}

// SetApplicationWdlDate sets the "ApplicationWdlDate" field.
func (eapc *ExamApplicationsPSCreate) SetApplicationWdlDate(t time.Time) *ExamApplicationsPSCreate {
	eapc.mutation.SetApplicationWdlDate(t)
	return eapc
}

// SetNillableApplicationWdlDate sets the "ApplicationWdlDate" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableApplicationWdlDate(t *time.Time) *ExamApplicationsPSCreate {
	if t != nil {
		eapc.SetApplicationWdlDate(*t)
	}
	return eapc
}

// SetNARemarks sets the "NA_Remarks" field.
func (eapc *ExamApplicationsPSCreate) SetNARemarks(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetNARemarks(s)
	return eapc
}

// SetNillableNARemarks sets the "NA_Remarks" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableNARemarks(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetNARemarks(*s)
	}
	return eapc
}

// SetNAUserName sets the "NA_UserName" field.
func (eapc *ExamApplicationsPSCreate) SetNAUserName(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetNAUserName(s)
	return eapc
}

// SetNillableNAUserName sets the "NA_UserName" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableNAUserName(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetNAUserName(*s)
	}
	return eapc
}

// SetNADate sets the "NA_Date" field.
func (eapc *ExamApplicationsPSCreate) SetNADate(t time.Time) *ExamApplicationsPSCreate {
	eapc.mutation.SetNADate(t)
	return eapc
}

// SetNillableNADate sets the "NA_Date" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableNADate(t *time.Time) *ExamApplicationsPSCreate {
	if t != nil {
		eapc.SetNADate(*t)
	}
	return eapc
}

// SetAppliactionRemarks sets the "AppliactionRemarks" field.
func (eapc *ExamApplicationsPSCreate) SetAppliactionRemarks(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetAppliactionRemarks(s)
	return eapc
}

// SetNillableAppliactionRemarks sets the "AppliactionRemarks" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableAppliactionRemarks(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetAppliactionRemarks(*s)
	}
	return eapc
}

// SetCadrePreferences sets the "CadrePreferences" field.
func (eapc *ExamApplicationsPSCreate) SetCadrePreferences(i []interface{}) *ExamApplicationsPSCreate {
	eapc.mutation.SetCadrePreferences(i)
	return eapc
}

// SetDivisionPreferences sets the "DivisionPreferences" field.
func (eapc *ExamApplicationsPSCreate) SetDivisionPreferences(i []interface{}) *ExamApplicationsPSCreate {
	eapc.mutation.SetDivisionPreferences(i)
	return eapc
}

// SetCirclePreferences sets the "CirclePreferences" field.
func (eapc *ExamApplicationsPSCreate) SetCirclePreferences(i []interface{}) *ExamApplicationsPSCreate {
	eapc.mutation.SetCirclePreferences(i)
	return eapc
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (eapc *ExamApplicationsPSCreate) SetUpdatedAt(t time.Time) *ExamApplicationsPSCreate {
	eapc.mutation.SetUpdatedAt(t)
	return eapc
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableUpdatedAt(t *time.Time) *ExamApplicationsPSCreate {
	if t != nil {
		eapc.SetUpdatedAt(*t)
	}
	return eapc
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (eapc *ExamApplicationsPSCreate) SetUpdatedBy(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetUpdatedBy(s)
	return eapc
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableUpdatedBy(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetUpdatedBy(*s)
	}
	return eapc
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (eapc *ExamApplicationsPSCreate) SetRoleUserCode(i int32) *ExamApplicationsPSCreate {
	eapc.mutation.SetRoleUserCode(i)
	return eapc
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableRoleUserCode(i *int32) *ExamApplicationsPSCreate {
	if i != nil {
		eapc.SetRoleUserCode(*i)
	}
	return eapc
}

// SetID sets the "id" field.
func (eapc *ExamApplicationsPSCreate) SetID(i int64) *ExamApplicationsPSCreate {
	eapc.mutation.SetID(i)
	return eapc
}

// AddUsersPSRefIDs adds the "UsersPSRef" edge to the UserMaster entity by IDs.
func (eapc *ExamApplicationsPSCreate) AddUsersPSRefIDs(ids ...int64) *ExamApplicationsPSCreate {
	eapc.mutation.AddUsersPSRefIDs(ids...)
	return eapc
}

// AddUsersPSRef adds the "UsersPSRef" edges to the UserMaster entity.
func (eapc *ExamApplicationsPSCreate) AddUsersPSRef(u ...*UserMaster) *ExamApplicationsPSCreate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eapc.AddUsersPSRefIDs(ids...)
}

// AddExamApplnPSRefIDs adds the "ExamAppln_PS_Ref" edge to the Exam_PS entity by IDs.
func (eapc *ExamApplicationsPSCreate) AddExamApplnPSRefIDs(ids ...int32) *ExamApplicationsPSCreate {
	eapc.mutation.AddExamApplnPSRefIDs(ids...)
	return eapc
}

// AddExamApplnPSRef adds the "ExamAppln_PS_Ref" edges to the Exam_PS entity.
func (eapc *ExamApplicationsPSCreate) AddExamApplnPSRef(e ...*Exam_PS) *ExamApplicationsPSCreate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eapc.AddExamApplnPSRefIDs(ids...)
}

// AddOfficePSRefIDs adds the "Office_PS_Ref" edge to the Facility entity by IDs.
func (eapc *ExamApplicationsPSCreate) AddOfficePSRefIDs(ids ...int32) *ExamApplicationsPSCreate {
	eapc.mutation.AddOfficePSRefIDs(ids...)
	return eapc
}

// AddOfficePSRef adds the "Office_PS_Ref" edges to the Facility entity.
func (eapc *ExamApplicationsPSCreate) AddOfficePSRef(f ...*Facility) *ExamApplicationsPSCreate {
	ids := make([]int32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eapc.AddOfficePSRefIDs(ids...)
}

// SetRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID.
func (eapc *ExamApplicationsPSCreate) SetRoleusersID(id int32) *ExamApplicationsPSCreate {
	eapc.mutation.SetRoleusersID(id)
	return eapc
}

// SetNillableRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableRoleusersID(id *int32) *ExamApplicationsPSCreate {
	if id != nil {
		eapc = eapc.SetRoleusersID(*id)
	}
	return eapc
}

// SetRoleusers sets the "roleusers" edge to the RoleMaster entity.
func (eapc *ExamApplicationsPSCreate) SetRoleusers(r *RoleMaster) *ExamApplicationsPSCreate {
	return eapc.SetRoleusersID(r.ID)
}

// Mutation returns the ExamApplicationsPSMutation object of the builder.
func (eapc *ExamApplicationsPSCreate) Mutation() *ExamApplicationsPSMutation {
	return eapc.mutation
}

// Save creates the Exam_Applications_PS in the database.
func (eapc *ExamApplicationsPSCreate) Save(ctx context.Context) (*Exam_Applications_PS, error) {
	eapc.defaults()
	return withHooks(ctx, eapc.sqlSave, eapc.mutation, eapc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (eapc *ExamApplicationsPSCreate) SaveX(ctx context.Context) *Exam_Applications_PS {
	v, err := eapc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eapc *ExamApplicationsPSCreate) Exec(ctx context.Context) error {
	_, err := eapc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eapc *ExamApplicationsPSCreate) ExecX(ctx context.Context) {
	if err := eapc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eapc *ExamApplicationsPSCreate) defaults() {
	if _, ok := eapc.mutation.ApplnSubmittedDate(); !ok {
		v := exam_applications_ps.DefaultApplnSubmittedDate()
		eapc.mutation.SetApplnSubmittedDate(v)
	}
	if _, ok := eapc.mutation.UpdatedAt(); !ok {
		v := exam_applications_ps.DefaultUpdatedAt()
		eapc.mutation.SetUpdatedAt(v)
	}
	if _, ok := eapc.mutation.UpdatedBy(); !ok {
		v := exam_applications_ps.DefaultUpdatedBy
		eapc.mutation.SetUpdatedBy(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eapc *ExamApplicationsPSCreate) check() error {
	if _, ok := eapc.mutation.Gender(); !ok {
		return &ValidationError{Name: "Gender", err: errors.New(`ent: missing required field "Exam_Applications_PS.Gender"`)}
	}
	if v, ok := eapc.mutation.Gender(); ok {
		if err := exam_applications_ps.GenderValidator(v); err != nil {
			return &ValidationError{Name: "Gender", err: fmt.Errorf(`ent: validator failed for field "Exam_Applications_PS.Gender": %w`, err)}
		}
	}
	return nil
}

func (eapc *ExamApplicationsPSCreate) sqlSave(ctx context.Context) (*Exam_Applications_PS, error) {
	if err := eapc.check(); err != nil {
		return nil, err
	}
	_node, _spec := eapc.createSpec()
	if err := sqlgraph.CreateNode(ctx, eapc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	eapc.mutation.id = &_node.ID
	eapc.mutation.done = true
	return _node, nil
}

func (eapc *ExamApplicationsPSCreate) createSpec() (*Exam_Applications_PS, *sqlgraph.CreateSpec) {
	var (
		_node = &Exam_Applications_PS{config: eapc.config}
		_spec = sqlgraph.NewCreateSpec(exam_applications_ps.Table, sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64))
	)
	if id, ok := eapc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := eapc.mutation.ApplicationNumber(); ok {
		_spec.SetField(exam_applications_ps.FieldApplicationNumber, field.TypeString, value)
		_node.ApplicationNumber = value
	}
	if value, ok := eapc.mutation.EmployeeID(); ok {
		_spec.SetField(exam_applications_ps.FieldEmployeeID, field.TypeInt64, value)
		_node.EmployeeID = value
	}
	if value, ok := eapc.mutation.EmployeeName(); ok {
		_spec.SetField(exam_applications_ps.FieldEmployeeName, field.TypeString, value)
		_node.EmployeeName = value
	}
	if value, ok := eapc.mutation.DOB(); ok {
		_spec.SetField(exam_applications_ps.FieldDOB, field.TypeString, value)
		_node.DOB = value
	}
	if value, ok := eapc.mutation.Gender(); ok {
		_spec.SetField(exam_applications_ps.FieldGender, field.TypeEnum, value)
		_node.Gender = value
	}
	if value, ok := eapc.mutation.MobileNumber(); ok {
		_spec.SetField(exam_applications_ps.FieldMobileNumber, field.TypeString, value)
		_node.MobileNumber = value
	}
	if value, ok := eapc.mutation.EmailID(); ok {
		_spec.SetField(exam_applications_ps.FieldEmailID, field.TypeString, value)
		_node.EmailID = value
	}
	if value, ok := eapc.mutation.EmployeeCategory(); ok {
		_spec.SetField(exam_applications_ps.FieldEmployeeCategory, field.TypeString, value)
		_node.EmployeeCategory = value
	}
	if value, ok := eapc.mutation.Cadre(); ok {
		_spec.SetField(exam_applications_ps.FieldCadre, field.TypeString, value)
		_node.Cadre = value
	}
	if value, ok := eapc.mutation.EmployeePost(); ok {
		_spec.SetField(exam_applications_ps.FieldEmployeePost, field.TypeString, value)
		_node.EmployeePost = value
	}
	if value, ok := eapc.mutation.FacilityID(); ok {
		_spec.SetField(exam_applications_ps.FieldFacilityID, field.TypeString, value)
		_node.FacilityID = value
	}
	if value, ok := eapc.mutation.DCCS(); ok {
		_spec.SetField(exam_applications_ps.FieldDCCS, field.TypeString, value)
		_node.DCCS = value
	}
	if value, ok := eapc.mutation.DCInPresentCadre(); ok {
		_spec.SetField(exam_applications_ps.FieldDCInPresentCadre, field.TypeString, value)
		_node.DCInPresentCadre = value
	}
	if value, ok := eapc.mutation.DeputationOfficeId(); ok {
		_spec.SetField(exam_applications_ps.FieldDeputationOfficeId, field.TypeString, value)
		_node.DeputationOfficeId = value
	}
	if value, ok := eapc.mutation.DisabilityType(); ok {
		_spec.SetField(exam_applications_ps.FieldDisabilityType, field.TypeString, value)
		_node.DisabilityType = value
	}
	if value, ok := eapc.mutation.DisabilityPercentage(); ok {
		_spec.SetField(exam_applications_ps.FieldDisabilityPercentage, field.TypeString, value)
		_node.DisabilityPercentage = value
	}
	if value, ok := eapc.mutation.Education(); ok {
		_spec.SetField(exam_applications_ps.FieldEducation, field.TypeString, value)
		_node.Education = value
	}
	if value, ok := eapc.mutation.ExamNameCode(); ok {
		_spec.SetField(exam_applications_ps.FieldExamNameCode, field.TypeString, value)
		_node.ExamNameCode = value
	}
	if value, ok := eapc.mutation.ExamYear(); ok {
		_spec.SetField(exam_applications_ps.FieldExamYear, field.TypeString, value)
		_node.ExamYear = value
	}
	if value, ok := eapc.mutation.ExamName(); ok {
		_spec.SetField(exam_applications_ps.FieldExamName, field.TypeString, value)
		_node.ExamName = value
	}
	if value, ok := eapc.mutation.CentrePreference(); ok {
		_spec.SetField(exam_applications_ps.FieldCentrePreference, field.TypeString, value)
		_node.CentrePreference = value
	}
	if value, ok := eapc.mutation.Signature(); ok {
		_spec.SetField(exam_applications_ps.FieldSignature, field.TypeString, value)
		_node.Signature = value
	}
	if value, ok := eapc.mutation.Photo(); ok {
		_spec.SetField(exam_applications_ps.FieldPhoto, field.TypeString, value)
		_node.Photo = value
	}
	if value, ok := eapc.mutation.ApplicationStatus(); ok {
		_spec.SetField(exam_applications_ps.FieldApplicationStatus, field.TypeString, value)
		_node.ApplicationStatus = value
	}
	if value, ok := eapc.mutation.ApplnSubmittedDate(); ok {
		_spec.SetField(exam_applications_ps.FieldApplnSubmittedDate, field.TypeTime, value)
		_node.ApplnSubmittedDate = value
	}
	if value, ok := eapc.mutation.VARemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldVARemarks, field.TypeString, value)
		_node.VARemarks = value
	}
	if value, ok := eapc.mutation.VAUserName(); ok {
		_spec.SetField(exam_applications_ps.FieldVAUserName, field.TypeString, value)
		_node.VAUserName = value
	}
	if value, ok := eapc.mutation.VADate(); ok {
		_spec.SetField(exam_applications_ps.FieldVADate, field.TypeTime, value)
		_node.VADate = value
	}
	if value, ok := eapc.mutation.CARemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldCARemarks, field.TypeString, value)
		_node.CARemarks = value
	}
	if value, ok := eapc.mutation.CAUserName(); ok {
		_spec.SetField(exam_applications_ps.FieldCAUserName, field.TypeString, value)
		_node.CAUserName = value
	}
	if value, ok := eapc.mutation.CADate(); ok {
		_spec.SetField(exam_applications_ps.FieldCADate, field.TypeTime, value)
		_node.CADate = value
	}
	if value, ok := eapc.mutation.ApplicationWdlDate(); ok {
		_spec.SetField(exam_applications_ps.FieldApplicationWdlDate, field.TypeTime, value)
		_node.ApplicationWdlDate = value
	}
	if value, ok := eapc.mutation.NARemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldNARemarks, field.TypeString, value)
		_node.NARemarks = value
	}
	if value, ok := eapc.mutation.NAUserName(); ok {
		_spec.SetField(exam_applications_ps.FieldNAUserName, field.TypeString, value)
		_node.NAUserName = value
	}
	if value, ok := eapc.mutation.NADate(); ok {
		_spec.SetField(exam_applications_ps.FieldNADate, field.TypeTime, value)
		_node.NADate = value
	}
	if value, ok := eapc.mutation.AppliactionRemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldAppliactionRemarks, field.TypeString, value)
		_node.AppliactionRemarks = value
	}
	if value, ok := eapc.mutation.CadrePreferences(); ok {
		_spec.SetField(exam_applications_ps.FieldCadrePreferences, field.TypeJSON, value)
		_node.CadrePreferences = value
	}
	if value, ok := eapc.mutation.DivisionPreferences(); ok {
		_spec.SetField(exam_applications_ps.FieldDivisionPreferences, field.TypeJSON, value)
		_node.DivisionPreferences = value
	}
	if value, ok := eapc.mutation.CirclePreferences(); ok {
		_spec.SetField(exam_applications_ps.FieldCirclePreferences, field.TypeJSON, value)
		_node.CirclePreferences = value
	}
	if value, ok := eapc.mutation.UpdatedAt(); ok {
		_spec.SetField(exam_applications_ps.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := eapc.mutation.UpdatedBy(); ok {
		_spec.SetField(exam_applications_ps.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if nodes := eapc.mutation.UsersPSRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.UsersPSRefTable,
			Columns: []string{exam_applications_ps.UsersPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eapc.mutation.ExamApplnPSRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.ExamApplnPSRefTable,
			Columns: []string{exam_applications_ps.ExamApplnPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_ps.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eapc.mutation.OfficePSRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.OfficePSRefTable,
			Columns: []string{exam_applications_ps.OfficePSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eapc.mutation.RoleusersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.RoleusersTable,
			Columns: []string{exam_applications_ps.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoleUserCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExamApplicationsPSCreateBulk is the builder for creating many Exam_Applications_PS entities in bulk.
type ExamApplicationsPSCreateBulk struct {
	config
	builders []*ExamApplicationsPSCreate
}

// Save creates the Exam_Applications_PS entities in the database.
func (eapcb *ExamApplicationsPSCreateBulk) Save(ctx context.Context) ([]*Exam_Applications_PS, error) {
	specs := make([]*sqlgraph.CreateSpec, len(eapcb.builders))
	nodes := make([]*Exam_Applications_PS, len(eapcb.builders))
	mutators := make([]Mutator, len(eapcb.builders))
	for i := range eapcb.builders {
		func(i int, root context.Context) {
			builder := eapcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExamApplicationsPSMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eapcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eapcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eapcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eapcb *ExamApplicationsPSCreateBulk) SaveX(ctx context.Context) []*Exam_Applications_PS {
	v, err := eapcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eapcb *ExamApplicationsPSCreateBulk) Exec(ctx context.Context) error {
	_, err := eapcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eapcb *ExamApplicationsPSCreateBulk) ExecX(ctx context.Context) {
	if err := eapcb.Exec(ctx); err != nil {
		panic(err)
	}
}
