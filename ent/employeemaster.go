// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/employeemaster"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EmployeeMaster is the model entity for the EmployeeMaster schema.
type EmployeeMaster struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// EmployeeID holds the value of the "EmployeeID" field.
	EmployeeID int64 `json:"EmployeeID,omitempty"`
	// EmployeeName holds the value of the "EmployeeName" field.
	EmployeeName string `json:"EmployeeName,omitempty"`
	// DOB holds the value of the "DOB" field.
	DOB string `json:"DOB,omitempty"`
	// Gender holds the value of the "Gender" field.
	Gender employeemaster.Gender `json:"Gender,omitempty"`
	// MobileNumber holds the value of the "MobileNumber" field.
	MobileNumber string `json:"MobileNumber,omitempty"`
	// EmailID holds the value of the "EmailID" field.
	EmailID string `json:"EmailID,omitempty"`
	// EmployeeCategoryCode holds the value of the "EmployeeCategoryCode" field.
	EmployeeCategoryCode string `json:"EmployeeCategoryCode,omitempty"`
	// EmployeeCategory holds the value of the "EmployeeCategory" field.
	EmployeeCategory string `json:"EmployeeCategory,omitempty"`
	// PostCode holds the value of the "PostCode" field.
	PostCode string `json:"PostCode,omitempty"`
	// EmployeePost holds the value of the "EmployeePost" field.
	EmployeePost string `json:"EmployeePost,omitempty"`
	// FacilityID holds the value of the "FacilityID" field.
	FacilityID string `json:"FacilityID,omitempty"`
	// DCCS holds the value of the "DCCS" field.
	DCCS string `json:"DCCS,omitempty"`
	// DCInPresentCadre holds the value of the "DCInPresentCadre" field.
	DCInPresentCadre string `json:"DCInPresentCadre,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// UpdatedBy holds the value of the "UpdatedBy" field.
	UpdatedBy string `json:"UpdatedBy,omitempty"`
	// Cadre holds the value of the "Cadre" field.
	Cadre string `json:"Cadre,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmployeeMasterQuery when eager-loading is set.
	Edges                      EmployeeMasterEdges `json:"edges"`
	user_master_usermaster_ref *int64
	selectValues               sql.SelectValues
}

// EmployeeMasterEdges holds the relations/edges for other nodes in the graph.
type EmployeeMasterEdges struct {
	// UsermasterRef holds the value of the UsermasterRef edge.
	UsermasterRef []*UserMaster `json:"UsermasterRef,omitempty"`
	// EmpRef holds the value of the Emp_Ref edge.
	EmpRef []*Exam_Applications_PS `json:"Emp_Ref,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UsermasterRefOrErr returns the UsermasterRef value or an error if the edge
// was not loaded in eager-loading.
func (e EmployeeMasterEdges) UsermasterRefOrErr() ([]*UserMaster, error) {
	if e.loadedTypes[0] {
		return e.UsermasterRef, nil
	}
	return nil, &NotLoadedError{edge: "UsermasterRef"}
}

// EmpRefOrErr returns the EmpRef value or an error if the edge
// was not loaded in eager-loading.
func (e EmployeeMasterEdges) EmpRefOrErr() ([]*Exam_Applications_PS, error) {
	if e.loadedTypes[1] {
		return e.EmpRef, nil
	}
	return nil, &NotLoadedError{edge: "Emp_Ref"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmployeeMaster) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case employeemaster.FieldID, employeemaster.FieldEmployeeID:
			values[i] = new(sql.NullInt64)
		case employeemaster.FieldEmployeeName, employeemaster.FieldDOB, employeemaster.FieldGender, employeemaster.FieldMobileNumber, employeemaster.FieldEmailID, employeemaster.FieldEmployeeCategoryCode, employeemaster.FieldEmployeeCategory, employeemaster.FieldPostCode, employeemaster.FieldEmployeePost, employeemaster.FieldFacilityID, employeemaster.FieldDCCS, employeemaster.FieldDCInPresentCadre, employeemaster.FieldUpdatedBy, employeemaster.FieldCadre:
			values[i] = new(sql.NullString)
		case employeemaster.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case employeemaster.ForeignKeys[0]: // user_master_usermaster_ref
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmployeeMaster fields.
func (em *EmployeeMaster) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case employeemaster.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			em.ID = int64(value.Int64)
		case employeemaster.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeID", values[i])
			} else if value.Valid {
				em.EmployeeID = value.Int64
			}
		case employeemaster.FieldEmployeeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeName", values[i])
			} else if value.Valid {
				em.EmployeeName = value.String
			}
		case employeemaster.FieldDOB:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DOB", values[i])
			} else if value.Valid {
				em.DOB = value.String
			}
		case employeemaster.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Gender", values[i])
			} else if value.Valid {
				em.Gender = employeemaster.Gender(value.String)
			}
		case employeemaster.FieldMobileNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field MobileNumber", values[i])
			} else if value.Valid {
				em.MobileNumber = value.String
			}
		case employeemaster.FieldEmailID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmailID", values[i])
			} else if value.Valid {
				em.EmailID = value.String
			}
		case employeemaster.FieldEmployeeCategoryCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeCategoryCode", values[i])
			} else if value.Valid {
				em.EmployeeCategoryCode = value.String
			}
		case employeemaster.FieldEmployeeCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeCategory", values[i])
			} else if value.Valid {
				em.EmployeeCategory = value.String
			}
		case employeemaster.FieldPostCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PostCode", values[i])
			} else if value.Valid {
				em.PostCode = value.String
			}
		case employeemaster.FieldEmployeePost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeePost", values[i])
			} else if value.Valid {
				em.EmployeePost = value.String
			}
		case employeemaster.FieldFacilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FacilityID", values[i])
			} else if value.Valid {
				em.FacilityID = value.String
			}
		case employeemaster.FieldDCCS:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DCCS", values[i])
			} else if value.Valid {
				em.DCCS = value.String
			}
		case employeemaster.FieldDCInPresentCadre:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DCInPresentCadre", values[i])
			} else if value.Valid {
				em.DCInPresentCadre = value.String
			}
		case employeemaster.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				em.UpdatedAt = value.Time
			}
		case employeemaster.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedBy", values[i])
			} else if value.Valid {
				em.UpdatedBy = value.String
			}
		case employeemaster.FieldCadre:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Cadre", values[i])
			} else if value.Valid {
				em.Cadre = value.String
			}
		case employeemaster.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_master_usermaster_ref", value)
			} else if value.Valid {
				em.user_master_usermaster_ref = new(int64)
				*em.user_master_usermaster_ref = int64(value.Int64)
			}
		default:
			em.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EmployeeMaster.
// This includes values selected through modifiers, order, etc.
func (em *EmployeeMaster) Value(name string) (ent.Value, error) {
	return em.selectValues.Get(name)
}

// QueryUsermasterRef queries the "UsermasterRef" edge of the EmployeeMaster entity.
func (em *EmployeeMaster) QueryUsermasterRef() *UserMasterQuery {
	return NewEmployeeMasterClient(em.config).QueryUsermasterRef(em)
}

// QueryEmpRef queries the "Emp_Ref" edge of the EmployeeMaster entity.
func (em *EmployeeMaster) QueryEmpRef() *ExamApplicationsPSQuery {
	return NewEmployeeMasterClient(em.config).QueryEmpRef(em)
}

// Update returns a builder for updating this EmployeeMaster.
// Note that you need to call EmployeeMaster.Unwrap() before calling this method if this EmployeeMaster
// was returned from a transaction, and the transaction was committed or rolled back.
func (em *EmployeeMaster) Update() *EmployeeMasterUpdateOne {
	return NewEmployeeMasterClient(em.config).UpdateOne(em)
}

// Unwrap unwraps the EmployeeMaster entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (em *EmployeeMaster) Unwrap() *EmployeeMaster {
	_tx, ok := em.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmployeeMaster is not a transactional entity")
	}
	em.config.driver = _tx.drv
	return em
}

// String implements the fmt.Stringer.
func (em *EmployeeMaster) String() string {
	var builder strings.Builder
	builder.WriteString("EmployeeMaster(")
	builder.WriteString(fmt.Sprintf("id=%v, ", em.ID))
	builder.WriteString("EmployeeID=")
	builder.WriteString(fmt.Sprintf("%v", em.EmployeeID))
	builder.WriteString(", ")
	builder.WriteString("EmployeeName=")
	builder.WriteString(em.EmployeeName)
	builder.WriteString(", ")
	builder.WriteString("DOB=")
	builder.WriteString(em.DOB)
	builder.WriteString(", ")
	builder.WriteString("Gender=")
	builder.WriteString(fmt.Sprintf("%v", em.Gender))
	builder.WriteString(", ")
	builder.WriteString("MobileNumber=")
	builder.WriteString(em.MobileNumber)
	builder.WriteString(", ")
	builder.WriteString("EmailID=")
	builder.WriteString(em.EmailID)
	builder.WriteString(", ")
	builder.WriteString("EmployeeCategoryCode=")
	builder.WriteString(em.EmployeeCategoryCode)
	builder.WriteString(", ")
	builder.WriteString("EmployeeCategory=")
	builder.WriteString(em.EmployeeCategory)
	builder.WriteString(", ")
	builder.WriteString("PostCode=")
	builder.WriteString(em.PostCode)
	builder.WriteString(", ")
	builder.WriteString("EmployeePost=")
	builder.WriteString(em.EmployeePost)
	builder.WriteString(", ")
	builder.WriteString("FacilityID=")
	builder.WriteString(em.FacilityID)
	builder.WriteString(", ")
	builder.WriteString("DCCS=")
	builder.WriteString(em.DCCS)
	builder.WriteString(", ")
	builder.WriteString("DCInPresentCadre=")
	builder.WriteString(em.DCInPresentCadre)
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(em.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedBy=")
	builder.WriteString(em.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("Cadre=")
	builder.WriteString(em.Cadre)
	builder.WriteByte(')')
	return builder.String()
}

// EmployeeMasters is a parsable slice of EmployeeMaster.
type EmployeeMasters []*EmployeeMaster
