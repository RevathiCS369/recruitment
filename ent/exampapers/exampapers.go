// Code generated by ent, DO NOT EDIT.

package exampapers

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the exampapers type in the database.
	Label = "exam_papers"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "PaperCode"
	// FieldPaperDescription holds the string denoting the paperdescription field in the database.
	FieldPaperDescription = "paper_description"
	// FieldExamCode holds the string denoting the examcode field in the database.
	FieldExamCode = "exam_code"
	// FieldCompetitiveQualifying holds the string denoting the competitivequalifying field in the database.
	FieldCompetitiveQualifying = "competitive_qualifying"
	// FieldExceptionForDisability holds the string denoting the exceptionfordisability field in the database.
	FieldExceptionForDisability = "exception_for_disability"
	// FieldMaximumMarks holds the string denoting the maximummarks field in the database.
	FieldMaximumMarks = "maximum_marks"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldLocalLanguageAllowedQuestionPaper holds the string denoting the locallanguageallowedquestionpaper field in the database.
	FieldLocalLanguageAllowedQuestionPaper = "local_language_allowed_question_paper"
	// FieldLocalLanguageAllowedAnswerPaper holds the string denoting the locallanguageallowedanswerpaper field in the database.
	FieldLocalLanguageAllowedAnswerPaper = "local_language_allowed_answer_paper"
	// FieldOrderNumber holds the string denoting the ordernumber field in the database.
	FieldOrderNumber = "order_number"
	// FieldPaperStatus holds the string denoting the paperstatus field in the database.
	FieldPaperStatus = "paper_status"
	// FieldCalendarCode holds the string denoting the calendarcode field in the database.
	FieldCalendarCode = "calendar_code"
	// FieldCreatedDate holds the string denoting the createddate field in the database.
	FieldCreatedDate = "created_date"
	// EdgeCenters holds the string denoting the centers edge name in mutations.
	EdgeCenters = "centers"
	// EdgeExam holds the string denoting the exam edge name in mutations.
	EdgeExam = "exam"
	// EdgeExampapersTypes holds the string denoting the exampapers_types edge name in mutations.
	EdgeExampapersTypes = "exampapers_types"
	// EdgePapersRef holds the string denoting the papers_ref edge name in mutations.
	EdgePapersRef = "papers_ref"
	// CenterFieldID holds the string denoting the ID field of the Center.
	CenterFieldID = "CenterCode"
	// ExamFieldID holds the string denoting the ID field of the Exam.
	ExamFieldID = "ExamCode"
	// PaperTypesFieldID holds the string denoting the ID field of the PaperTypes.
	PaperTypesFieldID = "PaperTypeCode"
	// ExamCalendarFieldID holds the string denoting the ID field of the ExamCalendar.
	ExamCalendarFieldID = "CalendarCode"
	// Table holds the table name of the exampapers in the database.
	Table = "ExamPapers"
	// CentersTable is the table that holds the centers relation/edge.
	CentersTable = "Center"
	// CentersInverseTable is the table name for the Center entity.
	// It exists in this package in order to avoid circular dependency with the "center" package.
	CentersInverseTable = "Center"
	// CentersColumn is the table column denoting the centers relation/edge.
	CentersColumn = "exam_papers_centers"
	// ExamTable is the table that holds the exam relation/edge.
	ExamTable = "ExamPapers"
	// ExamInverseTable is the table name for the Exam entity.
	// It exists in this package in order to avoid circular dependency with the "exam" package.
	ExamInverseTable = "Exam"
	// ExamColumn is the table column denoting the exam relation/edge.
	ExamColumn = "exam_code"
	// ExampapersTypesTable is the table that holds the exampapers_types relation/edge.
	ExampapersTypesTable = "paper_types"
	// ExampapersTypesInverseTable is the table name for the PaperTypes entity.
	// It exists in this package in order to avoid circular dependency with the "papertypes" package.
	ExampapersTypesInverseTable = "paper_types"
	// ExampapersTypesColumn is the table column denoting the exampapers_types relation/edge.
	ExampapersTypesColumn = "paper_code"
	// PapersRefTable is the table that holds the papers_ref relation/edge.
	PapersRefTable = "ExamCalendar"
	// PapersRefInverseTable is the table name for the ExamCalendar entity.
	// It exists in this package in order to avoid circular dependency with the "examcalendar" package.
	PapersRefInverseTable = "ExamCalendar"
	// PapersRefColumn is the table column denoting the papers_ref relation/edge.
	PapersRefColumn = "paper_code"
)

// Columns holds all SQL columns for exampapers fields.
var Columns = []string{
	FieldID,
	FieldPaperDescription,
	FieldExamCode,
	FieldCompetitiveQualifying,
	FieldExceptionForDisability,
	FieldMaximumMarks,
	FieldDuration,
	FieldLocalLanguageAllowedQuestionPaper,
	FieldLocalLanguageAllowedAnswerPaper,
	FieldOrderNumber,
	FieldPaperStatus,
	FieldCalendarCode,
	FieldCreatedDate,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// PaperDescriptionValidator is a validator for the "PaperDescription" field. It is called by the builders before save.
	PaperDescriptionValidator func(string) error
	// CompetitiveQualifyingValidator is a validator for the "competitiveQualifying" field. It is called by the builders before save.
	CompetitiveQualifyingValidator func(string) error
	// ExceptionForDisabilityValidator is a validator for the "exceptionForDisability" field. It is called by the builders before save.
	ExceptionForDisabilityValidator func(string) error
	// MaximumMarksValidator is a validator for the "MaximumMarks" field. It is called by the builders before save.
	MaximumMarksValidator func(int) error
	// DurationValidator is a validator for the "Duration" field. It is called by the builders before save.
	DurationValidator func(int) error
	// LocalLanguageAllowedQuestionPaperValidator is a validator for the "localLanguageAllowedQuestionPaper" field. It is called by the builders before save.
	LocalLanguageAllowedQuestionPaperValidator func(string) error
	// LocalLanguageAllowedAnswerPaperValidator is a validator for the "localLanguageAllowedAnswerPaper" field. It is called by the builders before save.
	LocalLanguageAllowedAnswerPaperValidator func(string) error
	// OrderNumberValidator is a validator for the "OrderNumber" field. It is called by the builders before save.
	OrderNumberValidator func(string) error
	// PaperStatusValidator is a validator for the "PaperStatus" field. It is called by the builders before save.
	PaperStatusValidator func(string) error
)

// OrderOption defines the ordering options for the ExamPapers queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPaperDescription orders the results by the PaperDescription field.
func ByPaperDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaperDescription, opts...).ToFunc()
}

// ByExamCode orders the results by the ExamCode field.
func ByExamCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamCode, opts...).ToFunc()
}

// ByCompetitiveQualifying orders the results by the competitiveQualifying field.
func ByCompetitiveQualifying(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompetitiveQualifying, opts...).ToFunc()
}

// ByExceptionForDisability orders the results by the exceptionForDisability field.
func ByExceptionForDisability(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExceptionForDisability, opts...).ToFunc()
}

// ByMaximumMarks orders the results by the MaximumMarks field.
func ByMaximumMarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaximumMarks, opts...).ToFunc()
}

// ByDuration orders the results by the Duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByLocalLanguageAllowedQuestionPaper orders the results by the localLanguageAllowedQuestionPaper field.
func ByLocalLanguageAllowedQuestionPaper(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalLanguageAllowedQuestionPaper, opts...).ToFunc()
}

// ByLocalLanguageAllowedAnswerPaper orders the results by the localLanguageAllowedAnswerPaper field.
func ByLocalLanguageAllowedAnswerPaper(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalLanguageAllowedAnswerPaper, opts...).ToFunc()
}

// ByOrderNumber orders the results by the OrderNumber field.
func ByOrderNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderNumber, opts...).ToFunc()
}

// ByPaperStatus orders the results by the PaperStatus field.
func ByPaperStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaperStatus, opts...).ToFunc()
}

// ByCalendarCode orders the results by the CalendarCode field.
func ByCalendarCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCalendarCode, opts...).ToFunc()
}

// ByCreatedDate orders the results by the CreatedDate field.
func ByCreatedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedDate, opts...).ToFunc()
}

// ByCentersCount orders the results by centers count.
func ByCentersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCentersStep(), opts...)
	}
}

// ByCenters orders the results by centers terms.
func ByCenters(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCentersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExamField orders the results by exam field.
func ByExamField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamStep(), sql.OrderByField(field, opts...))
	}
}

// ByExampapersTypesCount orders the results by exampapers_types count.
func ByExampapersTypesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExampapersTypesStep(), opts...)
	}
}

// ByExampapersTypes orders the results by exampapers_types terms.
func ByExampapersTypes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExampapersTypesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPapersRefCount orders the results by papers_ref count.
func ByPapersRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPapersRefStep(), opts...)
	}
}

// ByPapersRef orders the results by papers_ref terms.
func ByPapersRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPapersRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCentersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CentersInverseTable, CenterFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CentersTable, CentersColumn),
	)
}
func newExamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamInverseTable, ExamFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ExamTable, ExamColumn),
	)
}
func newExampapersTypesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExampapersTypesInverseTable, PaperTypesFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExampapersTypesTable, ExampapersTypesColumn),
	)
}
func newPapersRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PapersRefInverseTable, ExamCalendarFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PapersRefTable, PapersRefColumn),
	)
}
