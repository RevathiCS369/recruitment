// Code generated by ent, DO NOT EDIT.

package exampapers

import (
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldID, id))
}

// PaperDescription applies equality check predicate on the "PaperDescription" field. It's identical to PaperDescriptionEQ.
func PaperDescription(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldPaperDescription, v))
}

// ExamCode applies equality check predicate on the "ExamCode" field. It's identical to ExamCodeEQ.
func ExamCode(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldExamCode, v))
}

// CompetitiveQualifying applies equality check predicate on the "CompetitiveQualifying" field. It's identical to CompetitiveQualifyingEQ.
func CompetitiveQualifying(v bool) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldCompetitiveQualifying, v))
}

// ExceptionForDisability applies equality check predicate on the "ExceptionForDisability" field. It's identical to ExceptionForDisabilityEQ.
func ExceptionForDisability(v bool) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldExceptionForDisability, v))
}

// MaximumMarks applies equality check predicate on the "MaximumMarks" field. It's identical to MaximumMarksEQ.
func MaximumMarks(v int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldMaximumMarks, v))
}

// Duration applies equality check predicate on the "Duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldDuration, v))
}

// LocalLanguageAllowedQuestionPaper applies equality check predicate on the "localLanguageAllowedQuestionPaper" field. It's identical to LocalLanguageAllowedQuestionPaperEQ.
func LocalLanguageAllowedQuestionPaper(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldLocalLanguageAllowedQuestionPaper, v))
}

// LocalLanguageAllowedAnswerPaper applies equality check predicate on the "localLanguageAllowedAnswerPaper" field. It's identical to LocalLanguageAllowedAnswerPaperEQ.
func LocalLanguageAllowedAnswerPaper(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldLocalLanguageAllowedAnswerPaper, v))
}

// OrderNumber applies equality check predicate on the "OrderNumber" field. It's identical to OrderNumberEQ.
func OrderNumber(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldOrderNumber, v))
}

// PaperStatus applies equality check predicate on the "PaperStatus" field. It's identical to PaperStatusEQ.
func PaperStatus(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldPaperStatus, v))
}

// CalendarCode applies equality check predicate on the "CalendarCode" field. It's identical to CalendarCodeEQ.
func CalendarCode(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldCalendarCode, v))
}

// CreatedDate applies equality check predicate on the "CreatedDate" field. It's identical to CreatedDateEQ.
func CreatedDate(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldCreatedDate, v))
}

// PaperTypeCode applies equality check predicate on the "PaperTypeCode" field. It's identical to PaperTypeCodeEQ.
func PaperTypeCode(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldPaperTypeCode, v))
}

// PaperTypeName applies equality check predicate on the "PaperTypeName" field. It's identical to PaperTypeNameEQ.
func PaperTypeName(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldPaperTypeName, v))
}

// DisabilityTypeID applies equality check predicate on the "DisabilityTypeID" field. It's identical to DisabilityTypeIDEQ.
func DisabilityTypeID(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldDisabilityTypeID, v))
}

// ExamCodePS applies equality check predicate on the "ExamCodePS" field. It's identical to ExamCodePSEQ.
func ExamCodePS(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldExamCodePS, v))
}

// PaperDescriptionEQ applies the EQ predicate on the "PaperDescription" field.
func PaperDescriptionEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldPaperDescription, v))
}

// PaperDescriptionNEQ applies the NEQ predicate on the "PaperDescription" field.
func PaperDescriptionNEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldPaperDescription, v))
}

// PaperDescriptionIn applies the In predicate on the "PaperDescription" field.
func PaperDescriptionIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldPaperDescription, vs...))
}

// PaperDescriptionNotIn applies the NotIn predicate on the "PaperDescription" field.
func PaperDescriptionNotIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldPaperDescription, vs...))
}

// PaperDescriptionGT applies the GT predicate on the "PaperDescription" field.
func PaperDescriptionGT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldPaperDescription, v))
}

// PaperDescriptionGTE applies the GTE predicate on the "PaperDescription" field.
func PaperDescriptionGTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldPaperDescription, v))
}

// PaperDescriptionLT applies the LT predicate on the "PaperDescription" field.
func PaperDescriptionLT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldPaperDescription, v))
}

// PaperDescriptionLTE applies the LTE predicate on the "PaperDescription" field.
func PaperDescriptionLTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldPaperDescription, v))
}

// PaperDescriptionContains applies the Contains predicate on the "PaperDescription" field.
func PaperDescriptionContains(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContains(FieldPaperDescription, v))
}

// PaperDescriptionHasPrefix applies the HasPrefix predicate on the "PaperDescription" field.
func PaperDescriptionHasPrefix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasPrefix(FieldPaperDescription, v))
}

// PaperDescriptionHasSuffix applies the HasSuffix predicate on the "PaperDescription" field.
func PaperDescriptionHasSuffix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasSuffix(FieldPaperDescription, v))
}

// PaperDescriptionEqualFold applies the EqualFold predicate on the "PaperDescription" field.
func PaperDescriptionEqualFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEqualFold(FieldPaperDescription, v))
}

// PaperDescriptionContainsFold applies the ContainsFold predicate on the "PaperDescription" field.
func PaperDescriptionContainsFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContainsFold(FieldPaperDescription, v))
}

// ExamCodeEQ applies the EQ predicate on the "ExamCode" field.
func ExamCodeEQ(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldExamCode, v))
}

// ExamCodeNEQ applies the NEQ predicate on the "ExamCode" field.
func ExamCodeNEQ(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldExamCode, v))
}

// ExamCodeIn applies the In predicate on the "ExamCode" field.
func ExamCodeIn(vs ...int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldExamCode, vs...))
}

// ExamCodeNotIn applies the NotIn predicate on the "ExamCode" field.
func ExamCodeNotIn(vs ...int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldExamCode, vs...))
}

// ExamCodeIsNil applies the IsNil predicate on the "ExamCode" field.
func ExamCodeIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldExamCode))
}

// ExamCodeNotNil applies the NotNil predicate on the "ExamCode" field.
func ExamCodeNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldExamCode))
}

// CompetitiveQualifyingEQ applies the EQ predicate on the "CompetitiveQualifying" field.
func CompetitiveQualifyingEQ(v bool) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldCompetitiveQualifying, v))
}

// CompetitiveQualifyingNEQ applies the NEQ predicate on the "CompetitiveQualifying" field.
func CompetitiveQualifyingNEQ(v bool) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldCompetitiveQualifying, v))
}

// ExceptionForDisabilityEQ applies the EQ predicate on the "ExceptionForDisability" field.
func ExceptionForDisabilityEQ(v bool) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldExceptionForDisability, v))
}

// ExceptionForDisabilityNEQ applies the NEQ predicate on the "ExceptionForDisability" field.
func ExceptionForDisabilityNEQ(v bool) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldExceptionForDisability, v))
}

// MaximumMarksEQ applies the EQ predicate on the "MaximumMarks" field.
func MaximumMarksEQ(v int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldMaximumMarks, v))
}

// MaximumMarksNEQ applies the NEQ predicate on the "MaximumMarks" field.
func MaximumMarksNEQ(v int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldMaximumMarks, v))
}

// MaximumMarksIn applies the In predicate on the "MaximumMarks" field.
func MaximumMarksIn(vs ...int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldMaximumMarks, vs...))
}

// MaximumMarksNotIn applies the NotIn predicate on the "MaximumMarks" field.
func MaximumMarksNotIn(vs ...int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldMaximumMarks, vs...))
}

// MaximumMarksGT applies the GT predicate on the "MaximumMarks" field.
func MaximumMarksGT(v int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldMaximumMarks, v))
}

// MaximumMarksGTE applies the GTE predicate on the "MaximumMarks" field.
func MaximumMarksGTE(v int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldMaximumMarks, v))
}

// MaximumMarksLT applies the LT predicate on the "MaximumMarks" field.
func MaximumMarksLT(v int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldMaximumMarks, v))
}

// MaximumMarksLTE applies the LTE predicate on the "MaximumMarks" field.
func MaximumMarksLTE(v int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldMaximumMarks, v))
}

// DurationEQ applies the EQ predicate on the "Duration" field.
func DurationEQ(v int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "Duration" field.
func DurationNEQ(v int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "Duration" field.
func DurationIn(vs ...int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "Duration" field.
func DurationNotIn(vs ...int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "Duration" field.
func DurationGT(v int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "Duration" field.
func DurationGTE(v int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "Duration" field.
func DurationLT(v int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "Duration" field.
func DurationLTE(v int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldDuration, v))
}

// LocalLanguageAllowedQuestionPaperEQ applies the EQ predicate on the "localLanguageAllowedQuestionPaper" field.
func LocalLanguageAllowedQuestionPaperEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldLocalLanguageAllowedQuestionPaper, v))
}

// LocalLanguageAllowedQuestionPaperNEQ applies the NEQ predicate on the "localLanguageAllowedQuestionPaper" field.
func LocalLanguageAllowedQuestionPaperNEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldLocalLanguageAllowedQuestionPaper, v))
}

// LocalLanguageAllowedQuestionPaperIn applies the In predicate on the "localLanguageAllowedQuestionPaper" field.
func LocalLanguageAllowedQuestionPaperIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldLocalLanguageAllowedQuestionPaper, vs...))
}

// LocalLanguageAllowedQuestionPaperNotIn applies the NotIn predicate on the "localLanguageAllowedQuestionPaper" field.
func LocalLanguageAllowedQuestionPaperNotIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldLocalLanguageAllowedQuestionPaper, vs...))
}

// LocalLanguageAllowedQuestionPaperGT applies the GT predicate on the "localLanguageAllowedQuestionPaper" field.
func LocalLanguageAllowedQuestionPaperGT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldLocalLanguageAllowedQuestionPaper, v))
}

// LocalLanguageAllowedQuestionPaperGTE applies the GTE predicate on the "localLanguageAllowedQuestionPaper" field.
func LocalLanguageAllowedQuestionPaperGTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldLocalLanguageAllowedQuestionPaper, v))
}

// LocalLanguageAllowedQuestionPaperLT applies the LT predicate on the "localLanguageAllowedQuestionPaper" field.
func LocalLanguageAllowedQuestionPaperLT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldLocalLanguageAllowedQuestionPaper, v))
}

// LocalLanguageAllowedQuestionPaperLTE applies the LTE predicate on the "localLanguageAllowedQuestionPaper" field.
func LocalLanguageAllowedQuestionPaperLTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldLocalLanguageAllowedQuestionPaper, v))
}

// LocalLanguageAllowedQuestionPaperContains applies the Contains predicate on the "localLanguageAllowedQuestionPaper" field.
func LocalLanguageAllowedQuestionPaperContains(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContains(FieldLocalLanguageAllowedQuestionPaper, v))
}

// LocalLanguageAllowedQuestionPaperHasPrefix applies the HasPrefix predicate on the "localLanguageAllowedQuestionPaper" field.
func LocalLanguageAllowedQuestionPaperHasPrefix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasPrefix(FieldLocalLanguageAllowedQuestionPaper, v))
}

// LocalLanguageAllowedQuestionPaperHasSuffix applies the HasSuffix predicate on the "localLanguageAllowedQuestionPaper" field.
func LocalLanguageAllowedQuestionPaperHasSuffix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasSuffix(FieldLocalLanguageAllowedQuestionPaper, v))
}

// LocalLanguageAllowedQuestionPaperEqualFold applies the EqualFold predicate on the "localLanguageAllowedQuestionPaper" field.
func LocalLanguageAllowedQuestionPaperEqualFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEqualFold(FieldLocalLanguageAllowedQuestionPaper, v))
}

// LocalLanguageAllowedQuestionPaperContainsFold applies the ContainsFold predicate on the "localLanguageAllowedQuestionPaper" field.
func LocalLanguageAllowedQuestionPaperContainsFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContainsFold(FieldLocalLanguageAllowedQuestionPaper, v))
}

// LocalLanguageAllowedAnswerPaperEQ applies the EQ predicate on the "localLanguageAllowedAnswerPaper" field.
func LocalLanguageAllowedAnswerPaperEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldLocalLanguageAllowedAnswerPaper, v))
}

// LocalLanguageAllowedAnswerPaperNEQ applies the NEQ predicate on the "localLanguageAllowedAnswerPaper" field.
func LocalLanguageAllowedAnswerPaperNEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldLocalLanguageAllowedAnswerPaper, v))
}

// LocalLanguageAllowedAnswerPaperIn applies the In predicate on the "localLanguageAllowedAnswerPaper" field.
func LocalLanguageAllowedAnswerPaperIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldLocalLanguageAllowedAnswerPaper, vs...))
}

// LocalLanguageAllowedAnswerPaperNotIn applies the NotIn predicate on the "localLanguageAllowedAnswerPaper" field.
func LocalLanguageAllowedAnswerPaperNotIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldLocalLanguageAllowedAnswerPaper, vs...))
}

// LocalLanguageAllowedAnswerPaperGT applies the GT predicate on the "localLanguageAllowedAnswerPaper" field.
func LocalLanguageAllowedAnswerPaperGT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldLocalLanguageAllowedAnswerPaper, v))
}

// LocalLanguageAllowedAnswerPaperGTE applies the GTE predicate on the "localLanguageAllowedAnswerPaper" field.
func LocalLanguageAllowedAnswerPaperGTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldLocalLanguageAllowedAnswerPaper, v))
}

// LocalLanguageAllowedAnswerPaperLT applies the LT predicate on the "localLanguageAllowedAnswerPaper" field.
func LocalLanguageAllowedAnswerPaperLT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldLocalLanguageAllowedAnswerPaper, v))
}

// LocalLanguageAllowedAnswerPaperLTE applies the LTE predicate on the "localLanguageAllowedAnswerPaper" field.
func LocalLanguageAllowedAnswerPaperLTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldLocalLanguageAllowedAnswerPaper, v))
}

// LocalLanguageAllowedAnswerPaperContains applies the Contains predicate on the "localLanguageAllowedAnswerPaper" field.
func LocalLanguageAllowedAnswerPaperContains(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContains(FieldLocalLanguageAllowedAnswerPaper, v))
}

// LocalLanguageAllowedAnswerPaperHasPrefix applies the HasPrefix predicate on the "localLanguageAllowedAnswerPaper" field.
func LocalLanguageAllowedAnswerPaperHasPrefix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasPrefix(FieldLocalLanguageAllowedAnswerPaper, v))
}

// LocalLanguageAllowedAnswerPaperHasSuffix applies the HasSuffix predicate on the "localLanguageAllowedAnswerPaper" field.
func LocalLanguageAllowedAnswerPaperHasSuffix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasSuffix(FieldLocalLanguageAllowedAnswerPaper, v))
}

// LocalLanguageAllowedAnswerPaperEqualFold applies the EqualFold predicate on the "localLanguageAllowedAnswerPaper" field.
func LocalLanguageAllowedAnswerPaperEqualFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEqualFold(FieldLocalLanguageAllowedAnswerPaper, v))
}

// LocalLanguageAllowedAnswerPaperContainsFold applies the ContainsFold predicate on the "localLanguageAllowedAnswerPaper" field.
func LocalLanguageAllowedAnswerPaperContainsFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContainsFold(FieldLocalLanguageAllowedAnswerPaper, v))
}

// OrderNumberEQ applies the EQ predicate on the "OrderNumber" field.
func OrderNumberEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldOrderNumber, v))
}

// OrderNumberNEQ applies the NEQ predicate on the "OrderNumber" field.
func OrderNumberNEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldOrderNumber, v))
}

// OrderNumberIn applies the In predicate on the "OrderNumber" field.
func OrderNumberIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldOrderNumber, vs...))
}

// OrderNumberNotIn applies the NotIn predicate on the "OrderNumber" field.
func OrderNumberNotIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldOrderNumber, vs...))
}

// OrderNumberGT applies the GT predicate on the "OrderNumber" field.
func OrderNumberGT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldOrderNumber, v))
}

// OrderNumberGTE applies the GTE predicate on the "OrderNumber" field.
func OrderNumberGTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldOrderNumber, v))
}

// OrderNumberLT applies the LT predicate on the "OrderNumber" field.
func OrderNumberLT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldOrderNumber, v))
}

// OrderNumberLTE applies the LTE predicate on the "OrderNumber" field.
func OrderNumberLTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldOrderNumber, v))
}

// OrderNumberContains applies the Contains predicate on the "OrderNumber" field.
func OrderNumberContains(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContains(FieldOrderNumber, v))
}

// OrderNumberHasPrefix applies the HasPrefix predicate on the "OrderNumber" field.
func OrderNumberHasPrefix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasPrefix(FieldOrderNumber, v))
}

// OrderNumberHasSuffix applies the HasSuffix predicate on the "OrderNumber" field.
func OrderNumberHasSuffix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasSuffix(FieldOrderNumber, v))
}

// OrderNumberEqualFold applies the EqualFold predicate on the "OrderNumber" field.
func OrderNumberEqualFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEqualFold(FieldOrderNumber, v))
}

// OrderNumberContainsFold applies the ContainsFold predicate on the "OrderNumber" field.
func OrderNumberContainsFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContainsFold(FieldOrderNumber, v))
}

// PaperStatusEQ applies the EQ predicate on the "PaperStatus" field.
func PaperStatusEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldPaperStatus, v))
}

// PaperStatusNEQ applies the NEQ predicate on the "PaperStatus" field.
func PaperStatusNEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldPaperStatus, v))
}

// PaperStatusIn applies the In predicate on the "PaperStatus" field.
func PaperStatusIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldPaperStatus, vs...))
}

// PaperStatusNotIn applies the NotIn predicate on the "PaperStatus" field.
func PaperStatusNotIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldPaperStatus, vs...))
}

// PaperStatusGT applies the GT predicate on the "PaperStatus" field.
func PaperStatusGT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldPaperStatus, v))
}

// PaperStatusGTE applies the GTE predicate on the "PaperStatus" field.
func PaperStatusGTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldPaperStatus, v))
}

// PaperStatusLT applies the LT predicate on the "PaperStatus" field.
func PaperStatusLT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldPaperStatus, v))
}

// PaperStatusLTE applies the LTE predicate on the "PaperStatus" field.
func PaperStatusLTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldPaperStatus, v))
}

// PaperStatusContains applies the Contains predicate on the "PaperStatus" field.
func PaperStatusContains(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContains(FieldPaperStatus, v))
}

// PaperStatusHasPrefix applies the HasPrefix predicate on the "PaperStatus" field.
func PaperStatusHasPrefix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasPrefix(FieldPaperStatus, v))
}

// PaperStatusHasSuffix applies the HasSuffix predicate on the "PaperStatus" field.
func PaperStatusHasSuffix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasSuffix(FieldPaperStatus, v))
}

// PaperStatusEqualFold applies the EqualFold predicate on the "PaperStatus" field.
func PaperStatusEqualFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEqualFold(FieldPaperStatus, v))
}

// PaperStatusContainsFold applies the ContainsFold predicate on the "PaperStatus" field.
func PaperStatusContainsFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContainsFold(FieldPaperStatus, v))
}

// CalendarCodeEQ applies the EQ predicate on the "CalendarCode" field.
func CalendarCodeEQ(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldCalendarCode, v))
}

// CalendarCodeNEQ applies the NEQ predicate on the "CalendarCode" field.
func CalendarCodeNEQ(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldCalendarCode, v))
}

// CalendarCodeIn applies the In predicate on the "CalendarCode" field.
func CalendarCodeIn(vs ...int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldCalendarCode, vs...))
}

// CalendarCodeNotIn applies the NotIn predicate on the "CalendarCode" field.
func CalendarCodeNotIn(vs ...int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldCalendarCode, vs...))
}

// CalendarCodeGT applies the GT predicate on the "CalendarCode" field.
func CalendarCodeGT(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldCalendarCode, v))
}

// CalendarCodeGTE applies the GTE predicate on the "CalendarCode" field.
func CalendarCodeGTE(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldCalendarCode, v))
}

// CalendarCodeLT applies the LT predicate on the "CalendarCode" field.
func CalendarCodeLT(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldCalendarCode, v))
}

// CalendarCodeLTE applies the LTE predicate on the "CalendarCode" field.
func CalendarCodeLTE(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldCalendarCode, v))
}

// CalendarCodeIsNil applies the IsNil predicate on the "CalendarCode" field.
func CalendarCodeIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldCalendarCode))
}

// CalendarCodeNotNil applies the NotNil predicate on the "CalendarCode" field.
func CalendarCodeNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldCalendarCode))
}

// CreatedDateEQ applies the EQ predicate on the "CreatedDate" field.
func CreatedDateEQ(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldCreatedDate, v))
}

// CreatedDateNEQ applies the NEQ predicate on the "CreatedDate" field.
func CreatedDateNEQ(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldCreatedDate, v))
}

// CreatedDateIn applies the In predicate on the "CreatedDate" field.
func CreatedDateIn(vs ...time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldCreatedDate, vs...))
}

// CreatedDateNotIn applies the NotIn predicate on the "CreatedDate" field.
func CreatedDateNotIn(vs ...time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldCreatedDate, vs...))
}

// CreatedDateGT applies the GT predicate on the "CreatedDate" field.
func CreatedDateGT(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldCreatedDate, v))
}

// CreatedDateGTE applies the GTE predicate on the "CreatedDate" field.
func CreatedDateGTE(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldCreatedDate, v))
}

// CreatedDateLT applies the LT predicate on the "CreatedDate" field.
func CreatedDateLT(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldCreatedDate, v))
}

// CreatedDateLTE applies the LTE predicate on the "CreatedDate" field.
func CreatedDateLTE(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldCreatedDate, v))
}

// CreatedDateIsNil applies the IsNil predicate on the "CreatedDate" field.
func CreatedDateIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldCreatedDate))
}

// CreatedDateNotNil applies the NotNil predicate on the "CreatedDate" field.
func CreatedDateNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldCreatedDate))
}

// PaperTypeCodeEQ applies the EQ predicate on the "PaperTypeCode" field.
func PaperTypeCodeEQ(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldPaperTypeCode, v))
}

// PaperTypeCodeNEQ applies the NEQ predicate on the "PaperTypeCode" field.
func PaperTypeCodeNEQ(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldPaperTypeCode, v))
}

// PaperTypeCodeIn applies the In predicate on the "PaperTypeCode" field.
func PaperTypeCodeIn(vs ...int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldPaperTypeCode, vs...))
}

// PaperTypeCodeNotIn applies the NotIn predicate on the "PaperTypeCode" field.
func PaperTypeCodeNotIn(vs ...int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldPaperTypeCode, vs...))
}

// PaperTypeCodeGT applies the GT predicate on the "PaperTypeCode" field.
func PaperTypeCodeGT(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldPaperTypeCode, v))
}

// PaperTypeCodeGTE applies the GTE predicate on the "PaperTypeCode" field.
func PaperTypeCodeGTE(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldPaperTypeCode, v))
}

// PaperTypeCodeLT applies the LT predicate on the "PaperTypeCode" field.
func PaperTypeCodeLT(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldPaperTypeCode, v))
}

// PaperTypeCodeLTE applies the LTE predicate on the "PaperTypeCode" field.
func PaperTypeCodeLTE(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldPaperTypeCode, v))
}

// PaperTypeCodeIsNil applies the IsNil predicate on the "PaperTypeCode" field.
func PaperTypeCodeIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldPaperTypeCode))
}

// PaperTypeCodeNotNil applies the NotNil predicate on the "PaperTypeCode" field.
func PaperTypeCodeNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldPaperTypeCode))
}

// PaperTypeNameEQ applies the EQ predicate on the "PaperTypeName" field.
func PaperTypeNameEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldPaperTypeName, v))
}

// PaperTypeNameNEQ applies the NEQ predicate on the "PaperTypeName" field.
func PaperTypeNameNEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldPaperTypeName, v))
}

// PaperTypeNameIn applies the In predicate on the "PaperTypeName" field.
func PaperTypeNameIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldPaperTypeName, vs...))
}

// PaperTypeNameNotIn applies the NotIn predicate on the "PaperTypeName" field.
func PaperTypeNameNotIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldPaperTypeName, vs...))
}

// PaperTypeNameGT applies the GT predicate on the "PaperTypeName" field.
func PaperTypeNameGT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldPaperTypeName, v))
}

// PaperTypeNameGTE applies the GTE predicate on the "PaperTypeName" field.
func PaperTypeNameGTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldPaperTypeName, v))
}

// PaperTypeNameLT applies the LT predicate on the "PaperTypeName" field.
func PaperTypeNameLT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldPaperTypeName, v))
}

// PaperTypeNameLTE applies the LTE predicate on the "PaperTypeName" field.
func PaperTypeNameLTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldPaperTypeName, v))
}

// PaperTypeNameContains applies the Contains predicate on the "PaperTypeName" field.
func PaperTypeNameContains(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContains(FieldPaperTypeName, v))
}

// PaperTypeNameHasPrefix applies the HasPrefix predicate on the "PaperTypeName" field.
func PaperTypeNameHasPrefix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasPrefix(FieldPaperTypeName, v))
}

// PaperTypeNameHasSuffix applies the HasSuffix predicate on the "PaperTypeName" field.
func PaperTypeNameHasSuffix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasSuffix(FieldPaperTypeName, v))
}

// PaperTypeNameIsNil applies the IsNil predicate on the "PaperTypeName" field.
func PaperTypeNameIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldPaperTypeName))
}

// PaperTypeNameNotNil applies the NotNil predicate on the "PaperTypeName" field.
func PaperTypeNameNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldPaperTypeName))
}

// PaperTypeNameEqualFold applies the EqualFold predicate on the "PaperTypeName" field.
func PaperTypeNameEqualFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEqualFold(FieldPaperTypeName, v))
}

// PaperTypeNameContainsFold applies the ContainsFold predicate on the "PaperTypeName" field.
func PaperTypeNameContainsFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContainsFold(FieldPaperTypeName, v))
}

// DisabilityTypeIDEQ applies the EQ predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDEQ(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldDisabilityTypeID, v))
}

// DisabilityTypeIDNEQ applies the NEQ predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDNEQ(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldDisabilityTypeID, v))
}

// DisabilityTypeIDIn applies the In predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDIn(vs ...int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldDisabilityTypeID, vs...))
}

// DisabilityTypeIDNotIn applies the NotIn predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDNotIn(vs ...int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldDisabilityTypeID, vs...))
}

// DisabilityTypeIDGT applies the GT predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDGT(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldDisabilityTypeID, v))
}

// DisabilityTypeIDGTE applies the GTE predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDGTE(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldDisabilityTypeID, v))
}

// DisabilityTypeIDLT applies the LT predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDLT(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldDisabilityTypeID, v))
}

// DisabilityTypeIDLTE applies the LTE predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDLTE(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldDisabilityTypeID, v))
}

// DisabilityTypeIDIsNil applies the IsNil predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldDisabilityTypeID))
}

// DisabilityTypeIDNotNil applies the NotNil predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldDisabilityTypeID))
}

// ExamCodePSEQ applies the EQ predicate on the "ExamCodePS" field.
func ExamCodePSEQ(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldExamCodePS, v))
}

// ExamCodePSNEQ applies the NEQ predicate on the "ExamCodePS" field.
func ExamCodePSNEQ(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldExamCodePS, v))
}

// ExamCodePSIn applies the In predicate on the "ExamCodePS" field.
func ExamCodePSIn(vs ...int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldExamCodePS, vs...))
}

// ExamCodePSNotIn applies the NotIn predicate on the "ExamCodePS" field.
func ExamCodePSNotIn(vs ...int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldExamCodePS, vs...))
}

// ExamCodePSGT applies the GT predicate on the "ExamCodePS" field.
func ExamCodePSGT(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldExamCodePS, v))
}

// ExamCodePSGTE applies the GTE predicate on the "ExamCodePS" field.
func ExamCodePSGTE(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldExamCodePS, v))
}

// ExamCodePSLT applies the LT predicate on the "ExamCodePS" field.
func ExamCodePSLT(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldExamCodePS, v))
}

// ExamCodePSLTE applies the LTE predicate on the "ExamCodePS" field.
func ExamCodePSLTE(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldExamCodePS, v))
}

// ExamCodePSIsNil applies the IsNil predicate on the "ExamCodePS" field.
func ExamCodePSIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldExamCodePS))
}

// ExamCodePSNotNil applies the NotNil predicate on the "ExamCodePS" field.
func ExamCodePSNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldExamCodePS))
}

// HasCenters applies the HasEdge predicate on the "centers" edge.
func HasCenters() predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CentersTable, CentersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCentersWith applies the HasEdge predicate on the "centers" edge with a given conditions (other predicates).
func HasCentersWith(preds ...predicate.Center) predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		step := newCentersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExam applies the HasEdge predicate on the "exam" edge.
func HasExam() predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExamTable, ExamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamWith applies the HasEdge predicate on the "exam" edge with a given conditions (other predicates).
func HasExamWith(preds ...predicate.Exam) predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		step := newExamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExampapersTypes applies the HasEdge predicate on the "exampapers_types" edge.
func HasExampapersTypes() predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExampapersTypesTable, ExampapersTypesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExampapersTypesWith applies the HasEdge predicate on the "exampapers_types" edge with a given conditions (other predicates).
func HasExampapersTypesWith(preds ...predicate.PaperTypes) predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		step := newExampapersTypesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPapersRef applies the HasEdge predicate on the "papers_ref" edge.
func HasPapersRef() predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PapersRefTable, PapersRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPapersRefWith applies the HasEdge predicate on the "papers_ref" edge with a given conditions (other predicates).
func HasPapersRefWith(preds ...predicate.ExamCalendar) predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		step := newPapersRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamPaperEligibility applies the HasEdge predicate on the "ExamPaperEligibility" edge.
func HasExamPaperEligibility() predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamPaperEligibilityTable, ExamPaperEligibilityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamPaperEligibilityWith applies the HasEdge predicate on the "ExamPaperEligibility" edge with a given conditions (other predicates).
func HasExamPaperEligibilityWith(preds ...predicate.EligibilityMaster) predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		step := newExamPaperEligibilityStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDisRef applies the HasEdge predicate on the "dis_ref" edge.
func HasDisRef() predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DisRefTable, DisRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDisRefWith applies the HasEdge predicate on the "dis_ref" edge with a given conditions (other predicates).
func HasDisRefWith(preds ...predicate.Disability) predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		step := newDisRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPapersPsRef applies the HasEdge predicate on the "papers_ps_ref" edge.
func HasPapersPsRef() predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PapersPsRefTable, PapersPsRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPapersPsRefWith applies the HasEdge predicate on the "papers_ps_ref" edge with a given conditions (other predicates).
func HasPapersPsRefWith(preds ...predicate.Exam_PS) predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		step := newPapersPsRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPapersIPRef applies the HasEdge predicate on the "papers_ip_ref" edge.
func HasPapersIPRef() predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PapersIPRefTable, PapersIPRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPapersIPRefWith applies the HasEdge predicate on the "papers_ip_ref" edge with a given conditions (other predicates).
func HasPapersIPRefWith(preds ...predicate.Exam_IP) predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		step := newPapersIPRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ExamPapers) predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ExamPapers) predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ExamPapers) predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		p(s.Not())
	})
}
