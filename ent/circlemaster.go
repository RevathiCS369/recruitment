// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/circlemaster"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CircleMaster is the model entity for the CircleMaster schema.
type CircleMaster struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// CircleCode holds the value of the "CircleCode" field.
	CircleCode int32 `json:"CircleCode,omitempty"`
	// CircleOfficeId holds the value of the "CircleOfficeId" field.
	CircleOfficeId string `json:"CircleOfficeId,omitempty"`
	// CircleOfficeName holds the value of the "CircleOfficeName" field.
	CircleOfficeName string `json:"CircleOfficeName,omitempty"`
	// OfficeType holds the value of the "OfficeType" field.
	OfficeType string `json:"OfficeType,omitempty"`
	// EmailID holds the value of the "EmailID" field.
	EmailID string `json:"EmailID,omitempty"`
	// MobileNumber holds the value of the "MobileNumber" field.
	MobileNumber int32 `json:"MobileNumber,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CircleMasterQuery when eager-loading is set.
	Edges                    CircleMasterEdges `json:"edges"`
	facility_circle_ref      *int32
	region_master_circle_ref *int32
	selectValues             sql.SelectValues
}

// CircleMasterEdges holds the relations/edges for other nodes in the graph.
type CircleMasterEdges struct {
	// RegionRef holds the value of the region_ref edge.
	RegionRef []*RegionMaster `json:"region_ref,omitempty"`
	// CircleRef holds the value of the circle_ref edge.
	CircleRef []*Facility `json:"circle_ref,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RegionRefOrErr returns the RegionRef value or an error if the edge
// was not loaded in eager-loading.
func (e CircleMasterEdges) RegionRefOrErr() ([]*RegionMaster, error) {
	if e.loadedTypes[0] {
		return e.RegionRef, nil
	}
	return nil, &NotLoadedError{edge: "region_ref"}
}

// CircleRefOrErr returns the CircleRef value or an error if the edge
// was not loaded in eager-loading.
func (e CircleMasterEdges) CircleRefOrErr() ([]*Facility, error) {
	if e.loadedTypes[1] {
		return e.CircleRef, nil
	}
	return nil, &NotLoadedError{edge: "circle_ref"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CircleMaster) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case circlemaster.FieldID, circlemaster.FieldCircleCode, circlemaster.FieldMobileNumber:
			values[i] = new(sql.NullInt64)
		case circlemaster.FieldCircleOfficeId, circlemaster.FieldCircleOfficeName, circlemaster.FieldOfficeType, circlemaster.FieldEmailID:
			values[i] = new(sql.NullString)
		case circlemaster.ForeignKeys[0]: // facility_circle_ref
			values[i] = new(sql.NullInt64)
		case circlemaster.ForeignKeys[1]: // region_master_circle_ref
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CircleMaster fields.
func (cm *CircleMaster) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case circlemaster.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cm.ID = int32(value.Int64)
		case circlemaster.FieldCircleCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CircleCode", values[i])
			} else if value.Valid {
				cm.CircleCode = int32(value.Int64)
			}
		case circlemaster.FieldCircleOfficeId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CircleOfficeId", values[i])
			} else if value.Valid {
				cm.CircleOfficeId = value.String
			}
		case circlemaster.FieldCircleOfficeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CircleOfficeName", values[i])
			} else if value.Valid {
				cm.CircleOfficeName = value.String
			}
		case circlemaster.FieldOfficeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OfficeType", values[i])
			} else if value.Valid {
				cm.OfficeType = value.String
			}
		case circlemaster.FieldEmailID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmailID", values[i])
			} else if value.Valid {
				cm.EmailID = value.String
			}
		case circlemaster.FieldMobileNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field MobileNumber", values[i])
			} else if value.Valid {
				cm.MobileNumber = int32(value.Int64)
			}
		case circlemaster.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field facility_circle_ref", value)
			} else if value.Valid {
				cm.facility_circle_ref = new(int32)
				*cm.facility_circle_ref = int32(value.Int64)
			}
		case circlemaster.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field region_master_circle_ref", value)
			} else if value.Valid {
				cm.region_master_circle_ref = new(int32)
				*cm.region_master_circle_ref = int32(value.Int64)
			}
		default:
			cm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CircleMaster.
// This includes values selected through modifiers, order, etc.
func (cm *CircleMaster) Value(name string) (ent.Value, error) {
	return cm.selectValues.Get(name)
}

// QueryRegionRef queries the "region_ref" edge of the CircleMaster entity.
func (cm *CircleMaster) QueryRegionRef() *RegionMasterQuery {
	return NewCircleMasterClient(cm.config).QueryRegionRef(cm)
}

// QueryCircleRef queries the "circle_ref" edge of the CircleMaster entity.
func (cm *CircleMaster) QueryCircleRef() *FacilityQuery {
	return NewCircleMasterClient(cm.config).QueryCircleRef(cm)
}

// Update returns a builder for updating this CircleMaster.
// Note that you need to call CircleMaster.Unwrap() before calling this method if this CircleMaster
// was returned from a transaction, and the transaction was committed or rolled back.
func (cm *CircleMaster) Update() *CircleMasterUpdateOne {
	return NewCircleMasterClient(cm.config).UpdateOne(cm)
}

// Unwrap unwraps the CircleMaster entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cm *CircleMaster) Unwrap() *CircleMaster {
	_tx, ok := cm.config.driver.(*txDriver)
	if !ok {
		panic("ent: CircleMaster is not a transactional entity")
	}
	cm.config.driver = _tx.drv
	return cm
}

// String implements the fmt.Stringer.
func (cm *CircleMaster) String() string {
	var builder strings.Builder
	builder.WriteString("CircleMaster(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cm.ID))
	builder.WriteString("CircleCode=")
	builder.WriteString(fmt.Sprintf("%v", cm.CircleCode))
	builder.WriteString(", ")
	builder.WriteString("CircleOfficeId=")
	builder.WriteString(cm.CircleOfficeId)
	builder.WriteString(", ")
	builder.WriteString("CircleOfficeName=")
	builder.WriteString(cm.CircleOfficeName)
	builder.WriteString(", ")
	builder.WriteString("OfficeType=")
	builder.WriteString(cm.OfficeType)
	builder.WriteString(", ")
	builder.WriteString("EmailID=")
	builder.WriteString(cm.EmailID)
	builder.WriteString(", ")
	builder.WriteString("MobileNumber=")
	builder.WriteString(fmt.Sprintf("%v", cm.MobileNumber))
	builder.WriteByte(')')
	return builder.String()
}

// CircleMasters is a parsable slice of CircleMaster.
type CircleMasters []*CircleMaster
