// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/cadre_choice_ip"
	"recruit/ent/exam_applications_ip"
	"recruit/ent/exam_ip"
	"recruit/ent/facility"
	"recruit/ent/placeofpreferenceip"
	"recruit/ent/predicate"
	"recruit/ent/recommendationsipapplications"
	"recruit/ent/rolemaster"
	"recruit/ent/usermaster"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ExamApplicationsIPUpdate is the builder for updating Exam_Applications_IP entities.
type ExamApplicationsIPUpdate struct {
	config
	hooks    []Hook
	mutation *ExamApplicationsIPMutation
}

// Where appends a list predicates to the ExamApplicationsIPUpdate builder.
func (eaiu *ExamApplicationsIPUpdate) Where(ps ...predicate.Exam_Applications_IP) *ExamApplicationsIPUpdate {
	eaiu.mutation.Where(ps...)
	return eaiu
}

// SetApplicationNumber sets the "ApplicationNumber" field.
func (eaiu *ExamApplicationsIPUpdate) SetApplicationNumber(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetApplicationNumber(s)
	return eaiu
}

// SetNillableApplicationNumber sets the "ApplicationNumber" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableApplicationNumber(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetApplicationNumber(*s)
	}
	return eaiu
}

// ClearApplicationNumber clears the value of the "ApplicationNumber" field.
func (eaiu *ExamApplicationsIPUpdate) ClearApplicationNumber() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearApplicationNumber()
	return eaiu
}

// SetEmployeeID sets the "EmployeeID" field.
func (eaiu *ExamApplicationsIPUpdate) SetEmployeeID(i int64) *ExamApplicationsIPUpdate {
	eaiu.mutation.ResetEmployeeID()
	eaiu.mutation.SetEmployeeID(i)
	return eaiu
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableEmployeeID(i *int64) *ExamApplicationsIPUpdate {
	if i != nil {
		eaiu.SetEmployeeID(*i)
	}
	return eaiu
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (eaiu *ExamApplicationsIPUpdate) AddEmployeeID(i int64) *ExamApplicationsIPUpdate {
	eaiu.mutation.AddEmployeeID(i)
	return eaiu
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (eaiu *ExamApplicationsIPUpdate) ClearEmployeeID() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearEmployeeID()
	return eaiu
}

// SetEmployeeName sets the "EmployeeName" field.
func (eaiu *ExamApplicationsIPUpdate) SetEmployeeName(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetEmployeeName(s)
	return eaiu
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableEmployeeName(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetEmployeeName(*s)
	}
	return eaiu
}

// ClearEmployeeName clears the value of the "EmployeeName" field.
func (eaiu *ExamApplicationsIPUpdate) ClearEmployeeName() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearEmployeeName()
	return eaiu
}

// SetDOB sets the "DOB" field.
func (eaiu *ExamApplicationsIPUpdate) SetDOB(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetDOB(s)
	return eaiu
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableDOB(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetDOB(*s)
	}
	return eaiu
}

// ClearDOB clears the value of the "DOB" field.
func (eaiu *ExamApplicationsIPUpdate) ClearDOB() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearDOB()
	return eaiu
}

// SetGender sets the "Gender" field.
func (eaiu *ExamApplicationsIPUpdate) SetGender(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetGender(s)
	return eaiu
}

// SetNillableGender sets the "Gender" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableGender(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetGender(*s)
	}
	return eaiu
}

// ClearGender clears the value of the "Gender" field.
func (eaiu *ExamApplicationsIPUpdate) ClearGender() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearGender()
	return eaiu
}

// SetMobileNumber sets the "MobileNumber" field.
func (eaiu *ExamApplicationsIPUpdate) SetMobileNumber(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetMobileNumber(s)
	return eaiu
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableMobileNumber(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetMobileNumber(*s)
	}
	return eaiu
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (eaiu *ExamApplicationsIPUpdate) ClearMobileNumber() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearMobileNumber()
	return eaiu
}

// SetEmailID sets the "EmailID" field.
func (eaiu *ExamApplicationsIPUpdate) SetEmailID(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetEmailID(s)
	return eaiu
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableEmailID(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetEmailID(*s)
	}
	return eaiu
}

// ClearEmailID clears the value of the "EmailID" field.
func (eaiu *ExamApplicationsIPUpdate) ClearEmailID() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearEmailID()
	return eaiu
}

// SetEmployeeCategory sets the "EmployeeCategory" field.
func (eaiu *ExamApplicationsIPUpdate) SetEmployeeCategory(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetEmployeeCategory(s)
	return eaiu
}

// SetNillableEmployeeCategory sets the "EmployeeCategory" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableEmployeeCategory(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetEmployeeCategory(*s)
	}
	return eaiu
}

// ClearEmployeeCategory clears the value of the "EmployeeCategory" field.
func (eaiu *ExamApplicationsIPUpdate) ClearEmployeeCategory() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearEmployeeCategory()
	return eaiu
}

// SetCadre sets the "Cadre" field.
func (eaiu *ExamApplicationsIPUpdate) SetCadre(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetCadre(s)
	return eaiu
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableCadre(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetCadre(*s)
	}
	return eaiu
}

// ClearCadre clears the value of the "Cadre" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCadre() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCadre()
	return eaiu
}

// SetEmployeePost sets the "EmployeePost" field.
func (eaiu *ExamApplicationsIPUpdate) SetEmployeePost(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetEmployeePost(s)
	return eaiu
}

// SetNillableEmployeePost sets the "EmployeePost" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableEmployeePost(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetEmployeePost(*s)
	}
	return eaiu
}

// ClearEmployeePost clears the value of the "EmployeePost" field.
func (eaiu *ExamApplicationsIPUpdate) ClearEmployeePost() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearEmployeePost()
	return eaiu
}

// SetFacilityID sets the "FacilityID" field.
func (eaiu *ExamApplicationsIPUpdate) SetFacilityID(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetFacilityID(s)
	return eaiu
}

// SetNillableFacilityID sets the "FacilityID" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableFacilityID(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetFacilityID(*s)
	}
	return eaiu
}

// ClearFacilityID clears the value of the "FacilityID" field.
func (eaiu *ExamApplicationsIPUpdate) ClearFacilityID() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearFacilityID()
	return eaiu
}

// SetFacilityName sets the "FacilityName" field.
func (eaiu *ExamApplicationsIPUpdate) SetFacilityName(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetFacilityName(s)
	return eaiu
}

// SetNillableFacilityName sets the "FacilityName" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableFacilityName(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetFacilityName(*s)
	}
	return eaiu
}

// ClearFacilityName clears the value of the "FacilityName" field.
func (eaiu *ExamApplicationsIPUpdate) ClearFacilityName() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearFacilityName()
	return eaiu
}

// SetDivisionName sets the "DivisionName" field.
func (eaiu *ExamApplicationsIPUpdate) SetDivisionName(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetDivisionName(s)
	return eaiu
}

// SetNillableDivisionName sets the "DivisionName" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableDivisionName(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetDivisionName(*s)
	}
	return eaiu
}

// ClearDivisionName clears the value of the "DivisionName" field.
func (eaiu *ExamApplicationsIPUpdate) ClearDivisionName() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearDivisionName()
	return eaiu
}

// SetRegionName sets the "RegionName" field.
func (eaiu *ExamApplicationsIPUpdate) SetRegionName(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetRegionName(s)
	return eaiu
}

// SetNillableRegionName sets the "RegionName" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableRegionName(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetRegionName(*s)
	}
	return eaiu
}

// ClearRegionName clears the value of the "RegionName" field.
func (eaiu *ExamApplicationsIPUpdate) ClearRegionName() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearRegionName()
	return eaiu
}

// SetReportingOfficeName sets the "ReportingOfficeName" field.
func (eaiu *ExamApplicationsIPUpdate) SetReportingOfficeName(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetReportingOfficeName(s)
	return eaiu
}

// SetNillableReportingOfficeName sets the "ReportingOfficeName" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableReportingOfficeName(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetReportingOfficeName(*s)
	}
	return eaiu
}

// ClearReportingOfficeName clears the value of the "ReportingOfficeName" field.
func (eaiu *ExamApplicationsIPUpdate) ClearReportingOfficeName() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearReportingOfficeName()
	return eaiu
}

// SetCircleName sets the "CircleName" field.
func (eaiu *ExamApplicationsIPUpdate) SetCircleName(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetCircleName(s)
	return eaiu
}

// SetNillableCircleName sets the "CircleName" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableCircleName(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetCircleName(*s)
	}
	return eaiu
}

// ClearCircleName clears the value of the "CircleName" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCircleName() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCircleName()
	return eaiu
}

// SetEntryCadre sets the "EntryCadre" field.
func (eaiu *ExamApplicationsIPUpdate) SetEntryCadre(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetEntryCadre(s)
	return eaiu
}

// SetNillableEntryCadre sets the "EntryCadre" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableEntryCadre(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetEntryCadre(*s)
	}
	return eaiu
}

// ClearEntryCadre clears the value of the "EntryCadre" field.
func (eaiu *ExamApplicationsIPUpdate) ClearEntryCadre() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearEntryCadre()
	return eaiu
}

// SetDCCS sets the "DCCS" field.
func (eaiu *ExamApplicationsIPUpdate) SetDCCS(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetDCCS(s)
	return eaiu
}

// SetNillableDCCS sets the "DCCS" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableDCCS(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetDCCS(*s)
	}
	return eaiu
}

// ClearDCCS clears the value of the "DCCS" field.
func (eaiu *ExamApplicationsIPUpdate) ClearDCCS() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearDCCS()
	return eaiu
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (eaiu *ExamApplicationsIPUpdate) SetDCInPresentCadre(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetDCInPresentCadre(s)
	return eaiu
}

// SetNillableDCInPresentCadre sets the "DCInPresentCadre" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableDCInPresentCadre(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetDCInPresentCadre(*s)
	}
	return eaiu
}

// ClearDCInPresentCadre clears the value of the "DCInPresentCadre" field.
func (eaiu *ExamApplicationsIPUpdate) ClearDCInPresentCadre() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearDCInPresentCadre()
	return eaiu
}

// SetDeputationOfficeId sets the "DeputationOfficeId" field.
func (eaiu *ExamApplicationsIPUpdate) SetDeputationOfficeId(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetDeputationOfficeId(s)
	return eaiu
}

// SetNillableDeputationOfficeId sets the "DeputationOfficeId" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableDeputationOfficeId(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetDeputationOfficeId(*s)
	}
	return eaiu
}

// ClearDeputationOfficeId clears the value of the "DeputationOfficeId" field.
func (eaiu *ExamApplicationsIPUpdate) ClearDeputationOfficeId() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearDeputationOfficeId()
	return eaiu
}

// SetDisabilityType sets the "DisabilityType" field.
func (eaiu *ExamApplicationsIPUpdate) SetDisabilityType(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetDisabilityType(s)
	return eaiu
}

// SetNillableDisabilityType sets the "DisabilityType" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableDisabilityType(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetDisabilityType(*s)
	}
	return eaiu
}

// ClearDisabilityType clears the value of the "DisabilityType" field.
func (eaiu *ExamApplicationsIPUpdate) ClearDisabilityType() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearDisabilityType()
	return eaiu
}

// SetDisabilityPercentage sets the "DisabilityPercentage" field.
func (eaiu *ExamApplicationsIPUpdate) SetDisabilityPercentage(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetDisabilityPercentage(s)
	return eaiu
}

// SetNillableDisabilityPercentage sets the "DisabilityPercentage" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableDisabilityPercentage(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetDisabilityPercentage(*s)
	}
	return eaiu
}

// ClearDisabilityPercentage clears the value of the "DisabilityPercentage" field.
func (eaiu *ExamApplicationsIPUpdate) ClearDisabilityPercentage() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearDisabilityPercentage()
	return eaiu
}

// SetEducation sets the "Education" field.
func (eaiu *ExamApplicationsIPUpdate) SetEducation(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetEducation(s)
	return eaiu
}

// SetNillableEducation sets the "Education" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableEducation(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetEducation(*s)
	}
	return eaiu
}

// ClearEducation clears the value of the "Education" field.
func (eaiu *ExamApplicationsIPUpdate) ClearEducation() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearEducation()
	return eaiu
}

// SetExamNameCode sets the "ExamNameCode" field.
func (eaiu *ExamApplicationsIPUpdate) SetExamNameCode(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetExamNameCode(s)
	return eaiu
}

// SetNillableExamNameCode sets the "ExamNameCode" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableExamNameCode(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetExamNameCode(*s)
	}
	return eaiu
}

// ClearExamNameCode clears the value of the "ExamNameCode" field.
func (eaiu *ExamApplicationsIPUpdate) ClearExamNameCode() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearExamNameCode()
	return eaiu
}

// SetExamYear sets the "ExamYear" field.
func (eaiu *ExamApplicationsIPUpdate) SetExamYear(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetExamYear(s)
	return eaiu
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableExamYear(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetExamYear(*s)
	}
	return eaiu
}

// ClearExamYear clears the value of the "ExamYear" field.
func (eaiu *ExamApplicationsIPUpdate) ClearExamYear() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearExamYear()
	return eaiu
}

// SetExamName sets the "ExamName" field.
func (eaiu *ExamApplicationsIPUpdate) SetExamName(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetExamName(s)
	return eaiu
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableExamName(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetExamName(*s)
	}
	return eaiu
}

// ClearExamName clears the value of the "ExamName" field.
func (eaiu *ExamApplicationsIPUpdate) ClearExamName() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearExamName()
	return eaiu
}

// SetPresentCadre sets the "PresentCadre" field.
func (eaiu *ExamApplicationsIPUpdate) SetPresentCadre(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetPresentCadre(s)
	return eaiu
}

// SetNillablePresentCadre sets the "PresentCadre" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillablePresentCadre(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetPresentCadre(*s)
	}
	return eaiu
}

// ClearPresentCadre clears the value of the "PresentCadre" field.
func (eaiu *ExamApplicationsIPUpdate) ClearPresentCadre() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearPresentCadre()
	return eaiu
}

// SetPresentDesignation sets the "PresentDesignation" field.
func (eaiu *ExamApplicationsIPUpdate) SetPresentDesignation(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetPresentDesignation(s)
	return eaiu
}

// SetNillablePresentDesignation sets the "PresentDesignation" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillablePresentDesignation(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetPresentDesignation(*s)
	}
	return eaiu
}

// ClearPresentDesignation clears the value of the "PresentDesignation" field.
func (eaiu *ExamApplicationsIPUpdate) ClearPresentDesignation() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearPresentDesignation()
	return eaiu
}

// SetEligibleCadre sets the "EligibleCadre" field.
func (eaiu *ExamApplicationsIPUpdate) SetEligibleCadre(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetEligibleCadre(s)
	return eaiu
}

// SetNillableEligibleCadre sets the "EligibleCadre" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableEligibleCadre(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetEligibleCadre(*s)
	}
	return eaiu
}

// ClearEligibleCadre clears the value of the "EligibleCadre" field.
func (eaiu *ExamApplicationsIPUpdate) ClearEligibleCadre() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearEligibleCadre()
	return eaiu
}

// SetEligibleCadreDate sets the "EligibleCadreDate" field.
func (eaiu *ExamApplicationsIPUpdate) SetEligibleCadreDate(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetEligibleCadreDate(s)
	return eaiu
}

// SetNillableEligibleCadreDate sets the "EligibleCadreDate" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableEligibleCadreDate(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetEligibleCadreDate(*s)
	}
	return eaiu
}

// ClearEligibleCadreDate clears the value of the "EligibleCadreDate" field.
func (eaiu *ExamApplicationsIPUpdate) ClearEligibleCadreDate() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearEligibleCadreDate()
	return eaiu
}

// SetServiceLength sets the "ServiceLength" field.
func (eaiu *ExamApplicationsIPUpdate) SetServiceLength(i []interface{}) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetServiceLength(i)
	return eaiu
}

// AppendServiceLength appends i to the "ServiceLength" field.
func (eaiu *ExamApplicationsIPUpdate) AppendServiceLength(i []interface{}) *ExamApplicationsIPUpdate {
	eaiu.mutation.AppendServiceLength(i)
	return eaiu
}

// ClearServiceLength clears the value of the "ServiceLength" field.
func (eaiu *ExamApplicationsIPUpdate) ClearServiceLength() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearServiceLength()
	return eaiu
}

// SetCentrePreference sets the "CentrePreference" field.
func (eaiu *ExamApplicationsIPUpdate) SetCentrePreference(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetCentrePreference(s)
	return eaiu
}

// SetNillableCentrePreference sets the "CentrePreference" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableCentrePreference(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetCentrePreference(*s)
	}
	return eaiu
}

// ClearCentrePreference clears the value of the "CentrePreference" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCentrePreference() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCentrePreference()
	return eaiu
}

// SetSignature sets the "Signature" field.
func (eaiu *ExamApplicationsIPUpdate) SetSignature(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetSignature(s)
	return eaiu
}

// SetNillableSignature sets the "Signature" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableSignature(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetSignature(*s)
	}
	return eaiu
}

// ClearSignature clears the value of the "Signature" field.
func (eaiu *ExamApplicationsIPUpdate) ClearSignature() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearSignature()
	return eaiu
}

// SetPhoto sets the "Photo" field.
func (eaiu *ExamApplicationsIPUpdate) SetPhoto(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetPhoto(s)
	return eaiu
}

// SetNillablePhoto sets the "Photo" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillablePhoto(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetPhoto(*s)
	}
	return eaiu
}

// ClearPhoto clears the value of the "Photo" field.
func (eaiu *ExamApplicationsIPUpdate) ClearPhoto() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearPhoto()
	return eaiu
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (eaiu *ExamApplicationsIPUpdate) SetApplicationStatus(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetApplicationStatus(s)
	return eaiu
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableApplicationStatus(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetApplicationStatus(*s)
	}
	return eaiu
}

// ClearApplicationStatus clears the value of the "ApplicationStatus" field.
func (eaiu *ExamApplicationsIPUpdate) ClearApplicationStatus() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearApplicationStatus()
	return eaiu
}

// SetApplnSubmittedDate sets the "ApplnSubmittedDate" field.
func (eaiu *ExamApplicationsIPUpdate) SetApplnSubmittedDate(t time.Time) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetApplnSubmittedDate(t)
	return eaiu
}

// SetNillableApplnSubmittedDate sets the "ApplnSubmittedDate" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableApplnSubmittedDate(t *time.Time) *ExamApplicationsIPUpdate {
	if t != nil {
		eaiu.SetApplnSubmittedDate(*t)
	}
	return eaiu
}

// ClearApplnSubmittedDate clears the value of the "ApplnSubmittedDate" field.
func (eaiu *ExamApplicationsIPUpdate) ClearApplnSubmittedDate() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearApplnSubmittedDate()
	return eaiu
}

// SetVARemarks sets the "VA_Remarks" field.
func (eaiu *ExamApplicationsIPUpdate) SetVARemarks(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetVARemarks(s)
	return eaiu
}

// SetNillableVARemarks sets the "VA_Remarks" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableVARemarks(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetVARemarks(*s)
	}
	return eaiu
}

// ClearVARemarks clears the value of the "VA_Remarks" field.
func (eaiu *ExamApplicationsIPUpdate) ClearVARemarks() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearVARemarks()
	return eaiu
}

// SetVAUserName sets the "VA_UserName" field.
func (eaiu *ExamApplicationsIPUpdate) SetVAUserName(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetVAUserName(s)
	return eaiu
}

// SetNillableVAUserName sets the "VA_UserName" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableVAUserName(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetVAUserName(*s)
	}
	return eaiu
}

// ClearVAUserName clears the value of the "VA_UserName" field.
func (eaiu *ExamApplicationsIPUpdate) ClearVAUserName() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearVAUserName()
	return eaiu
}

// SetVADate sets the "VA_Date" field.
func (eaiu *ExamApplicationsIPUpdate) SetVADate(t time.Time) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetVADate(t)
	return eaiu
}

// SetNillableVADate sets the "VA_Date" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableVADate(t *time.Time) *ExamApplicationsIPUpdate {
	if t != nil {
		eaiu.SetVADate(*t)
	}
	return eaiu
}

// ClearVADate clears the value of the "VA_Date" field.
func (eaiu *ExamApplicationsIPUpdate) ClearVADate() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearVADate()
	return eaiu
}

// SetCARemarks sets the "CA_Remarks" field.
func (eaiu *ExamApplicationsIPUpdate) SetCARemarks(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetCARemarks(s)
	return eaiu
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableCARemarks(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetCARemarks(*s)
	}
	return eaiu
}

// ClearCARemarks clears the value of the "CA_Remarks" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCARemarks() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCARemarks()
	return eaiu
}

// SetCAUserName sets the "CA_UserName" field.
func (eaiu *ExamApplicationsIPUpdate) SetCAUserName(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetCAUserName(s)
	return eaiu
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableCAUserName(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetCAUserName(*s)
	}
	return eaiu
}

// ClearCAUserName clears the value of the "CA_UserName" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCAUserName() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCAUserName()
	return eaiu
}

// SetCADate sets the "CA_Date" field.
func (eaiu *ExamApplicationsIPUpdate) SetCADate(t time.Time) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetCADate(t)
	return eaiu
}

// SetNillableCADate sets the "CA_Date" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableCADate(t *time.Time) *ExamApplicationsIPUpdate {
	if t != nil {
		eaiu.SetCADate(*t)
	}
	return eaiu
}

// ClearCADate clears the value of the "CA_Date" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCADate() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCADate()
	return eaiu
}

// SetApplicationWdlDate sets the "ApplicationWdlDate" field.
func (eaiu *ExamApplicationsIPUpdate) SetApplicationWdlDate(t time.Time) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetApplicationWdlDate(t)
	return eaiu
}

// SetNillableApplicationWdlDate sets the "ApplicationWdlDate" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableApplicationWdlDate(t *time.Time) *ExamApplicationsIPUpdate {
	if t != nil {
		eaiu.SetApplicationWdlDate(*t)
	}
	return eaiu
}

// ClearApplicationWdlDate clears the value of the "ApplicationWdlDate" field.
func (eaiu *ExamApplicationsIPUpdate) ClearApplicationWdlDate() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearApplicationWdlDate()
	return eaiu
}

// SetNARemarks sets the "NA_Remarks" field.
func (eaiu *ExamApplicationsIPUpdate) SetNARemarks(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetNARemarks(s)
	return eaiu
}

// SetNillableNARemarks sets the "NA_Remarks" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableNARemarks(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetNARemarks(*s)
	}
	return eaiu
}

// ClearNARemarks clears the value of the "NA_Remarks" field.
func (eaiu *ExamApplicationsIPUpdate) ClearNARemarks() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearNARemarks()
	return eaiu
}

// SetNAUserName sets the "NA_UserName" field.
func (eaiu *ExamApplicationsIPUpdate) SetNAUserName(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetNAUserName(s)
	return eaiu
}

// SetNillableNAUserName sets the "NA_UserName" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableNAUserName(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetNAUserName(*s)
	}
	return eaiu
}

// ClearNAUserName clears the value of the "NA_UserName" field.
func (eaiu *ExamApplicationsIPUpdate) ClearNAUserName() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearNAUserName()
	return eaiu
}

// SetNADate sets the "NA_Date" field.
func (eaiu *ExamApplicationsIPUpdate) SetNADate(t time.Time) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetNADate(t)
	return eaiu
}

// SetNillableNADate sets the "NA_Date" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableNADate(t *time.Time) *ExamApplicationsIPUpdate {
	if t != nil {
		eaiu.SetNADate(*t)
	}
	return eaiu
}

// ClearNADate clears the value of the "NA_Date" field.
func (eaiu *ExamApplicationsIPUpdate) ClearNADate() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearNADate()
	return eaiu
}

// SetAppliactionRemarks sets the "AppliactionRemarks" field.
func (eaiu *ExamApplicationsIPUpdate) SetAppliactionRemarks(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetAppliactionRemarks(s)
	return eaiu
}

// SetNillableAppliactionRemarks sets the "AppliactionRemarks" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableAppliactionRemarks(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetAppliactionRemarks(*s)
	}
	return eaiu
}

// ClearAppliactionRemarks clears the value of the "AppliactionRemarks" field.
func (eaiu *ExamApplicationsIPUpdate) ClearAppliactionRemarks() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearAppliactionRemarks()
	return eaiu
}

// SetCadrePreferences sets the "CadrePreferences" field.
func (eaiu *ExamApplicationsIPUpdate) SetCadrePreferences(i []interface{}) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetCadrePreferences(i)
	return eaiu
}

// AppendCadrePreferences appends i to the "CadrePreferences" field.
func (eaiu *ExamApplicationsIPUpdate) AppendCadrePreferences(i []interface{}) *ExamApplicationsIPUpdate {
	eaiu.mutation.AppendCadrePreferences(i)
	return eaiu
}

// ClearCadrePreferences clears the value of the "CadrePreferences" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCadrePreferences() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCadrePreferences()
	return eaiu
}

// SetDivisionPreferences sets the "DivisionPreferences" field.
func (eaiu *ExamApplicationsIPUpdate) SetDivisionPreferences(i []interface{}) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetDivisionPreferences(i)
	return eaiu
}

// AppendDivisionPreferences appends i to the "DivisionPreferences" field.
func (eaiu *ExamApplicationsIPUpdate) AppendDivisionPreferences(i []interface{}) *ExamApplicationsIPUpdate {
	eaiu.mutation.AppendDivisionPreferences(i)
	return eaiu
}

// ClearDivisionPreferences clears the value of the "DivisionPreferences" field.
func (eaiu *ExamApplicationsIPUpdate) ClearDivisionPreferences() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearDivisionPreferences()
	return eaiu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (eaiu *ExamApplicationsIPUpdate) SetUpdatedAt(t time.Time) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetUpdatedAt(t)
	return eaiu
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableUpdatedAt(t *time.Time) *ExamApplicationsIPUpdate {
	if t != nil {
		eaiu.SetUpdatedAt(*t)
	}
	return eaiu
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (eaiu *ExamApplicationsIPUpdate) ClearUpdatedAt() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearUpdatedAt()
	return eaiu
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (eaiu *ExamApplicationsIPUpdate) SetUpdatedBy(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetUpdatedBy(s)
	return eaiu
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableUpdatedBy(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetUpdatedBy(*s)
	}
	return eaiu
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (eaiu *ExamApplicationsIPUpdate) ClearUpdatedBy() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearUpdatedBy()
	return eaiu
}

// SetCAPreviousRemarks sets the "CAPreviousRemarks" field.
func (eaiu *ExamApplicationsIPUpdate) SetCAPreviousRemarks(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetCAPreviousRemarks(s)
	return eaiu
}

// SetNillableCAPreviousRemarks sets the "CAPreviousRemarks" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableCAPreviousRemarks(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetCAPreviousRemarks(*s)
	}
	return eaiu
}

// ClearCAPreviousRemarks clears the value of the "CAPreviousRemarks" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCAPreviousRemarks() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCAPreviousRemarks()
	return eaiu
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (eaiu *ExamApplicationsIPUpdate) SetRoleUserCode(i int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetRoleUserCode(i)
	return eaiu
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableRoleUserCode(i *int32) *ExamApplicationsIPUpdate {
	if i != nil {
		eaiu.SetRoleUserCode(*i)
	}
	return eaiu
}

// ClearRoleUserCode clears the value of the "RoleUserCode" field.
func (eaiu *ExamApplicationsIPUpdate) ClearRoleUserCode() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearRoleUserCode()
	return eaiu
}

// AddUsersIPRefIDs adds the "UsersIPRef" edge to the UserMaster entity by IDs.
func (eaiu *ExamApplicationsIPUpdate) AddUsersIPRefIDs(ids ...int64) *ExamApplicationsIPUpdate {
	eaiu.mutation.AddUsersIPRefIDs(ids...)
	return eaiu
}

// AddUsersIPRef adds the "UsersIPRef" edges to the UserMaster entity.
func (eaiu *ExamApplicationsIPUpdate) AddUsersIPRef(u ...*UserMaster) *ExamApplicationsIPUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eaiu.AddUsersIPRefIDs(ids...)
}

// AddExamApplnIPRefIDs adds the "ExamAppln_IP_Ref" edge to the Exam_IP entity by IDs.
func (eaiu *ExamApplicationsIPUpdate) AddExamApplnIPRefIDs(ids ...int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.AddExamApplnIPRefIDs(ids...)
	return eaiu
}

// AddExamApplnIPRef adds the "ExamAppln_IP_Ref" edges to the Exam_IP entity.
func (eaiu *ExamApplicationsIPUpdate) AddExamApplnIPRef(e ...*Exam_IP) *ExamApplicationsIPUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eaiu.AddExamApplnIPRefIDs(ids...)
}

// AddOfficeIPRefIDs adds the "Office_IP_Ref" edge to the Facility entity by IDs.
func (eaiu *ExamApplicationsIPUpdate) AddOfficeIPRefIDs(ids ...int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.AddOfficeIPRefIDs(ids...)
	return eaiu
}

// AddOfficeIPRef adds the "Office_IP_Ref" edges to the Facility entity.
func (eaiu *ExamApplicationsIPUpdate) AddOfficeIPRef(f ...*Facility) *ExamApplicationsIPUpdate {
	ids := make([]int32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eaiu.AddOfficeIPRefIDs(ids...)
}

// SetRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID.
func (eaiu *ExamApplicationsIPUpdate) SetRoleusersID(id int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetRoleusersID(id)
	return eaiu
}

// SetNillableRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableRoleusersID(id *int32) *ExamApplicationsIPUpdate {
	if id != nil {
		eaiu = eaiu.SetRoleusersID(*id)
	}
	return eaiu
}

// SetRoleusers sets the "roleusers" edge to the RoleMaster entity.
func (eaiu *ExamApplicationsIPUpdate) SetRoleusers(r *RoleMaster) *ExamApplicationsIPUpdate {
	return eaiu.SetRoleusersID(r.ID)
}

// AddCadrePrefRefIDs adds the "CadrePref_Ref" edge to the Cadre_Choice_IP entity by IDs.
func (eaiu *ExamApplicationsIPUpdate) AddCadrePrefRefIDs(ids ...int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.AddCadrePrefRefIDs(ids...)
	return eaiu
}

// AddCadrePrefRef adds the "CadrePref_Ref" edges to the Cadre_Choice_IP entity.
func (eaiu *ExamApplicationsIPUpdate) AddCadrePrefRef(c ...*Cadre_Choice_IP) *ExamApplicationsIPUpdate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eaiu.AddCadrePrefRefIDs(ids...)
}

// AddCirclePrefRefIDs adds the "CirclePrefRef" edge to the PlaceOfPreferenceIP entity by IDs.
func (eaiu *ExamApplicationsIPUpdate) AddCirclePrefRefIDs(ids ...int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.AddCirclePrefRefIDs(ids...)
	return eaiu
}

// AddCirclePrefRef adds the "CirclePrefRef" edges to the PlaceOfPreferenceIP entity.
func (eaiu *ExamApplicationsIPUpdate) AddCirclePrefRef(p ...*PlaceOfPreferenceIP) *ExamApplicationsIPUpdate {
	ids := make([]int32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eaiu.AddCirclePrefRefIDs(ids...)
}

// AddIPApplicationsRefIDs adds the "IPApplicationsRef" edge to the RecommendationsIPApplications entity by IDs.
func (eaiu *ExamApplicationsIPUpdate) AddIPApplicationsRefIDs(ids ...int64) *ExamApplicationsIPUpdate {
	eaiu.mutation.AddIPApplicationsRefIDs(ids...)
	return eaiu
}

// AddIPApplicationsRef adds the "IPApplicationsRef" edges to the RecommendationsIPApplications entity.
func (eaiu *ExamApplicationsIPUpdate) AddIPApplicationsRef(r ...*RecommendationsIPApplications) *ExamApplicationsIPUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eaiu.AddIPApplicationsRefIDs(ids...)
}

// Mutation returns the ExamApplicationsIPMutation object of the builder.
func (eaiu *ExamApplicationsIPUpdate) Mutation() *ExamApplicationsIPMutation {
	return eaiu.mutation
}

// ClearUsersIPRef clears all "UsersIPRef" edges to the UserMaster entity.
func (eaiu *ExamApplicationsIPUpdate) ClearUsersIPRef() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearUsersIPRef()
	return eaiu
}

// RemoveUsersIPRefIDs removes the "UsersIPRef" edge to UserMaster entities by IDs.
func (eaiu *ExamApplicationsIPUpdate) RemoveUsersIPRefIDs(ids ...int64) *ExamApplicationsIPUpdate {
	eaiu.mutation.RemoveUsersIPRefIDs(ids...)
	return eaiu
}

// RemoveUsersIPRef removes "UsersIPRef" edges to UserMaster entities.
func (eaiu *ExamApplicationsIPUpdate) RemoveUsersIPRef(u ...*UserMaster) *ExamApplicationsIPUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eaiu.RemoveUsersIPRefIDs(ids...)
}

// ClearExamApplnIPRef clears all "ExamAppln_IP_Ref" edges to the Exam_IP entity.
func (eaiu *ExamApplicationsIPUpdate) ClearExamApplnIPRef() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearExamApplnIPRef()
	return eaiu
}

// RemoveExamApplnIPRefIDs removes the "ExamAppln_IP_Ref" edge to Exam_IP entities by IDs.
func (eaiu *ExamApplicationsIPUpdate) RemoveExamApplnIPRefIDs(ids ...int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.RemoveExamApplnIPRefIDs(ids...)
	return eaiu
}

// RemoveExamApplnIPRef removes "ExamAppln_IP_Ref" edges to Exam_IP entities.
func (eaiu *ExamApplicationsIPUpdate) RemoveExamApplnIPRef(e ...*Exam_IP) *ExamApplicationsIPUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eaiu.RemoveExamApplnIPRefIDs(ids...)
}

// ClearOfficeIPRef clears all "Office_IP_Ref" edges to the Facility entity.
func (eaiu *ExamApplicationsIPUpdate) ClearOfficeIPRef() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearOfficeIPRef()
	return eaiu
}

// RemoveOfficeIPRefIDs removes the "Office_IP_Ref" edge to Facility entities by IDs.
func (eaiu *ExamApplicationsIPUpdate) RemoveOfficeIPRefIDs(ids ...int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.RemoveOfficeIPRefIDs(ids...)
	return eaiu
}

// RemoveOfficeIPRef removes "Office_IP_Ref" edges to Facility entities.
func (eaiu *ExamApplicationsIPUpdate) RemoveOfficeIPRef(f ...*Facility) *ExamApplicationsIPUpdate {
	ids := make([]int32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eaiu.RemoveOfficeIPRefIDs(ids...)
}

// ClearRoleusers clears the "roleusers" edge to the RoleMaster entity.
func (eaiu *ExamApplicationsIPUpdate) ClearRoleusers() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearRoleusers()
	return eaiu
}

// ClearCadrePrefRef clears all "CadrePref_Ref" edges to the Cadre_Choice_IP entity.
func (eaiu *ExamApplicationsIPUpdate) ClearCadrePrefRef() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCadrePrefRef()
	return eaiu
}

// RemoveCadrePrefRefIDs removes the "CadrePref_Ref" edge to Cadre_Choice_IP entities by IDs.
func (eaiu *ExamApplicationsIPUpdate) RemoveCadrePrefRefIDs(ids ...int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.RemoveCadrePrefRefIDs(ids...)
	return eaiu
}

// RemoveCadrePrefRef removes "CadrePref_Ref" edges to Cadre_Choice_IP entities.
func (eaiu *ExamApplicationsIPUpdate) RemoveCadrePrefRef(c ...*Cadre_Choice_IP) *ExamApplicationsIPUpdate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eaiu.RemoveCadrePrefRefIDs(ids...)
}

// ClearCirclePrefRef clears all "CirclePrefRef" edges to the PlaceOfPreferenceIP entity.
func (eaiu *ExamApplicationsIPUpdate) ClearCirclePrefRef() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCirclePrefRef()
	return eaiu
}

// RemoveCirclePrefRefIDs removes the "CirclePrefRef" edge to PlaceOfPreferenceIP entities by IDs.
func (eaiu *ExamApplicationsIPUpdate) RemoveCirclePrefRefIDs(ids ...int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.RemoveCirclePrefRefIDs(ids...)
	return eaiu
}

// RemoveCirclePrefRef removes "CirclePrefRef" edges to PlaceOfPreferenceIP entities.
func (eaiu *ExamApplicationsIPUpdate) RemoveCirclePrefRef(p ...*PlaceOfPreferenceIP) *ExamApplicationsIPUpdate {
	ids := make([]int32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eaiu.RemoveCirclePrefRefIDs(ids...)
}

// ClearIPApplicationsRef clears all "IPApplicationsRef" edges to the RecommendationsIPApplications entity.
func (eaiu *ExamApplicationsIPUpdate) ClearIPApplicationsRef() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearIPApplicationsRef()
	return eaiu
}

// RemoveIPApplicationsRefIDs removes the "IPApplicationsRef" edge to RecommendationsIPApplications entities by IDs.
func (eaiu *ExamApplicationsIPUpdate) RemoveIPApplicationsRefIDs(ids ...int64) *ExamApplicationsIPUpdate {
	eaiu.mutation.RemoveIPApplicationsRefIDs(ids...)
	return eaiu
}

// RemoveIPApplicationsRef removes "IPApplicationsRef" edges to RecommendationsIPApplications entities.
func (eaiu *ExamApplicationsIPUpdate) RemoveIPApplicationsRef(r ...*RecommendationsIPApplications) *ExamApplicationsIPUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eaiu.RemoveIPApplicationsRefIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eaiu *ExamApplicationsIPUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eaiu.sqlSave, eaiu.mutation, eaiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eaiu *ExamApplicationsIPUpdate) SaveX(ctx context.Context) int {
	affected, err := eaiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eaiu *ExamApplicationsIPUpdate) Exec(ctx context.Context) error {
	_, err := eaiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eaiu *ExamApplicationsIPUpdate) ExecX(ctx context.Context) {
	if err := eaiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eaiu *ExamApplicationsIPUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(exam_applications_ip.Table, exam_applications_ip.Columns, sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64))
	if ps := eaiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eaiu.mutation.ApplicationNumber(); ok {
		_spec.SetField(exam_applications_ip.FieldApplicationNumber, field.TypeString, value)
	}
	if eaiu.mutation.ApplicationNumberCleared() {
		_spec.ClearField(exam_applications_ip.FieldApplicationNumber, field.TypeString)
	}
	if value, ok := eaiu.mutation.EmployeeID(); ok {
		_spec.SetField(exam_applications_ip.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := eaiu.mutation.AddedEmployeeID(); ok {
		_spec.AddField(exam_applications_ip.FieldEmployeeID, field.TypeInt64, value)
	}
	if eaiu.mutation.EmployeeIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := eaiu.mutation.EmployeeName(); ok {
		_spec.SetField(exam_applications_ip.FieldEmployeeName, field.TypeString, value)
	}
	if eaiu.mutation.EmployeeNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldEmployeeName, field.TypeString)
	}
	if value, ok := eaiu.mutation.DOB(); ok {
		_spec.SetField(exam_applications_ip.FieldDOB, field.TypeString, value)
	}
	if eaiu.mutation.DOBCleared() {
		_spec.ClearField(exam_applications_ip.FieldDOB, field.TypeString)
	}
	if value, ok := eaiu.mutation.Gender(); ok {
		_spec.SetField(exam_applications_ip.FieldGender, field.TypeString, value)
	}
	if eaiu.mutation.GenderCleared() {
		_spec.ClearField(exam_applications_ip.FieldGender, field.TypeString)
	}
	if value, ok := eaiu.mutation.MobileNumber(); ok {
		_spec.SetField(exam_applications_ip.FieldMobileNumber, field.TypeString, value)
	}
	if eaiu.mutation.MobileNumberCleared() {
		_spec.ClearField(exam_applications_ip.FieldMobileNumber, field.TypeString)
	}
	if value, ok := eaiu.mutation.EmailID(); ok {
		_spec.SetField(exam_applications_ip.FieldEmailID, field.TypeString, value)
	}
	if eaiu.mutation.EmailIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldEmailID, field.TypeString)
	}
	if value, ok := eaiu.mutation.EmployeeCategory(); ok {
		_spec.SetField(exam_applications_ip.FieldEmployeeCategory, field.TypeString, value)
	}
	if eaiu.mutation.EmployeeCategoryCleared() {
		_spec.ClearField(exam_applications_ip.FieldEmployeeCategory, field.TypeString)
	}
	if value, ok := eaiu.mutation.Cadre(); ok {
		_spec.SetField(exam_applications_ip.FieldCadre, field.TypeString, value)
	}
	if eaiu.mutation.CadreCleared() {
		_spec.ClearField(exam_applications_ip.FieldCadre, field.TypeString)
	}
	if value, ok := eaiu.mutation.EmployeePost(); ok {
		_spec.SetField(exam_applications_ip.FieldEmployeePost, field.TypeString, value)
	}
	if eaiu.mutation.EmployeePostCleared() {
		_spec.ClearField(exam_applications_ip.FieldEmployeePost, field.TypeString)
	}
	if value, ok := eaiu.mutation.FacilityID(); ok {
		_spec.SetField(exam_applications_ip.FieldFacilityID, field.TypeString, value)
	}
	if eaiu.mutation.FacilityIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldFacilityID, field.TypeString)
	}
	if value, ok := eaiu.mutation.FacilityName(); ok {
		_spec.SetField(exam_applications_ip.FieldFacilityName, field.TypeString, value)
	}
	if eaiu.mutation.FacilityNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldFacilityName, field.TypeString)
	}
	if value, ok := eaiu.mutation.DivisionName(); ok {
		_spec.SetField(exam_applications_ip.FieldDivisionName, field.TypeString, value)
	}
	if eaiu.mutation.DivisionNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldDivisionName, field.TypeString)
	}
	if value, ok := eaiu.mutation.RegionName(); ok {
		_spec.SetField(exam_applications_ip.FieldRegionName, field.TypeString, value)
	}
	if eaiu.mutation.RegionNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldRegionName, field.TypeString)
	}
	if value, ok := eaiu.mutation.ReportingOfficeName(); ok {
		_spec.SetField(exam_applications_ip.FieldReportingOfficeName, field.TypeString, value)
	}
	if eaiu.mutation.ReportingOfficeNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldReportingOfficeName, field.TypeString)
	}
	if value, ok := eaiu.mutation.CircleName(); ok {
		_spec.SetField(exam_applications_ip.FieldCircleName, field.TypeString, value)
	}
	if eaiu.mutation.CircleNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldCircleName, field.TypeString)
	}
	if value, ok := eaiu.mutation.EntryCadre(); ok {
		_spec.SetField(exam_applications_ip.FieldEntryCadre, field.TypeString, value)
	}
	if eaiu.mutation.EntryCadreCleared() {
		_spec.ClearField(exam_applications_ip.FieldEntryCadre, field.TypeString)
	}
	if value, ok := eaiu.mutation.DCCS(); ok {
		_spec.SetField(exam_applications_ip.FieldDCCS, field.TypeString, value)
	}
	if eaiu.mutation.DCCSCleared() {
		_spec.ClearField(exam_applications_ip.FieldDCCS, field.TypeString)
	}
	if value, ok := eaiu.mutation.DCInPresentCadre(); ok {
		_spec.SetField(exam_applications_ip.FieldDCInPresentCadre, field.TypeString, value)
	}
	if eaiu.mutation.DCInPresentCadreCleared() {
		_spec.ClearField(exam_applications_ip.FieldDCInPresentCadre, field.TypeString)
	}
	if value, ok := eaiu.mutation.DeputationOfficeId(); ok {
		_spec.SetField(exam_applications_ip.FieldDeputationOfficeId, field.TypeString, value)
	}
	if eaiu.mutation.DeputationOfficeIdCleared() {
		_spec.ClearField(exam_applications_ip.FieldDeputationOfficeId, field.TypeString)
	}
	if value, ok := eaiu.mutation.DisabilityType(); ok {
		_spec.SetField(exam_applications_ip.FieldDisabilityType, field.TypeString, value)
	}
	if eaiu.mutation.DisabilityTypeCleared() {
		_spec.ClearField(exam_applications_ip.FieldDisabilityType, field.TypeString)
	}
	if value, ok := eaiu.mutation.DisabilityPercentage(); ok {
		_spec.SetField(exam_applications_ip.FieldDisabilityPercentage, field.TypeString, value)
	}
	if eaiu.mutation.DisabilityPercentageCleared() {
		_spec.ClearField(exam_applications_ip.FieldDisabilityPercentage, field.TypeString)
	}
	if value, ok := eaiu.mutation.Education(); ok {
		_spec.SetField(exam_applications_ip.FieldEducation, field.TypeString, value)
	}
	if eaiu.mutation.EducationCleared() {
		_spec.ClearField(exam_applications_ip.FieldEducation, field.TypeString)
	}
	if value, ok := eaiu.mutation.ExamNameCode(); ok {
		_spec.SetField(exam_applications_ip.FieldExamNameCode, field.TypeString, value)
	}
	if eaiu.mutation.ExamNameCodeCleared() {
		_spec.ClearField(exam_applications_ip.FieldExamNameCode, field.TypeString)
	}
	if value, ok := eaiu.mutation.ExamYear(); ok {
		_spec.SetField(exam_applications_ip.FieldExamYear, field.TypeString, value)
	}
	if eaiu.mutation.ExamYearCleared() {
		_spec.ClearField(exam_applications_ip.FieldExamYear, field.TypeString)
	}
	if value, ok := eaiu.mutation.ExamName(); ok {
		_spec.SetField(exam_applications_ip.FieldExamName, field.TypeString, value)
	}
	if eaiu.mutation.ExamNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldExamName, field.TypeString)
	}
	if value, ok := eaiu.mutation.PresentCadre(); ok {
		_spec.SetField(exam_applications_ip.FieldPresentCadre, field.TypeString, value)
	}
	if eaiu.mutation.PresentCadreCleared() {
		_spec.ClearField(exam_applications_ip.FieldPresentCadre, field.TypeString)
	}
	if value, ok := eaiu.mutation.PresentDesignation(); ok {
		_spec.SetField(exam_applications_ip.FieldPresentDesignation, field.TypeString, value)
	}
	if eaiu.mutation.PresentDesignationCleared() {
		_spec.ClearField(exam_applications_ip.FieldPresentDesignation, field.TypeString)
	}
	if value, ok := eaiu.mutation.EligibleCadre(); ok {
		_spec.SetField(exam_applications_ip.FieldEligibleCadre, field.TypeString, value)
	}
	if eaiu.mutation.EligibleCadreCleared() {
		_spec.ClearField(exam_applications_ip.FieldEligibleCadre, field.TypeString)
	}
	if value, ok := eaiu.mutation.EligibleCadreDate(); ok {
		_spec.SetField(exam_applications_ip.FieldEligibleCadreDate, field.TypeString, value)
	}
	if eaiu.mutation.EligibleCadreDateCleared() {
		_spec.ClearField(exam_applications_ip.FieldEligibleCadreDate, field.TypeString)
	}
	if value, ok := eaiu.mutation.ServiceLength(); ok {
		_spec.SetField(exam_applications_ip.FieldServiceLength, field.TypeJSON, value)
	}
	if value, ok := eaiu.mutation.AppendedServiceLength(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_ip.FieldServiceLength, value)
		})
	}
	if eaiu.mutation.ServiceLengthCleared() {
		_spec.ClearField(exam_applications_ip.FieldServiceLength, field.TypeJSON)
	}
	if value, ok := eaiu.mutation.CentrePreference(); ok {
		_spec.SetField(exam_applications_ip.FieldCentrePreference, field.TypeString, value)
	}
	if eaiu.mutation.CentrePreferenceCleared() {
		_spec.ClearField(exam_applications_ip.FieldCentrePreference, field.TypeString)
	}
	if value, ok := eaiu.mutation.Signature(); ok {
		_spec.SetField(exam_applications_ip.FieldSignature, field.TypeString, value)
	}
	if eaiu.mutation.SignatureCleared() {
		_spec.ClearField(exam_applications_ip.FieldSignature, field.TypeString)
	}
	if value, ok := eaiu.mutation.Photo(); ok {
		_spec.SetField(exam_applications_ip.FieldPhoto, field.TypeString, value)
	}
	if eaiu.mutation.PhotoCleared() {
		_spec.ClearField(exam_applications_ip.FieldPhoto, field.TypeString)
	}
	if value, ok := eaiu.mutation.ApplicationStatus(); ok {
		_spec.SetField(exam_applications_ip.FieldApplicationStatus, field.TypeString, value)
	}
	if eaiu.mutation.ApplicationStatusCleared() {
		_spec.ClearField(exam_applications_ip.FieldApplicationStatus, field.TypeString)
	}
	if value, ok := eaiu.mutation.ApplnSubmittedDate(); ok {
		_spec.SetField(exam_applications_ip.FieldApplnSubmittedDate, field.TypeTime, value)
	}
	if eaiu.mutation.ApplnSubmittedDateCleared() {
		_spec.ClearField(exam_applications_ip.FieldApplnSubmittedDate, field.TypeTime)
	}
	if value, ok := eaiu.mutation.VARemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldVARemarks, field.TypeString, value)
	}
	if eaiu.mutation.VARemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldVARemarks, field.TypeString)
	}
	if value, ok := eaiu.mutation.VAUserName(); ok {
		_spec.SetField(exam_applications_ip.FieldVAUserName, field.TypeString, value)
	}
	if eaiu.mutation.VAUserNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldVAUserName, field.TypeString)
	}
	if value, ok := eaiu.mutation.VADate(); ok {
		_spec.SetField(exam_applications_ip.FieldVADate, field.TypeTime, value)
	}
	if eaiu.mutation.VADateCleared() {
		_spec.ClearField(exam_applications_ip.FieldVADate, field.TypeTime)
	}
	if value, ok := eaiu.mutation.CARemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldCARemarks, field.TypeString, value)
	}
	if eaiu.mutation.CARemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldCARemarks, field.TypeString)
	}
	if value, ok := eaiu.mutation.CAUserName(); ok {
		_spec.SetField(exam_applications_ip.FieldCAUserName, field.TypeString, value)
	}
	if eaiu.mutation.CAUserNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldCAUserName, field.TypeString)
	}
	if value, ok := eaiu.mutation.CADate(); ok {
		_spec.SetField(exam_applications_ip.FieldCADate, field.TypeTime, value)
	}
	if eaiu.mutation.CADateCleared() {
		_spec.ClearField(exam_applications_ip.FieldCADate, field.TypeTime)
	}
	if value, ok := eaiu.mutation.ApplicationWdlDate(); ok {
		_spec.SetField(exam_applications_ip.FieldApplicationWdlDate, field.TypeTime, value)
	}
	if eaiu.mutation.ApplicationWdlDateCleared() {
		_spec.ClearField(exam_applications_ip.FieldApplicationWdlDate, field.TypeTime)
	}
	if value, ok := eaiu.mutation.NARemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldNARemarks, field.TypeString, value)
	}
	if eaiu.mutation.NARemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldNARemarks, field.TypeString)
	}
	if value, ok := eaiu.mutation.NAUserName(); ok {
		_spec.SetField(exam_applications_ip.FieldNAUserName, field.TypeString, value)
	}
	if eaiu.mutation.NAUserNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldNAUserName, field.TypeString)
	}
	if value, ok := eaiu.mutation.NADate(); ok {
		_spec.SetField(exam_applications_ip.FieldNADate, field.TypeTime, value)
	}
	if eaiu.mutation.NADateCleared() {
		_spec.ClearField(exam_applications_ip.FieldNADate, field.TypeTime)
	}
	if value, ok := eaiu.mutation.AppliactionRemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldAppliactionRemarks, field.TypeString, value)
	}
	if eaiu.mutation.AppliactionRemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldAppliactionRemarks, field.TypeString)
	}
	if value, ok := eaiu.mutation.CadrePreferences(); ok {
		_spec.SetField(exam_applications_ip.FieldCadrePreferences, field.TypeJSON, value)
	}
	if value, ok := eaiu.mutation.AppendedCadrePreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_ip.FieldCadrePreferences, value)
		})
	}
	if eaiu.mutation.CadrePreferencesCleared() {
		_spec.ClearField(exam_applications_ip.FieldCadrePreferences, field.TypeJSON)
	}
	if value, ok := eaiu.mutation.DivisionPreferences(); ok {
		_spec.SetField(exam_applications_ip.FieldDivisionPreferences, field.TypeJSON, value)
	}
	if value, ok := eaiu.mutation.AppendedDivisionPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_ip.FieldDivisionPreferences, value)
		})
	}
	if eaiu.mutation.DivisionPreferencesCleared() {
		_spec.ClearField(exam_applications_ip.FieldDivisionPreferences, field.TypeJSON)
	}
	if value, ok := eaiu.mutation.UpdatedAt(); ok {
		_spec.SetField(exam_applications_ip.FieldUpdatedAt, field.TypeTime, value)
	}
	if eaiu.mutation.UpdatedAtCleared() {
		_spec.ClearField(exam_applications_ip.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := eaiu.mutation.UpdatedBy(); ok {
		_spec.SetField(exam_applications_ip.FieldUpdatedBy, field.TypeString, value)
	}
	if eaiu.mutation.UpdatedByCleared() {
		_spec.ClearField(exam_applications_ip.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := eaiu.mutation.CAPreviousRemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldCAPreviousRemarks, field.TypeString, value)
	}
	if eaiu.mutation.CAPreviousRemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldCAPreviousRemarks, field.TypeString)
	}
	if eaiu.mutation.UsersIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.UsersIPRefTable,
			Columns: []string{exam_applications_ip.UsersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiu.mutation.RemovedUsersIPRefIDs(); len(nodes) > 0 && !eaiu.mutation.UsersIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.UsersIPRefTable,
			Columns: []string{exam_applications_ip.UsersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiu.mutation.UsersIPRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.UsersIPRefTable,
			Columns: []string{exam_applications_ip.UsersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaiu.mutation.ExamApplnIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.ExamApplnIPRefTable,
			Columns: []string{exam_applications_ip.ExamApplnIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_ip.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiu.mutation.RemovedExamApplnIPRefIDs(); len(nodes) > 0 && !eaiu.mutation.ExamApplnIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.ExamApplnIPRefTable,
			Columns: []string{exam_applications_ip.ExamApplnIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_ip.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiu.mutation.ExamApplnIPRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.ExamApplnIPRefTable,
			Columns: []string{exam_applications_ip.ExamApplnIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_ip.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaiu.mutation.OfficeIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.OfficeIPRefTable,
			Columns: []string{exam_applications_ip.OfficeIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiu.mutation.RemovedOfficeIPRefIDs(); len(nodes) > 0 && !eaiu.mutation.OfficeIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.OfficeIPRefTable,
			Columns: []string{exam_applications_ip.OfficeIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiu.mutation.OfficeIPRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.OfficeIPRefTable,
			Columns: []string{exam_applications_ip.OfficeIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaiu.mutation.RoleusersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ip.RoleusersTable,
			Columns: []string{exam_applications_ip.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiu.mutation.RoleusersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ip.RoleusersTable,
			Columns: []string{exam_applications_ip.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaiu.mutation.CadrePrefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.CadrePrefRefTable,
			Columns: []string{exam_applications_ip.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_ip.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiu.mutation.RemovedCadrePrefRefIDs(); len(nodes) > 0 && !eaiu.mutation.CadrePrefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.CadrePrefRefTable,
			Columns: []string{exam_applications_ip.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_ip.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiu.mutation.CadrePrefRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.CadrePrefRefTable,
			Columns: []string{exam_applications_ip.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_ip.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaiu.mutation.CirclePrefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.CirclePrefRefTable,
			Columns: []string{exam_applications_ip.CirclePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeofpreferenceip.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiu.mutation.RemovedCirclePrefRefIDs(); len(nodes) > 0 && !eaiu.mutation.CirclePrefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.CirclePrefRefTable,
			Columns: []string{exam_applications_ip.CirclePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeofpreferenceip.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiu.mutation.CirclePrefRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.CirclePrefRefTable,
			Columns: []string{exam_applications_ip.CirclePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeofpreferenceip.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaiu.mutation.IPApplicationsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.IPApplicationsRefTable,
			Columns: []string{exam_applications_ip.IPApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationsipapplications.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiu.mutation.RemovedIPApplicationsRefIDs(); len(nodes) > 0 && !eaiu.mutation.IPApplicationsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.IPApplicationsRefTable,
			Columns: []string{exam_applications_ip.IPApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationsipapplications.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiu.mutation.IPApplicationsRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.IPApplicationsRefTable,
			Columns: []string{exam_applications_ip.IPApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationsipapplications.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eaiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exam_applications_ip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eaiu.mutation.done = true
	return n, nil
}

// ExamApplicationsIPUpdateOne is the builder for updating a single Exam_Applications_IP entity.
type ExamApplicationsIPUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExamApplicationsIPMutation
}

// SetApplicationNumber sets the "ApplicationNumber" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetApplicationNumber(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetApplicationNumber(s)
	return eaiuo
}

// SetNillableApplicationNumber sets the "ApplicationNumber" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableApplicationNumber(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetApplicationNumber(*s)
	}
	return eaiuo
}

// ClearApplicationNumber clears the value of the "ApplicationNumber" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearApplicationNumber() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearApplicationNumber()
	return eaiuo
}

// SetEmployeeID sets the "EmployeeID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetEmployeeID(i int64) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ResetEmployeeID()
	eaiuo.mutation.SetEmployeeID(i)
	return eaiuo
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableEmployeeID(i *int64) *ExamApplicationsIPUpdateOne {
	if i != nil {
		eaiuo.SetEmployeeID(*i)
	}
	return eaiuo
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) AddEmployeeID(i int64) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AddEmployeeID(i)
	return eaiuo
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearEmployeeID() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearEmployeeID()
	return eaiuo
}

// SetEmployeeName sets the "EmployeeName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetEmployeeName(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetEmployeeName(s)
	return eaiuo
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableEmployeeName(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetEmployeeName(*s)
	}
	return eaiuo
}

// ClearEmployeeName clears the value of the "EmployeeName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearEmployeeName() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearEmployeeName()
	return eaiuo
}

// SetDOB sets the "DOB" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetDOB(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetDOB(s)
	return eaiuo
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableDOB(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetDOB(*s)
	}
	return eaiuo
}

// ClearDOB clears the value of the "DOB" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearDOB() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearDOB()
	return eaiuo
}

// SetGender sets the "Gender" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetGender(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetGender(s)
	return eaiuo
}

// SetNillableGender sets the "Gender" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableGender(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetGender(*s)
	}
	return eaiuo
}

// ClearGender clears the value of the "Gender" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearGender() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearGender()
	return eaiuo
}

// SetMobileNumber sets the "MobileNumber" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetMobileNumber(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetMobileNumber(s)
	return eaiuo
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableMobileNumber(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetMobileNumber(*s)
	}
	return eaiuo
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearMobileNumber() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearMobileNumber()
	return eaiuo
}

// SetEmailID sets the "EmailID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetEmailID(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetEmailID(s)
	return eaiuo
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableEmailID(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetEmailID(*s)
	}
	return eaiuo
}

// ClearEmailID clears the value of the "EmailID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearEmailID() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearEmailID()
	return eaiuo
}

// SetEmployeeCategory sets the "EmployeeCategory" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetEmployeeCategory(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetEmployeeCategory(s)
	return eaiuo
}

// SetNillableEmployeeCategory sets the "EmployeeCategory" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableEmployeeCategory(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetEmployeeCategory(*s)
	}
	return eaiuo
}

// ClearEmployeeCategory clears the value of the "EmployeeCategory" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearEmployeeCategory() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearEmployeeCategory()
	return eaiuo
}

// SetCadre sets the "Cadre" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCadre(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetCadre(s)
	return eaiuo
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableCadre(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetCadre(*s)
	}
	return eaiuo
}

// ClearCadre clears the value of the "Cadre" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCadre() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCadre()
	return eaiuo
}

// SetEmployeePost sets the "EmployeePost" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetEmployeePost(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetEmployeePost(s)
	return eaiuo
}

// SetNillableEmployeePost sets the "EmployeePost" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableEmployeePost(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetEmployeePost(*s)
	}
	return eaiuo
}

// ClearEmployeePost clears the value of the "EmployeePost" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearEmployeePost() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearEmployeePost()
	return eaiuo
}

// SetFacilityID sets the "FacilityID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetFacilityID(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetFacilityID(s)
	return eaiuo
}

// SetNillableFacilityID sets the "FacilityID" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableFacilityID(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetFacilityID(*s)
	}
	return eaiuo
}

// ClearFacilityID clears the value of the "FacilityID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearFacilityID() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearFacilityID()
	return eaiuo
}

// SetFacilityName sets the "FacilityName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetFacilityName(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetFacilityName(s)
	return eaiuo
}

// SetNillableFacilityName sets the "FacilityName" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableFacilityName(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetFacilityName(*s)
	}
	return eaiuo
}

// ClearFacilityName clears the value of the "FacilityName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearFacilityName() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearFacilityName()
	return eaiuo
}

// SetDivisionName sets the "DivisionName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetDivisionName(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetDivisionName(s)
	return eaiuo
}

// SetNillableDivisionName sets the "DivisionName" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableDivisionName(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetDivisionName(*s)
	}
	return eaiuo
}

// ClearDivisionName clears the value of the "DivisionName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearDivisionName() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearDivisionName()
	return eaiuo
}

// SetRegionName sets the "RegionName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetRegionName(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetRegionName(s)
	return eaiuo
}

// SetNillableRegionName sets the "RegionName" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableRegionName(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetRegionName(*s)
	}
	return eaiuo
}

// ClearRegionName clears the value of the "RegionName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearRegionName() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearRegionName()
	return eaiuo
}

// SetReportingOfficeName sets the "ReportingOfficeName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetReportingOfficeName(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetReportingOfficeName(s)
	return eaiuo
}

// SetNillableReportingOfficeName sets the "ReportingOfficeName" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableReportingOfficeName(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetReportingOfficeName(*s)
	}
	return eaiuo
}

// ClearReportingOfficeName clears the value of the "ReportingOfficeName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearReportingOfficeName() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearReportingOfficeName()
	return eaiuo
}

// SetCircleName sets the "CircleName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCircleName(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetCircleName(s)
	return eaiuo
}

// SetNillableCircleName sets the "CircleName" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableCircleName(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetCircleName(*s)
	}
	return eaiuo
}

// ClearCircleName clears the value of the "CircleName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCircleName() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCircleName()
	return eaiuo
}

// SetEntryCadre sets the "EntryCadre" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetEntryCadre(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetEntryCadre(s)
	return eaiuo
}

// SetNillableEntryCadre sets the "EntryCadre" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableEntryCadre(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetEntryCadre(*s)
	}
	return eaiuo
}

// ClearEntryCadre clears the value of the "EntryCadre" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearEntryCadre() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearEntryCadre()
	return eaiuo
}

// SetDCCS sets the "DCCS" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetDCCS(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetDCCS(s)
	return eaiuo
}

// SetNillableDCCS sets the "DCCS" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableDCCS(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetDCCS(*s)
	}
	return eaiuo
}

// ClearDCCS clears the value of the "DCCS" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearDCCS() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearDCCS()
	return eaiuo
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetDCInPresentCadre(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetDCInPresentCadre(s)
	return eaiuo
}

// SetNillableDCInPresentCadre sets the "DCInPresentCadre" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableDCInPresentCadre(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetDCInPresentCadre(*s)
	}
	return eaiuo
}

// ClearDCInPresentCadre clears the value of the "DCInPresentCadre" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearDCInPresentCadre() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearDCInPresentCadre()
	return eaiuo
}

// SetDeputationOfficeId sets the "DeputationOfficeId" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetDeputationOfficeId(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetDeputationOfficeId(s)
	return eaiuo
}

// SetNillableDeputationOfficeId sets the "DeputationOfficeId" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableDeputationOfficeId(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetDeputationOfficeId(*s)
	}
	return eaiuo
}

// ClearDeputationOfficeId clears the value of the "DeputationOfficeId" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearDeputationOfficeId() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearDeputationOfficeId()
	return eaiuo
}

// SetDisabilityType sets the "DisabilityType" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetDisabilityType(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetDisabilityType(s)
	return eaiuo
}

// SetNillableDisabilityType sets the "DisabilityType" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableDisabilityType(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetDisabilityType(*s)
	}
	return eaiuo
}

// ClearDisabilityType clears the value of the "DisabilityType" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearDisabilityType() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearDisabilityType()
	return eaiuo
}

// SetDisabilityPercentage sets the "DisabilityPercentage" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetDisabilityPercentage(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetDisabilityPercentage(s)
	return eaiuo
}

// SetNillableDisabilityPercentage sets the "DisabilityPercentage" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableDisabilityPercentage(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetDisabilityPercentage(*s)
	}
	return eaiuo
}

// ClearDisabilityPercentage clears the value of the "DisabilityPercentage" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearDisabilityPercentage() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearDisabilityPercentage()
	return eaiuo
}

// SetEducation sets the "Education" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetEducation(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetEducation(s)
	return eaiuo
}

// SetNillableEducation sets the "Education" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableEducation(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetEducation(*s)
	}
	return eaiuo
}

// ClearEducation clears the value of the "Education" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearEducation() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearEducation()
	return eaiuo
}

// SetExamNameCode sets the "ExamNameCode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetExamNameCode(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetExamNameCode(s)
	return eaiuo
}

// SetNillableExamNameCode sets the "ExamNameCode" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableExamNameCode(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetExamNameCode(*s)
	}
	return eaiuo
}

// ClearExamNameCode clears the value of the "ExamNameCode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearExamNameCode() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearExamNameCode()
	return eaiuo
}

// SetExamYear sets the "ExamYear" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetExamYear(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetExamYear(s)
	return eaiuo
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableExamYear(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetExamYear(*s)
	}
	return eaiuo
}

// ClearExamYear clears the value of the "ExamYear" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearExamYear() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearExamYear()
	return eaiuo
}

// SetExamName sets the "ExamName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetExamName(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetExamName(s)
	return eaiuo
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableExamName(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetExamName(*s)
	}
	return eaiuo
}

// ClearExamName clears the value of the "ExamName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearExamName() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearExamName()
	return eaiuo
}

// SetPresentCadre sets the "PresentCadre" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetPresentCadre(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetPresentCadre(s)
	return eaiuo
}

// SetNillablePresentCadre sets the "PresentCadre" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillablePresentCadre(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetPresentCadre(*s)
	}
	return eaiuo
}

// ClearPresentCadre clears the value of the "PresentCadre" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearPresentCadre() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearPresentCadre()
	return eaiuo
}

// SetPresentDesignation sets the "PresentDesignation" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetPresentDesignation(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetPresentDesignation(s)
	return eaiuo
}

// SetNillablePresentDesignation sets the "PresentDesignation" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillablePresentDesignation(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetPresentDesignation(*s)
	}
	return eaiuo
}

// ClearPresentDesignation clears the value of the "PresentDesignation" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearPresentDesignation() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearPresentDesignation()
	return eaiuo
}

// SetEligibleCadre sets the "EligibleCadre" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetEligibleCadre(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetEligibleCadre(s)
	return eaiuo
}

// SetNillableEligibleCadre sets the "EligibleCadre" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableEligibleCadre(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetEligibleCadre(*s)
	}
	return eaiuo
}

// ClearEligibleCadre clears the value of the "EligibleCadre" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearEligibleCadre() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearEligibleCadre()
	return eaiuo
}

// SetEligibleCadreDate sets the "EligibleCadreDate" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetEligibleCadreDate(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetEligibleCadreDate(s)
	return eaiuo
}

// SetNillableEligibleCadreDate sets the "EligibleCadreDate" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableEligibleCadreDate(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetEligibleCadreDate(*s)
	}
	return eaiuo
}

// ClearEligibleCadreDate clears the value of the "EligibleCadreDate" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearEligibleCadreDate() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearEligibleCadreDate()
	return eaiuo
}

// SetServiceLength sets the "ServiceLength" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetServiceLength(i []interface{}) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetServiceLength(i)
	return eaiuo
}

// AppendServiceLength appends i to the "ServiceLength" field.
func (eaiuo *ExamApplicationsIPUpdateOne) AppendServiceLength(i []interface{}) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AppendServiceLength(i)
	return eaiuo
}

// ClearServiceLength clears the value of the "ServiceLength" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearServiceLength() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearServiceLength()
	return eaiuo
}

// SetCentrePreference sets the "CentrePreference" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCentrePreference(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetCentrePreference(s)
	return eaiuo
}

// SetNillableCentrePreference sets the "CentrePreference" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableCentrePreference(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetCentrePreference(*s)
	}
	return eaiuo
}

// ClearCentrePreference clears the value of the "CentrePreference" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCentrePreference() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCentrePreference()
	return eaiuo
}

// SetSignature sets the "Signature" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetSignature(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetSignature(s)
	return eaiuo
}

// SetNillableSignature sets the "Signature" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableSignature(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetSignature(*s)
	}
	return eaiuo
}

// ClearSignature clears the value of the "Signature" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearSignature() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearSignature()
	return eaiuo
}

// SetPhoto sets the "Photo" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetPhoto(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetPhoto(s)
	return eaiuo
}

// SetNillablePhoto sets the "Photo" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillablePhoto(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetPhoto(*s)
	}
	return eaiuo
}

// ClearPhoto clears the value of the "Photo" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearPhoto() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearPhoto()
	return eaiuo
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetApplicationStatus(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetApplicationStatus(s)
	return eaiuo
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableApplicationStatus(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetApplicationStatus(*s)
	}
	return eaiuo
}

// ClearApplicationStatus clears the value of the "ApplicationStatus" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearApplicationStatus() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearApplicationStatus()
	return eaiuo
}

// SetApplnSubmittedDate sets the "ApplnSubmittedDate" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetApplnSubmittedDate(t time.Time) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetApplnSubmittedDate(t)
	return eaiuo
}

// SetNillableApplnSubmittedDate sets the "ApplnSubmittedDate" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableApplnSubmittedDate(t *time.Time) *ExamApplicationsIPUpdateOne {
	if t != nil {
		eaiuo.SetApplnSubmittedDate(*t)
	}
	return eaiuo
}

// ClearApplnSubmittedDate clears the value of the "ApplnSubmittedDate" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearApplnSubmittedDate() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearApplnSubmittedDate()
	return eaiuo
}

// SetVARemarks sets the "VA_Remarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetVARemarks(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetVARemarks(s)
	return eaiuo
}

// SetNillableVARemarks sets the "VA_Remarks" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableVARemarks(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetVARemarks(*s)
	}
	return eaiuo
}

// ClearVARemarks clears the value of the "VA_Remarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearVARemarks() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearVARemarks()
	return eaiuo
}

// SetVAUserName sets the "VA_UserName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetVAUserName(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetVAUserName(s)
	return eaiuo
}

// SetNillableVAUserName sets the "VA_UserName" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableVAUserName(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetVAUserName(*s)
	}
	return eaiuo
}

// ClearVAUserName clears the value of the "VA_UserName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearVAUserName() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearVAUserName()
	return eaiuo
}

// SetVADate sets the "VA_Date" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetVADate(t time.Time) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetVADate(t)
	return eaiuo
}

// SetNillableVADate sets the "VA_Date" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableVADate(t *time.Time) *ExamApplicationsIPUpdateOne {
	if t != nil {
		eaiuo.SetVADate(*t)
	}
	return eaiuo
}

// ClearVADate clears the value of the "VA_Date" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearVADate() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearVADate()
	return eaiuo
}

// SetCARemarks sets the "CA_Remarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCARemarks(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetCARemarks(s)
	return eaiuo
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableCARemarks(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetCARemarks(*s)
	}
	return eaiuo
}

// ClearCARemarks clears the value of the "CA_Remarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCARemarks() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCARemarks()
	return eaiuo
}

// SetCAUserName sets the "CA_UserName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCAUserName(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetCAUserName(s)
	return eaiuo
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableCAUserName(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetCAUserName(*s)
	}
	return eaiuo
}

// ClearCAUserName clears the value of the "CA_UserName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCAUserName() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCAUserName()
	return eaiuo
}

// SetCADate sets the "CA_Date" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCADate(t time.Time) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetCADate(t)
	return eaiuo
}

// SetNillableCADate sets the "CA_Date" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableCADate(t *time.Time) *ExamApplicationsIPUpdateOne {
	if t != nil {
		eaiuo.SetCADate(*t)
	}
	return eaiuo
}

// ClearCADate clears the value of the "CA_Date" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCADate() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCADate()
	return eaiuo
}

// SetApplicationWdlDate sets the "ApplicationWdlDate" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetApplicationWdlDate(t time.Time) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetApplicationWdlDate(t)
	return eaiuo
}

// SetNillableApplicationWdlDate sets the "ApplicationWdlDate" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableApplicationWdlDate(t *time.Time) *ExamApplicationsIPUpdateOne {
	if t != nil {
		eaiuo.SetApplicationWdlDate(*t)
	}
	return eaiuo
}

// ClearApplicationWdlDate clears the value of the "ApplicationWdlDate" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearApplicationWdlDate() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearApplicationWdlDate()
	return eaiuo
}

// SetNARemarks sets the "NA_Remarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNARemarks(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetNARemarks(s)
	return eaiuo
}

// SetNillableNARemarks sets the "NA_Remarks" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableNARemarks(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetNARemarks(*s)
	}
	return eaiuo
}

// ClearNARemarks clears the value of the "NA_Remarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearNARemarks() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearNARemarks()
	return eaiuo
}

// SetNAUserName sets the "NA_UserName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNAUserName(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetNAUserName(s)
	return eaiuo
}

// SetNillableNAUserName sets the "NA_UserName" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableNAUserName(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetNAUserName(*s)
	}
	return eaiuo
}

// ClearNAUserName clears the value of the "NA_UserName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearNAUserName() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearNAUserName()
	return eaiuo
}

// SetNADate sets the "NA_Date" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNADate(t time.Time) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetNADate(t)
	return eaiuo
}

// SetNillableNADate sets the "NA_Date" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableNADate(t *time.Time) *ExamApplicationsIPUpdateOne {
	if t != nil {
		eaiuo.SetNADate(*t)
	}
	return eaiuo
}

// ClearNADate clears the value of the "NA_Date" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearNADate() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearNADate()
	return eaiuo
}

// SetAppliactionRemarks sets the "AppliactionRemarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetAppliactionRemarks(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetAppliactionRemarks(s)
	return eaiuo
}

// SetNillableAppliactionRemarks sets the "AppliactionRemarks" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableAppliactionRemarks(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetAppliactionRemarks(*s)
	}
	return eaiuo
}

// ClearAppliactionRemarks clears the value of the "AppliactionRemarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearAppliactionRemarks() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearAppliactionRemarks()
	return eaiuo
}

// SetCadrePreferences sets the "CadrePreferences" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCadrePreferences(i []interface{}) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetCadrePreferences(i)
	return eaiuo
}

// AppendCadrePreferences appends i to the "CadrePreferences" field.
func (eaiuo *ExamApplicationsIPUpdateOne) AppendCadrePreferences(i []interface{}) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AppendCadrePreferences(i)
	return eaiuo
}

// ClearCadrePreferences clears the value of the "CadrePreferences" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCadrePreferences() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCadrePreferences()
	return eaiuo
}

// SetDivisionPreferences sets the "DivisionPreferences" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetDivisionPreferences(i []interface{}) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetDivisionPreferences(i)
	return eaiuo
}

// AppendDivisionPreferences appends i to the "DivisionPreferences" field.
func (eaiuo *ExamApplicationsIPUpdateOne) AppendDivisionPreferences(i []interface{}) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AppendDivisionPreferences(i)
	return eaiuo
}

// ClearDivisionPreferences clears the value of the "DivisionPreferences" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearDivisionPreferences() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearDivisionPreferences()
	return eaiuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetUpdatedAt(t time.Time) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetUpdatedAt(t)
	return eaiuo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableUpdatedAt(t *time.Time) *ExamApplicationsIPUpdateOne {
	if t != nil {
		eaiuo.SetUpdatedAt(*t)
	}
	return eaiuo
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearUpdatedAt() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearUpdatedAt()
	return eaiuo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetUpdatedBy(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetUpdatedBy(s)
	return eaiuo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableUpdatedBy(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetUpdatedBy(*s)
	}
	return eaiuo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearUpdatedBy() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearUpdatedBy()
	return eaiuo
}

// SetCAPreviousRemarks sets the "CAPreviousRemarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCAPreviousRemarks(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetCAPreviousRemarks(s)
	return eaiuo
}

// SetNillableCAPreviousRemarks sets the "CAPreviousRemarks" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableCAPreviousRemarks(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetCAPreviousRemarks(*s)
	}
	return eaiuo
}

// ClearCAPreviousRemarks clears the value of the "CAPreviousRemarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCAPreviousRemarks() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCAPreviousRemarks()
	return eaiuo
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetRoleUserCode(i int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetRoleUserCode(i)
	return eaiuo
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableRoleUserCode(i *int32) *ExamApplicationsIPUpdateOne {
	if i != nil {
		eaiuo.SetRoleUserCode(*i)
	}
	return eaiuo
}

// ClearRoleUserCode clears the value of the "RoleUserCode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearRoleUserCode() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearRoleUserCode()
	return eaiuo
}

// AddUsersIPRefIDs adds the "UsersIPRef" edge to the UserMaster entity by IDs.
func (eaiuo *ExamApplicationsIPUpdateOne) AddUsersIPRefIDs(ids ...int64) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AddUsersIPRefIDs(ids...)
	return eaiuo
}

// AddUsersIPRef adds the "UsersIPRef" edges to the UserMaster entity.
func (eaiuo *ExamApplicationsIPUpdateOne) AddUsersIPRef(u ...*UserMaster) *ExamApplicationsIPUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eaiuo.AddUsersIPRefIDs(ids...)
}

// AddExamApplnIPRefIDs adds the "ExamAppln_IP_Ref" edge to the Exam_IP entity by IDs.
func (eaiuo *ExamApplicationsIPUpdateOne) AddExamApplnIPRefIDs(ids ...int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AddExamApplnIPRefIDs(ids...)
	return eaiuo
}

// AddExamApplnIPRef adds the "ExamAppln_IP_Ref" edges to the Exam_IP entity.
func (eaiuo *ExamApplicationsIPUpdateOne) AddExamApplnIPRef(e ...*Exam_IP) *ExamApplicationsIPUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eaiuo.AddExamApplnIPRefIDs(ids...)
}

// AddOfficeIPRefIDs adds the "Office_IP_Ref" edge to the Facility entity by IDs.
func (eaiuo *ExamApplicationsIPUpdateOne) AddOfficeIPRefIDs(ids ...int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AddOfficeIPRefIDs(ids...)
	return eaiuo
}

// AddOfficeIPRef adds the "Office_IP_Ref" edges to the Facility entity.
func (eaiuo *ExamApplicationsIPUpdateOne) AddOfficeIPRef(f ...*Facility) *ExamApplicationsIPUpdateOne {
	ids := make([]int32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eaiuo.AddOfficeIPRefIDs(ids...)
}

// SetRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID.
func (eaiuo *ExamApplicationsIPUpdateOne) SetRoleusersID(id int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetRoleusersID(id)
	return eaiuo
}

// SetNillableRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableRoleusersID(id *int32) *ExamApplicationsIPUpdateOne {
	if id != nil {
		eaiuo = eaiuo.SetRoleusersID(*id)
	}
	return eaiuo
}

// SetRoleusers sets the "roleusers" edge to the RoleMaster entity.
func (eaiuo *ExamApplicationsIPUpdateOne) SetRoleusers(r *RoleMaster) *ExamApplicationsIPUpdateOne {
	return eaiuo.SetRoleusersID(r.ID)
}

// AddCadrePrefRefIDs adds the "CadrePref_Ref" edge to the Cadre_Choice_IP entity by IDs.
func (eaiuo *ExamApplicationsIPUpdateOne) AddCadrePrefRefIDs(ids ...int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AddCadrePrefRefIDs(ids...)
	return eaiuo
}

// AddCadrePrefRef adds the "CadrePref_Ref" edges to the Cadre_Choice_IP entity.
func (eaiuo *ExamApplicationsIPUpdateOne) AddCadrePrefRef(c ...*Cadre_Choice_IP) *ExamApplicationsIPUpdateOne {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eaiuo.AddCadrePrefRefIDs(ids...)
}

// AddCirclePrefRefIDs adds the "CirclePrefRef" edge to the PlaceOfPreferenceIP entity by IDs.
func (eaiuo *ExamApplicationsIPUpdateOne) AddCirclePrefRefIDs(ids ...int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AddCirclePrefRefIDs(ids...)
	return eaiuo
}

// AddCirclePrefRef adds the "CirclePrefRef" edges to the PlaceOfPreferenceIP entity.
func (eaiuo *ExamApplicationsIPUpdateOne) AddCirclePrefRef(p ...*PlaceOfPreferenceIP) *ExamApplicationsIPUpdateOne {
	ids := make([]int32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eaiuo.AddCirclePrefRefIDs(ids...)
}

// AddIPApplicationsRefIDs adds the "IPApplicationsRef" edge to the RecommendationsIPApplications entity by IDs.
func (eaiuo *ExamApplicationsIPUpdateOne) AddIPApplicationsRefIDs(ids ...int64) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AddIPApplicationsRefIDs(ids...)
	return eaiuo
}

// AddIPApplicationsRef adds the "IPApplicationsRef" edges to the RecommendationsIPApplications entity.
func (eaiuo *ExamApplicationsIPUpdateOne) AddIPApplicationsRef(r ...*RecommendationsIPApplications) *ExamApplicationsIPUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eaiuo.AddIPApplicationsRefIDs(ids...)
}

// Mutation returns the ExamApplicationsIPMutation object of the builder.
func (eaiuo *ExamApplicationsIPUpdateOne) Mutation() *ExamApplicationsIPMutation {
	return eaiuo.mutation
}

// ClearUsersIPRef clears all "UsersIPRef" edges to the UserMaster entity.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearUsersIPRef() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearUsersIPRef()
	return eaiuo
}

// RemoveUsersIPRefIDs removes the "UsersIPRef" edge to UserMaster entities by IDs.
func (eaiuo *ExamApplicationsIPUpdateOne) RemoveUsersIPRefIDs(ids ...int64) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.RemoveUsersIPRefIDs(ids...)
	return eaiuo
}

// RemoveUsersIPRef removes "UsersIPRef" edges to UserMaster entities.
func (eaiuo *ExamApplicationsIPUpdateOne) RemoveUsersIPRef(u ...*UserMaster) *ExamApplicationsIPUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eaiuo.RemoveUsersIPRefIDs(ids...)
}

// ClearExamApplnIPRef clears all "ExamAppln_IP_Ref" edges to the Exam_IP entity.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearExamApplnIPRef() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearExamApplnIPRef()
	return eaiuo
}

// RemoveExamApplnIPRefIDs removes the "ExamAppln_IP_Ref" edge to Exam_IP entities by IDs.
func (eaiuo *ExamApplicationsIPUpdateOne) RemoveExamApplnIPRefIDs(ids ...int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.RemoveExamApplnIPRefIDs(ids...)
	return eaiuo
}

// RemoveExamApplnIPRef removes "ExamAppln_IP_Ref" edges to Exam_IP entities.
func (eaiuo *ExamApplicationsIPUpdateOne) RemoveExamApplnIPRef(e ...*Exam_IP) *ExamApplicationsIPUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eaiuo.RemoveExamApplnIPRefIDs(ids...)
}

// ClearOfficeIPRef clears all "Office_IP_Ref" edges to the Facility entity.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearOfficeIPRef() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearOfficeIPRef()
	return eaiuo
}

// RemoveOfficeIPRefIDs removes the "Office_IP_Ref" edge to Facility entities by IDs.
func (eaiuo *ExamApplicationsIPUpdateOne) RemoveOfficeIPRefIDs(ids ...int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.RemoveOfficeIPRefIDs(ids...)
	return eaiuo
}

// RemoveOfficeIPRef removes "Office_IP_Ref" edges to Facility entities.
func (eaiuo *ExamApplicationsIPUpdateOne) RemoveOfficeIPRef(f ...*Facility) *ExamApplicationsIPUpdateOne {
	ids := make([]int32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eaiuo.RemoveOfficeIPRefIDs(ids...)
}

// ClearRoleusers clears the "roleusers" edge to the RoleMaster entity.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearRoleusers() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearRoleusers()
	return eaiuo
}

// ClearCadrePrefRef clears all "CadrePref_Ref" edges to the Cadre_Choice_IP entity.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCadrePrefRef() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCadrePrefRef()
	return eaiuo
}

// RemoveCadrePrefRefIDs removes the "CadrePref_Ref" edge to Cadre_Choice_IP entities by IDs.
func (eaiuo *ExamApplicationsIPUpdateOne) RemoveCadrePrefRefIDs(ids ...int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.RemoveCadrePrefRefIDs(ids...)
	return eaiuo
}

// RemoveCadrePrefRef removes "CadrePref_Ref" edges to Cadre_Choice_IP entities.
func (eaiuo *ExamApplicationsIPUpdateOne) RemoveCadrePrefRef(c ...*Cadre_Choice_IP) *ExamApplicationsIPUpdateOne {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eaiuo.RemoveCadrePrefRefIDs(ids...)
}

// ClearCirclePrefRef clears all "CirclePrefRef" edges to the PlaceOfPreferenceIP entity.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCirclePrefRef() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCirclePrefRef()
	return eaiuo
}

// RemoveCirclePrefRefIDs removes the "CirclePrefRef" edge to PlaceOfPreferenceIP entities by IDs.
func (eaiuo *ExamApplicationsIPUpdateOne) RemoveCirclePrefRefIDs(ids ...int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.RemoveCirclePrefRefIDs(ids...)
	return eaiuo
}

// RemoveCirclePrefRef removes "CirclePrefRef" edges to PlaceOfPreferenceIP entities.
func (eaiuo *ExamApplicationsIPUpdateOne) RemoveCirclePrefRef(p ...*PlaceOfPreferenceIP) *ExamApplicationsIPUpdateOne {
	ids := make([]int32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eaiuo.RemoveCirclePrefRefIDs(ids...)
}

// ClearIPApplicationsRef clears all "IPApplicationsRef" edges to the RecommendationsIPApplications entity.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearIPApplicationsRef() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearIPApplicationsRef()
	return eaiuo
}

// RemoveIPApplicationsRefIDs removes the "IPApplicationsRef" edge to RecommendationsIPApplications entities by IDs.
func (eaiuo *ExamApplicationsIPUpdateOne) RemoveIPApplicationsRefIDs(ids ...int64) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.RemoveIPApplicationsRefIDs(ids...)
	return eaiuo
}

// RemoveIPApplicationsRef removes "IPApplicationsRef" edges to RecommendationsIPApplications entities.
func (eaiuo *ExamApplicationsIPUpdateOne) RemoveIPApplicationsRef(r ...*RecommendationsIPApplications) *ExamApplicationsIPUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eaiuo.RemoveIPApplicationsRefIDs(ids...)
}

// Where appends a list predicates to the ExamApplicationsIPUpdate builder.
func (eaiuo *ExamApplicationsIPUpdateOne) Where(ps ...predicate.Exam_Applications_IP) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.Where(ps...)
	return eaiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eaiuo *ExamApplicationsIPUpdateOne) Select(field string, fields ...string) *ExamApplicationsIPUpdateOne {
	eaiuo.fields = append([]string{field}, fields...)
	return eaiuo
}

// Save executes the query and returns the updated Exam_Applications_IP entity.
func (eaiuo *ExamApplicationsIPUpdateOne) Save(ctx context.Context) (*Exam_Applications_IP, error) {
	return withHooks(ctx, eaiuo.sqlSave, eaiuo.mutation, eaiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eaiuo *ExamApplicationsIPUpdateOne) SaveX(ctx context.Context) *Exam_Applications_IP {
	node, err := eaiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eaiuo *ExamApplicationsIPUpdateOne) Exec(ctx context.Context) error {
	_, err := eaiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eaiuo *ExamApplicationsIPUpdateOne) ExecX(ctx context.Context) {
	if err := eaiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eaiuo *ExamApplicationsIPUpdateOne) sqlSave(ctx context.Context) (_node *Exam_Applications_IP, err error) {
	_spec := sqlgraph.NewUpdateSpec(exam_applications_ip.Table, exam_applications_ip.Columns, sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64))
	id, ok := eaiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Exam_Applications_IP.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eaiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exam_applications_ip.FieldID)
		for _, f := range fields {
			if !exam_applications_ip.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exam_applications_ip.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eaiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eaiuo.mutation.ApplicationNumber(); ok {
		_spec.SetField(exam_applications_ip.FieldApplicationNumber, field.TypeString, value)
	}
	if eaiuo.mutation.ApplicationNumberCleared() {
		_spec.ClearField(exam_applications_ip.FieldApplicationNumber, field.TypeString)
	}
	if value, ok := eaiuo.mutation.EmployeeID(); ok {
		_spec.SetField(exam_applications_ip.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := eaiuo.mutation.AddedEmployeeID(); ok {
		_spec.AddField(exam_applications_ip.FieldEmployeeID, field.TypeInt64, value)
	}
	if eaiuo.mutation.EmployeeIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := eaiuo.mutation.EmployeeName(); ok {
		_spec.SetField(exam_applications_ip.FieldEmployeeName, field.TypeString, value)
	}
	if eaiuo.mutation.EmployeeNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldEmployeeName, field.TypeString)
	}
	if value, ok := eaiuo.mutation.DOB(); ok {
		_spec.SetField(exam_applications_ip.FieldDOB, field.TypeString, value)
	}
	if eaiuo.mutation.DOBCleared() {
		_spec.ClearField(exam_applications_ip.FieldDOB, field.TypeString)
	}
	if value, ok := eaiuo.mutation.Gender(); ok {
		_spec.SetField(exam_applications_ip.FieldGender, field.TypeString, value)
	}
	if eaiuo.mutation.GenderCleared() {
		_spec.ClearField(exam_applications_ip.FieldGender, field.TypeString)
	}
	if value, ok := eaiuo.mutation.MobileNumber(); ok {
		_spec.SetField(exam_applications_ip.FieldMobileNumber, field.TypeString, value)
	}
	if eaiuo.mutation.MobileNumberCleared() {
		_spec.ClearField(exam_applications_ip.FieldMobileNumber, field.TypeString)
	}
	if value, ok := eaiuo.mutation.EmailID(); ok {
		_spec.SetField(exam_applications_ip.FieldEmailID, field.TypeString, value)
	}
	if eaiuo.mutation.EmailIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldEmailID, field.TypeString)
	}
	if value, ok := eaiuo.mutation.EmployeeCategory(); ok {
		_spec.SetField(exam_applications_ip.FieldEmployeeCategory, field.TypeString, value)
	}
	if eaiuo.mutation.EmployeeCategoryCleared() {
		_spec.ClearField(exam_applications_ip.FieldEmployeeCategory, field.TypeString)
	}
	if value, ok := eaiuo.mutation.Cadre(); ok {
		_spec.SetField(exam_applications_ip.FieldCadre, field.TypeString, value)
	}
	if eaiuo.mutation.CadreCleared() {
		_spec.ClearField(exam_applications_ip.FieldCadre, field.TypeString)
	}
	if value, ok := eaiuo.mutation.EmployeePost(); ok {
		_spec.SetField(exam_applications_ip.FieldEmployeePost, field.TypeString, value)
	}
	if eaiuo.mutation.EmployeePostCleared() {
		_spec.ClearField(exam_applications_ip.FieldEmployeePost, field.TypeString)
	}
	if value, ok := eaiuo.mutation.FacilityID(); ok {
		_spec.SetField(exam_applications_ip.FieldFacilityID, field.TypeString, value)
	}
	if eaiuo.mutation.FacilityIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldFacilityID, field.TypeString)
	}
	if value, ok := eaiuo.mutation.FacilityName(); ok {
		_spec.SetField(exam_applications_ip.FieldFacilityName, field.TypeString, value)
	}
	if eaiuo.mutation.FacilityNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldFacilityName, field.TypeString)
	}
	if value, ok := eaiuo.mutation.DivisionName(); ok {
		_spec.SetField(exam_applications_ip.FieldDivisionName, field.TypeString, value)
	}
	if eaiuo.mutation.DivisionNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldDivisionName, field.TypeString)
	}
	if value, ok := eaiuo.mutation.RegionName(); ok {
		_spec.SetField(exam_applications_ip.FieldRegionName, field.TypeString, value)
	}
	if eaiuo.mutation.RegionNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldRegionName, field.TypeString)
	}
	if value, ok := eaiuo.mutation.ReportingOfficeName(); ok {
		_spec.SetField(exam_applications_ip.FieldReportingOfficeName, field.TypeString, value)
	}
	if eaiuo.mutation.ReportingOfficeNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldReportingOfficeName, field.TypeString)
	}
	if value, ok := eaiuo.mutation.CircleName(); ok {
		_spec.SetField(exam_applications_ip.FieldCircleName, field.TypeString, value)
	}
	if eaiuo.mutation.CircleNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldCircleName, field.TypeString)
	}
	if value, ok := eaiuo.mutation.EntryCadre(); ok {
		_spec.SetField(exam_applications_ip.FieldEntryCadre, field.TypeString, value)
	}
	if eaiuo.mutation.EntryCadreCleared() {
		_spec.ClearField(exam_applications_ip.FieldEntryCadre, field.TypeString)
	}
	if value, ok := eaiuo.mutation.DCCS(); ok {
		_spec.SetField(exam_applications_ip.FieldDCCS, field.TypeString, value)
	}
	if eaiuo.mutation.DCCSCleared() {
		_spec.ClearField(exam_applications_ip.FieldDCCS, field.TypeString)
	}
	if value, ok := eaiuo.mutation.DCInPresentCadre(); ok {
		_spec.SetField(exam_applications_ip.FieldDCInPresentCadre, field.TypeString, value)
	}
	if eaiuo.mutation.DCInPresentCadreCleared() {
		_spec.ClearField(exam_applications_ip.FieldDCInPresentCadre, field.TypeString)
	}
	if value, ok := eaiuo.mutation.DeputationOfficeId(); ok {
		_spec.SetField(exam_applications_ip.FieldDeputationOfficeId, field.TypeString, value)
	}
	if eaiuo.mutation.DeputationOfficeIdCleared() {
		_spec.ClearField(exam_applications_ip.FieldDeputationOfficeId, field.TypeString)
	}
	if value, ok := eaiuo.mutation.DisabilityType(); ok {
		_spec.SetField(exam_applications_ip.FieldDisabilityType, field.TypeString, value)
	}
	if eaiuo.mutation.DisabilityTypeCleared() {
		_spec.ClearField(exam_applications_ip.FieldDisabilityType, field.TypeString)
	}
	if value, ok := eaiuo.mutation.DisabilityPercentage(); ok {
		_spec.SetField(exam_applications_ip.FieldDisabilityPercentage, field.TypeString, value)
	}
	if eaiuo.mutation.DisabilityPercentageCleared() {
		_spec.ClearField(exam_applications_ip.FieldDisabilityPercentage, field.TypeString)
	}
	if value, ok := eaiuo.mutation.Education(); ok {
		_spec.SetField(exam_applications_ip.FieldEducation, field.TypeString, value)
	}
	if eaiuo.mutation.EducationCleared() {
		_spec.ClearField(exam_applications_ip.FieldEducation, field.TypeString)
	}
	if value, ok := eaiuo.mutation.ExamNameCode(); ok {
		_spec.SetField(exam_applications_ip.FieldExamNameCode, field.TypeString, value)
	}
	if eaiuo.mutation.ExamNameCodeCleared() {
		_spec.ClearField(exam_applications_ip.FieldExamNameCode, field.TypeString)
	}
	if value, ok := eaiuo.mutation.ExamYear(); ok {
		_spec.SetField(exam_applications_ip.FieldExamYear, field.TypeString, value)
	}
	if eaiuo.mutation.ExamYearCleared() {
		_spec.ClearField(exam_applications_ip.FieldExamYear, field.TypeString)
	}
	if value, ok := eaiuo.mutation.ExamName(); ok {
		_spec.SetField(exam_applications_ip.FieldExamName, field.TypeString, value)
	}
	if eaiuo.mutation.ExamNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldExamName, field.TypeString)
	}
	if value, ok := eaiuo.mutation.PresentCadre(); ok {
		_spec.SetField(exam_applications_ip.FieldPresentCadre, field.TypeString, value)
	}
	if eaiuo.mutation.PresentCadreCleared() {
		_spec.ClearField(exam_applications_ip.FieldPresentCadre, field.TypeString)
	}
	if value, ok := eaiuo.mutation.PresentDesignation(); ok {
		_spec.SetField(exam_applications_ip.FieldPresentDesignation, field.TypeString, value)
	}
	if eaiuo.mutation.PresentDesignationCleared() {
		_spec.ClearField(exam_applications_ip.FieldPresentDesignation, field.TypeString)
	}
	if value, ok := eaiuo.mutation.EligibleCadre(); ok {
		_spec.SetField(exam_applications_ip.FieldEligibleCadre, field.TypeString, value)
	}
	if eaiuo.mutation.EligibleCadreCleared() {
		_spec.ClearField(exam_applications_ip.FieldEligibleCadre, field.TypeString)
	}
	if value, ok := eaiuo.mutation.EligibleCadreDate(); ok {
		_spec.SetField(exam_applications_ip.FieldEligibleCadreDate, field.TypeString, value)
	}
	if eaiuo.mutation.EligibleCadreDateCleared() {
		_spec.ClearField(exam_applications_ip.FieldEligibleCadreDate, field.TypeString)
	}
	if value, ok := eaiuo.mutation.ServiceLength(); ok {
		_spec.SetField(exam_applications_ip.FieldServiceLength, field.TypeJSON, value)
	}
	if value, ok := eaiuo.mutation.AppendedServiceLength(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_ip.FieldServiceLength, value)
		})
	}
	if eaiuo.mutation.ServiceLengthCleared() {
		_spec.ClearField(exam_applications_ip.FieldServiceLength, field.TypeJSON)
	}
	if value, ok := eaiuo.mutation.CentrePreference(); ok {
		_spec.SetField(exam_applications_ip.FieldCentrePreference, field.TypeString, value)
	}
	if eaiuo.mutation.CentrePreferenceCleared() {
		_spec.ClearField(exam_applications_ip.FieldCentrePreference, field.TypeString)
	}
	if value, ok := eaiuo.mutation.Signature(); ok {
		_spec.SetField(exam_applications_ip.FieldSignature, field.TypeString, value)
	}
	if eaiuo.mutation.SignatureCleared() {
		_spec.ClearField(exam_applications_ip.FieldSignature, field.TypeString)
	}
	if value, ok := eaiuo.mutation.Photo(); ok {
		_spec.SetField(exam_applications_ip.FieldPhoto, field.TypeString, value)
	}
	if eaiuo.mutation.PhotoCleared() {
		_spec.ClearField(exam_applications_ip.FieldPhoto, field.TypeString)
	}
	if value, ok := eaiuo.mutation.ApplicationStatus(); ok {
		_spec.SetField(exam_applications_ip.FieldApplicationStatus, field.TypeString, value)
	}
	if eaiuo.mutation.ApplicationStatusCleared() {
		_spec.ClearField(exam_applications_ip.FieldApplicationStatus, field.TypeString)
	}
	if value, ok := eaiuo.mutation.ApplnSubmittedDate(); ok {
		_spec.SetField(exam_applications_ip.FieldApplnSubmittedDate, field.TypeTime, value)
	}
	if eaiuo.mutation.ApplnSubmittedDateCleared() {
		_spec.ClearField(exam_applications_ip.FieldApplnSubmittedDate, field.TypeTime)
	}
	if value, ok := eaiuo.mutation.VARemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldVARemarks, field.TypeString, value)
	}
	if eaiuo.mutation.VARemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldVARemarks, field.TypeString)
	}
	if value, ok := eaiuo.mutation.VAUserName(); ok {
		_spec.SetField(exam_applications_ip.FieldVAUserName, field.TypeString, value)
	}
	if eaiuo.mutation.VAUserNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldVAUserName, field.TypeString)
	}
	if value, ok := eaiuo.mutation.VADate(); ok {
		_spec.SetField(exam_applications_ip.FieldVADate, field.TypeTime, value)
	}
	if eaiuo.mutation.VADateCleared() {
		_spec.ClearField(exam_applications_ip.FieldVADate, field.TypeTime)
	}
	if value, ok := eaiuo.mutation.CARemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldCARemarks, field.TypeString, value)
	}
	if eaiuo.mutation.CARemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldCARemarks, field.TypeString)
	}
	if value, ok := eaiuo.mutation.CAUserName(); ok {
		_spec.SetField(exam_applications_ip.FieldCAUserName, field.TypeString, value)
	}
	if eaiuo.mutation.CAUserNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldCAUserName, field.TypeString)
	}
	if value, ok := eaiuo.mutation.CADate(); ok {
		_spec.SetField(exam_applications_ip.FieldCADate, field.TypeTime, value)
	}
	if eaiuo.mutation.CADateCleared() {
		_spec.ClearField(exam_applications_ip.FieldCADate, field.TypeTime)
	}
	if value, ok := eaiuo.mutation.ApplicationWdlDate(); ok {
		_spec.SetField(exam_applications_ip.FieldApplicationWdlDate, field.TypeTime, value)
	}
	if eaiuo.mutation.ApplicationWdlDateCleared() {
		_spec.ClearField(exam_applications_ip.FieldApplicationWdlDate, field.TypeTime)
	}
	if value, ok := eaiuo.mutation.NARemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldNARemarks, field.TypeString, value)
	}
	if eaiuo.mutation.NARemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldNARemarks, field.TypeString)
	}
	if value, ok := eaiuo.mutation.NAUserName(); ok {
		_spec.SetField(exam_applications_ip.FieldNAUserName, field.TypeString, value)
	}
	if eaiuo.mutation.NAUserNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldNAUserName, field.TypeString)
	}
	if value, ok := eaiuo.mutation.NADate(); ok {
		_spec.SetField(exam_applications_ip.FieldNADate, field.TypeTime, value)
	}
	if eaiuo.mutation.NADateCleared() {
		_spec.ClearField(exam_applications_ip.FieldNADate, field.TypeTime)
	}
	if value, ok := eaiuo.mutation.AppliactionRemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldAppliactionRemarks, field.TypeString, value)
	}
	if eaiuo.mutation.AppliactionRemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldAppliactionRemarks, field.TypeString)
	}
	if value, ok := eaiuo.mutation.CadrePreferences(); ok {
		_spec.SetField(exam_applications_ip.FieldCadrePreferences, field.TypeJSON, value)
	}
	if value, ok := eaiuo.mutation.AppendedCadrePreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_ip.FieldCadrePreferences, value)
		})
	}
	if eaiuo.mutation.CadrePreferencesCleared() {
		_spec.ClearField(exam_applications_ip.FieldCadrePreferences, field.TypeJSON)
	}
	if value, ok := eaiuo.mutation.DivisionPreferences(); ok {
		_spec.SetField(exam_applications_ip.FieldDivisionPreferences, field.TypeJSON, value)
	}
	if value, ok := eaiuo.mutation.AppendedDivisionPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_ip.FieldDivisionPreferences, value)
		})
	}
	if eaiuo.mutation.DivisionPreferencesCleared() {
		_spec.ClearField(exam_applications_ip.FieldDivisionPreferences, field.TypeJSON)
	}
	if value, ok := eaiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(exam_applications_ip.FieldUpdatedAt, field.TypeTime, value)
	}
	if eaiuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(exam_applications_ip.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := eaiuo.mutation.UpdatedBy(); ok {
		_spec.SetField(exam_applications_ip.FieldUpdatedBy, field.TypeString, value)
	}
	if eaiuo.mutation.UpdatedByCleared() {
		_spec.ClearField(exam_applications_ip.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := eaiuo.mutation.CAPreviousRemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldCAPreviousRemarks, field.TypeString, value)
	}
	if eaiuo.mutation.CAPreviousRemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldCAPreviousRemarks, field.TypeString)
	}
	if eaiuo.mutation.UsersIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.UsersIPRefTable,
			Columns: []string{exam_applications_ip.UsersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiuo.mutation.RemovedUsersIPRefIDs(); len(nodes) > 0 && !eaiuo.mutation.UsersIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.UsersIPRefTable,
			Columns: []string{exam_applications_ip.UsersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiuo.mutation.UsersIPRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.UsersIPRefTable,
			Columns: []string{exam_applications_ip.UsersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaiuo.mutation.ExamApplnIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.ExamApplnIPRefTable,
			Columns: []string{exam_applications_ip.ExamApplnIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_ip.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiuo.mutation.RemovedExamApplnIPRefIDs(); len(nodes) > 0 && !eaiuo.mutation.ExamApplnIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.ExamApplnIPRefTable,
			Columns: []string{exam_applications_ip.ExamApplnIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_ip.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiuo.mutation.ExamApplnIPRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.ExamApplnIPRefTable,
			Columns: []string{exam_applications_ip.ExamApplnIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_ip.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaiuo.mutation.OfficeIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.OfficeIPRefTable,
			Columns: []string{exam_applications_ip.OfficeIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiuo.mutation.RemovedOfficeIPRefIDs(); len(nodes) > 0 && !eaiuo.mutation.OfficeIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.OfficeIPRefTable,
			Columns: []string{exam_applications_ip.OfficeIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiuo.mutation.OfficeIPRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.OfficeIPRefTable,
			Columns: []string{exam_applications_ip.OfficeIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaiuo.mutation.RoleusersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ip.RoleusersTable,
			Columns: []string{exam_applications_ip.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiuo.mutation.RoleusersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ip.RoleusersTable,
			Columns: []string{exam_applications_ip.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaiuo.mutation.CadrePrefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.CadrePrefRefTable,
			Columns: []string{exam_applications_ip.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_ip.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiuo.mutation.RemovedCadrePrefRefIDs(); len(nodes) > 0 && !eaiuo.mutation.CadrePrefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.CadrePrefRefTable,
			Columns: []string{exam_applications_ip.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_ip.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiuo.mutation.CadrePrefRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.CadrePrefRefTable,
			Columns: []string{exam_applications_ip.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_ip.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaiuo.mutation.CirclePrefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.CirclePrefRefTable,
			Columns: []string{exam_applications_ip.CirclePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeofpreferenceip.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiuo.mutation.RemovedCirclePrefRefIDs(); len(nodes) > 0 && !eaiuo.mutation.CirclePrefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.CirclePrefRefTable,
			Columns: []string{exam_applications_ip.CirclePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeofpreferenceip.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiuo.mutation.CirclePrefRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.CirclePrefRefTable,
			Columns: []string{exam_applications_ip.CirclePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeofpreferenceip.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaiuo.mutation.IPApplicationsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.IPApplicationsRefTable,
			Columns: []string{exam_applications_ip.IPApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationsipapplications.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiuo.mutation.RemovedIPApplicationsRefIDs(); len(nodes) > 0 && !eaiuo.mutation.IPApplicationsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.IPApplicationsRefTable,
			Columns: []string{exam_applications_ip.IPApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationsipapplications.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiuo.mutation.IPApplicationsRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.IPApplicationsRefTable,
			Columns: []string{exam_applications_ip.IPApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationsipapplications.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Exam_Applications_IP{config: eaiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eaiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exam_applications_ip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eaiuo.mutation.done = true
	return _node, nil
}
