// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/exam"
	"recruit/ent/exampapers"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ExamPapers is the model entity for the ExamPapers schema.
type ExamPapers struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// PaperDescription holds the value of the "PaperDescription" field.
	PaperDescription string `json:"PaperDescription,omitempty"`
	// ExamCode holds the value of the "ExamCode" field.
	ExamCode int32 `json:"ExamCode,omitempty"`
	// CompetitiveQualifying holds the value of the "CompetitiveQualifying" field.
	CompetitiveQualifying bool `json:"CompetitiveQualifying,omitempty"`
	// ExceptionForDisability holds the value of the "ExceptionForDisability" field.
	ExceptionForDisability bool `json:"ExceptionForDisability,omitempty"`
	// MaximumMarks holds the value of the "MaximumMarks" field.
	MaximumMarks int `json:"MaximumMarks,omitempty"`
	// Duration holds the value of the "Duration" field.
	Duration int `json:"Duration,omitempty"`
	// LocalLanguageAllowedQuestionPaper holds the value of the "localLanguageAllowedQuestionPaper" field.
	LocalLanguageAllowedQuestionPaper string `json:"localLanguageAllowedQuestionPaper,omitempty"`
	// LocalLanguageAllowedAnswerPaper holds the value of the "localLanguageAllowedAnswerPaper" field.
	LocalLanguageAllowedAnswerPaper string `json:"localLanguageAllowedAnswerPaper,omitempty"`
	// OrderNumber holds the value of the "OrderNumber" field.
	OrderNumber string `json:"OrderNumber,omitempty"`
	// PaperStatus holds the value of the "PaperStatus" field.
	PaperStatus string `json:"PaperStatus,omitempty"`
	// CalendarCode holds the value of the "CalendarCode" field.
	CalendarCode int32 `json:"CalendarCode,omitempty"`
	// CreatedDate holds the value of the "CreatedDate" field.
	CreatedDate time.Time `json:"CreatedDate,omitempty"`
	// PaperTypeCode holds the value of the "PaperTypeCode" field.
	PaperTypeCode int32 `json:"PaperTypeCode,omitempty"`
	// PaperTypeName holds the value of the "PaperTypeName" field.
	PaperTypeName string `json:"PaperTypeName,omitempty"`
	// DisabilityTypeID holds the value of the "DisabilityTypeID" field.
	DisabilityTypeID int32 `json:"DisabilityTypeID,omitempty"`
	// ExamCodePS holds the value of the "ExamCodePS" field.
	ExamCodePS int32 `json:"ExamCodePS,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExamPapersQuery when eager-loading is set.
	Edges                 ExamPapersEdges `json:"edges"`
	disability_dis_ref    *int32
	exam_ip_papers_ip_ref *int32
	exam_pa_papers_ps_ref *int32
	exam_ps_papers_ps_ref *int32
	selectValues          sql.SelectValues
}

// ExamPapersEdges holds the relations/edges for other nodes in the graph.
type ExamPapersEdges struct {
	// Centers holds the value of the centers edge.
	Centers []*Center `json:"centers,omitempty"`
	// Exam holds the value of the exam edge.
	Exam *Exam `json:"exam,omitempty"`
	// ExampapersTypes holds the value of the exampapers_types edge.
	ExampapersTypes []*PaperTypes `json:"exampapers_types,omitempty"`
	// PapersRef holds the value of the papers_ref edge.
	PapersRef []*ExamCalendar `json:"papers_ref,omitempty"`
	// ExamPaperEligibility holds the value of the ExamPaperEligibility edge.
	ExamPaperEligibility []*EligibilityMaster `json:"ExamPaperEligibility,omitempty"`
	// DisRef holds the value of the dis_ref edge.
	DisRef []*Disability `json:"dis_ref,omitempty"`
	// PapersPsRef holds the value of the papers_ps_ref edge.
	PapersPsRef []*Exam_PS `json:"papers_ps_ref,omitempty"`
	// PapersIPRef holds the value of the papers_ip_ref edge.
	PapersIPRef []*Exam_IP `json:"papers_ip_ref,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// CentersOrErr returns the Centers value or an error if the edge
// was not loaded in eager-loading.
func (e ExamPapersEdges) CentersOrErr() ([]*Center, error) {
	if e.loadedTypes[0] {
		return e.Centers, nil
	}
	return nil, &NotLoadedError{edge: "centers"}
}

// ExamOrErr returns the Exam value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExamPapersEdges) ExamOrErr() (*Exam, error) {
	if e.loadedTypes[1] {
		if e.Exam == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: exam.Label}
		}
		return e.Exam, nil
	}
	return nil, &NotLoadedError{edge: "exam"}
}

// ExampapersTypesOrErr returns the ExampapersTypes value or an error if the edge
// was not loaded in eager-loading.
func (e ExamPapersEdges) ExampapersTypesOrErr() ([]*PaperTypes, error) {
	if e.loadedTypes[2] {
		return e.ExampapersTypes, nil
	}
	return nil, &NotLoadedError{edge: "exampapers_types"}
}

// PapersRefOrErr returns the PapersRef value or an error if the edge
// was not loaded in eager-loading.
func (e ExamPapersEdges) PapersRefOrErr() ([]*ExamCalendar, error) {
	if e.loadedTypes[3] {
		return e.PapersRef, nil
	}
	return nil, &NotLoadedError{edge: "papers_ref"}
}

// ExamPaperEligibilityOrErr returns the ExamPaperEligibility value or an error if the edge
// was not loaded in eager-loading.
func (e ExamPapersEdges) ExamPaperEligibilityOrErr() ([]*EligibilityMaster, error) {
	if e.loadedTypes[4] {
		return e.ExamPaperEligibility, nil
	}
	return nil, &NotLoadedError{edge: "ExamPaperEligibility"}
}

// DisRefOrErr returns the DisRef value or an error if the edge
// was not loaded in eager-loading.
func (e ExamPapersEdges) DisRefOrErr() ([]*Disability, error) {
	if e.loadedTypes[5] {
		return e.DisRef, nil
	}
	return nil, &NotLoadedError{edge: "dis_ref"}
}

// PapersPsRefOrErr returns the PapersPsRef value or an error if the edge
// was not loaded in eager-loading.
func (e ExamPapersEdges) PapersPsRefOrErr() ([]*Exam_PS, error) {
	if e.loadedTypes[6] {
		return e.PapersPsRef, nil
	}
	return nil, &NotLoadedError{edge: "papers_ps_ref"}
}

// PapersIPRefOrErr returns the PapersIPRef value or an error if the edge
// was not loaded in eager-loading.
func (e ExamPapersEdges) PapersIPRefOrErr() ([]*Exam_IP, error) {
	if e.loadedTypes[7] {
		return e.PapersIPRef, nil
	}
	return nil, &NotLoadedError{edge: "papers_ip_ref"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ExamPapers) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case exampapers.FieldCompetitiveQualifying, exampapers.FieldExceptionForDisability:
			values[i] = new(sql.NullBool)
		case exampapers.FieldID, exampapers.FieldExamCode, exampapers.FieldMaximumMarks, exampapers.FieldDuration, exampapers.FieldCalendarCode, exampapers.FieldPaperTypeCode, exampapers.FieldDisabilityTypeID, exampapers.FieldExamCodePS:
			values[i] = new(sql.NullInt64)
		case exampapers.FieldPaperDescription, exampapers.FieldLocalLanguageAllowedQuestionPaper, exampapers.FieldLocalLanguageAllowedAnswerPaper, exampapers.FieldOrderNumber, exampapers.FieldPaperStatus, exampapers.FieldPaperTypeName:
			values[i] = new(sql.NullString)
		case exampapers.FieldCreatedDate:
			values[i] = new(sql.NullTime)
		case exampapers.ForeignKeys[0]: // disability_dis_ref
			values[i] = new(sql.NullInt64)
		case exampapers.ForeignKeys[1]: // exam_ip_papers_ip_ref
			values[i] = new(sql.NullInt64)
		case exampapers.ForeignKeys[2]: // exam_pa_papers_ps_ref
			values[i] = new(sql.NullInt64)
		case exampapers.ForeignKeys[3]: // exam_ps_papers_ps_ref
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ExamPapers fields.
func (ep *ExamPapers) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case exampapers.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ep.ID = int32(value.Int64)
		case exampapers.FieldPaperDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PaperDescription", values[i])
			} else if value.Valid {
				ep.PaperDescription = value.String
			}
		case exampapers.FieldExamCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamCode", values[i])
			} else if value.Valid {
				ep.ExamCode = int32(value.Int64)
			}
		case exampapers.FieldCompetitiveQualifying:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field CompetitiveQualifying", values[i])
			} else if value.Valid {
				ep.CompetitiveQualifying = value.Bool
			}
		case exampapers.FieldExceptionForDisability:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field ExceptionForDisability", values[i])
			} else if value.Valid {
				ep.ExceptionForDisability = value.Bool
			}
		case exampapers.FieldMaximumMarks:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field MaximumMarks", values[i])
			} else if value.Valid {
				ep.MaximumMarks = int(value.Int64)
			}
		case exampapers.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Duration", values[i])
			} else if value.Valid {
				ep.Duration = int(value.Int64)
			}
		case exampapers.FieldLocalLanguageAllowedQuestionPaper:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field localLanguageAllowedQuestionPaper", values[i])
			} else if value.Valid {
				ep.LocalLanguageAllowedQuestionPaper = value.String
			}
		case exampapers.FieldLocalLanguageAllowedAnswerPaper:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field localLanguageAllowedAnswerPaper", values[i])
			} else if value.Valid {
				ep.LocalLanguageAllowedAnswerPaper = value.String
			}
		case exampapers.FieldOrderNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OrderNumber", values[i])
			} else if value.Valid {
				ep.OrderNumber = value.String
			}
		case exampapers.FieldPaperStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PaperStatus", values[i])
			} else if value.Valid {
				ep.PaperStatus = value.String
			}
		case exampapers.FieldCalendarCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CalendarCode", values[i])
			} else if value.Valid {
				ep.CalendarCode = int32(value.Int64)
			}
		case exampapers.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedDate", values[i])
			} else if value.Valid {
				ep.CreatedDate = value.Time
			}
		case exampapers.FieldPaperTypeCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field PaperTypeCode", values[i])
			} else if value.Valid {
				ep.PaperTypeCode = int32(value.Int64)
			}
		case exampapers.FieldPaperTypeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PaperTypeName", values[i])
			} else if value.Valid {
				ep.PaperTypeName = value.String
			}
		case exampapers.FieldDisabilityTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DisabilityTypeID", values[i])
			} else if value.Valid {
				ep.DisabilityTypeID = int32(value.Int64)
			}
		case exampapers.FieldExamCodePS:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamCodePS", values[i])
			} else if value.Valid {
				ep.ExamCodePS = int32(value.Int64)
			}
		case exampapers.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field disability_dis_ref", value)
			} else if value.Valid {
				ep.disability_dis_ref = new(int32)
				*ep.disability_dis_ref = int32(value.Int64)
			}
		case exampapers.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exam_ip_papers_ip_ref", value)
			} else if value.Valid {
				ep.exam_ip_papers_ip_ref = new(int32)
				*ep.exam_ip_papers_ip_ref = int32(value.Int64)
			}
		case exampapers.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exam_pa_papers_ps_ref", value)
			} else if value.Valid {
				ep.exam_pa_papers_ps_ref = new(int32)
				*ep.exam_pa_papers_ps_ref = int32(value.Int64)
			}
		case exampapers.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exam_ps_papers_ps_ref", value)
			} else if value.Valid {
				ep.exam_ps_papers_ps_ref = new(int32)
				*ep.exam_ps_papers_ps_ref = int32(value.Int64)
			}
		default:
			ep.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ExamPapers.
// This includes values selected through modifiers, order, etc.
func (ep *ExamPapers) Value(name string) (ent.Value, error) {
	return ep.selectValues.Get(name)
}

// QueryCenters queries the "centers" edge of the ExamPapers entity.
func (ep *ExamPapers) QueryCenters() *CenterQuery {
	return NewExamPapersClient(ep.config).QueryCenters(ep)
}

// QueryExam queries the "exam" edge of the ExamPapers entity.
func (ep *ExamPapers) QueryExam() *ExamQuery {
	return NewExamPapersClient(ep.config).QueryExam(ep)
}

// QueryExampapersTypes queries the "exampapers_types" edge of the ExamPapers entity.
func (ep *ExamPapers) QueryExampapersTypes() *PaperTypesQuery {
	return NewExamPapersClient(ep.config).QueryExampapersTypes(ep)
}

// QueryPapersRef queries the "papers_ref" edge of the ExamPapers entity.
func (ep *ExamPapers) QueryPapersRef() *ExamCalendarQuery {
	return NewExamPapersClient(ep.config).QueryPapersRef(ep)
}

// QueryExamPaperEligibility queries the "ExamPaperEligibility" edge of the ExamPapers entity.
func (ep *ExamPapers) QueryExamPaperEligibility() *EligibilityMasterQuery {
	return NewExamPapersClient(ep.config).QueryExamPaperEligibility(ep)
}

// QueryDisRef queries the "dis_ref" edge of the ExamPapers entity.
func (ep *ExamPapers) QueryDisRef() *DisabilityQuery {
	return NewExamPapersClient(ep.config).QueryDisRef(ep)
}

// QueryPapersPsRef queries the "papers_ps_ref" edge of the ExamPapers entity.
func (ep *ExamPapers) QueryPapersPsRef() *ExamPSQuery {
	return NewExamPapersClient(ep.config).QueryPapersPsRef(ep)
}

// QueryPapersIPRef queries the "papers_ip_ref" edge of the ExamPapers entity.
func (ep *ExamPapers) QueryPapersIPRef() *ExamIPQuery {
	return NewExamPapersClient(ep.config).QueryPapersIPRef(ep)
}

// Update returns a builder for updating this ExamPapers.
// Note that you need to call ExamPapers.Unwrap() before calling this method if this ExamPapers
// was returned from a transaction, and the transaction was committed or rolled back.
func (ep *ExamPapers) Update() *ExamPapersUpdateOne {
	return NewExamPapersClient(ep.config).UpdateOne(ep)
}

// Unwrap unwraps the ExamPapers entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ep *ExamPapers) Unwrap() *ExamPapers {
	_tx, ok := ep.config.driver.(*txDriver)
	if !ok {
		panic("ent: ExamPapers is not a transactional entity")
	}
	ep.config.driver = _tx.drv
	return ep
}

// String implements the fmt.Stringer.
func (ep *ExamPapers) String() string {
	var builder strings.Builder
	builder.WriteString("ExamPapers(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ep.ID))
	builder.WriteString("PaperDescription=")
	builder.WriteString(ep.PaperDescription)
	builder.WriteString(", ")
	builder.WriteString("ExamCode=")
	builder.WriteString(fmt.Sprintf("%v", ep.ExamCode))
	builder.WriteString(", ")
	builder.WriteString("CompetitiveQualifying=")
	builder.WriteString(fmt.Sprintf("%v", ep.CompetitiveQualifying))
	builder.WriteString(", ")
	builder.WriteString("ExceptionForDisability=")
	builder.WriteString(fmt.Sprintf("%v", ep.ExceptionForDisability))
	builder.WriteString(", ")
	builder.WriteString("MaximumMarks=")
	builder.WriteString(fmt.Sprintf("%v", ep.MaximumMarks))
	builder.WriteString(", ")
	builder.WriteString("Duration=")
	builder.WriteString(fmt.Sprintf("%v", ep.Duration))
	builder.WriteString(", ")
	builder.WriteString("localLanguageAllowedQuestionPaper=")
	builder.WriteString(ep.LocalLanguageAllowedQuestionPaper)
	builder.WriteString(", ")
	builder.WriteString("localLanguageAllowedAnswerPaper=")
	builder.WriteString(ep.LocalLanguageAllowedAnswerPaper)
	builder.WriteString(", ")
	builder.WriteString("OrderNumber=")
	builder.WriteString(ep.OrderNumber)
	builder.WriteString(", ")
	builder.WriteString("PaperStatus=")
	builder.WriteString(ep.PaperStatus)
	builder.WriteString(", ")
	builder.WriteString("CalendarCode=")
	builder.WriteString(fmt.Sprintf("%v", ep.CalendarCode))
	builder.WriteString(", ")
	builder.WriteString("CreatedDate=")
	builder.WriteString(ep.CreatedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("PaperTypeCode=")
	builder.WriteString(fmt.Sprintf("%v", ep.PaperTypeCode))
	builder.WriteString(", ")
	builder.WriteString("PaperTypeName=")
	builder.WriteString(ep.PaperTypeName)
	builder.WriteString(", ")
	builder.WriteString("DisabilityTypeID=")
	builder.WriteString(fmt.Sprintf("%v", ep.DisabilityTypeID))
	builder.WriteString(", ")
	builder.WriteString("ExamCodePS=")
	builder.WriteString(fmt.Sprintf("%v", ep.ExamCodePS))
	builder.WriteByte(')')
	return builder.String()
}

// ExamPapersSlice is a parsable slice of ExamPapers.
type ExamPapersSlice []*ExamPapers
