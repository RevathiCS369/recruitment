// Code generated by ent, DO NOT EDIT.

package eligibilitymaster

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the eligibilitymaster type in the database.
	Label = "eligibility_master"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "EligibilityCode"
	// FieldExamCode holds the string denoting the examcode field in the database.
	FieldExamCode = "exam_code"
	// FieldExamName holds the string denoting the examname field in the database.
	FieldExamName = "exam_name"
	// FieldPostCode holds the string denoting the postcode field in the database.
	FieldPostCode = "post_code"
	// FieldGdsService holds the string denoting the gdsservice field in the database.
	FieldGdsService = "gds_service"
	// FieldAgeCriteria holds the string denoting the agecriteria field in the database.
	FieldAgeCriteria = "age_criteria"
	// FieldServiceCriteria holds the string denoting the servicecriteria field in the database.
	FieldServiceCriteria = "service_criteria"
	// FieldDrivingLicenseCriteria holds the string denoting the drivinglicensecriteria field in the database.
	FieldDrivingLicenseCriteria = "driving_license_criteria"
	// FieldComputerKnowledge holds the string denoting the computerknowledge field in the database.
	FieldComputerKnowledge = "computer_knowledge"
	// FieldLevelOfPayMatrixEligibility holds the string denoting the levelofpaymatrixeligibility field in the database.
	FieldLevelOfPayMatrixEligibility = "level_of_pay_matrix_eligibility"
	// FieldEducation holds the string denoting the education field in the database.
	FieldEducation = "education"
	// FieldNotifyCode holds the string denoting the notifycode field in the database.
	FieldNotifyCode = "notify_code"
	// FieldCategoryCode holds the string denoting the categorycode field in the database.
	FieldCategoryCode = "category_code"
	// FieldPaperCode holds the string denoting the papercode field in the database.
	FieldPaperCode = "paper_code"
	// FieldPaperDescription holds the string denoting the paperdescription field in the database.
	FieldPaperDescription = "paper_description"
	// FieldMinimumMarks holds the string denoting the minimummarks field in the database.
	FieldMinimumMarks = "minimum_marks"
	// EdgeNotifications holds the string denoting the notifications edge name in mutations.
	EdgeNotifications = "Notifications"
	// EdgeCategoryEligibility holds the string denoting the categoryeligibility edge name in mutations.
	EdgeCategoryEligibility = "CategoryEligibility"
	// EdgePostEligibility holds the string denoting the posteligibility edge name in mutations.
	EdgePostEligibility = "PostEligibility"
	// EdgeExamPaperEligibility holds the string denoting the exampaper_eligibility edge name in mutations.
	EdgeExamPaperEligibility = "ExamPaper_Eligibility"
	// EdgeExamEligibility holds the string denoting the exam_eligibility edge name in mutations.
	EdgeExamEligibility = "Exam_Eligibility"
	// NotificationFieldID holds the string denoting the ID field of the Notification.
	NotificationFieldID = "NotifyCode"
	// EmployeeCategoryFieldID holds the string denoting the ID field of the EmployeeCategory.
	EmployeeCategoryFieldID = "categoryidid"
	// EmployeePostsFieldID holds the string denoting the ID field of the EmployeePosts.
	EmployeePostsFieldID = "PostID"
	// ExamPapersFieldID holds the string denoting the ID field of the ExamPapers.
	ExamPapersFieldID = "PaperCode"
	// ExamFieldID holds the string denoting the ID field of the Exam.
	ExamFieldID = "ExamCode"
	// Table holds the table name of the eligibilitymaster in the database.
	Table = "EligibilityMaster"
	// NotificationsTable is the table that holds the Notifications relation/edge.
	NotificationsTable = "Notification"
	// NotificationsInverseTable is the table name for the Notification entity.
	// It exists in this package in order to avoid circular dependency with the "notification" package.
	NotificationsInverseTable = "Notification"
	// NotificationsColumn is the table column denoting the Notifications relation/edge.
	NotificationsColumn = "eligibility_master_notifications"
	// CategoryEligibilityTable is the table that holds the CategoryEligibility relation/edge.
	CategoryEligibilityTable = "EmployeeCategory"
	// CategoryEligibilityInverseTable is the table name for the EmployeeCategory entity.
	// It exists in this package in order to avoid circular dependency with the "employeecategory" package.
	CategoryEligibilityInverseTable = "EmployeeCategory"
	// CategoryEligibilityColumn is the table column denoting the CategoryEligibility relation/edge.
	CategoryEligibilityColumn = "eligibility_master_category_eligibility"
	// PostEligibilityTable is the table that holds the PostEligibility relation/edge.
	PostEligibilityTable = "EmployeePosts"
	// PostEligibilityInverseTable is the table name for the EmployeePosts entity.
	// It exists in this package in order to avoid circular dependency with the "employeeposts" package.
	PostEligibilityInverseTable = "EmployeePosts"
	// PostEligibilityColumn is the table column denoting the PostEligibility relation/edge.
	PostEligibilityColumn = "eligibility_master_post_eligibility"
	// ExamPaperEligibilityTable is the table that holds the ExamPaper_Eligibility relation/edge.
	ExamPaperEligibilityTable = "EligibilityMaster"
	// ExamPaperEligibilityInverseTable is the table name for the ExamPapers entity.
	// It exists in this package in order to avoid circular dependency with the "exampapers" package.
	ExamPaperEligibilityInverseTable = "ExamPapers"
	// ExamPaperEligibilityColumn is the table column denoting the ExamPaper_Eligibility relation/edge.
	ExamPaperEligibilityColumn = "paper_code"
	// ExamEligibilityTable is the table that holds the Exam_Eligibility relation/edge.
	ExamEligibilityTable = "EligibilityMaster"
	// ExamEligibilityInverseTable is the table name for the Exam entity.
	// It exists in this package in order to avoid circular dependency with the "exam" package.
	ExamEligibilityInverseTable = "Exam"
	// ExamEligibilityColumn is the table column denoting the Exam_Eligibility relation/edge.
	ExamEligibilityColumn = "exam_code"
)

// Columns holds all SQL columns for eligibilitymaster fields.
var Columns = []string{
	FieldID,
	FieldExamCode,
	FieldExamName,
	FieldPostCode,
	FieldGdsService,
	FieldAgeCriteria,
	FieldServiceCriteria,
	FieldDrivingLicenseCriteria,
	FieldComputerKnowledge,
	FieldLevelOfPayMatrixEligibility,
	FieldEducation,
	FieldNotifyCode,
	FieldCategoryCode,
	FieldPaperCode,
	FieldPaperDescription,
	FieldMinimumMarks,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "EligibilityMaster"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"employee_posts_post_eligibility",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultGdsService holds the default value on creation for the "gdsService" field.
	DefaultGdsService bool
	// DefaultDrivingLicenseCriteria holds the default value on creation for the "DrivingLicenseCriteria" field.
	DefaultDrivingLicenseCriteria bool
	// DefaultComputerKnowledge holds the default value on creation for the "ComputerKnowledge" field.
	DefaultComputerKnowledge bool
	// DefaultLevelOfPayMatrixEligibility holds the default value on creation for the "LevelOfPayMatrixEligibility" field.
	DefaultLevelOfPayMatrixEligibility bool
)

// OrderOption defines the ordering options for the EligibilityMaster queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByExamCode orders the results by the ExamCode field.
func ByExamCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamCode, opts...).ToFunc()
}

// ByExamName orders the results by the ExamName field.
func ByExamName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamName, opts...).ToFunc()
}

// ByPostCode orders the results by the PostCode field.
func ByPostCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostCode, opts...).ToFunc()
}

// ByGdsService orders the results by the gdsService field.
func ByGdsService(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGdsService, opts...).ToFunc()
}

// ByAgeCriteria orders the results by the AgeCriteria field.
func ByAgeCriteria(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgeCriteria, opts...).ToFunc()
}

// ByServiceCriteria orders the results by the ServiceCriteria field.
func ByServiceCriteria(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServiceCriteria, opts...).ToFunc()
}

// ByDrivingLicenseCriteria orders the results by the DrivingLicenseCriteria field.
func ByDrivingLicenseCriteria(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDrivingLicenseCriteria, opts...).ToFunc()
}

// ByComputerKnowledge orders the results by the ComputerKnowledge field.
func ByComputerKnowledge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComputerKnowledge, opts...).ToFunc()
}

// ByLevelOfPayMatrixEligibility orders the results by the LevelOfPayMatrixEligibility field.
func ByLevelOfPayMatrixEligibility(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevelOfPayMatrixEligibility, opts...).ToFunc()
}

// ByEducation orders the results by the Education field.
func ByEducation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEducation, opts...).ToFunc()
}

// ByNotifyCode orders the results by the NotifyCode field.
func ByNotifyCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotifyCode, opts...).ToFunc()
}

// ByCategoryCode orders the results by the CategoryCode field.
func ByCategoryCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategoryCode, opts...).ToFunc()
}

// ByPaperCode orders the results by the PaperCode field.
func ByPaperCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaperCode, opts...).ToFunc()
}

// ByPaperDescription orders the results by the PaperDescription field.
func ByPaperDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaperDescription, opts...).ToFunc()
}

// ByMinimumMarks orders the results by the MinimumMarks field.
func ByMinimumMarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinimumMarks, opts...).ToFunc()
}

// ByNotificationsCount orders the results by Notifications count.
func ByNotificationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNotificationsStep(), opts...)
	}
}

// ByNotifications orders the results by Notifications terms.
func ByNotifications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotificationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCategoryEligibilityCount orders the results by CategoryEligibility count.
func ByCategoryEligibilityCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCategoryEligibilityStep(), opts...)
	}
}

// ByCategoryEligibility orders the results by CategoryEligibility terms.
func ByCategoryEligibility(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCategoryEligibilityStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPostEligibilityCount orders the results by PostEligibility count.
func ByPostEligibilityCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPostEligibilityStep(), opts...)
	}
}

// ByPostEligibility orders the results by PostEligibility terms.
func ByPostEligibility(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPostEligibilityStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExamPaperEligibilityField orders the results by ExamPaper_Eligibility field.
func ByExamPaperEligibilityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamPaperEligibilityStep(), sql.OrderByField(field, opts...))
	}
}

// ByExamEligibilityField orders the results by Exam_Eligibility field.
func ByExamEligibilityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamEligibilityStep(), sql.OrderByField(field, opts...))
	}
}
func newNotificationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotificationsInverseTable, NotificationFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NotificationsTable, NotificationsColumn),
	)
}
func newCategoryEligibilityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CategoryEligibilityInverseTable, EmployeeCategoryFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CategoryEligibilityTable, CategoryEligibilityColumn),
	)
}
func newPostEligibilityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PostEligibilityInverseTable, EmployeePostsFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PostEligibilityTable, PostEligibilityColumn),
	)
}
func newExamPaperEligibilityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamPaperEligibilityInverseTable, ExamPapersFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ExamPaperEligibilityTable, ExamPaperEligibilityColumn),
	)
}
func newExamEligibilityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamEligibilityInverseTable, ExamFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ExamEligibilityTable, ExamEligibilityColumn),
	)
}
