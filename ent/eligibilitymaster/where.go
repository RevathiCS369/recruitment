// Code generated by ent, DO NOT EDIT.

package eligibilitymaster

import (
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldLTE(FieldID, id))
}

// ExamCode applies equality check predicate on the "ExamCode" field. It's identical to ExamCodeEQ.
func ExamCode(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldExamCode, v))
}

// ExamName applies equality check predicate on the "ExamName" field. It's identical to ExamNameEQ.
func ExamName(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldExamName, v))
}

// PostCode applies equality check predicate on the "PostCode" field. It's identical to PostCodeEQ.
func PostCode(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldPostCode, v))
}

// GdsService applies equality check predicate on the "gdsService" field. It's identical to GdsServiceEQ.
func GdsService(v bool) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldGdsService, v))
}

// AgeCriteria applies equality check predicate on the "AgeCriteria" field. It's identical to AgeCriteriaEQ.
func AgeCriteria(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldAgeCriteria, v))
}

// ServiceCriteria applies equality check predicate on the "ServiceCriteria" field. It's identical to ServiceCriteriaEQ.
func ServiceCriteria(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldServiceCriteria, v))
}

// DrivingLicenseCriteria applies equality check predicate on the "DrivingLicenseCriteria" field. It's identical to DrivingLicenseCriteriaEQ.
func DrivingLicenseCriteria(v bool) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldDrivingLicenseCriteria, v))
}

// ComputerKnowledge applies equality check predicate on the "ComputerKnowledge" field. It's identical to ComputerKnowledgeEQ.
func ComputerKnowledge(v bool) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldComputerKnowledge, v))
}

// LevelOfPayMatrixEligibility applies equality check predicate on the "LevelOfPayMatrixEligibility" field. It's identical to LevelOfPayMatrixEligibilityEQ.
func LevelOfPayMatrixEligibility(v bool) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldLevelOfPayMatrixEligibility, v))
}

// Education applies equality check predicate on the "Education" field. It's identical to EducationEQ.
func Education(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldEducation, v))
}

// NotifyCode applies equality check predicate on the "NotifyCode" field. It's identical to NotifyCodeEQ.
func NotifyCode(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldNotifyCode, v))
}

// CategoryCode applies equality check predicate on the "CategoryCode" field. It's identical to CategoryCodeEQ.
func CategoryCode(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldCategoryCode, v))
}

// PaperCode applies equality check predicate on the "PaperCode" field. It's identical to PaperCodeEQ.
func PaperCode(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldPaperCode, v))
}

// PaperDescription applies equality check predicate on the "PaperDescription" field. It's identical to PaperDescriptionEQ.
func PaperDescription(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldPaperDescription, v))
}

// MinimumMarks applies equality check predicate on the "MinimumMarks" field. It's identical to MinimumMarksEQ.
func MinimumMarks(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldMinimumMarks, v))
}

// ExamCodeEQ applies the EQ predicate on the "ExamCode" field.
func ExamCodeEQ(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldExamCode, v))
}

// ExamCodeNEQ applies the NEQ predicate on the "ExamCode" field.
func ExamCodeNEQ(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNEQ(FieldExamCode, v))
}

// ExamCodeIn applies the In predicate on the "ExamCode" field.
func ExamCodeIn(vs ...int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldIn(FieldExamCode, vs...))
}

// ExamCodeNotIn applies the NotIn predicate on the "ExamCode" field.
func ExamCodeNotIn(vs ...int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNotIn(FieldExamCode, vs...))
}

// ExamCodeIsNil applies the IsNil predicate on the "ExamCode" field.
func ExamCodeIsNil() predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldIsNull(FieldExamCode))
}

// ExamCodeNotNil applies the NotNil predicate on the "ExamCode" field.
func ExamCodeNotNil() predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNotNull(FieldExamCode))
}

// ExamNameEQ applies the EQ predicate on the "ExamName" field.
func ExamNameEQ(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldExamName, v))
}

// ExamNameNEQ applies the NEQ predicate on the "ExamName" field.
func ExamNameNEQ(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNEQ(FieldExamName, v))
}

// ExamNameIn applies the In predicate on the "ExamName" field.
func ExamNameIn(vs ...string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldIn(FieldExamName, vs...))
}

// ExamNameNotIn applies the NotIn predicate on the "ExamName" field.
func ExamNameNotIn(vs ...string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNotIn(FieldExamName, vs...))
}

// ExamNameGT applies the GT predicate on the "ExamName" field.
func ExamNameGT(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldGT(FieldExamName, v))
}

// ExamNameGTE applies the GTE predicate on the "ExamName" field.
func ExamNameGTE(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldGTE(FieldExamName, v))
}

// ExamNameLT applies the LT predicate on the "ExamName" field.
func ExamNameLT(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldLT(FieldExamName, v))
}

// ExamNameLTE applies the LTE predicate on the "ExamName" field.
func ExamNameLTE(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldLTE(FieldExamName, v))
}

// ExamNameContains applies the Contains predicate on the "ExamName" field.
func ExamNameContains(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldContains(FieldExamName, v))
}

// ExamNameHasPrefix applies the HasPrefix predicate on the "ExamName" field.
func ExamNameHasPrefix(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldHasPrefix(FieldExamName, v))
}

// ExamNameHasSuffix applies the HasSuffix predicate on the "ExamName" field.
func ExamNameHasSuffix(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldHasSuffix(FieldExamName, v))
}

// ExamNameEqualFold applies the EqualFold predicate on the "ExamName" field.
func ExamNameEqualFold(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEqualFold(FieldExamName, v))
}

// ExamNameContainsFold applies the ContainsFold predicate on the "ExamName" field.
func ExamNameContainsFold(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldContainsFold(FieldExamName, v))
}

// PostCodeEQ applies the EQ predicate on the "PostCode" field.
func PostCodeEQ(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldPostCode, v))
}

// PostCodeNEQ applies the NEQ predicate on the "PostCode" field.
func PostCodeNEQ(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNEQ(FieldPostCode, v))
}

// PostCodeIn applies the In predicate on the "PostCode" field.
func PostCodeIn(vs ...string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldIn(FieldPostCode, vs...))
}

// PostCodeNotIn applies the NotIn predicate on the "PostCode" field.
func PostCodeNotIn(vs ...string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNotIn(FieldPostCode, vs...))
}

// PostCodeGT applies the GT predicate on the "PostCode" field.
func PostCodeGT(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldGT(FieldPostCode, v))
}

// PostCodeGTE applies the GTE predicate on the "PostCode" field.
func PostCodeGTE(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldGTE(FieldPostCode, v))
}

// PostCodeLT applies the LT predicate on the "PostCode" field.
func PostCodeLT(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldLT(FieldPostCode, v))
}

// PostCodeLTE applies the LTE predicate on the "PostCode" field.
func PostCodeLTE(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldLTE(FieldPostCode, v))
}

// PostCodeContains applies the Contains predicate on the "PostCode" field.
func PostCodeContains(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldContains(FieldPostCode, v))
}

// PostCodeHasPrefix applies the HasPrefix predicate on the "PostCode" field.
func PostCodeHasPrefix(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldHasPrefix(FieldPostCode, v))
}

// PostCodeHasSuffix applies the HasSuffix predicate on the "PostCode" field.
func PostCodeHasSuffix(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldHasSuffix(FieldPostCode, v))
}

// PostCodeIsNil applies the IsNil predicate on the "PostCode" field.
func PostCodeIsNil() predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldIsNull(FieldPostCode))
}

// PostCodeNotNil applies the NotNil predicate on the "PostCode" field.
func PostCodeNotNil() predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNotNull(FieldPostCode))
}

// PostCodeEqualFold applies the EqualFold predicate on the "PostCode" field.
func PostCodeEqualFold(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEqualFold(FieldPostCode, v))
}

// PostCodeContainsFold applies the ContainsFold predicate on the "PostCode" field.
func PostCodeContainsFold(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldContainsFold(FieldPostCode, v))
}

// GdsServiceEQ applies the EQ predicate on the "gdsService" field.
func GdsServiceEQ(v bool) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldGdsService, v))
}

// GdsServiceNEQ applies the NEQ predicate on the "gdsService" field.
func GdsServiceNEQ(v bool) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNEQ(FieldGdsService, v))
}

// AgeCriteriaEQ applies the EQ predicate on the "AgeCriteria" field.
func AgeCriteriaEQ(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldAgeCriteria, v))
}

// AgeCriteriaNEQ applies the NEQ predicate on the "AgeCriteria" field.
func AgeCriteriaNEQ(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNEQ(FieldAgeCriteria, v))
}

// AgeCriteriaIn applies the In predicate on the "AgeCriteria" field.
func AgeCriteriaIn(vs ...int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldIn(FieldAgeCriteria, vs...))
}

// AgeCriteriaNotIn applies the NotIn predicate on the "AgeCriteria" field.
func AgeCriteriaNotIn(vs ...int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNotIn(FieldAgeCriteria, vs...))
}

// AgeCriteriaGT applies the GT predicate on the "AgeCriteria" field.
func AgeCriteriaGT(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldGT(FieldAgeCriteria, v))
}

// AgeCriteriaGTE applies the GTE predicate on the "AgeCriteria" field.
func AgeCriteriaGTE(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldGTE(FieldAgeCriteria, v))
}

// AgeCriteriaLT applies the LT predicate on the "AgeCriteria" field.
func AgeCriteriaLT(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldLT(FieldAgeCriteria, v))
}

// AgeCriteriaLTE applies the LTE predicate on the "AgeCriteria" field.
func AgeCriteriaLTE(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldLTE(FieldAgeCriteria, v))
}

// AgeCriteriaIsNil applies the IsNil predicate on the "AgeCriteria" field.
func AgeCriteriaIsNil() predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldIsNull(FieldAgeCriteria))
}

// AgeCriteriaNotNil applies the NotNil predicate on the "AgeCriteria" field.
func AgeCriteriaNotNil() predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNotNull(FieldAgeCriteria))
}

// ServiceCriteriaEQ applies the EQ predicate on the "ServiceCriteria" field.
func ServiceCriteriaEQ(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldServiceCriteria, v))
}

// ServiceCriteriaNEQ applies the NEQ predicate on the "ServiceCriteria" field.
func ServiceCriteriaNEQ(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNEQ(FieldServiceCriteria, v))
}

// ServiceCriteriaIn applies the In predicate on the "ServiceCriteria" field.
func ServiceCriteriaIn(vs ...int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldIn(FieldServiceCriteria, vs...))
}

// ServiceCriteriaNotIn applies the NotIn predicate on the "ServiceCriteria" field.
func ServiceCriteriaNotIn(vs ...int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNotIn(FieldServiceCriteria, vs...))
}

// ServiceCriteriaGT applies the GT predicate on the "ServiceCriteria" field.
func ServiceCriteriaGT(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldGT(FieldServiceCriteria, v))
}

// ServiceCriteriaGTE applies the GTE predicate on the "ServiceCriteria" field.
func ServiceCriteriaGTE(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldGTE(FieldServiceCriteria, v))
}

// ServiceCriteriaLT applies the LT predicate on the "ServiceCriteria" field.
func ServiceCriteriaLT(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldLT(FieldServiceCriteria, v))
}

// ServiceCriteriaLTE applies the LTE predicate on the "ServiceCriteria" field.
func ServiceCriteriaLTE(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldLTE(FieldServiceCriteria, v))
}

// ServiceCriteriaIsNil applies the IsNil predicate on the "ServiceCriteria" field.
func ServiceCriteriaIsNil() predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldIsNull(FieldServiceCriteria))
}

// ServiceCriteriaNotNil applies the NotNil predicate on the "ServiceCriteria" field.
func ServiceCriteriaNotNil() predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNotNull(FieldServiceCriteria))
}

// DrivingLicenseCriteriaEQ applies the EQ predicate on the "DrivingLicenseCriteria" field.
func DrivingLicenseCriteriaEQ(v bool) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldDrivingLicenseCriteria, v))
}

// DrivingLicenseCriteriaNEQ applies the NEQ predicate on the "DrivingLicenseCriteria" field.
func DrivingLicenseCriteriaNEQ(v bool) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNEQ(FieldDrivingLicenseCriteria, v))
}

// ComputerKnowledgeEQ applies the EQ predicate on the "ComputerKnowledge" field.
func ComputerKnowledgeEQ(v bool) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldComputerKnowledge, v))
}

// ComputerKnowledgeNEQ applies the NEQ predicate on the "ComputerKnowledge" field.
func ComputerKnowledgeNEQ(v bool) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNEQ(FieldComputerKnowledge, v))
}

// LevelOfPayMatrixEligibilityEQ applies the EQ predicate on the "LevelOfPayMatrixEligibility" field.
func LevelOfPayMatrixEligibilityEQ(v bool) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldLevelOfPayMatrixEligibility, v))
}

// LevelOfPayMatrixEligibilityNEQ applies the NEQ predicate on the "LevelOfPayMatrixEligibility" field.
func LevelOfPayMatrixEligibilityNEQ(v bool) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNEQ(FieldLevelOfPayMatrixEligibility, v))
}

// EducationEQ applies the EQ predicate on the "Education" field.
func EducationEQ(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldEducation, v))
}

// EducationNEQ applies the NEQ predicate on the "Education" field.
func EducationNEQ(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNEQ(FieldEducation, v))
}

// EducationIn applies the In predicate on the "Education" field.
func EducationIn(vs ...string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldIn(FieldEducation, vs...))
}

// EducationNotIn applies the NotIn predicate on the "Education" field.
func EducationNotIn(vs ...string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNotIn(FieldEducation, vs...))
}

// EducationGT applies the GT predicate on the "Education" field.
func EducationGT(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldGT(FieldEducation, v))
}

// EducationGTE applies the GTE predicate on the "Education" field.
func EducationGTE(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldGTE(FieldEducation, v))
}

// EducationLT applies the LT predicate on the "Education" field.
func EducationLT(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldLT(FieldEducation, v))
}

// EducationLTE applies the LTE predicate on the "Education" field.
func EducationLTE(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldLTE(FieldEducation, v))
}

// EducationContains applies the Contains predicate on the "Education" field.
func EducationContains(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldContains(FieldEducation, v))
}

// EducationHasPrefix applies the HasPrefix predicate on the "Education" field.
func EducationHasPrefix(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldHasPrefix(FieldEducation, v))
}

// EducationHasSuffix applies the HasSuffix predicate on the "Education" field.
func EducationHasSuffix(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldHasSuffix(FieldEducation, v))
}

// EducationEqualFold applies the EqualFold predicate on the "Education" field.
func EducationEqualFold(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEqualFold(FieldEducation, v))
}

// EducationContainsFold applies the ContainsFold predicate on the "Education" field.
func EducationContainsFold(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldContainsFold(FieldEducation, v))
}

// NotifyCodeEQ applies the EQ predicate on the "NotifyCode" field.
func NotifyCodeEQ(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldNotifyCode, v))
}

// NotifyCodeNEQ applies the NEQ predicate on the "NotifyCode" field.
func NotifyCodeNEQ(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNEQ(FieldNotifyCode, v))
}

// NotifyCodeIn applies the In predicate on the "NotifyCode" field.
func NotifyCodeIn(vs ...int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldIn(FieldNotifyCode, vs...))
}

// NotifyCodeNotIn applies the NotIn predicate on the "NotifyCode" field.
func NotifyCodeNotIn(vs ...int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNotIn(FieldNotifyCode, vs...))
}

// NotifyCodeGT applies the GT predicate on the "NotifyCode" field.
func NotifyCodeGT(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldGT(FieldNotifyCode, v))
}

// NotifyCodeGTE applies the GTE predicate on the "NotifyCode" field.
func NotifyCodeGTE(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldGTE(FieldNotifyCode, v))
}

// NotifyCodeLT applies the LT predicate on the "NotifyCode" field.
func NotifyCodeLT(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldLT(FieldNotifyCode, v))
}

// NotifyCodeLTE applies the LTE predicate on the "NotifyCode" field.
func NotifyCodeLTE(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldLTE(FieldNotifyCode, v))
}

// NotifyCodeIsNil applies the IsNil predicate on the "NotifyCode" field.
func NotifyCodeIsNil() predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldIsNull(FieldNotifyCode))
}

// NotifyCodeNotNil applies the NotNil predicate on the "NotifyCode" field.
func NotifyCodeNotNil() predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNotNull(FieldNotifyCode))
}

// CategoryCodeEQ applies the EQ predicate on the "CategoryCode" field.
func CategoryCodeEQ(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldCategoryCode, v))
}

// CategoryCodeNEQ applies the NEQ predicate on the "CategoryCode" field.
func CategoryCodeNEQ(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNEQ(FieldCategoryCode, v))
}

// CategoryCodeIn applies the In predicate on the "CategoryCode" field.
func CategoryCodeIn(vs ...string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldIn(FieldCategoryCode, vs...))
}

// CategoryCodeNotIn applies the NotIn predicate on the "CategoryCode" field.
func CategoryCodeNotIn(vs ...string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNotIn(FieldCategoryCode, vs...))
}

// CategoryCodeGT applies the GT predicate on the "CategoryCode" field.
func CategoryCodeGT(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldGT(FieldCategoryCode, v))
}

// CategoryCodeGTE applies the GTE predicate on the "CategoryCode" field.
func CategoryCodeGTE(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldGTE(FieldCategoryCode, v))
}

// CategoryCodeLT applies the LT predicate on the "CategoryCode" field.
func CategoryCodeLT(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldLT(FieldCategoryCode, v))
}

// CategoryCodeLTE applies the LTE predicate on the "CategoryCode" field.
func CategoryCodeLTE(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldLTE(FieldCategoryCode, v))
}

// CategoryCodeContains applies the Contains predicate on the "CategoryCode" field.
func CategoryCodeContains(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldContains(FieldCategoryCode, v))
}

// CategoryCodeHasPrefix applies the HasPrefix predicate on the "CategoryCode" field.
func CategoryCodeHasPrefix(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldHasPrefix(FieldCategoryCode, v))
}

// CategoryCodeHasSuffix applies the HasSuffix predicate on the "CategoryCode" field.
func CategoryCodeHasSuffix(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldHasSuffix(FieldCategoryCode, v))
}

// CategoryCodeIsNil applies the IsNil predicate on the "CategoryCode" field.
func CategoryCodeIsNil() predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldIsNull(FieldCategoryCode))
}

// CategoryCodeNotNil applies the NotNil predicate on the "CategoryCode" field.
func CategoryCodeNotNil() predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNotNull(FieldCategoryCode))
}

// CategoryCodeEqualFold applies the EqualFold predicate on the "CategoryCode" field.
func CategoryCodeEqualFold(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEqualFold(FieldCategoryCode, v))
}

// CategoryCodeContainsFold applies the ContainsFold predicate on the "CategoryCode" field.
func CategoryCodeContainsFold(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldContainsFold(FieldCategoryCode, v))
}

// PaperCodeEQ applies the EQ predicate on the "PaperCode" field.
func PaperCodeEQ(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldPaperCode, v))
}

// PaperCodeNEQ applies the NEQ predicate on the "PaperCode" field.
func PaperCodeNEQ(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNEQ(FieldPaperCode, v))
}

// PaperCodeIn applies the In predicate on the "PaperCode" field.
func PaperCodeIn(vs ...int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldIn(FieldPaperCode, vs...))
}

// PaperCodeNotIn applies the NotIn predicate on the "PaperCode" field.
func PaperCodeNotIn(vs ...int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNotIn(FieldPaperCode, vs...))
}

// PaperCodeIsNil applies the IsNil predicate on the "PaperCode" field.
func PaperCodeIsNil() predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldIsNull(FieldPaperCode))
}

// PaperCodeNotNil applies the NotNil predicate on the "PaperCode" field.
func PaperCodeNotNil() predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNotNull(FieldPaperCode))
}

// PaperDescriptionEQ applies the EQ predicate on the "PaperDescription" field.
func PaperDescriptionEQ(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldPaperDescription, v))
}

// PaperDescriptionNEQ applies the NEQ predicate on the "PaperDescription" field.
func PaperDescriptionNEQ(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNEQ(FieldPaperDescription, v))
}

// PaperDescriptionIn applies the In predicate on the "PaperDescription" field.
func PaperDescriptionIn(vs ...string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldIn(FieldPaperDescription, vs...))
}

// PaperDescriptionNotIn applies the NotIn predicate on the "PaperDescription" field.
func PaperDescriptionNotIn(vs ...string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNotIn(FieldPaperDescription, vs...))
}

// PaperDescriptionGT applies the GT predicate on the "PaperDescription" field.
func PaperDescriptionGT(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldGT(FieldPaperDescription, v))
}

// PaperDescriptionGTE applies the GTE predicate on the "PaperDescription" field.
func PaperDescriptionGTE(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldGTE(FieldPaperDescription, v))
}

// PaperDescriptionLT applies the LT predicate on the "PaperDescription" field.
func PaperDescriptionLT(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldLT(FieldPaperDescription, v))
}

// PaperDescriptionLTE applies the LTE predicate on the "PaperDescription" field.
func PaperDescriptionLTE(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldLTE(FieldPaperDescription, v))
}

// PaperDescriptionContains applies the Contains predicate on the "PaperDescription" field.
func PaperDescriptionContains(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldContains(FieldPaperDescription, v))
}

// PaperDescriptionHasPrefix applies the HasPrefix predicate on the "PaperDescription" field.
func PaperDescriptionHasPrefix(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldHasPrefix(FieldPaperDescription, v))
}

// PaperDescriptionHasSuffix applies the HasSuffix predicate on the "PaperDescription" field.
func PaperDescriptionHasSuffix(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldHasSuffix(FieldPaperDescription, v))
}

// PaperDescriptionEqualFold applies the EqualFold predicate on the "PaperDescription" field.
func PaperDescriptionEqualFold(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEqualFold(FieldPaperDescription, v))
}

// PaperDescriptionContainsFold applies the ContainsFold predicate on the "PaperDescription" field.
func PaperDescriptionContainsFold(v string) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldContainsFold(FieldPaperDescription, v))
}

// MinimumMarksEQ applies the EQ predicate on the "MinimumMarks" field.
func MinimumMarksEQ(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldEQ(FieldMinimumMarks, v))
}

// MinimumMarksNEQ applies the NEQ predicate on the "MinimumMarks" field.
func MinimumMarksNEQ(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNEQ(FieldMinimumMarks, v))
}

// MinimumMarksIn applies the In predicate on the "MinimumMarks" field.
func MinimumMarksIn(vs ...int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldIn(FieldMinimumMarks, vs...))
}

// MinimumMarksNotIn applies the NotIn predicate on the "MinimumMarks" field.
func MinimumMarksNotIn(vs ...int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldNotIn(FieldMinimumMarks, vs...))
}

// MinimumMarksGT applies the GT predicate on the "MinimumMarks" field.
func MinimumMarksGT(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldGT(FieldMinimumMarks, v))
}

// MinimumMarksGTE applies the GTE predicate on the "MinimumMarks" field.
func MinimumMarksGTE(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldGTE(FieldMinimumMarks, v))
}

// MinimumMarksLT applies the LT predicate on the "MinimumMarks" field.
func MinimumMarksLT(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldLT(FieldMinimumMarks, v))
}

// MinimumMarksLTE applies the LTE predicate on the "MinimumMarks" field.
func MinimumMarksLTE(v int32) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(sql.FieldLTE(FieldMinimumMarks, v))
}

// HasNotifications applies the HasEdge predicate on the "Notifications" edge.
func HasNotifications() predicate.EligibilityMaster {
	return predicate.EligibilityMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NotificationsTable, NotificationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotificationsWith applies the HasEdge predicate on the "Notifications" edge with a given conditions (other predicates).
func HasNotificationsWith(preds ...predicate.Notification) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(func(s *sql.Selector) {
		step := newNotificationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCategoryEligibility applies the HasEdge predicate on the "CategoryEligibility" edge.
func HasCategoryEligibility() predicate.EligibilityMaster {
	return predicate.EligibilityMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CategoryEligibilityTable, CategoryEligibilityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCategoryEligibilityWith applies the HasEdge predicate on the "CategoryEligibility" edge with a given conditions (other predicates).
func HasCategoryEligibilityWith(preds ...predicate.EmployeeCategory) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(func(s *sql.Selector) {
		step := newCategoryEligibilityStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPostEligibility applies the HasEdge predicate on the "PostEligibility" edge.
func HasPostEligibility() predicate.EligibilityMaster {
	return predicate.EligibilityMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PostEligibilityTable, PostEligibilityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostEligibilityWith applies the HasEdge predicate on the "PostEligibility" edge with a given conditions (other predicates).
func HasPostEligibilityWith(preds ...predicate.EmployeePosts) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(func(s *sql.Selector) {
		step := newPostEligibilityStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamPaperEligibility applies the HasEdge predicate on the "ExamPaper_Eligibility" edge.
func HasExamPaperEligibility() predicate.EligibilityMaster {
	return predicate.EligibilityMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExamPaperEligibilityTable, ExamPaperEligibilityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamPaperEligibilityWith applies the HasEdge predicate on the "ExamPaper_Eligibility" edge with a given conditions (other predicates).
func HasExamPaperEligibilityWith(preds ...predicate.ExamPapers) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(func(s *sql.Selector) {
		step := newExamPaperEligibilityStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamEligibility applies the HasEdge predicate on the "Exam_Eligibility" edge.
func HasExamEligibility() predicate.EligibilityMaster {
	return predicate.EligibilityMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExamEligibilityTable, ExamEligibilityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamEligibilityWith applies the HasEdge predicate on the "Exam_Eligibility" edge with a given conditions (other predicates).
func HasExamEligibilityWith(preds ...predicate.Exam) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(func(s *sql.Selector) {
		step := newExamEligibilityStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EligibilityMaster) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EligibilityMaster) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EligibilityMaster) predicate.EligibilityMaster {
	return predicate.EligibilityMaster(func(s *sql.Selector) {
		p(s.Not())
	})
}
