// Code generated by ent, DO NOT EDIT.

package papertypes

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the papertypes type in the database.
	Label = "paper_types"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "PaperTypeCode"
	// FieldPaperCode holds the string denoting the papercode field in the database.
	FieldPaperCode = "paper_code"
	// FieldPaperTypeDescription holds the string denoting the papertypedescription field in the database.
	FieldPaperTypeDescription = "paper_type_description"
	// FieldOrderNumber holds the string denoting the ordernumber field in the database.
	FieldOrderNumber = "order_number"
	// FieldSequenceNumber holds the string denoting the sequencenumber field in the database.
	FieldSequenceNumber = "sequence_number"
	// FieldCreatedDate holds the string denoting the createddate field in the database.
	FieldCreatedDate = "created_date"
	// EdgePapercode holds the string denoting the papercode edge name in mutations.
	EdgePapercode = "papercode"
	// ExamPapersFieldID holds the string denoting the ID field of the ExamPapers.
	ExamPapersFieldID = "PaperCode"
	// Table holds the table name of the papertypes in the database.
	Table = "paper_types"
	// PapercodeTable is the table that holds the papercode relation/edge.
	PapercodeTable = "paper_types"
	// PapercodeInverseTable is the table name for the ExamPapers entity.
	// It exists in this package in order to avoid circular dependency with the "exampapers" package.
	PapercodeInverseTable = "ExamPapers"
	// PapercodeColumn is the table column denoting the papercode relation/edge.
	PapercodeColumn = "paper_code"
)

// Columns holds all SQL columns for papertypes fields.
var Columns = []string{
	FieldID,
	FieldPaperCode,
	FieldPaperTypeDescription,
	FieldOrderNumber,
	FieldSequenceNumber,
	FieldCreatedDate,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// PaperTypeDescriptionValidator is a validator for the "PaperTypeDescription" field. It is called by the builders before save.
	PaperTypeDescriptionValidator func(string) error
	// OrderNumberValidator is a validator for the "OrderNumber" field. It is called by the builders before save.
	OrderNumberValidator func(string) error
)

// OrderOption defines the ordering options for the PaperTypes queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPaperCode orders the results by the PaperCode field.
func ByPaperCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaperCode, opts...).ToFunc()
}

// ByPaperTypeDescription orders the results by the PaperTypeDescription field.
func ByPaperTypeDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaperTypeDescription, opts...).ToFunc()
}

// ByOrderNumber orders the results by the OrderNumber field.
func ByOrderNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderNumber, opts...).ToFunc()
}

// BySequenceNumber orders the results by the SequenceNumber field.
func BySequenceNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSequenceNumber, opts...).ToFunc()
}

// ByCreatedDate orders the results by the CreatedDate field.
func ByCreatedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedDate, opts...).ToFunc()
}

// ByPapercodeField orders the results by papercode field.
func ByPapercodeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPapercodeStep(), sql.OrderByField(field, opts...))
	}
}
func newPapercodeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PapercodeInverseTable, ExamPapersFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PapercodeTable, PapercodeColumn),
	)
}
