// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/center"
	"recruit/ent/exam"
	"recruit/ent/examcalendar"
	"recruit/ent/exampapers"
	"recruit/ent/papertypes"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamPapersCreate is the builder for creating a ExamPapers entity.
type ExamPapersCreate struct {
	config
	mutation *ExamPapersMutation
	hooks    []Hook
}

// SetPaperDescription sets the "PaperDescription" field.
func (epc *ExamPapersCreate) SetPaperDescription(s string) *ExamPapersCreate {
	epc.mutation.SetPaperDescription(s)
	return epc
}

// SetExamCode sets the "ExamCode" field.
func (epc *ExamPapersCreate) SetExamCode(i int32) *ExamPapersCreate {
	epc.mutation.SetExamCode(i)
	return epc
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (epc *ExamPapersCreate) SetNillableExamCode(i *int32) *ExamPapersCreate {
	if i != nil {
		epc.SetExamCode(*i)
	}
	return epc
}

// SetCompetitiveQualifying sets the "competitiveQualifying" field.
func (epc *ExamPapersCreate) SetCompetitiveQualifying(s string) *ExamPapersCreate {
	epc.mutation.SetCompetitiveQualifying(s)
	return epc
}

// SetExceptionForDisability sets the "exceptionForDisability" field.
func (epc *ExamPapersCreate) SetExceptionForDisability(s string) *ExamPapersCreate {
	epc.mutation.SetExceptionForDisability(s)
	return epc
}

// SetMaximumMarks sets the "MaximumMarks" field.
func (epc *ExamPapersCreate) SetMaximumMarks(i int) *ExamPapersCreate {
	epc.mutation.SetMaximumMarks(i)
	return epc
}

// SetDuration sets the "Duration" field.
func (epc *ExamPapersCreate) SetDuration(i int) *ExamPapersCreate {
	epc.mutation.SetDuration(i)
	return epc
}

// SetLocalLanguageAllowedQuestionPaper sets the "localLanguageAllowedQuestionPaper" field.
func (epc *ExamPapersCreate) SetLocalLanguageAllowedQuestionPaper(s string) *ExamPapersCreate {
	epc.mutation.SetLocalLanguageAllowedQuestionPaper(s)
	return epc
}

// SetLocalLanguageAllowedAnswerPaper sets the "localLanguageAllowedAnswerPaper" field.
func (epc *ExamPapersCreate) SetLocalLanguageAllowedAnswerPaper(s string) *ExamPapersCreate {
	epc.mutation.SetLocalLanguageAllowedAnswerPaper(s)
	return epc
}

// SetOrderNumber sets the "OrderNumber" field.
func (epc *ExamPapersCreate) SetOrderNumber(s string) *ExamPapersCreate {
	epc.mutation.SetOrderNumber(s)
	return epc
}

// SetPaperStatus sets the "PaperStatus" field.
func (epc *ExamPapersCreate) SetPaperStatus(s string) *ExamPapersCreate {
	epc.mutation.SetPaperStatus(s)
	return epc
}

// SetCalendarCode sets the "CalendarCode" field.
func (epc *ExamPapersCreate) SetCalendarCode(i int32) *ExamPapersCreate {
	epc.mutation.SetCalendarCode(i)
	return epc
}

// SetNillableCalendarCode sets the "CalendarCode" field if the given value is not nil.
func (epc *ExamPapersCreate) SetNillableCalendarCode(i *int32) *ExamPapersCreate {
	if i != nil {
		epc.SetCalendarCode(*i)
	}
	return epc
}

// SetCreatedDate sets the "CreatedDate" field.
func (epc *ExamPapersCreate) SetCreatedDate(t time.Time) *ExamPapersCreate {
	epc.mutation.SetCreatedDate(t)
	return epc
}

// SetID sets the "id" field.
func (epc *ExamPapersCreate) SetID(i int32) *ExamPapersCreate {
	epc.mutation.SetID(i)
	return epc
}

// AddCenterIDs adds the "centers" edge to the Center entity by IDs.
func (epc *ExamPapersCreate) AddCenterIDs(ids ...int32) *ExamPapersCreate {
	epc.mutation.AddCenterIDs(ids...)
	return epc
}

// AddCenters adds the "centers" edges to the Center entity.
func (epc *ExamPapersCreate) AddCenters(c ...*Center) *ExamPapersCreate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return epc.AddCenterIDs(ids...)
}

// SetExamID sets the "exam" edge to the Exam entity by ID.
func (epc *ExamPapersCreate) SetExamID(id int32) *ExamPapersCreate {
	epc.mutation.SetExamID(id)
	return epc
}

// SetNillableExamID sets the "exam" edge to the Exam entity by ID if the given value is not nil.
func (epc *ExamPapersCreate) SetNillableExamID(id *int32) *ExamPapersCreate {
	if id != nil {
		epc = epc.SetExamID(*id)
	}
	return epc
}

// SetExam sets the "exam" edge to the Exam entity.
func (epc *ExamPapersCreate) SetExam(e *Exam) *ExamPapersCreate {
	return epc.SetExamID(e.ID)
}

// AddExampapersTypeIDs adds the "exampapers_types" edge to the PaperTypes entity by IDs.
func (epc *ExamPapersCreate) AddExampapersTypeIDs(ids ...int32) *ExamPapersCreate {
	epc.mutation.AddExampapersTypeIDs(ids...)
	return epc
}

// AddExampapersTypes adds the "exampapers_types" edges to the PaperTypes entity.
func (epc *ExamPapersCreate) AddExampapersTypes(p ...*PaperTypes) *ExamPapersCreate {
	ids := make([]int32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return epc.AddExampapersTypeIDs(ids...)
}

// AddPapersRefIDs adds the "papers_ref" edge to the ExamCalendar entity by IDs.
func (epc *ExamPapersCreate) AddPapersRefIDs(ids ...int32) *ExamPapersCreate {
	epc.mutation.AddPapersRefIDs(ids...)
	return epc
}

// AddPapersRef adds the "papers_ref" edges to the ExamCalendar entity.
func (epc *ExamPapersCreate) AddPapersRef(e ...*ExamCalendar) *ExamPapersCreate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epc.AddPapersRefIDs(ids...)
}

// Mutation returns the ExamPapersMutation object of the builder.
func (epc *ExamPapersCreate) Mutation() *ExamPapersMutation {
	return epc.mutation
}

// Save creates the ExamPapers in the database.
func (epc *ExamPapersCreate) Save(ctx context.Context) (*ExamPapers, error) {
	return withHooks(ctx, epc.sqlSave, epc.mutation, epc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (epc *ExamPapersCreate) SaveX(ctx context.Context) *ExamPapers {
	v, err := epc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (epc *ExamPapersCreate) Exec(ctx context.Context) error {
	_, err := epc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epc *ExamPapersCreate) ExecX(ctx context.Context) {
	if err := epc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (epc *ExamPapersCreate) check() error {
	if _, ok := epc.mutation.PaperDescription(); !ok {
		return &ValidationError{Name: "PaperDescription", err: errors.New(`ent: missing required field "ExamPapers.PaperDescription"`)}
	}
	if v, ok := epc.mutation.PaperDescription(); ok {
		if err := exampapers.PaperDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "PaperDescription", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.PaperDescription": %w`, err)}
		}
	}
	if _, ok := epc.mutation.CompetitiveQualifying(); !ok {
		return &ValidationError{Name: "competitiveQualifying", err: errors.New(`ent: missing required field "ExamPapers.competitiveQualifying"`)}
	}
	if v, ok := epc.mutation.CompetitiveQualifying(); ok {
		if err := exampapers.CompetitiveQualifyingValidator(v); err != nil {
			return &ValidationError{Name: "competitiveQualifying", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.competitiveQualifying": %w`, err)}
		}
	}
	if _, ok := epc.mutation.ExceptionForDisability(); !ok {
		return &ValidationError{Name: "exceptionForDisability", err: errors.New(`ent: missing required field "ExamPapers.exceptionForDisability"`)}
	}
	if v, ok := epc.mutation.ExceptionForDisability(); ok {
		if err := exampapers.ExceptionForDisabilityValidator(v); err != nil {
			return &ValidationError{Name: "exceptionForDisability", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.exceptionForDisability": %w`, err)}
		}
	}
	if _, ok := epc.mutation.MaximumMarks(); !ok {
		return &ValidationError{Name: "MaximumMarks", err: errors.New(`ent: missing required field "ExamPapers.MaximumMarks"`)}
	}
	if v, ok := epc.mutation.MaximumMarks(); ok {
		if err := exampapers.MaximumMarksValidator(v); err != nil {
			return &ValidationError{Name: "MaximumMarks", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.MaximumMarks": %w`, err)}
		}
	}
	if _, ok := epc.mutation.Duration(); !ok {
		return &ValidationError{Name: "Duration", err: errors.New(`ent: missing required field "ExamPapers.Duration"`)}
	}
	if v, ok := epc.mutation.Duration(); ok {
		if err := exampapers.DurationValidator(v); err != nil {
			return &ValidationError{Name: "Duration", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.Duration": %w`, err)}
		}
	}
	if _, ok := epc.mutation.LocalLanguageAllowedQuestionPaper(); !ok {
		return &ValidationError{Name: "localLanguageAllowedQuestionPaper", err: errors.New(`ent: missing required field "ExamPapers.localLanguageAllowedQuestionPaper"`)}
	}
	if v, ok := epc.mutation.LocalLanguageAllowedQuestionPaper(); ok {
		if err := exampapers.LocalLanguageAllowedQuestionPaperValidator(v); err != nil {
			return &ValidationError{Name: "localLanguageAllowedQuestionPaper", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.localLanguageAllowedQuestionPaper": %w`, err)}
		}
	}
	if _, ok := epc.mutation.LocalLanguageAllowedAnswerPaper(); !ok {
		return &ValidationError{Name: "localLanguageAllowedAnswerPaper", err: errors.New(`ent: missing required field "ExamPapers.localLanguageAllowedAnswerPaper"`)}
	}
	if v, ok := epc.mutation.LocalLanguageAllowedAnswerPaper(); ok {
		if err := exampapers.LocalLanguageAllowedAnswerPaperValidator(v); err != nil {
			return &ValidationError{Name: "localLanguageAllowedAnswerPaper", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.localLanguageAllowedAnswerPaper": %w`, err)}
		}
	}
	if _, ok := epc.mutation.OrderNumber(); !ok {
		return &ValidationError{Name: "OrderNumber", err: errors.New(`ent: missing required field "ExamPapers.OrderNumber"`)}
	}
	if v, ok := epc.mutation.OrderNumber(); ok {
		if err := exampapers.OrderNumberValidator(v); err != nil {
			return &ValidationError{Name: "OrderNumber", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.OrderNumber": %w`, err)}
		}
	}
	if _, ok := epc.mutation.PaperStatus(); !ok {
		return &ValidationError{Name: "PaperStatus", err: errors.New(`ent: missing required field "ExamPapers.PaperStatus"`)}
	}
	if v, ok := epc.mutation.PaperStatus(); ok {
		if err := exampapers.PaperStatusValidator(v); err != nil {
			return &ValidationError{Name: "PaperStatus", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.PaperStatus": %w`, err)}
		}
	}
	if _, ok := epc.mutation.CreatedDate(); !ok {
		return &ValidationError{Name: "CreatedDate", err: errors.New(`ent: missing required field "ExamPapers.CreatedDate"`)}
	}
	return nil
}

func (epc *ExamPapersCreate) sqlSave(ctx context.Context) (*ExamPapers, error) {
	if err := epc.check(); err != nil {
		return nil, err
	}
	_node, _spec := epc.createSpec()
	if err := sqlgraph.CreateNode(ctx, epc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	epc.mutation.id = &_node.ID
	epc.mutation.done = true
	return _node, nil
}

func (epc *ExamPapersCreate) createSpec() (*ExamPapers, *sqlgraph.CreateSpec) {
	var (
		_node = &ExamPapers{config: epc.config}
		_spec = sqlgraph.NewCreateSpec(exampapers.Table, sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32))
	)
	if id, ok := epc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := epc.mutation.PaperDescription(); ok {
		_spec.SetField(exampapers.FieldPaperDescription, field.TypeString, value)
		_node.PaperDescription = value
	}
	if value, ok := epc.mutation.CompetitiveQualifying(); ok {
		_spec.SetField(exampapers.FieldCompetitiveQualifying, field.TypeString, value)
		_node.CompetitiveQualifying = value
	}
	if value, ok := epc.mutation.ExceptionForDisability(); ok {
		_spec.SetField(exampapers.FieldExceptionForDisability, field.TypeString, value)
		_node.ExceptionForDisability = value
	}
	if value, ok := epc.mutation.MaximumMarks(); ok {
		_spec.SetField(exampapers.FieldMaximumMarks, field.TypeInt, value)
		_node.MaximumMarks = value
	}
	if value, ok := epc.mutation.Duration(); ok {
		_spec.SetField(exampapers.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if value, ok := epc.mutation.LocalLanguageAllowedQuestionPaper(); ok {
		_spec.SetField(exampapers.FieldLocalLanguageAllowedQuestionPaper, field.TypeString, value)
		_node.LocalLanguageAllowedQuestionPaper = value
	}
	if value, ok := epc.mutation.LocalLanguageAllowedAnswerPaper(); ok {
		_spec.SetField(exampapers.FieldLocalLanguageAllowedAnswerPaper, field.TypeString, value)
		_node.LocalLanguageAllowedAnswerPaper = value
	}
	if value, ok := epc.mutation.OrderNumber(); ok {
		_spec.SetField(exampapers.FieldOrderNumber, field.TypeString, value)
		_node.OrderNumber = value
	}
	if value, ok := epc.mutation.PaperStatus(); ok {
		_spec.SetField(exampapers.FieldPaperStatus, field.TypeString, value)
		_node.PaperStatus = value
	}
	if value, ok := epc.mutation.CalendarCode(); ok {
		_spec.SetField(exampapers.FieldCalendarCode, field.TypeInt32, value)
		_node.CalendarCode = value
	}
	if value, ok := epc.mutation.CreatedDate(); ok {
		_spec.SetField(exampapers.FieldCreatedDate, field.TypeTime, value)
		_node.CreatedDate = value
	}
	if nodes := epc.mutation.CentersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.CentersTable,
			Columns: []string{exampapers.CentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := epc.mutation.ExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exampapers.ExamTable,
			Columns: []string{exampapers.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ExamCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := epc.mutation.ExampapersTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.ExampapersTypesTable,
			Columns: []string{exampapers.ExampapersTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(papertypes.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := epc.mutation.PapersRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.PapersRefTable,
			Columns: []string{exampapers.PapersRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExamPapersCreateBulk is the builder for creating many ExamPapers entities in bulk.
type ExamPapersCreateBulk struct {
	config
	builders []*ExamPapersCreate
}

// Save creates the ExamPapers entities in the database.
func (epcb *ExamPapersCreateBulk) Save(ctx context.Context) ([]*ExamPapers, error) {
	specs := make([]*sqlgraph.CreateSpec, len(epcb.builders))
	nodes := make([]*ExamPapers, len(epcb.builders))
	mutators := make([]Mutator, len(epcb.builders))
	for i := range epcb.builders {
		func(i int, root context.Context) {
			builder := epcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExamPapersMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, epcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, epcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, epcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (epcb *ExamPapersCreateBulk) SaveX(ctx context.Context) []*ExamPapers {
	v, err := epcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (epcb *ExamPapersCreateBulk) Exec(ctx context.Context) error {
	_, err := epcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epcb *ExamPapersCreateBulk) ExecX(ctx context.Context) {
	if err := epcb.Exec(ctx); err != nil {
		panic(err)
	}
}
