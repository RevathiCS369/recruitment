// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/division_choice_pa"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DivisionChoicePAUpdate is the builder for updating Division_Choice_PA entities.
type DivisionChoicePAUpdate struct {
	config
	hooks    []Hook
	mutation *DivisionChoicePAMutation
}

// Where appends a list predicates to the DivisionChoicePAUpdate builder.
func (dcpu *DivisionChoicePAUpdate) Where(ps ...predicate.Division_Choice_PA) *DivisionChoicePAUpdate {
	dcpu.mutation.Where(ps...)
	return dcpu
}

// SetApplication sets the "Application" field.
func (dcpu *DivisionChoicePAUpdate) SetApplication(s string) *DivisionChoicePAUpdate {
	dcpu.mutation.SetApplication(s)
	return dcpu
}

// SetNillableApplication sets the "Application" field if the given value is not nil.
func (dcpu *DivisionChoicePAUpdate) SetNillableApplication(s *string) *DivisionChoicePAUpdate {
	if s != nil {
		dcpu.SetApplication(*s)
	}
	return dcpu
}

// ClearApplication clears the value of the "Application" field.
func (dcpu *DivisionChoicePAUpdate) ClearApplication() *DivisionChoicePAUpdate {
	dcpu.mutation.ClearApplication()
	return dcpu
}

// SetCadrePrefNo sets the "CadrePrefNo" field.
func (dcpu *DivisionChoicePAUpdate) SetCadrePrefNo(s string) *DivisionChoicePAUpdate {
	dcpu.mutation.SetCadrePrefNo(s)
	return dcpu
}

// SetCadrePrefValue sets the "CadrePrefValue" field.
func (dcpu *DivisionChoicePAUpdate) SetCadrePrefValue(s string) *DivisionChoicePAUpdate {
	dcpu.mutation.SetCadrePrefValue(s)
	return dcpu
}

// SetEmployeeID sets the "EmployeeID" field.
func (dcpu *DivisionChoicePAUpdate) SetEmployeeID(i int64) *DivisionChoicePAUpdate {
	dcpu.mutation.ResetEmployeeID()
	dcpu.mutation.SetEmployeeID(i)
	return dcpu
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (dcpu *DivisionChoicePAUpdate) SetNillableEmployeeID(i *int64) *DivisionChoicePAUpdate {
	if i != nil {
		dcpu.SetEmployeeID(*i)
	}
	return dcpu
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (dcpu *DivisionChoicePAUpdate) AddEmployeeID(i int64) *DivisionChoicePAUpdate {
	dcpu.mutation.AddEmployeeID(i)
	return dcpu
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (dcpu *DivisionChoicePAUpdate) ClearEmployeeID() *DivisionChoicePAUpdate {
	dcpu.mutation.ClearEmployeeID()
	return dcpu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (dcpu *DivisionChoicePAUpdate) SetUpdatedAt(t time.Time) *DivisionChoicePAUpdate {
	dcpu.mutation.SetUpdatedAt(t)
	return dcpu
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (dcpu *DivisionChoicePAUpdate) SetNillableUpdatedAt(t *time.Time) *DivisionChoicePAUpdate {
	if t != nil {
		dcpu.SetUpdatedAt(*t)
	}
	return dcpu
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (dcpu *DivisionChoicePAUpdate) ClearUpdatedAt() *DivisionChoicePAUpdate {
	dcpu.mutation.ClearUpdatedAt()
	return dcpu
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (dcpu *DivisionChoicePAUpdate) SetUpdatedBy(s string) *DivisionChoicePAUpdate {
	dcpu.mutation.SetUpdatedBy(s)
	return dcpu
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (dcpu *DivisionChoicePAUpdate) SetNillableUpdatedBy(s *string) *DivisionChoicePAUpdate {
	if s != nil {
		dcpu.SetUpdatedBy(*s)
	}
	return dcpu
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (dcpu *DivisionChoicePAUpdate) ClearUpdatedBy() *DivisionChoicePAUpdate {
	dcpu.mutation.ClearUpdatedBy()
	return dcpu
}

// Mutation returns the DivisionChoicePAMutation object of the builder.
func (dcpu *DivisionChoicePAUpdate) Mutation() *DivisionChoicePAMutation {
	return dcpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dcpu *DivisionChoicePAUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dcpu.sqlSave, dcpu.mutation, dcpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcpu *DivisionChoicePAUpdate) SaveX(ctx context.Context) int {
	affected, err := dcpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dcpu *DivisionChoicePAUpdate) Exec(ctx context.Context) error {
	_, err := dcpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcpu *DivisionChoicePAUpdate) ExecX(ctx context.Context) {
	if err := dcpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dcpu *DivisionChoicePAUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(division_choice_pa.Table, division_choice_pa.Columns, sqlgraph.NewFieldSpec(division_choice_pa.FieldID, field.TypeInt32))
	if ps := dcpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcpu.mutation.Application(); ok {
		_spec.SetField(division_choice_pa.FieldApplication, field.TypeString, value)
	}
	if dcpu.mutation.ApplicationCleared() {
		_spec.ClearField(division_choice_pa.FieldApplication, field.TypeString)
	}
	if value, ok := dcpu.mutation.CadrePrefNo(); ok {
		_spec.SetField(division_choice_pa.FieldCadrePrefNo, field.TypeString, value)
	}
	if value, ok := dcpu.mutation.CadrePrefValue(); ok {
		_spec.SetField(division_choice_pa.FieldCadrePrefValue, field.TypeString, value)
	}
	if value, ok := dcpu.mutation.EmployeeID(); ok {
		_spec.SetField(division_choice_pa.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := dcpu.mutation.AddedEmployeeID(); ok {
		_spec.AddField(division_choice_pa.FieldEmployeeID, field.TypeInt64, value)
	}
	if dcpu.mutation.EmployeeIDCleared() {
		_spec.ClearField(division_choice_pa.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := dcpu.mutation.UpdatedAt(); ok {
		_spec.SetField(division_choice_pa.FieldUpdatedAt, field.TypeTime, value)
	}
	if dcpu.mutation.UpdatedAtCleared() {
		_spec.ClearField(division_choice_pa.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := dcpu.mutation.UpdatedBy(); ok {
		_spec.SetField(division_choice_pa.FieldUpdatedBy, field.TypeString, value)
	}
	if dcpu.mutation.UpdatedByCleared() {
		_spec.ClearField(division_choice_pa.FieldUpdatedBy, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dcpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{division_choice_pa.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dcpu.mutation.done = true
	return n, nil
}

// DivisionChoicePAUpdateOne is the builder for updating a single Division_Choice_PA entity.
type DivisionChoicePAUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DivisionChoicePAMutation
}

// SetApplication sets the "Application" field.
func (dcpuo *DivisionChoicePAUpdateOne) SetApplication(s string) *DivisionChoicePAUpdateOne {
	dcpuo.mutation.SetApplication(s)
	return dcpuo
}

// SetNillableApplication sets the "Application" field if the given value is not nil.
func (dcpuo *DivisionChoicePAUpdateOne) SetNillableApplication(s *string) *DivisionChoicePAUpdateOne {
	if s != nil {
		dcpuo.SetApplication(*s)
	}
	return dcpuo
}

// ClearApplication clears the value of the "Application" field.
func (dcpuo *DivisionChoicePAUpdateOne) ClearApplication() *DivisionChoicePAUpdateOne {
	dcpuo.mutation.ClearApplication()
	return dcpuo
}

// SetCadrePrefNo sets the "CadrePrefNo" field.
func (dcpuo *DivisionChoicePAUpdateOne) SetCadrePrefNo(s string) *DivisionChoicePAUpdateOne {
	dcpuo.mutation.SetCadrePrefNo(s)
	return dcpuo
}

// SetCadrePrefValue sets the "CadrePrefValue" field.
func (dcpuo *DivisionChoicePAUpdateOne) SetCadrePrefValue(s string) *DivisionChoicePAUpdateOne {
	dcpuo.mutation.SetCadrePrefValue(s)
	return dcpuo
}

// SetEmployeeID sets the "EmployeeID" field.
func (dcpuo *DivisionChoicePAUpdateOne) SetEmployeeID(i int64) *DivisionChoicePAUpdateOne {
	dcpuo.mutation.ResetEmployeeID()
	dcpuo.mutation.SetEmployeeID(i)
	return dcpuo
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (dcpuo *DivisionChoicePAUpdateOne) SetNillableEmployeeID(i *int64) *DivisionChoicePAUpdateOne {
	if i != nil {
		dcpuo.SetEmployeeID(*i)
	}
	return dcpuo
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (dcpuo *DivisionChoicePAUpdateOne) AddEmployeeID(i int64) *DivisionChoicePAUpdateOne {
	dcpuo.mutation.AddEmployeeID(i)
	return dcpuo
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (dcpuo *DivisionChoicePAUpdateOne) ClearEmployeeID() *DivisionChoicePAUpdateOne {
	dcpuo.mutation.ClearEmployeeID()
	return dcpuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (dcpuo *DivisionChoicePAUpdateOne) SetUpdatedAt(t time.Time) *DivisionChoicePAUpdateOne {
	dcpuo.mutation.SetUpdatedAt(t)
	return dcpuo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (dcpuo *DivisionChoicePAUpdateOne) SetNillableUpdatedAt(t *time.Time) *DivisionChoicePAUpdateOne {
	if t != nil {
		dcpuo.SetUpdatedAt(*t)
	}
	return dcpuo
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (dcpuo *DivisionChoicePAUpdateOne) ClearUpdatedAt() *DivisionChoicePAUpdateOne {
	dcpuo.mutation.ClearUpdatedAt()
	return dcpuo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (dcpuo *DivisionChoicePAUpdateOne) SetUpdatedBy(s string) *DivisionChoicePAUpdateOne {
	dcpuo.mutation.SetUpdatedBy(s)
	return dcpuo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (dcpuo *DivisionChoicePAUpdateOne) SetNillableUpdatedBy(s *string) *DivisionChoicePAUpdateOne {
	if s != nil {
		dcpuo.SetUpdatedBy(*s)
	}
	return dcpuo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (dcpuo *DivisionChoicePAUpdateOne) ClearUpdatedBy() *DivisionChoicePAUpdateOne {
	dcpuo.mutation.ClearUpdatedBy()
	return dcpuo
}

// Mutation returns the DivisionChoicePAMutation object of the builder.
func (dcpuo *DivisionChoicePAUpdateOne) Mutation() *DivisionChoicePAMutation {
	return dcpuo.mutation
}

// Where appends a list predicates to the DivisionChoicePAUpdate builder.
func (dcpuo *DivisionChoicePAUpdateOne) Where(ps ...predicate.Division_Choice_PA) *DivisionChoicePAUpdateOne {
	dcpuo.mutation.Where(ps...)
	return dcpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dcpuo *DivisionChoicePAUpdateOne) Select(field string, fields ...string) *DivisionChoicePAUpdateOne {
	dcpuo.fields = append([]string{field}, fields...)
	return dcpuo
}

// Save executes the query and returns the updated Division_Choice_PA entity.
func (dcpuo *DivisionChoicePAUpdateOne) Save(ctx context.Context) (*Division_Choice_PA, error) {
	return withHooks(ctx, dcpuo.sqlSave, dcpuo.mutation, dcpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcpuo *DivisionChoicePAUpdateOne) SaveX(ctx context.Context) *Division_Choice_PA {
	node, err := dcpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dcpuo *DivisionChoicePAUpdateOne) Exec(ctx context.Context) error {
	_, err := dcpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcpuo *DivisionChoicePAUpdateOne) ExecX(ctx context.Context) {
	if err := dcpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dcpuo *DivisionChoicePAUpdateOne) sqlSave(ctx context.Context) (_node *Division_Choice_PA, err error) {
	_spec := sqlgraph.NewUpdateSpec(division_choice_pa.Table, division_choice_pa.Columns, sqlgraph.NewFieldSpec(division_choice_pa.FieldID, field.TypeInt32))
	id, ok := dcpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Division_Choice_PA.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dcpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, division_choice_pa.FieldID)
		for _, f := range fields {
			if !division_choice_pa.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != division_choice_pa.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dcpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcpuo.mutation.Application(); ok {
		_spec.SetField(division_choice_pa.FieldApplication, field.TypeString, value)
	}
	if dcpuo.mutation.ApplicationCleared() {
		_spec.ClearField(division_choice_pa.FieldApplication, field.TypeString)
	}
	if value, ok := dcpuo.mutation.CadrePrefNo(); ok {
		_spec.SetField(division_choice_pa.FieldCadrePrefNo, field.TypeString, value)
	}
	if value, ok := dcpuo.mutation.CadrePrefValue(); ok {
		_spec.SetField(division_choice_pa.FieldCadrePrefValue, field.TypeString, value)
	}
	if value, ok := dcpuo.mutation.EmployeeID(); ok {
		_spec.SetField(division_choice_pa.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := dcpuo.mutation.AddedEmployeeID(); ok {
		_spec.AddField(division_choice_pa.FieldEmployeeID, field.TypeInt64, value)
	}
	if dcpuo.mutation.EmployeeIDCleared() {
		_spec.ClearField(division_choice_pa.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := dcpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(division_choice_pa.FieldUpdatedAt, field.TypeTime, value)
	}
	if dcpuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(division_choice_pa.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := dcpuo.mutation.UpdatedBy(); ok {
		_spec.SetField(division_choice_pa.FieldUpdatedBy, field.TypeString, value)
	}
	if dcpuo.mutation.UpdatedByCleared() {
		_spec.ClearField(division_choice_pa.FieldUpdatedBy, field.TypeString)
	}
	_node = &Division_Choice_PA{config: dcpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dcpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{division_choice_pa.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dcpuo.mutation.done = true
	return _node, nil
}
