// Code generated by ent, DO NOT EDIT.

package exam_applications_ps

import (
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldID, id))
}

// ApplicationNumber applies equality check predicate on the "ApplicationNumber" field. It's identical to ApplicationNumberEQ.
func ApplicationNumber(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldApplicationNumber, v))
}

// EmployeeID applies equality check predicate on the "EmployeeID" field. It's identical to EmployeeIDEQ.
func EmployeeID(v int64) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldEmployeeID, v))
}

// EmployeeName applies equality check predicate on the "EmployeeName" field. It's identical to EmployeeNameEQ.
func EmployeeName(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldEmployeeName, v))
}

// DOB applies equality check predicate on the "DOB" field. It's identical to DOBEQ.
func DOB(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldDOB, v))
}

// MobileNumber applies equality check predicate on the "MobileNumber" field. It's identical to MobileNumberEQ.
func MobileNumber(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldMobileNumber, v))
}

// EmailID applies equality check predicate on the "EmailID" field. It's identical to EmailIDEQ.
func EmailID(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldEmailID, v))
}

// EmployeeCategory applies equality check predicate on the "EmployeeCategory" field. It's identical to EmployeeCategoryEQ.
func EmployeeCategory(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldEmployeeCategory, v))
}

// Cadre applies equality check predicate on the "Cadre" field. It's identical to CadreEQ.
func Cadre(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldCadre, v))
}

// EmployeePost applies equality check predicate on the "EmployeePost" field. It's identical to EmployeePostEQ.
func EmployeePost(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldEmployeePost, v))
}

// FacilityID applies equality check predicate on the "FacilityID" field. It's identical to FacilityIDEQ.
func FacilityID(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldFacilityID, v))
}

// DCCS applies equality check predicate on the "DCCS" field. It's identical to DCCSEQ.
func DCCS(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldDCCS, v))
}

// DCInPresentCadre applies equality check predicate on the "DCInPresentCadre" field. It's identical to DCInPresentCadreEQ.
func DCInPresentCadre(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldDCInPresentCadre, v))
}

// DeputationOfficeId applies equality check predicate on the "DeputationOfficeId" field. It's identical to DeputationOfficeIdEQ.
func DeputationOfficeId(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldDeputationOfficeId, v))
}

// DisabilityType applies equality check predicate on the "DisabilityType" field. It's identical to DisabilityTypeEQ.
func DisabilityType(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldDisabilityType, v))
}

// DisabilityPercentage applies equality check predicate on the "DisabilityPercentage" field. It's identical to DisabilityPercentageEQ.
func DisabilityPercentage(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldDisabilityPercentage, v))
}

// Education applies equality check predicate on the "Education" field. It's identical to EducationEQ.
func Education(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldEducation, v))
}

// ExamNameCode applies equality check predicate on the "ExamNameCode" field. It's identical to ExamNameCodeEQ.
func ExamNameCode(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldExamNameCode, v))
}

// ExamYear applies equality check predicate on the "ExamYear" field. It's identical to ExamYearEQ.
func ExamYear(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldExamYear, v))
}

// ExamName applies equality check predicate on the "ExamName" field. It's identical to ExamNameEQ.
func ExamName(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldExamName, v))
}

// CentrePreference applies equality check predicate on the "CentrePreference" field. It's identical to CentrePreferenceEQ.
func CentrePreference(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldCentrePreference, v))
}

// Signature applies equality check predicate on the "Signature" field. It's identical to SignatureEQ.
func Signature(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldSignature, v))
}

// Photo applies equality check predicate on the "Photo" field. It's identical to PhotoEQ.
func Photo(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldPhoto, v))
}

// ApplicationStatus applies equality check predicate on the "ApplicationStatus" field. It's identical to ApplicationStatusEQ.
func ApplicationStatus(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldApplicationStatus, v))
}

// ApplnSubmittedDate applies equality check predicate on the "ApplnSubmittedDate" field. It's identical to ApplnSubmittedDateEQ.
func ApplnSubmittedDate(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldApplnSubmittedDate, v))
}

// VARemarks applies equality check predicate on the "VA_Remarks" field. It's identical to VARemarksEQ.
func VARemarks(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldVARemarks, v))
}

// VAUserName applies equality check predicate on the "VA_UserName" field. It's identical to VAUserNameEQ.
func VAUserName(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldVAUserName, v))
}

// VADate applies equality check predicate on the "VA_Date" field. It's identical to VADateEQ.
func VADate(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldVADate, v))
}

// CARemarks applies equality check predicate on the "CA_Remarks" field. It's identical to CARemarksEQ.
func CARemarks(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldCARemarks, v))
}

// CAUserName applies equality check predicate on the "CA_UserName" field. It's identical to CAUserNameEQ.
func CAUserName(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldCAUserName, v))
}

// CADate applies equality check predicate on the "CA_Date" field. It's identical to CADateEQ.
func CADate(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldCADate, v))
}

// ApplicationWdlDate applies equality check predicate on the "ApplicationWdlDate" field. It's identical to ApplicationWdlDateEQ.
func ApplicationWdlDate(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldApplicationWdlDate, v))
}

// NARemarks applies equality check predicate on the "NA_Remarks" field. It's identical to NARemarksEQ.
func NARemarks(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldNARemarks, v))
}

// NAUserName applies equality check predicate on the "NA_UserName" field. It's identical to NAUserNameEQ.
func NAUserName(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldNAUserName, v))
}

// NADate applies equality check predicate on the "NA_Date" field. It's identical to NADateEQ.
func NADate(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldNADate, v))
}

// AppliactionRemarks applies equality check predicate on the "AppliactionRemarks" field. It's identical to AppliactionRemarksEQ.
func AppliactionRemarks(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldAppliactionRemarks, v))
}

// UpdatedAt applies equality check predicate on the "UpdatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedBy applies equality check predicate on the "UpdatedBy" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldUpdatedBy, v))
}

// RoleUserCode applies equality check predicate on the "RoleUserCode" field. It's identical to RoleUserCodeEQ.
func RoleUserCode(v int32) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldRoleUserCode, v))
}

// ApplicationNumberEQ applies the EQ predicate on the "ApplicationNumber" field.
func ApplicationNumberEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldApplicationNumber, v))
}

// ApplicationNumberNEQ applies the NEQ predicate on the "ApplicationNumber" field.
func ApplicationNumberNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldApplicationNumber, v))
}

// ApplicationNumberIn applies the In predicate on the "ApplicationNumber" field.
func ApplicationNumberIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldApplicationNumber, vs...))
}

// ApplicationNumberNotIn applies the NotIn predicate on the "ApplicationNumber" field.
func ApplicationNumberNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldApplicationNumber, vs...))
}

// ApplicationNumberGT applies the GT predicate on the "ApplicationNumber" field.
func ApplicationNumberGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldApplicationNumber, v))
}

// ApplicationNumberGTE applies the GTE predicate on the "ApplicationNumber" field.
func ApplicationNumberGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldApplicationNumber, v))
}

// ApplicationNumberLT applies the LT predicate on the "ApplicationNumber" field.
func ApplicationNumberLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldApplicationNumber, v))
}

// ApplicationNumberLTE applies the LTE predicate on the "ApplicationNumber" field.
func ApplicationNumberLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldApplicationNumber, v))
}

// ApplicationNumberContains applies the Contains predicate on the "ApplicationNumber" field.
func ApplicationNumberContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldApplicationNumber, v))
}

// ApplicationNumberHasPrefix applies the HasPrefix predicate on the "ApplicationNumber" field.
func ApplicationNumberHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldApplicationNumber, v))
}

// ApplicationNumberHasSuffix applies the HasSuffix predicate on the "ApplicationNumber" field.
func ApplicationNumberHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldApplicationNumber, v))
}

// ApplicationNumberIsNil applies the IsNil predicate on the "ApplicationNumber" field.
func ApplicationNumberIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldApplicationNumber))
}

// ApplicationNumberNotNil applies the NotNil predicate on the "ApplicationNumber" field.
func ApplicationNumberNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldApplicationNumber))
}

// ApplicationNumberEqualFold applies the EqualFold predicate on the "ApplicationNumber" field.
func ApplicationNumberEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldApplicationNumber, v))
}

// ApplicationNumberContainsFold applies the ContainsFold predicate on the "ApplicationNumber" field.
func ApplicationNumberContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldApplicationNumber, v))
}

// EmployeeIDEQ applies the EQ predicate on the "EmployeeID" field.
func EmployeeIDEQ(v int64) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldEmployeeID, v))
}

// EmployeeIDNEQ applies the NEQ predicate on the "EmployeeID" field.
func EmployeeIDNEQ(v int64) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldEmployeeID, v))
}

// EmployeeIDIn applies the In predicate on the "EmployeeID" field.
func EmployeeIDIn(vs ...int64) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldEmployeeID, vs...))
}

// EmployeeIDNotIn applies the NotIn predicate on the "EmployeeID" field.
func EmployeeIDNotIn(vs ...int64) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldEmployeeID, vs...))
}

// EmployeeIDGT applies the GT predicate on the "EmployeeID" field.
func EmployeeIDGT(v int64) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldEmployeeID, v))
}

// EmployeeIDGTE applies the GTE predicate on the "EmployeeID" field.
func EmployeeIDGTE(v int64) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldEmployeeID, v))
}

// EmployeeIDLT applies the LT predicate on the "EmployeeID" field.
func EmployeeIDLT(v int64) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldEmployeeID, v))
}

// EmployeeIDLTE applies the LTE predicate on the "EmployeeID" field.
func EmployeeIDLTE(v int64) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldEmployeeID, v))
}

// EmployeeIDIsNil applies the IsNil predicate on the "EmployeeID" field.
func EmployeeIDIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldEmployeeID))
}

// EmployeeIDNotNil applies the NotNil predicate on the "EmployeeID" field.
func EmployeeIDNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldEmployeeID))
}

// EmployeeNameEQ applies the EQ predicate on the "EmployeeName" field.
func EmployeeNameEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldEmployeeName, v))
}

// EmployeeNameNEQ applies the NEQ predicate on the "EmployeeName" field.
func EmployeeNameNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldEmployeeName, v))
}

// EmployeeNameIn applies the In predicate on the "EmployeeName" field.
func EmployeeNameIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldEmployeeName, vs...))
}

// EmployeeNameNotIn applies the NotIn predicate on the "EmployeeName" field.
func EmployeeNameNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldEmployeeName, vs...))
}

// EmployeeNameGT applies the GT predicate on the "EmployeeName" field.
func EmployeeNameGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldEmployeeName, v))
}

// EmployeeNameGTE applies the GTE predicate on the "EmployeeName" field.
func EmployeeNameGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldEmployeeName, v))
}

// EmployeeNameLT applies the LT predicate on the "EmployeeName" field.
func EmployeeNameLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldEmployeeName, v))
}

// EmployeeNameLTE applies the LTE predicate on the "EmployeeName" field.
func EmployeeNameLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldEmployeeName, v))
}

// EmployeeNameContains applies the Contains predicate on the "EmployeeName" field.
func EmployeeNameContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldEmployeeName, v))
}

// EmployeeNameHasPrefix applies the HasPrefix predicate on the "EmployeeName" field.
func EmployeeNameHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldEmployeeName, v))
}

// EmployeeNameHasSuffix applies the HasSuffix predicate on the "EmployeeName" field.
func EmployeeNameHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldEmployeeName, v))
}

// EmployeeNameIsNil applies the IsNil predicate on the "EmployeeName" field.
func EmployeeNameIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldEmployeeName))
}

// EmployeeNameNotNil applies the NotNil predicate on the "EmployeeName" field.
func EmployeeNameNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldEmployeeName))
}

// EmployeeNameEqualFold applies the EqualFold predicate on the "EmployeeName" field.
func EmployeeNameEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldEmployeeName, v))
}

// EmployeeNameContainsFold applies the ContainsFold predicate on the "EmployeeName" field.
func EmployeeNameContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldEmployeeName, v))
}

// DOBEQ applies the EQ predicate on the "DOB" field.
func DOBEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldDOB, v))
}

// DOBNEQ applies the NEQ predicate on the "DOB" field.
func DOBNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldDOB, v))
}

// DOBIn applies the In predicate on the "DOB" field.
func DOBIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldDOB, vs...))
}

// DOBNotIn applies the NotIn predicate on the "DOB" field.
func DOBNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldDOB, vs...))
}

// DOBGT applies the GT predicate on the "DOB" field.
func DOBGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldDOB, v))
}

// DOBGTE applies the GTE predicate on the "DOB" field.
func DOBGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldDOB, v))
}

// DOBLT applies the LT predicate on the "DOB" field.
func DOBLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldDOB, v))
}

// DOBLTE applies the LTE predicate on the "DOB" field.
func DOBLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldDOB, v))
}

// DOBContains applies the Contains predicate on the "DOB" field.
func DOBContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldDOB, v))
}

// DOBHasPrefix applies the HasPrefix predicate on the "DOB" field.
func DOBHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldDOB, v))
}

// DOBHasSuffix applies the HasSuffix predicate on the "DOB" field.
func DOBHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldDOB, v))
}

// DOBIsNil applies the IsNil predicate on the "DOB" field.
func DOBIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldDOB))
}

// DOBNotNil applies the NotNil predicate on the "DOB" field.
func DOBNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldDOB))
}

// DOBEqualFold applies the EqualFold predicate on the "DOB" field.
func DOBEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldDOB, v))
}

// DOBContainsFold applies the ContainsFold predicate on the "DOB" field.
func DOBContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldDOB, v))
}

// GenderEQ applies the EQ predicate on the "Gender" field.
func GenderEQ(v Gender) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "Gender" field.
func GenderNEQ(v Gender) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "Gender" field.
func GenderIn(vs ...Gender) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "Gender" field.
func GenderNotIn(vs ...Gender) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldGender, vs...))
}

// MobileNumberEQ applies the EQ predicate on the "MobileNumber" field.
func MobileNumberEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldMobileNumber, v))
}

// MobileNumberNEQ applies the NEQ predicate on the "MobileNumber" field.
func MobileNumberNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldMobileNumber, v))
}

// MobileNumberIn applies the In predicate on the "MobileNumber" field.
func MobileNumberIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldMobileNumber, vs...))
}

// MobileNumberNotIn applies the NotIn predicate on the "MobileNumber" field.
func MobileNumberNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldMobileNumber, vs...))
}

// MobileNumberGT applies the GT predicate on the "MobileNumber" field.
func MobileNumberGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldMobileNumber, v))
}

// MobileNumberGTE applies the GTE predicate on the "MobileNumber" field.
func MobileNumberGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldMobileNumber, v))
}

// MobileNumberLT applies the LT predicate on the "MobileNumber" field.
func MobileNumberLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldMobileNumber, v))
}

// MobileNumberLTE applies the LTE predicate on the "MobileNumber" field.
func MobileNumberLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldMobileNumber, v))
}

// MobileNumberContains applies the Contains predicate on the "MobileNumber" field.
func MobileNumberContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldMobileNumber, v))
}

// MobileNumberHasPrefix applies the HasPrefix predicate on the "MobileNumber" field.
func MobileNumberHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldMobileNumber, v))
}

// MobileNumberHasSuffix applies the HasSuffix predicate on the "MobileNumber" field.
func MobileNumberHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldMobileNumber, v))
}

// MobileNumberIsNil applies the IsNil predicate on the "MobileNumber" field.
func MobileNumberIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldMobileNumber))
}

// MobileNumberNotNil applies the NotNil predicate on the "MobileNumber" field.
func MobileNumberNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldMobileNumber))
}

// MobileNumberEqualFold applies the EqualFold predicate on the "MobileNumber" field.
func MobileNumberEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldMobileNumber, v))
}

// MobileNumberContainsFold applies the ContainsFold predicate on the "MobileNumber" field.
func MobileNumberContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldMobileNumber, v))
}

// EmailIDEQ applies the EQ predicate on the "EmailID" field.
func EmailIDEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldEmailID, v))
}

// EmailIDNEQ applies the NEQ predicate on the "EmailID" field.
func EmailIDNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldEmailID, v))
}

// EmailIDIn applies the In predicate on the "EmailID" field.
func EmailIDIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldEmailID, vs...))
}

// EmailIDNotIn applies the NotIn predicate on the "EmailID" field.
func EmailIDNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldEmailID, vs...))
}

// EmailIDGT applies the GT predicate on the "EmailID" field.
func EmailIDGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldEmailID, v))
}

// EmailIDGTE applies the GTE predicate on the "EmailID" field.
func EmailIDGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldEmailID, v))
}

// EmailIDLT applies the LT predicate on the "EmailID" field.
func EmailIDLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldEmailID, v))
}

// EmailIDLTE applies the LTE predicate on the "EmailID" field.
func EmailIDLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldEmailID, v))
}

// EmailIDContains applies the Contains predicate on the "EmailID" field.
func EmailIDContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldEmailID, v))
}

// EmailIDHasPrefix applies the HasPrefix predicate on the "EmailID" field.
func EmailIDHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldEmailID, v))
}

// EmailIDHasSuffix applies the HasSuffix predicate on the "EmailID" field.
func EmailIDHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldEmailID, v))
}

// EmailIDIsNil applies the IsNil predicate on the "EmailID" field.
func EmailIDIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldEmailID))
}

// EmailIDNotNil applies the NotNil predicate on the "EmailID" field.
func EmailIDNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldEmailID))
}

// EmailIDEqualFold applies the EqualFold predicate on the "EmailID" field.
func EmailIDEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldEmailID, v))
}

// EmailIDContainsFold applies the ContainsFold predicate on the "EmailID" field.
func EmailIDContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldEmailID, v))
}

// EmployeeCategoryEQ applies the EQ predicate on the "EmployeeCategory" field.
func EmployeeCategoryEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldEmployeeCategory, v))
}

// EmployeeCategoryNEQ applies the NEQ predicate on the "EmployeeCategory" field.
func EmployeeCategoryNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldEmployeeCategory, v))
}

// EmployeeCategoryIn applies the In predicate on the "EmployeeCategory" field.
func EmployeeCategoryIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldEmployeeCategory, vs...))
}

// EmployeeCategoryNotIn applies the NotIn predicate on the "EmployeeCategory" field.
func EmployeeCategoryNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldEmployeeCategory, vs...))
}

// EmployeeCategoryGT applies the GT predicate on the "EmployeeCategory" field.
func EmployeeCategoryGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldEmployeeCategory, v))
}

// EmployeeCategoryGTE applies the GTE predicate on the "EmployeeCategory" field.
func EmployeeCategoryGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldEmployeeCategory, v))
}

// EmployeeCategoryLT applies the LT predicate on the "EmployeeCategory" field.
func EmployeeCategoryLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldEmployeeCategory, v))
}

// EmployeeCategoryLTE applies the LTE predicate on the "EmployeeCategory" field.
func EmployeeCategoryLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldEmployeeCategory, v))
}

// EmployeeCategoryContains applies the Contains predicate on the "EmployeeCategory" field.
func EmployeeCategoryContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldEmployeeCategory, v))
}

// EmployeeCategoryHasPrefix applies the HasPrefix predicate on the "EmployeeCategory" field.
func EmployeeCategoryHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldEmployeeCategory, v))
}

// EmployeeCategoryHasSuffix applies the HasSuffix predicate on the "EmployeeCategory" field.
func EmployeeCategoryHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldEmployeeCategory, v))
}

// EmployeeCategoryIsNil applies the IsNil predicate on the "EmployeeCategory" field.
func EmployeeCategoryIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldEmployeeCategory))
}

// EmployeeCategoryNotNil applies the NotNil predicate on the "EmployeeCategory" field.
func EmployeeCategoryNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldEmployeeCategory))
}

// EmployeeCategoryEqualFold applies the EqualFold predicate on the "EmployeeCategory" field.
func EmployeeCategoryEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldEmployeeCategory, v))
}

// EmployeeCategoryContainsFold applies the ContainsFold predicate on the "EmployeeCategory" field.
func EmployeeCategoryContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldEmployeeCategory, v))
}

// CadreEQ applies the EQ predicate on the "Cadre" field.
func CadreEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldCadre, v))
}

// CadreNEQ applies the NEQ predicate on the "Cadre" field.
func CadreNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldCadre, v))
}

// CadreIn applies the In predicate on the "Cadre" field.
func CadreIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldCadre, vs...))
}

// CadreNotIn applies the NotIn predicate on the "Cadre" field.
func CadreNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldCadre, vs...))
}

// CadreGT applies the GT predicate on the "Cadre" field.
func CadreGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldCadre, v))
}

// CadreGTE applies the GTE predicate on the "Cadre" field.
func CadreGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldCadre, v))
}

// CadreLT applies the LT predicate on the "Cadre" field.
func CadreLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldCadre, v))
}

// CadreLTE applies the LTE predicate on the "Cadre" field.
func CadreLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldCadre, v))
}

// CadreContains applies the Contains predicate on the "Cadre" field.
func CadreContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldCadre, v))
}

// CadreHasPrefix applies the HasPrefix predicate on the "Cadre" field.
func CadreHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldCadre, v))
}

// CadreHasSuffix applies the HasSuffix predicate on the "Cadre" field.
func CadreHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldCadre, v))
}

// CadreIsNil applies the IsNil predicate on the "Cadre" field.
func CadreIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldCadre))
}

// CadreNotNil applies the NotNil predicate on the "Cadre" field.
func CadreNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldCadre))
}

// CadreEqualFold applies the EqualFold predicate on the "Cadre" field.
func CadreEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldCadre, v))
}

// CadreContainsFold applies the ContainsFold predicate on the "Cadre" field.
func CadreContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldCadre, v))
}

// EmployeePostEQ applies the EQ predicate on the "EmployeePost" field.
func EmployeePostEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldEmployeePost, v))
}

// EmployeePostNEQ applies the NEQ predicate on the "EmployeePost" field.
func EmployeePostNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldEmployeePost, v))
}

// EmployeePostIn applies the In predicate on the "EmployeePost" field.
func EmployeePostIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldEmployeePost, vs...))
}

// EmployeePostNotIn applies the NotIn predicate on the "EmployeePost" field.
func EmployeePostNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldEmployeePost, vs...))
}

// EmployeePostGT applies the GT predicate on the "EmployeePost" field.
func EmployeePostGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldEmployeePost, v))
}

// EmployeePostGTE applies the GTE predicate on the "EmployeePost" field.
func EmployeePostGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldEmployeePost, v))
}

// EmployeePostLT applies the LT predicate on the "EmployeePost" field.
func EmployeePostLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldEmployeePost, v))
}

// EmployeePostLTE applies the LTE predicate on the "EmployeePost" field.
func EmployeePostLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldEmployeePost, v))
}

// EmployeePostContains applies the Contains predicate on the "EmployeePost" field.
func EmployeePostContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldEmployeePost, v))
}

// EmployeePostHasPrefix applies the HasPrefix predicate on the "EmployeePost" field.
func EmployeePostHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldEmployeePost, v))
}

// EmployeePostHasSuffix applies the HasSuffix predicate on the "EmployeePost" field.
func EmployeePostHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldEmployeePost, v))
}

// EmployeePostIsNil applies the IsNil predicate on the "EmployeePost" field.
func EmployeePostIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldEmployeePost))
}

// EmployeePostNotNil applies the NotNil predicate on the "EmployeePost" field.
func EmployeePostNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldEmployeePost))
}

// EmployeePostEqualFold applies the EqualFold predicate on the "EmployeePost" field.
func EmployeePostEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldEmployeePost, v))
}

// EmployeePostContainsFold applies the ContainsFold predicate on the "EmployeePost" field.
func EmployeePostContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldEmployeePost, v))
}

// FacilityIDEQ applies the EQ predicate on the "FacilityID" field.
func FacilityIDEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldFacilityID, v))
}

// FacilityIDNEQ applies the NEQ predicate on the "FacilityID" field.
func FacilityIDNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldFacilityID, v))
}

// FacilityIDIn applies the In predicate on the "FacilityID" field.
func FacilityIDIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldFacilityID, vs...))
}

// FacilityIDNotIn applies the NotIn predicate on the "FacilityID" field.
func FacilityIDNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldFacilityID, vs...))
}

// FacilityIDGT applies the GT predicate on the "FacilityID" field.
func FacilityIDGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldFacilityID, v))
}

// FacilityIDGTE applies the GTE predicate on the "FacilityID" field.
func FacilityIDGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldFacilityID, v))
}

// FacilityIDLT applies the LT predicate on the "FacilityID" field.
func FacilityIDLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldFacilityID, v))
}

// FacilityIDLTE applies the LTE predicate on the "FacilityID" field.
func FacilityIDLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldFacilityID, v))
}

// FacilityIDContains applies the Contains predicate on the "FacilityID" field.
func FacilityIDContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldFacilityID, v))
}

// FacilityIDHasPrefix applies the HasPrefix predicate on the "FacilityID" field.
func FacilityIDHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldFacilityID, v))
}

// FacilityIDHasSuffix applies the HasSuffix predicate on the "FacilityID" field.
func FacilityIDHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldFacilityID, v))
}

// FacilityIDIsNil applies the IsNil predicate on the "FacilityID" field.
func FacilityIDIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldFacilityID))
}

// FacilityIDNotNil applies the NotNil predicate on the "FacilityID" field.
func FacilityIDNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldFacilityID))
}

// FacilityIDEqualFold applies the EqualFold predicate on the "FacilityID" field.
func FacilityIDEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldFacilityID, v))
}

// FacilityIDContainsFold applies the ContainsFold predicate on the "FacilityID" field.
func FacilityIDContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldFacilityID, v))
}

// DCCSEQ applies the EQ predicate on the "DCCS" field.
func DCCSEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldDCCS, v))
}

// DCCSNEQ applies the NEQ predicate on the "DCCS" field.
func DCCSNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldDCCS, v))
}

// DCCSIn applies the In predicate on the "DCCS" field.
func DCCSIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldDCCS, vs...))
}

// DCCSNotIn applies the NotIn predicate on the "DCCS" field.
func DCCSNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldDCCS, vs...))
}

// DCCSGT applies the GT predicate on the "DCCS" field.
func DCCSGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldDCCS, v))
}

// DCCSGTE applies the GTE predicate on the "DCCS" field.
func DCCSGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldDCCS, v))
}

// DCCSLT applies the LT predicate on the "DCCS" field.
func DCCSLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldDCCS, v))
}

// DCCSLTE applies the LTE predicate on the "DCCS" field.
func DCCSLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldDCCS, v))
}

// DCCSContains applies the Contains predicate on the "DCCS" field.
func DCCSContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldDCCS, v))
}

// DCCSHasPrefix applies the HasPrefix predicate on the "DCCS" field.
func DCCSHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldDCCS, v))
}

// DCCSHasSuffix applies the HasSuffix predicate on the "DCCS" field.
func DCCSHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldDCCS, v))
}

// DCCSIsNil applies the IsNil predicate on the "DCCS" field.
func DCCSIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldDCCS))
}

// DCCSNotNil applies the NotNil predicate on the "DCCS" field.
func DCCSNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldDCCS))
}

// DCCSEqualFold applies the EqualFold predicate on the "DCCS" field.
func DCCSEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldDCCS, v))
}

// DCCSContainsFold applies the ContainsFold predicate on the "DCCS" field.
func DCCSContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldDCCS, v))
}

// DCInPresentCadreEQ applies the EQ predicate on the "DCInPresentCadre" field.
func DCInPresentCadreEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldDCInPresentCadre, v))
}

// DCInPresentCadreNEQ applies the NEQ predicate on the "DCInPresentCadre" field.
func DCInPresentCadreNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldDCInPresentCadre, v))
}

// DCInPresentCadreIn applies the In predicate on the "DCInPresentCadre" field.
func DCInPresentCadreIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldDCInPresentCadre, vs...))
}

// DCInPresentCadreNotIn applies the NotIn predicate on the "DCInPresentCadre" field.
func DCInPresentCadreNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldDCInPresentCadre, vs...))
}

// DCInPresentCadreGT applies the GT predicate on the "DCInPresentCadre" field.
func DCInPresentCadreGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldDCInPresentCadre, v))
}

// DCInPresentCadreGTE applies the GTE predicate on the "DCInPresentCadre" field.
func DCInPresentCadreGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldDCInPresentCadre, v))
}

// DCInPresentCadreLT applies the LT predicate on the "DCInPresentCadre" field.
func DCInPresentCadreLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldDCInPresentCadre, v))
}

// DCInPresentCadreLTE applies the LTE predicate on the "DCInPresentCadre" field.
func DCInPresentCadreLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldDCInPresentCadre, v))
}

// DCInPresentCadreContains applies the Contains predicate on the "DCInPresentCadre" field.
func DCInPresentCadreContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldDCInPresentCadre, v))
}

// DCInPresentCadreHasPrefix applies the HasPrefix predicate on the "DCInPresentCadre" field.
func DCInPresentCadreHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldDCInPresentCadre, v))
}

// DCInPresentCadreHasSuffix applies the HasSuffix predicate on the "DCInPresentCadre" field.
func DCInPresentCadreHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldDCInPresentCadre, v))
}

// DCInPresentCadreIsNil applies the IsNil predicate on the "DCInPresentCadre" field.
func DCInPresentCadreIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldDCInPresentCadre))
}

// DCInPresentCadreNotNil applies the NotNil predicate on the "DCInPresentCadre" field.
func DCInPresentCadreNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldDCInPresentCadre))
}

// DCInPresentCadreEqualFold applies the EqualFold predicate on the "DCInPresentCadre" field.
func DCInPresentCadreEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldDCInPresentCadre, v))
}

// DCInPresentCadreContainsFold applies the ContainsFold predicate on the "DCInPresentCadre" field.
func DCInPresentCadreContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldDCInPresentCadre, v))
}

// DeputationOfficeIdEQ applies the EQ predicate on the "DeputationOfficeId" field.
func DeputationOfficeIdEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldDeputationOfficeId, v))
}

// DeputationOfficeIdNEQ applies the NEQ predicate on the "DeputationOfficeId" field.
func DeputationOfficeIdNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldDeputationOfficeId, v))
}

// DeputationOfficeIdIn applies the In predicate on the "DeputationOfficeId" field.
func DeputationOfficeIdIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldDeputationOfficeId, vs...))
}

// DeputationOfficeIdNotIn applies the NotIn predicate on the "DeputationOfficeId" field.
func DeputationOfficeIdNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldDeputationOfficeId, vs...))
}

// DeputationOfficeIdGT applies the GT predicate on the "DeputationOfficeId" field.
func DeputationOfficeIdGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldDeputationOfficeId, v))
}

// DeputationOfficeIdGTE applies the GTE predicate on the "DeputationOfficeId" field.
func DeputationOfficeIdGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldDeputationOfficeId, v))
}

// DeputationOfficeIdLT applies the LT predicate on the "DeputationOfficeId" field.
func DeputationOfficeIdLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldDeputationOfficeId, v))
}

// DeputationOfficeIdLTE applies the LTE predicate on the "DeputationOfficeId" field.
func DeputationOfficeIdLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldDeputationOfficeId, v))
}

// DeputationOfficeIdContains applies the Contains predicate on the "DeputationOfficeId" field.
func DeputationOfficeIdContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldDeputationOfficeId, v))
}

// DeputationOfficeIdHasPrefix applies the HasPrefix predicate on the "DeputationOfficeId" field.
func DeputationOfficeIdHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldDeputationOfficeId, v))
}

// DeputationOfficeIdHasSuffix applies the HasSuffix predicate on the "DeputationOfficeId" field.
func DeputationOfficeIdHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldDeputationOfficeId, v))
}

// DeputationOfficeIdIsNil applies the IsNil predicate on the "DeputationOfficeId" field.
func DeputationOfficeIdIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldDeputationOfficeId))
}

// DeputationOfficeIdNotNil applies the NotNil predicate on the "DeputationOfficeId" field.
func DeputationOfficeIdNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldDeputationOfficeId))
}

// DeputationOfficeIdEqualFold applies the EqualFold predicate on the "DeputationOfficeId" field.
func DeputationOfficeIdEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldDeputationOfficeId, v))
}

// DeputationOfficeIdContainsFold applies the ContainsFold predicate on the "DeputationOfficeId" field.
func DeputationOfficeIdContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldDeputationOfficeId, v))
}

// DisabilityTypeEQ applies the EQ predicate on the "DisabilityType" field.
func DisabilityTypeEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldDisabilityType, v))
}

// DisabilityTypeNEQ applies the NEQ predicate on the "DisabilityType" field.
func DisabilityTypeNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldDisabilityType, v))
}

// DisabilityTypeIn applies the In predicate on the "DisabilityType" field.
func DisabilityTypeIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldDisabilityType, vs...))
}

// DisabilityTypeNotIn applies the NotIn predicate on the "DisabilityType" field.
func DisabilityTypeNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldDisabilityType, vs...))
}

// DisabilityTypeGT applies the GT predicate on the "DisabilityType" field.
func DisabilityTypeGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldDisabilityType, v))
}

// DisabilityTypeGTE applies the GTE predicate on the "DisabilityType" field.
func DisabilityTypeGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldDisabilityType, v))
}

// DisabilityTypeLT applies the LT predicate on the "DisabilityType" field.
func DisabilityTypeLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldDisabilityType, v))
}

// DisabilityTypeLTE applies the LTE predicate on the "DisabilityType" field.
func DisabilityTypeLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldDisabilityType, v))
}

// DisabilityTypeContains applies the Contains predicate on the "DisabilityType" field.
func DisabilityTypeContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldDisabilityType, v))
}

// DisabilityTypeHasPrefix applies the HasPrefix predicate on the "DisabilityType" field.
func DisabilityTypeHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldDisabilityType, v))
}

// DisabilityTypeHasSuffix applies the HasSuffix predicate on the "DisabilityType" field.
func DisabilityTypeHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldDisabilityType, v))
}

// DisabilityTypeIsNil applies the IsNil predicate on the "DisabilityType" field.
func DisabilityTypeIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldDisabilityType))
}

// DisabilityTypeNotNil applies the NotNil predicate on the "DisabilityType" field.
func DisabilityTypeNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldDisabilityType))
}

// DisabilityTypeEqualFold applies the EqualFold predicate on the "DisabilityType" field.
func DisabilityTypeEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldDisabilityType, v))
}

// DisabilityTypeContainsFold applies the ContainsFold predicate on the "DisabilityType" field.
func DisabilityTypeContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldDisabilityType, v))
}

// DisabilityPercentageEQ applies the EQ predicate on the "DisabilityPercentage" field.
func DisabilityPercentageEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldDisabilityPercentage, v))
}

// DisabilityPercentageNEQ applies the NEQ predicate on the "DisabilityPercentage" field.
func DisabilityPercentageNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldDisabilityPercentage, v))
}

// DisabilityPercentageIn applies the In predicate on the "DisabilityPercentage" field.
func DisabilityPercentageIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldDisabilityPercentage, vs...))
}

// DisabilityPercentageNotIn applies the NotIn predicate on the "DisabilityPercentage" field.
func DisabilityPercentageNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldDisabilityPercentage, vs...))
}

// DisabilityPercentageGT applies the GT predicate on the "DisabilityPercentage" field.
func DisabilityPercentageGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldDisabilityPercentage, v))
}

// DisabilityPercentageGTE applies the GTE predicate on the "DisabilityPercentage" field.
func DisabilityPercentageGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldDisabilityPercentage, v))
}

// DisabilityPercentageLT applies the LT predicate on the "DisabilityPercentage" field.
func DisabilityPercentageLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldDisabilityPercentage, v))
}

// DisabilityPercentageLTE applies the LTE predicate on the "DisabilityPercentage" field.
func DisabilityPercentageLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldDisabilityPercentage, v))
}

// DisabilityPercentageContains applies the Contains predicate on the "DisabilityPercentage" field.
func DisabilityPercentageContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldDisabilityPercentage, v))
}

// DisabilityPercentageHasPrefix applies the HasPrefix predicate on the "DisabilityPercentage" field.
func DisabilityPercentageHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldDisabilityPercentage, v))
}

// DisabilityPercentageHasSuffix applies the HasSuffix predicate on the "DisabilityPercentage" field.
func DisabilityPercentageHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldDisabilityPercentage, v))
}

// DisabilityPercentageIsNil applies the IsNil predicate on the "DisabilityPercentage" field.
func DisabilityPercentageIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldDisabilityPercentage))
}

// DisabilityPercentageNotNil applies the NotNil predicate on the "DisabilityPercentage" field.
func DisabilityPercentageNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldDisabilityPercentage))
}

// DisabilityPercentageEqualFold applies the EqualFold predicate on the "DisabilityPercentage" field.
func DisabilityPercentageEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldDisabilityPercentage, v))
}

// DisabilityPercentageContainsFold applies the ContainsFold predicate on the "DisabilityPercentage" field.
func DisabilityPercentageContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldDisabilityPercentage, v))
}

// EducationEQ applies the EQ predicate on the "Education" field.
func EducationEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldEducation, v))
}

// EducationNEQ applies the NEQ predicate on the "Education" field.
func EducationNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldEducation, v))
}

// EducationIn applies the In predicate on the "Education" field.
func EducationIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldEducation, vs...))
}

// EducationNotIn applies the NotIn predicate on the "Education" field.
func EducationNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldEducation, vs...))
}

// EducationGT applies the GT predicate on the "Education" field.
func EducationGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldEducation, v))
}

// EducationGTE applies the GTE predicate on the "Education" field.
func EducationGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldEducation, v))
}

// EducationLT applies the LT predicate on the "Education" field.
func EducationLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldEducation, v))
}

// EducationLTE applies the LTE predicate on the "Education" field.
func EducationLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldEducation, v))
}

// EducationContains applies the Contains predicate on the "Education" field.
func EducationContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldEducation, v))
}

// EducationHasPrefix applies the HasPrefix predicate on the "Education" field.
func EducationHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldEducation, v))
}

// EducationHasSuffix applies the HasSuffix predicate on the "Education" field.
func EducationHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldEducation, v))
}

// EducationIsNil applies the IsNil predicate on the "Education" field.
func EducationIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldEducation))
}

// EducationNotNil applies the NotNil predicate on the "Education" field.
func EducationNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldEducation))
}

// EducationEqualFold applies the EqualFold predicate on the "Education" field.
func EducationEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldEducation, v))
}

// EducationContainsFold applies the ContainsFold predicate on the "Education" field.
func EducationContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldEducation, v))
}

// ExamNameCodeEQ applies the EQ predicate on the "ExamNameCode" field.
func ExamNameCodeEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldExamNameCode, v))
}

// ExamNameCodeNEQ applies the NEQ predicate on the "ExamNameCode" field.
func ExamNameCodeNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldExamNameCode, v))
}

// ExamNameCodeIn applies the In predicate on the "ExamNameCode" field.
func ExamNameCodeIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldExamNameCode, vs...))
}

// ExamNameCodeNotIn applies the NotIn predicate on the "ExamNameCode" field.
func ExamNameCodeNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldExamNameCode, vs...))
}

// ExamNameCodeGT applies the GT predicate on the "ExamNameCode" field.
func ExamNameCodeGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldExamNameCode, v))
}

// ExamNameCodeGTE applies the GTE predicate on the "ExamNameCode" field.
func ExamNameCodeGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldExamNameCode, v))
}

// ExamNameCodeLT applies the LT predicate on the "ExamNameCode" field.
func ExamNameCodeLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldExamNameCode, v))
}

// ExamNameCodeLTE applies the LTE predicate on the "ExamNameCode" field.
func ExamNameCodeLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldExamNameCode, v))
}

// ExamNameCodeContains applies the Contains predicate on the "ExamNameCode" field.
func ExamNameCodeContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldExamNameCode, v))
}

// ExamNameCodeHasPrefix applies the HasPrefix predicate on the "ExamNameCode" field.
func ExamNameCodeHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldExamNameCode, v))
}

// ExamNameCodeHasSuffix applies the HasSuffix predicate on the "ExamNameCode" field.
func ExamNameCodeHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldExamNameCode, v))
}

// ExamNameCodeIsNil applies the IsNil predicate on the "ExamNameCode" field.
func ExamNameCodeIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldExamNameCode))
}

// ExamNameCodeNotNil applies the NotNil predicate on the "ExamNameCode" field.
func ExamNameCodeNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldExamNameCode))
}

// ExamNameCodeEqualFold applies the EqualFold predicate on the "ExamNameCode" field.
func ExamNameCodeEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldExamNameCode, v))
}

// ExamNameCodeContainsFold applies the ContainsFold predicate on the "ExamNameCode" field.
func ExamNameCodeContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldExamNameCode, v))
}

// ExamYearEQ applies the EQ predicate on the "ExamYear" field.
func ExamYearEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldExamYear, v))
}

// ExamYearNEQ applies the NEQ predicate on the "ExamYear" field.
func ExamYearNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldExamYear, v))
}

// ExamYearIn applies the In predicate on the "ExamYear" field.
func ExamYearIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldExamYear, vs...))
}

// ExamYearNotIn applies the NotIn predicate on the "ExamYear" field.
func ExamYearNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldExamYear, vs...))
}

// ExamYearGT applies the GT predicate on the "ExamYear" field.
func ExamYearGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldExamYear, v))
}

// ExamYearGTE applies the GTE predicate on the "ExamYear" field.
func ExamYearGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldExamYear, v))
}

// ExamYearLT applies the LT predicate on the "ExamYear" field.
func ExamYearLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldExamYear, v))
}

// ExamYearLTE applies the LTE predicate on the "ExamYear" field.
func ExamYearLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldExamYear, v))
}

// ExamYearContains applies the Contains predicate on the "ExamYear" field.
func ExamYearContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldExamYear, v))
}

// ExamYearHasPrefix applies the HasPrefix predicate on the "ExamYear" field.
func ExamYearHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldExamYear, v))
}

// ExamYearHasSuffix applies the HasSuffix predicate on the "ExamYear" field.
func ExamYearHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldExamYear, v))
}

// ExamYearIsNil applies the IsNil predicate on the "ExamYear" field.
func ExamYearIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldExamYear))
}

// ExamYearNotNil applies the NotNil predicate on the "ExamYear" field.
func ExamYearNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldExamYear))
}

// ExamYearEqualFold applies the EqualFold predicate on the "ExamYear" field.
func ExamYearEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldExamYear, v))
}

// ExamYearContainsFold applies the ContainsFold predicate on the "ExamYear" field.
func ExamYearContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldExamYear, v))
}

// ExamNameEQ applies the EQ predicate on the "ExamName" field.
func ExamNameEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldExamName, v))
}

// ExamNameNEQ applies the NEQ predicate on the "ExamName" field.
func ExamNameNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldExamName, v))
}

// ExamNameIn applies the In predicate on the "ExamName" field.
func ExamNameIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldExamName, vs...))
}

// ExamNameNotIn applies the NotIn predicate on the "ExamName" field.
func ExamNameNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldExamName, vs...))
}

// ExamNameGT applies the GT predicate on the "ExamName" field.
func ExamNameGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldExamName, v))
}

// ExamNameGTE applies the GTE predicate on the "ExamName" field.
func ExamNameGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldExamName, v))
}

// ExamNameLT applies the LT predicate on the "ExamName" field.
func ExamNameLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldExamName, v))
}

// ExamNameLTE applies the LTE predicate on the "ExamName" field.
func ExamNameLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldExamName, v))
}

// ExamNameContains applies the Contains predicate on the "ExamName" field.
func ExamNameContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldExamName, v))
}

// ExamNameHasPrefix applies the HasPrefix predicate on the "ExamName" field.
func ExamNameHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldExamName, v))
}

// ExamNameHasSuffix applies the HasSuffix predicate on the "ExamName" field.
func ExamNameHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldExamName, v))
}

// ExamNameIsNil applies the IsNil predicate on the "ExamName" field.
func ExamNameIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldExamName))
}

// ExamNameNotNil applies the NotNil predicate on the "ExamName" field.
func ExamNameNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldExamName))
}

// ExamNameEqualFold applies the EqualFold predicate on the "ExamName" field.
func ExamNameEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldExamName, v))
}

// ExamNameContainsFold applies the ContainsFold predicate on the "ExamName" field.
func ExamNameContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldExamName, v))
}

// CentrePreferenceEQ applies the EQ predicate on the "CentrePreference" field.
func CentrePreferenceEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldCentrePreference, v))
}

// CentrePreferenceNEQ applies the NEQ predicate on the "CentrePreference" field.
func CentrePreferenceNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldCentrePreference, v))
}

// CentrePreferenceIn applies the In predicate on the "CentrePreference" field.
func CentrePreferenceIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldCentrePreference, vs...))
}

// CentrePreferenceNotIn applies the NotIn predicate on the "CentrePreference" field.
func CentrePreferenceNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldCentrePreference, vs...))
}

// CentrePreferenceGT applies the GT predicate on the "CentrePreference" field.
func CentrePreferenceGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldCentrePreference, v))
}

// CentrePreferenceGTE applies the GTE predicate on the "CentrePreference" field.
func CentrePreferenceGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldCentrePreference, v))
}

// CentrePreferenceLT applies the LT predicate on the "CentrePreference" field.
func CentrePreferenceLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldCentrePreference, v))
}

// CentrePreferenceLTE applies the LTE predicate on the "CentrePreference" field.
func CentrePreferenceLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldCentrePreference, v))
}

// CentrePreferenceContains applies the Contains predicate on the "CentrePreference" field.
func CentrePreferenceContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldCentrePreference, v))
}

// CentrePreferenceHasPrefix applies the HasPrefix predicate on the "CentrePreference" field.
func CentrePreferenceHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldCentrePreference, v))
}

// CentrePreferenceHasSuffix applies the HasSuffix predicate on the "CentrePreference" field.
func CentrePreferenceHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldCentrePreference, v))
}

// CentrePreferenceIsNil applies the IsNil predicate on the "CentrePreference" field.
func CentrePreferenceIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldCentrePreference))
}

// CentrePreferenceNotNil applies the NotNil predicate on the "CentrePreference" field.
func CentrePreferenceNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldCentrePreference))
}

// CentrePreferenceEqualFold applies the EqualFold predicate on the "CentrePreference" field.
func CentrePreferenceEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldCentrePreference, v))
}

// CentrePreferenceContainsFold applies the ContainsFold predicate on the "CentrePreference" field.
func CentrePreferenceContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldCentrePreference, v))
}

// SignatureEQ applies the EQ predicate on the "Signature" field.
func SignatureEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldSignature, v))
}

// SignatureNEQ applies the NEQ predicate on the "Signature" field.
func SignatureNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldSignature, v))
}

// SignatureIn applies the In predicate on the "Signature" field.
func SignatureIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldSignature, vs...))
}

// SignatureNotIn applies the NotIn predicate on the "Signature" field.
func SignatureNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldSignature, vs...))
}

// SignatureGT applies the GT predicate on the "Signature" field.
func SignatureGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldSignature, v))
}

// SignatureGTE applies the GTE predicate on the "Signature" field.
func SignatureGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldSignature, v))
}

// SignatureLT applies the LT predicate on the "Signature" field.
func SignatureLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldSignature, v))
}

// SignatureLTE applies the LTE predicate on the "Signature" field.
func SignatureLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldSignature, v))
}

// SignatureContains applies the Contains predicate on the "Signature" field.
func SignatureContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldSignature, v))
}

// SignatureHasPrefix applies the HasPrefix predicate on the "Signature" field.
func SignatureHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldSignature, v))
}

// SignatureHasSuffix applies the HasSuffix predicate on the "Signature" field.
func SignatureHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldSignature, v))
}

// SignatureIsNil applies the IsNil predicate on the "Signature" field.
func SignatureIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldSignature))
}

// SignatureNotNil applies the NotNil predicate on the "Signature" field.
func SignatureNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldSignature))
}

// SignatureEqualFold applies the EqualFold predicate on the "Signature" field.
func SignatureEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldSignature, v))
}

// SignatureContainsFold applies the ContainsFold predicate on the "Signature" field.
func SignatureContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldSignature, v))
}

// PhotoEQ applies the EQ predicate on the "Photo" field.
func PhotoEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldPhoto, v))
}

// PhotoNEQ applies the NEQ predicate on the "Photo" field.
func PhotoNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldPhoto, v))
}

// PhotoIn applies the In predicate on the "Photo" field.
func PhotoIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldPhoto, vs...))
}

// PhotoNotIn applies the NotIn predicate on the "Photo" field.
func PhotoNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldPhoto, vs...))
}

// PhotoGT applies the GT predicate on the "Photo" field.
func PhotoGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldPhoto, v))
}

// PhotoGTE applies the GTE predicate on the "Photo" field.
func PhotoGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldPhoto, v))
}

// PhotoLT applies the LT predicate on the "Photo" field.
func PhotoLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldPhoto, v))
}

// PhotoLTE applies the LTE predicate on the "Photo" field.
func PhotoLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldPhoto, v))
}

// PhotoContains applies the Contains predicate on the "Photo" field.
func PhotoContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldPhoto, v))
}

// PhotoHasPrefix applies the HasPrefix predicate on the "Photo" field.
func PhotoHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldPhoto, v))
}

// PhotoHasSuffix applies the HasSuffix predicate on the "Photo" field.
func PhotoHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldPhoto, v))
}

// PhotoIsNil applies the IsNil predicate on the "Photo" field.
func PhotoIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldPhoto))
}

// PhotoNotNil applies the NotNil predicate on the "Photo" field.
func PhotoNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldPhoto))
}

// PhotoEqualFold applies the EqualFold predicate on the "Photo" field.
func PhotoEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldPhoto, v))
}

// PhotoContainsFold applies the ContainsFold predicate on the "Photo" field.
func PhotoContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldPhoto, v))
}

// ApplicationStatusEQ applies the EQ predicate on the "ApplicationStatus" field.
func ApplicationStatusEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldApplicationStatus, v))
}

// ApplicationStatusNEQ applies the NEQ predicate on the "ApplicationStatus" field.
func ApplicationStatusNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldApplicationStatus, v))
}

// ApplicationStatusIn applies the In predicate on the "ApplicationStatus" field.
func ApplicationStatusIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldApplicationStatus, vs...))
}

// ApplicationStatusNotIn applies the NotIn predicate on the "ApplicationStatus" field.
func ApplicationStatusNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldApplicationStatus, vs...))
}

// ApplicationStatusGT applies the GT predicate on the "ApplicationStatus" field.
func ApplicationStatusGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldApplicationStatus, v))
}

// ApplicationStatusGTE applies the GTE predicate on the "ApplicationStatus" field.
func ApplicationStatusGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldApplicationStatus, v))
}

// ApplicationStatusLT applies the LT predicate on the "ApplicationStatus" field.
func ApplicationStatusLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldApplicationStatus, v))
}

// ApplicationStatusLTE applies the LTE predicate on the "ApplicationStatus" field.
func ApplicationStatusLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldApplicationStatus, v))
}

// ApplicationStatusContains applies the Contains predicate on the "ApplicationStatus" field.
func ApplicationStatusContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldApplicationStatus, v))
}

// ApplicationStatusHasPrefix applies the HasPrefix predicate on the "ApplicationStatus" field.
func ApplicationStatusHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldApplicationStatus, v))
}

// ApplicationStatusHasSuffix applies the HasSuffix predicate on the "ApplicationStatus" field.
func ApplicationStatusHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldApplicationStatus, v))
}

// ApplicationStatusIsNil applies the IsNil predicate on the "ApplicationStatus" field.
func ApplicationStatusIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldApplicationStatus))
}

// ApplicationStatusNotNil applies the NotNil predicate on the "ApplicationStatus" field.
func ApplicationStatusNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldApplicationStatus))
}

// ApplicationStatusEqualFold applies the EqualFold predicate on the "ApplicationStatus" field.
func ApplicationStatusEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldApplicationStatus, v))
}

// ApplicationStatusContainsFold applies the ContainsFold predicate on the "ApplicationStatus" field.
func ApplicationStatusContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldApplicationStatus, v))
}

// ApplnSubmittedDateEQ applies the EQ predicate on the "ApplnSubmittedDate" field.
func ApplnSubmittedDateEQ(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldApplnSubmittedDate, v))
}

// ApplnSubmittedDateNEQ applies the NEQ predicate on the "ApplnSubmittedDate" field.
func ApplnSubmittedDateNEQ(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldApplnSubmittedDate, v))
}

// ApplnSubmittedDateIn applies the In predicate on the "ApplnSubmittedDate" field.
func ApplnSubmittedDateIn(vs ...time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldApplnSubmittedDate, vs...))
}

// ApplnSubmittedDateNotIn applies the NotIn predicate on the "ApplnSubmittedDate" field.
func ApplnSubmittedDateNotIn(vs ...time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldApplnSubmittedDate, vs...))
}

// ApplnSubmittedDateGT applies the GT predicate on the "ApplnSubmittedDate" field.
func ApplnSubmittedDateGT(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldApplnSubmittedDate, v))
}

// ApplnSubmittedDateGTE applies the GTE predicate on the "ApplnSubmittedDate" field.
func ApplnSubmittedDateGTE(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldApplnSubmittedDate, v))
}

// ApplnSubmittedDateLT applies the LT predicate on the "ApplnSubmittedDate" field.
func ApplnSubmittedDateLT(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldApplnSubmittedDate, v))
}

// ApplnSubmittedDateLTE applies the LTE predicate on the "ApplnSubmittedDate" field.
func ApplnSubmittedDateLTE(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldApplnSubmittedDate, v))
}

// ApplnSubmittedDateIsNil applies the IsNil predicate on the "ApplnSubmittedDate" field.
func ApplnSubmittedDateIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldApplnSubmittedDate))
}

// ApplnSubmittedDateNotNil applies the NotNil predicate on the "ApplnSubmittedDate" field.
func ApplnSubmittedDateNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldApplnSubmittedDate))
}

// VARemarksEQ applies the EQ predicate on the "VA_Remarks" field.
func VARemarksEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldVARemarks, v))
}

// VARemarksNEQ applies the NEQ predicate on the "VA_Remarks" field.
func VARemarksNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldVARemarks, v))
}

// VARemarksIn applies the In predicate on the "VA_Remarks" field.
func VARemarksIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldVARemarks, vs...))
}

// VARemarksNotIn applies the NotIn predicate on the "VA_Remarks" field.
func VARemarksNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldVARemarks, vs...))
}

// VARemarksGT applies the GT predicate on the "VA_Remarks" field.
func VARemarksGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldVARemarks, v))
}

// VARemarksGTE applies the GTE predicate on the "VA_Remarks" field.
func VARemarksGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldVARemarks, v))
}

// VARemarksLT applies the LT predicate on the "VA_Remarks" field.
func VARemarksLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldVARemarks, v))
}

// VARemarksLTE applies the LTE predicate on the "VA_Remarks" field.
func VARemarksLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldVARemarks, v))
}

// VARemarksContains applies the Contains predicate on the "VA_Remarks" field.
func VARemarksContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldVARemarks, v))
}

// VARemarksHasPrefix applies the HasPrefix predicate on the "VA_Remarks" field.
func VARemarksHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldVARemarks, v))
}

// VARemarksHasSuffix applies the HasSuffix predicate on the "VA_Remarks" field.
func VARemarksHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldVARemarks, v))
}

// VARemarksIsNil applies the IsNil predicate on the "VA_Remarks" field.
func VARemarksIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldVARemarks))
}

// VARemarksNotNil applies the NotNil predicate on the "VA_Remarks" field.
func VARemarksNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldVARemarks))
}

// VARemarksEqualFold applies the EqualFold predicate on the "VA_Remarks" field.
func VARemarksEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldVARemarks, v))
}

// VARemarksContainsFold applies the ContainsFold predicate on the "VA_Remarks" field.
func VARemarksContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldVARemarks, v))
}

// VAUserNameEQ applies the EQ predicate on the "VA_UserName" field.
func VAUserNameEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldVAUserName, v))
}

// VAUserNameNEQ applies the NEQ predicate on the "VA_UserName" field.
func VAUserNameNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldVAUserName, v))
}

// VAUserNameIn applies the In predicate on the "VA_UserName" field.
func VAUserNameIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldVAUserName, vs...))
}

// VAUserNameNotIn applies the NotIn predicate on the "VA_UserName" field.
func VAUserNameNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldVAUserName, vs...))
}

// VAUserNameGT applies the GT predicate on the "VA_UserName" field.
func VAUserNameGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldVAUserName, v))
}

// VAUserNameGTE applies the GTE predicate on the "VA_UserName" field.
func VAUserNameGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldVAUserName, v))
}

// VAUserNameLT applies the LT predicate on the "VA_UserName" field.
func VAUserNameLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldVAUserName, v))
}

// VAUserNameLTE applies the LTE predicate on the "VA_UserName" field.
func VAUserNameLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldVAUserName, v))
}

// VAUserNameContains applies the Contains predicate on the "VA_UserName" field.
func VAUserNameContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldVAUserName, v))
}

// VAUserNameHasPrefix applies the HasPrefix predicate on the "VA_UserName" field.
func VAUserNameHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldVAUserName, v))
}

// VAUserNameHasSuffix applies the HasSuffix predicate on the "VA_UserName" field.
func VAUserNameHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldVAUserName, v))
}

// VAUserNameIsNil applies the IsNil predicate on the "VA_UserName" field.
func VAUserNameIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldVAUserName))
}

// VAUserNameNotNil applies the NotNil predicate on the "VA_UserName" field.
func VAUserNameNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldVAUserName))
}

// VAUserNameEqualFold applies the EqualFold predicate on the "VA_UserName" field.
func VAUserNameEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldVAUserName, v))
}

// VAUserNameContainsFold applies the ContainsFold predicate on the "VA_UserName" field.
func VAUserNameContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldVAUserName, v))
}

// VADateEQ applies the EQ predicate on the "VA_Date" field.
func VADateEQ(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldVADate, v))
}

// VADateNEQ applies the NEQ predicate on the "VA_Date" field.
func VADateNEQ(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldVADate, v))
}

// VADateIn applies the In predicate on the "VA_Date" field.
func VADateIn(vs ...time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldVADate, vs...))
}

// VADateNotIn applies the NotIn predicate on the "VA_Date" field.
func VADateNotIn(vs ...time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldVADate, vs...))
}

// VADateGT applies the GT predicate on the "VA_Date" field.
func VADateGT(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldVADate, v))
}

// VADateGTE applies the GTE predicate on the "VA_Date" field.
func VADateGTE(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldVADate, v))
}

// VADateLT applies the LT predicate on the "VA_Date" field.
func VADateLT(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldVADate, v))
}

// VADateLTE applies the LTE predicate on the "VA_Date" field.
func VADateLTE(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldVADate, v))
}

// VADateIsNil applies the IsNil predicate on the "VA_Date" field.
func VADateIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldVADate))
}

// VADateNotNil applies the NotNil predicate on the "VA_Date" field.
func VADateNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldVADate))
}

// CARemarksEQ applies the EQ predicate on the "CA_Remarks" field.
func CARemarksEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldCARemarks, v))
}

// CARemarksNEQ applies the NEQ predicate on the "CA_Remarks" field.
func CARemarksNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldCARemarks, v))
}

// CARemarksIn applies the In predicate on the "CA_Remarks" field.
func CARemarksIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldCARemarks, vs...))
}

// CARemarksNotIn applies the NotIn predicate on the "CA_Remarks" field.
func CARemarksNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldCARemarks, vs...))
}

// CARemarksGT applies the GT predicate on the "CA_Remarks" field.
func CARemarksGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldCARemarks, v))
}

// CARemarksGTE applies the GTE predicate on the "CA_Remarks" field.
func CARemarksGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldCARemarks, v))
}

// CARemarksLT applies the LT predicate on the "CA_Remarks" field.
func CARemarksLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldCARemarks, v))
}

// CARemarksLTE applies the LTE predicate on the "CA_Remarks" field.
func CARemarksLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldCARemarks, v))
}

// CARemarksContains applies the Contains predicate on the "CA_Remarks" field.
func CARemarksContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldCARemarks, v))
}

// CARemarksHasPrefix applies the HasPrefix predicate on the "CA_Remarks" field.
func CARemarksHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldCARemarks, v))
}

// CARemarksHasSuffix applies the HasSuffix predicate on the "CA_Remarks" field.
func CARemarksHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldCARemarks, v))
}

// CARemarksIsNil applies the IsNil predicate on the "CA_Remarks" field.
func CARemarksIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldCARemarks))
}

// CARemarksNotNil applies the NotNil predicate on the "CA_Remarks" field.
func CARemarksNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldCARemarks))
}

// CARemarksEqualFold applies the EqualFold predicate on the "CA_Remarks" field.
func CARemarksEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldCARemarks, v))
}

// CARemarksContainsFold applies the ContainsFold predicate on the "CA_Remarks" field.
func CARemarksContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldCARemarks, v))
}

// CAUserNameEQ applies the EQ predicate on the "CA_UserName" field.
func CAUserNameEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldCAUserName, v))
}

// CAUserNameNEQ applies the NEQ predicate on the "CA_UserName" field.
func CAUserNameNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldCAUserName, v))
}

// CAUserNameIn applies the In predicate on the "CA_UserName" field.
func CAUserNameIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldCAUserName, vs...))
}

// CAUserNameNotIn applies the NotIn predicate on the "CA_UserName" field.
func CAUserNameNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldCAUserName, vs...))
}

// CAUserNameGT applies the GT predicate on the "CA_UserName" field.
func CAUserNameGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldCAUserName, v))
}

// CAUserNameGTE applies the GTE predicate on the "CA_UserName" field.
func CAUserNameGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldCAUserName, v))
}

// CAUserNameLT applies the LT predicate on the "CA_UserName" field.
func CAUserNameLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldCAUserName, v))
}

// CAUserNameLTE applies the LTE predicate on the "CA_UserName" field.
func CAUserNameLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldCAUserName, v))
}

// CAUserNameContains applies the Contains predicate on the "CA_UserName" field.
func CAUserNameContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldCAUserName, v))
}

// CAUserNameHasPrefix applies the HasPrefix predicate on the "CA_UserName" field.
func CAUserNameHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldCAUserName, v))
}

// CAUserNameHasSuffix applies the HasSuffix predicate on the "CA_UserName" field.
func CAUserNameHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldCAUserName, v))
}

// CAUserNameIsNil applies the IsNil predicate on the "CA_UserName" field.
func CAUserNameIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldCAUserName))
}

// CAUserNameNotNil applies the NotNil predicate on the "CA_UserName" field.
func CAUserNameNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldCAUserName))
}

// CAUserNameEqualFold applies the EqualFold predicate on the "CA_UserName" field.
func CAUserNameEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldCAUserName, v))
}

// CAUserNameContainsFold applies the ContainsFold predicate on the "CA_UserName" field.
func CAUserNameContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldCAUserName, v))
}

// CADateEQ applies the EQ predicate on the "CA_Date" field.
func CADateEQ(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldCADate, v))
}

// CADateNEQ applies the NEQ predicate on the "CA_Date" field.
func CADateNEQ(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldCADate, v))
}

// CADateIn applies the In predicate on the "CA_Date" field.
func CADateIn(vs ...time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldCADate, vs...))
}

// CADateNotIn applies the NotIn predicate on the "CA_Date" field.
func CADateNotIn(vs ...time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldCADate, vs...))
}

// CADateGT applies the GT predicate on the "CA_Date" field.
func CADateGT(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldCADate, v))
}

// CADateGTE applies the GTE predicate on the "CA_Date" field.
func CADateGTE(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldCADate, v))
}

// CADateLT applies the LT predicate on the "CA_Date" field.
func CADateLT(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldCADate, v))
}

// CADateLTE applies the LTE predicate on the "CA_Date" field.
func CADateLTE(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldCADate, v))
}

// CADateIsNil applies the IsNil predicate on the "CA_Date" field.
func CADateIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldCADate))
}

// CADateNotNil applies the NotNil predicate on the "CA_Date" field.
func CADateNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldCADate))
}

// ApplicationWdlDateEQ applies the EQ predicate on the "ApplicationWdlDate" field.
func ApplicationWdlDateEQ(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldApplicationWdlDate, v))
}

// ApplicationWdlDateNEQ applies the NEQ predicate on the "ApplicationWdlDate" field.
func ApplicationWdlDateNEQ(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldApplicationWdlDate, v))
}

// ApplicationWdlDateIn applies the In predicate on the "ApplicationWdlDate" field.
func ApplicationWdlDateIn(vs ...time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldApplicationWdlDate, vs...))
}

// ApplicationWdlDateNotIn applies the NotIn predicate on the "ApplicationWdlDate" field.
func ApplicationWdlDateNotIn(vs ...time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldApplicationWdlDate, vs...))
}

// ApplicationWdlDateGT applies the GT predicate on the "ApplicationWdlDate" field.
func ApplicationWdlDateGT(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldApplicationWdlDate, v))
}

// ApplicationWdlDateGTE applies the GTE predicate on the "ApplicationWdlDate" field.
func ApplicationWdlDateGTE(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldApplicationWdlDate, v))
}

// ApplicationWdlDateLT applies the LT predicate on the "ApplicationWdlDate" field.
func ApplicationWdlDateLT(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldApplicationWdlDate, v))
}

// ApplicationWdlDateLTE applies the LTE predicate on the "ApplicationWdlDate" field.
func ApplicationWdlDateLTE(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldApplicationWdlDate, v))
}

// ApplicationWdlDateIsNil applies the IsNil predicate on the "ApplicationWdlDate" field.
func ApplicationWdlDateIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldApplicationWdlDate))
}

// ApplicationWdlDateNotNil applies the NotNil predicate on the "ApplicationWdlDate" field.
func ApplicationWdlDateNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldApplicationWdlDate))
}

// NARemarksEQ applies the EQ predicate on the "NA_Remarks" field.
func NARemarksEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldNARemarks, v))
}

// NARemarksNEQ applies the NEQ predicate on the "NA_Remarks" field.
func NARemarksNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldNARemarks, v))
}

// NARemarksIn applies the In predicate on the "NA_Remarks" field.
func NARemarksIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldNARemarks, vs...))
}

// NARemarksNotIn applies the NotIn predicate on the "NA_Remarks" field.
func NARemarksNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldNARemarks, vs...))
}

// NARemarksGT applies the GT predicate on the "NA_Remarks" field.
func NARemarksGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldNARemarks, v))
}

// NARemarksGTE applies the GTE predicate on the "NA_Remarks" field.
func NARemarksGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldNARemarks, v))
}

// NARemarksLT applies the LT predicate on the "NA_Remarks" field.
func NARemarksLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldNARemarks, v))
}

// NARemarksLTE applies the LTE predicate on the "NA_Remarks" field.
func NARemarksLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldNARemarks, v))
}

// NARemarksContains applies the Contains predicate on the "NA_Remarks" field.
func NARemarksContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldNARemarks, v))
}

// NARemarksHasPrefix applies the HasPrefix predicate on the "NA_Remarks" field.
func NARemarksHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldNARemarks, v))
}

// NARemarksHasSuffix applies the HasSuffix predicate on the "NA_Remarks" field.
func NARemarksHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldNARemarks, v))
}

// NARemarksIsNil applies the IsNil predicate on the "NA_Remarks" field.
func NARemarksIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldNARemarks))
}

// NARemarksNotNil applies the NotNil predicate on the "NA_Remarks" field.
func NARemarksNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldNARemarks))
}

// NARemarksEqualFold applies the EqualFold predicate on the "NA_Remarks" field.
func NARemarksEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldNARemarks, v))
}

// NARemarksContainsFold applies the ContainsFold predicate on the "NA_Remarks" field.
func NARemarksContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldNARemarks, v))
}

// NAUserNameEQ applies the EQ predicate on the "NA_UserName" field.
func NAUserNameEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldNAUserName, v))
}

// NAUserNameNEQ applies the NEQ predicate on the "NA_UserName" field.
func NAUserNameNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldNAUserName, v))
}

// NAUserNameIn applies the In predicate on the "NA_UserName" field.
func NAUserNameIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldNAUserName, vs...))
}

// NAUserNameNotIn applies the NotIn predicate on the "NA_UserName" field.
func NAUserNameNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldNAUserName, vs...))
}

// NAUserNameGT applies the GT predicate on the "NA_UserName" field.
func NAUserNameGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldNAUserName, v))
}

// NAUserNameGTE applies the GTE predicate on the "NA_UserName" field.
func NAUserNameGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldNAUserName, v))
}

// NAUserNameLT applies the LT predicate on the "NA_UserName" field.
func NAUserNameLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldNAUserName, v))
}

// NAUserNameLTE applies the LTE predicate on the "NA_UserName" field.
func NAUserNameLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldNAUserName, v))
}

// NAUserNameContains applies the Contains predicate on the "NA_UserName" field.
func NAUserNameContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldNAUserName, v))
}

// NAUserNameHasPrefix applies the HasPrefix predicate on the "NA_UserName" field.
func NAUserNameHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldNAUserName, v))
}

// NAUserNameHasSuffix applies the HasSuffix predicate on the "NA_UserName" field.
func NAUserNameHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldNAUserName, v))
}

// NAUserNameIsNil applies the IsNil predicate on the "NA_UserName" field.
func NAUserNameIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldNAUserName))
}

// NAUserNameNotNil applies the NotNil predicate on the "NA_UserName" field.
func NAUserNameNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldNAUserName))
}

// NAUserNameEqualFold applies the EqualFold predicate on the "NA_UserName" field.
func NAUserNameEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldNAUserName, v))
}

// NAUserNameContainsFold applies the ContainsFold predicate on the "NA_UserName" field.
func NAUserNameContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldNAUserName, v))
}

// NADateEQ applies the EQ predicate on the "NA_Date" field.
func NADateEQ(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldNADate, v))
}

// NADateNEQ applies the NEQ predicate on the "NA_Date" field.
func NADateNEQ(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldNADate, v))
}

// NADateIn applies the In predicate on the "NA_Date" field.
func NADateIn(vs ...time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldNADate, vs...))
}

// NADateNotIn applies the NotIn predicate on the "NA_Date" field.
func NADateNotIn(vs ...time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldNADate, vs...))
}

// NADateGT applies the GT predicate on the "NA_Date" field.
func NADateGT(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldNADate, v))
}

// NADateGTE applies the GTE predicate on the "NA_Date" field.
func NADateGTE(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldNADate, v))
}

// NADateLT applies the LT predicate on the "NA_Date" field.
func NADateLT(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldNADate, v))
}

// NADateLTE applies the LTE predicate on the "NA_Date" field.
func NADateLTE(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldNADate, v))
}

// NADateIsNil applies the IsNil predicate on the "NA_Date" field.
func NADateIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldNADate))
}

// NADateNotNil applies the NotNil predicate on the "NA_Date" field.
func NADateNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldNADate))
}

// AppliactionRemarksEQ applies the EQ predicate on the "AppliactionRemarks" field.
func AppliactionRemarksEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldAppliactionRemarks, v))
}

// AppliactionRemarksNEQ applies the NEQ predicate on the "AppliactionRemarks" field.
func AppliactionRemarksNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldAppliactionRemarks, v))
}

// AppliactionRemarksIn applies the In predicate on the "AppliactionRemarks" field.
func AppliactionRemarksIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldAppliactionRemarks, vs...))
}

// AppliactionRemarksNotIn applies the NotIn predicate on the "AppliactionRemarks" field.
func AppliactionRemarksNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldAppliactionRemarks, vs...))
}

// AppliactionRemarksGT applies the GT predicate on the "AppliactionRemarks" field.
func AppliactionRemarksGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldAppliactionRemarks, v))
}

// AppliactionRemarksGTE applies the GTE predicate on the "AppliactionRemarks" field.
func AppliactionRemarksGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldAppliactionRemarks, v))
}

// AppliactionRemarksLT applies the LT predicate on the "AppliactionRemarks" field.
func AppliactionRemarksLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldAppliactionRemarks, v))
}

// AppliactionRemarksLTE applies the LTE predicate on the "AppliactionRemarks" field.
func AppliactionRemarksLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldAppliactionRemarks, v))
}

// AppliactionRemarksContains applies the Contains predicate on the "AppliactionRemarks" field.
func AppliactionRemarksContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldAppliactionRemarks, v))
}

// AppliactionRemarksHasPrefix applies the HasPrefix predicate on the "AppliactionRemarks" field.
func AppliactionRemarksHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldAppliactionRemarks, v))
}

// AppliactionRemarksHasSuffix applies the HasSuffix predicate on the "AppliactionRemarks" field.
func AppliactionRemarksHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldAppliactionRemarks, v))
}

// AppliactionRemarksIsNil applies the IsNil predicate on the "AppliactionRemarks" field.
func AppliactionRemarksIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldAppliactionRemarks))
}

// AppliactionRemarksNotNil applies the NotNil predicate on the "AppliactionRemarks" field.
func AppliactionRemarksNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldAppliactionRemarks))
}

// AppliactionRemarksEqualFold applies the EqualFold predicate on the "AppliactionRemarks" field.
func AppliactionRemarksEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldAppliactionRemarks, v))
}

// AppliactionRemarksContainsFold applies the ContainsFold predicate on the "AppliactionRemarks" field.
func AppliactionRemarksContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldAppliactionRemarks, v))
}

// CadrePreferencesIsNil applies the IsNil predicate on the "CadrePreferences" field.
func CadrePreferencesIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldCadrePreferences))
}

// CadrePreferencesNotNil applies the NotNil predicate on the "CadrePreferences" field.
func CadrePreferencesNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldCadrePreferences))
}

// DivisionPreferencesIsNil applies the IsNil predicate on the "DivisionPreferences" field.
func DivisionPreferencesIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldDivisionPreferences))
}

// DivisionPreferencesNotNil applies the NotNil predicate on the "DivisionPreferences" field.
func DivisionPreferencesNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldDivisionPreferences))
}

// CirclePreferencesIsNil applies the IsNil predicate on the "CirclePreferences" field.
func CirclePreferencesIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldCirclePreferences))
}

// CirclePreferencesNotNil applies the NotNil predicate on the "CirclePreferences" field.
func CirclePreferencesNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldCirclePreferences))
}

// UpdatedAtEQ applies the EQ predicate on the "UpdatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "UpdatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "UpdatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "UpdatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "UpdatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "UpdatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "UpdatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "UpdatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "UpdatedAt" field.
func UpdatedAtIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "UpdatedAt" field.
func UpdatedAtNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldUpdatedAt))
}

// UpdatedByEQ applies the EQ predicate on the "UpdatedBy" field.
func UpdatedByEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "UpdatedBy" field.
func UpdatedByNEQ(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "UpdatedBy" field.
func UpdatedByIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "UpdatedBy" field.
func UpdatedByNotIn(vs ...string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "UpdatedBy" field.
func UpdatedByGT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "UpdatedBy" field.
func UpdatedByGTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "UpdatedBy" field.
func UpdatedByLT(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "UpdatedBy" field.
func UpdatedByLTE(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "UpdatedBy" field.
func UpdatedByContains(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "UpdatedBy" field.
func UpdatedByHasPrefix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "UpdatedBy" field.
func UpdatedByHasSuffix(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "UpdatedBy" field.
func UpdatedByIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "UpdatedBy" field.
func UpdatedByNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "UpdatedBy" field.
func UpdatedByEqualFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "UpdatedBy" field.
func UpdatedByContainsFold(v string) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// RoleUserCodeEQ applies the EQ predicate on the "RoleUserCode" field.
func RoleUserCodeEQ(v int32) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldEQ(FieldRoleUserCode, v))
}

// RoleUserCodeNEQ applies the NEQ predicate on the "RoleUserCode" field.
func RoleUserCodeNEQ(v int32) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNEQ(FieldRoleUserCode, v))
}

// RoleUserCodeIn applies the In predicate on the "RoleUserCode" field.
func RoleUserCodeIn(vs ...int32) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIn(FieldRoleUserCode, vs...))
}

// RoleUserCodeNotIn applies the NotIn predicate on the "RoleUserCode" field.
func RoleUserCodeNotIn(vs ...int32) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotIn(FieldRoleUserCode, vs...))
}

// RoleUserCodeIsNil applies the IsNil predicate on the "RoleUserCode" field.
func RoleUserCodeIsNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldIsNull(FieldRoleUserCode))
}

// RoleUserCodeNotNil applies the NotNil predicate on the "RoleUserCode" field.
func RoleUserCodeNotNil() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(sql.FieldNotNull(FieldRoleUserCode))
}

// HasUsersPSRef applies the HasEdge predicate on the "UsersPSRef" edge.
func HasUsersPSRef() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersPSRefTable, UsersPSRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersPSRefWith applies the HasEdge predicate on the "UsersPSRef" edge with a given conditions (other predicates).
func HasUsersPSRefWith(preds ...predicate.UserMaster) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(func(s *sql.Selector) {
		step := newUsersPSRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamApplnPSRef applies the HasEdge predicate on the "ExamAppln_PS_Ref" edge.
func HasExamApplnPSRef() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamApplnPSRefTable, ExamApplnPSRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamApplnPSRefWith applies the HasEdge predicate on the "ExamAppln_PS_Ref" edge with a given conditions (other predicates).
func HasExamApplnPSRefWith(preds ...predicate.Exam_PS) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(func(s *sql.Selector) {
		step := newExamApplnPSRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOfficePSRef applies the HasEdge predicate on the "Office_PS_Ref" edge.
func HasOfficePSRef() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OfficePSRefTable, OfficePSRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOfficePSRefWith applies the HasEdge predicate on the "Office_PS_Ref" edge with a given conditions (other predicates).
func HasOfficePSRefWith(preds ...predicate.Facility) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(func(s *sql.Selector) {
		step := newOfficePSRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoleusers applies the HasEdge predicate on the "roleusers" edge.
func HasRoleusers() predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoleusersTable, RoleusersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleusersWith applies the HasEdge predicate on the "roleusers" edge with a given conditions (other predicates).
func HasRoleusersWith(preds ...predicate.RoleMaster) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(func(s *sql.Selector) {
		step := newRoleusersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Exam_Applications_PS) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Exam_Applications_PS) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Exam_Applications_PS) predicate.Exam_Applications_PS {
	return predicate.Exam_Applications_PS(func(s *sql.Selector) {
		p(s.Not())
	})
}
