// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/circlemaster"
	"recruit/ent/divisionmaster"
	"recruit/ent/facility"
	"recruit/ent/regionmaster"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RegionMasterCreate is the builder for creating a RegionMaster entity.
type RegionMasterCreate struct {
	config
	mutation *RegionMasterMutation
	hooks    []Hook
}

// SetRegionCode sets the "RegionCode" field.
func (rmc *RegionMasterCreate) SetRegionCode(i int32) *RegionMasterCreate {
	rmc.mutation.SetRegionCode(i)
	return rmc
}

// SetRegionOfficeId sets the "RegionOfficeId" field.
func (rmc *RegionMasterCreate) SetRegionOfficeId(s string) *RegionMasterCreate {
	rmc.mutation.SetRegionOfficeId(s)
	return rmc
}

// SetOfficeType sets the "OfficeType" field.
func (rmc *RegionMasterCreate) SetOfficeType(s string) *RegionMasterCreate {
	rmc.mutation.SetOfficeType(s)
	return rmc
}

// SetRegionOfficeName sets the "RegionOfficeName" field.
func (rmc *RegionMasterCreate) SetRegionOfficeName(s string) *RegionMasterCreate {
	rmc.mutation.SetRegionOfficeName(s)
	return rmc
}

// SetReportingOfficeType sets the "ReportingOfficeType" field.
func (rmc *RegionMasterCreate) SetReportingOfficeType(s string) *RegionMasterCreate {
	rmc.mutation.SetReportingOfficeType(s)
	return rmc
}

// SetNillableReportingOfficeType sets the "ReportingOfficeType" field if the given value is not nil.
func (rmc *RegionMasterCreate) SetNillableReportingOfficeType(s *string) *RegionMasterCreate {
	if s != nil {
		rmc.SetReportingOfficeType(*s)
	}
	return rmc
}

// SetReportingOfficeCode sets the "ReportingOfficeCode" field.
func (rmc *RegionMasterCreate) SetReportingOfficeCode(s string) *RegionMasterCreate {
	rmc.mutation.SetReportingOfficeCode(s)
	return rmc
}

// SetNillableReportingOfficeCode sets the "ReportingOfficeCode" field if the given value is not nil.
func (rmc *RegionMasterCreate) SetNillableReportingOfficeCode(s *string) *RegionMasterCreate {
	if s != nil {
		rmc.SetReportingOfficeCode(*s)
	}
	return rmc
}

// SetEmailID sets the "EmailID" field.
func (rmc *RegionMasterCreate) SetEmailID(s string) *RegionMasterCreate {
	rmc.mutation.SetEmailID(s)
	return rmc
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (rmc *RegionMasterCreate) SetNillableEmailID(s *string) *RegionMasterCreate {
	if s != nil {
		rmc.SetEmailID(*s)
	}
	return rmc
}

// SetMobileNumber sets the "MobileNumber" field.
func (rmc *RegionMasterCreate) SetMobileNumber(i int32) *RegionMasterCreate {
	rmc.mutation.SetMobileNumber(i)
	return rmc
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (rmc *RegionMasterCreate) SetNillableMobileNumber(i *int32) *RegionMasterCreate {
	if i != nil {
		rmc.SetMobileNumber(*i)
	}
	return rmc
}

// SetCircleCode sets the "CircleCode" field.
func (rmc *RegionMasterCreate) SetCircleCode(i int32) *RegionMasterCreate {
	rmc.mutation.SetCircleCode(i)
	return rmc
}

// SetNillableCircleCode sets the "CircleCode" field if the given value is not nil.
func (rmc *RegionMasterCreate) SetNillableCircleCode(i *int32) *RegionMasterCreate {
	if i != nil {
		rmc.SetCircleCode(*i)
	}
	return rmc
}

// SetID sets the "id" field.
func (rmc *RegionMasterCreate) SetID(i int32) *RegionMasterCreate {
	rmc.mutation.SetID(i)
	return rmc
}

// AddCircleRefIDs adds the "circle_ref" edge to the CircleMaster entity by IDs.
func (rmc *RegionMasterCreate) AddCircleRefIDs(ids ...int32) *RegionMasterCreate {
	rmc.mutation.AddCircleRefIDs(ids...)
	return rmc
}

// AddCircleRef adds the "circle_ref" edges to the CircleMaster entity.
func (rmc *RegionMasterCreate) AddCircleRef(c ...*CircleMaster) *RegionMasterCreate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rmc.AddCircleRefIDs(ids...)
}

// AddRegionIDs adds the "regions" edge to the DivisionMaster entity by IDs.
func (rmc *RegionMasterCreate) AddRegionIDs(ids ...int32) *RegionMasterCreate {
	rmc.mutation.AddRegionIDs(ids...)
	return rmc
}

// AddRegions adds the "regions" edges to the DivisionMaster entity.
func (rmc *RegionMasterCreate) AddRegions(d ...*DivisionMaster) *RegionMasterCreate {
	ids := make([]int32, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return rmc.AddRegionIDs(ids...)
}

// AddRegionRefRefIDs adds the "region_ref_ref" edge to the Facility entity by IDs.
func (rmc *RegionMasterCreate) AddRegionRefRefIDs(ids ...int32) *RegionMasterCreate {
	rmc.mutation.AddRegionRefRefIDs(ids...)
	return rmc
}

// AddRegionRefRef adds the "region_ref_ref" edges to the Facility entity.
func (rmc *RegionMasterCreate) AddRegionRefRef(f ...*Facility) *RegionMasterCreate {
	ids := make([]int32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return rmc.AddRegionRefRefIDs(ids...)
}

// Mutation returns the RegionMasterMutation object of the builder.
func (rmc *RegionMasterCreate) Mutation() *RegionMasterMutation {
	return rmc.mutation
}

// Save creates the RegionMaster in the database.
func (rmc *RegionMasterCreate) Save(ctx context.Context) (*RegionMaster, error) {
	return withHooks(ctx, rmc.sqlSave, rmc.mutation, rmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rmc *RegionMasterCreate) SaveX(ctx context.Context) *RegionMaster {
	v, err := rmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rmc *RegionMasterCreate) Exec(ctx context.Context) error {
	_, err := rmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmc *RegionMasterCreate) ExecX(ctx context.Context) {
	if err := rmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rmc *RegionMasterCreate) check() error {
	if _, ok := rmc.mutation.RegionCode(); !ok {
		return &ValidationError{Name: "RegionCode", err: errors.New(`ent: missing required field "RegionMaster.RegionCode"`)}
	}
	if _, ok := rmc.mutation.RegionOfficeId(); !ok {
		return &ValidationError{Name: "RegionOfficeId", err: errors.New(`ent: missing required field "RegionMaster.RegionOfficeId"`)}
	}
	if _, ok := rmc.mutation.OfficeType(); !ok {
		return &ValidationError{Name: "OfficeType", err: errors.New(`ent: missing required field "RegionMaster.OfficeType"`)}
	}
	if _, ok := rmc.mutation.RegionOfficeName(); !ok {
		return &ValidationError{Name: "RegionOfficeName", err: errors.New(`ent: missing required field "RegionMaster.RegionOfficeName"`)}
	}
	return nil
}

func (rmc *RegionMasterCreate) sqlSave(ctx context.Context) (*RegionMaster, error) {
	if err := rmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	rmc.mutation.id = &_node.ID
	rmc.mutation.done = true
	return _node, nil
}

func (rmc *RegionMasterCreate) createSpec() (*RegionMaster, *sqlgraph.CreateSpec) {
	var (
		_node = &RegionMaster{config: rmc.config}
		_spec = sqlgraph.NewCreateSpec(regionmaster.Table, sqlgraph.NewFieldSpec(regionmaster.FieldID, field.TypeInt32))
	)
	if id, ok := rmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rmc.mutation.RegionCode(); ok {
		_spec.SetField(regionmaster.FieldRegionCode, field.TypeInt32, value)
		_node.RegionCode = value
	}
	if value, ok := rmc.mutation.RegionOfficeId(); ok {
		_spec.SetField(regionmaster.FieldRegionOfficeId, field.TypeString, value)
		_node.RegionOfficeId = value
	}
	if value, ok := rmc.mutation.OfficeType(); ok {
		_spec.SetField(regionmaster.FieldOfficeType, field.TypeString, value)
		_node.OfficeType = value
	}
	if value, ok := rmc.mutation.RegionOfficeName(); ok {
		_spec.SetField(regionmaster.FieldRegionOfficeName, field.TypeString, value)
		_node.RegionOfficeName = value
	}
	if value, ok := rmc.mutation.ReportingOfficeType(); ok {
		_spec.SetField(regionmaster.FieldReportingOfficeType, field.TypeString, value)
		_node.ReportingOfficeType = value
	}
	if value, ok := rmc.mutation.ReportingOfficeCode(); ok {
		_spec.SetField(regionmaster.FieldReportingOfficeCode, field.TypeString, value)
		_node.ReportingOfficeCode = value
	}
	if value, ok := rmc.mutation.EmailID(); ok {
		_spec.SetField(regionmaster.FieldEmailID, field.TypeString, value)
		_node.EmailID = value
	}
	if value, ok := rmc.mutation.MobileNumber(); ok {
		_spec.SetField(regionmaster.FieldMobileNumber, field.TypeInt32, value)
		_node.MobileNumber = value
	}
	if value, ok := rmc.mutation.CircleCode(); ok {
		_spec.SetField(regionmaster.FieldCircleCode, field.TypeInt32, value)
		_node.CircleCode = value
	}
	if nodes := rmc.mutation.CircleRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   regionmaster.CircleRefTable,
			Columns: []string{regionmaster.CircleRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rmc.mutation.RegionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   regionmaster.RegionsTable,
			Columns: []string{regionmaster.RegionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(divisionmaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rmc.mutation.RegionRefRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   regionmaster.RegionRefRefTable,
			Columns: []string{regionmaster.RegionRefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RegionMasterCreateBulk is the builder for creating many RegionMaster entities in bulk.
type RegionMasterCreateBulk struct {
	config
	builders []*RegionMasterCreate
}

// Save creates the RegionMaster entities in the database.
func (rmcb *RegionMasterCreateBulk) Save(ctx context.Context) ([]*RegionMaster, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rmcb.builders))
	nodes := make([]*RegionMaster, len(rmcb.builders))
	mutators := make([]Mutator, len(rmcb.builders))
	for i := range rmcb.builders {
		func(i int, root context.Context) {
			builder := rmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RegionMasterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rmcb *RegionMasterCreateBulk) SaveX(ctx context.Context) []*RegionMaster {
	v, err := rmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rmcb *RegionMasterCreateBulk) Exec(ctx context.Context) error {
	_, err := rmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmcb *RegionMasterCreateBulk) ExecX(ctx context.Context) {
	if err := rmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
