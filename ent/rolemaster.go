// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/rolemaster"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// RoleMaster is the model entity for the RoleMaster schema.
type RoleMaster struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// RoleName holds the value of the "RoleName" field.
	RoleName string `json:"RoleName,omitempty"`
	// CreatedDate holds the value of the "CreatedDate" field.
	CreatedDate time.Time `json:"CreatedDate,omitempty"`
	// Status holds the value of the "Status" field.
	Status bool `json:"Status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoleMasterQuery when eager-loading is set.
	Edges        RoleMasterEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RoleMasterEdges holds the relations/edges for other nodes in the graph.
type RoleMasterEdges struct {
	// Roles holds the value of the roles edge.
	Roles []*AdminLogin `json:"roles,omitempty"`
	// RolesRef holds the value of the Roles_Ref edge.
	RolesRef []*UserMaster `json:"Roles_Ref,omitempty"`
	// RolesPSRef holds the value of the Roles_PS_Ref edge.
	RolesPSRef []*Exam_Applications_PS `json:"Roles_PS_Ref,omitempty"`
	// RolesIPRef holds the value of the Roles_IP_Ref edge.
	RolesIPRef []*Exam_Applications_IP `json:"Roles_IP_Ref,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading.
func (e RoleMasterEdges) RolesOrErr() ([]*AdminLogin, error) {
	if e.loadedTypes[0] {
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// RolesRefOrErr returns the RolesRef value or an error if the edge
// was not loaded in eager-loading.
func (e RoleMasterEdges) RolesRefOrErr() ([]*UserMaster, error) {
	if e.loadedTypes[1] {
		return e.RolesRef, nil
	}
	return nil, &NotLoadedError{edge: "Roles_Ref"}
}

// RolesPSRefOrErr returns the RolesPSRef value or an error if the edge
// was not loaded in eager-loading.
func (e RoleMasterEdges) RolesPSRefOrErr() ([]*Exam_Applications_PS, error) {
	if e.loadedTypes[2] {
		return e.RolesPSRef, nil
	}
	return nil, &NotLoadedError{edge: "Roles_PS_Ref"}
}

// RolesIPRefOrErr returns the RolesIPRef value or an error if the edge
// was not loaded in eager-loading.
func (e RoleMasterEdges) RolesIPRefOrErr() ([]*Exam_Applications_IP, error) {
	if e.loadedTypes[3] {
		return e.RolesIPRef, nil
	}
	return nil, &NotLoadedError{edge: "Roles_IP_Ref"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RoleMaster) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rolemaster.FieldStatus:
			values[i] = new(sql.NullBool)
		case rolemaster.FieldID:
			values[i] = new(sql.NullInt64)
		case rolemaster.FieldRoleName:
			values[i] = new(sql.NullString)
		case rolemaster.FieldCreatedDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RoleMaster fields.
func (rm *RoleMaster) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rolemaster.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rm.ID = int32(value.Int64)
		case rolemaster.FieldRoleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field RoleName", values[i])
			} else if value.Valid {
				rm.RoleName = value.String
			}
		case rolemaster.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedDate", values[i])
			} else if value.Valid {
				rm.CreatedDate = value.Time
			}
		case rolemaster.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				rm.Status = value.Bool
			}
		default:
			rm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RoleMaster.
// This includes values selected through modifiers, order, etc.
func (rm *RoleMaster) Value(name string) (ent.Value, error) {
	return rm.selectValues.Get(name)
}

// QueryRoles queries the "roles" edge of the RoleMaster entity.
func (rm *RoleMaster) QueryRoles() *AdminLoginQuery {
	return NewRoleMasterClient(rm.config).QueryRoles(rm)
}

// QueryRolesRef queries the "Roles_Ref" edge of the RoleMaster entity.
func (rm *RoleMaster) QueryRolesRef() *UserMasterQuery {
	return NewRoleMasterClient(rm.config).QueryRolesRef(rm)
}

// QueryRolesPSRef queries the "Roles_PS_Ref" edge of the RoleMaster entity.
func (rm *RoleMaster) QueryRolesPSRef() *ExamApplicationsPSQuery {
	return NewRoleMasterClient(rm.config).QueryRolesPSRef(rm)
}

// QueryRolesIPRef queries the "Roles_IP_Ref" edge of the RoleMaster entity.
func (rm *RoleMaster) QueryRolesIPRef() *ExamApplicationsIPQuery {
	return NewRoleMasterClient(rm.config).QueryRolesIPRef(rm)
}

// Update returns a builder for updating this RoleMaster.
// Note that you need to call RoleMaster.Unwrap() before calling this method if this RoleMaster
// was returned from a transaction, and the transaction was committed or rolled back.
func (rm *RoleMaster) Update() *RoleMasterUpdateOne {
	return NewRoleMasterClient(rm.config).UpdateOne(rm)
}

// Unwrap unwraps the RoleMaster entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rm *RoleMaster) Unwrap() *RoleMaster {
	_tx, ok := rm.config.driver.(*txDriver)
	if !ok {
		panic("ent: RoleMaster is not a transactional entity")
	}
	rm.config.driver = _tx.drv
	return rm
}

// String implements the fmt.Stringer.
func (rm *RoleMaster) String() string {
	var builder strings.Builder
	builder.WriteString("RoleMaster(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rm.ID))
	builder.WriteString("RoleName=")
	builder.WriteString(rm.RoleName)
	builder.WriteString(", ")
	builder.WriteString("CreatedDate=")
	builder.WriteString(rm.CreatedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("Status=")
	builder.WriteString(fmt.Sprintf("%v", rm.Status))
	builder.WriteByte(')')
	return builder.String()
}

// RoleMasters is a parsable slice of RoleMaster.
type RoleMasters []*RoleMaster
