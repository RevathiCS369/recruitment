// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/center"
	"recruit/ent/exam"
	"recruit/ent/examcalendar"
	"recruit/ent/exampapers"
	"recruit/ent/papertypes"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamPapersUpdate is the builder for updating ExamPapers entities.
type ExamPapersUpdate struct {
	config
	hooks    []Hook
	mutation *ExamPapersMutation
}

// Where appends a list predicates to the ExamPapersUpdate builder.
func (epu *ExamPapersUpdate) Where(ps ...predicate.ExamPapers) *ExamPapersUpdate {
	epu.mutation.Where(ps...)
	return epu
}

// SetPaperDescription sets the "PaperDescription" field.
func (epu *ExamPapersUpdate) SetPaperDescription(s string) *ExamPapersUpdate {
	epu.mutation.SetPaperDescription(s)
	return epu
}

// SetExamCode sets the "ExamCode" field.
func (epu *ExamPapersUpdate) SetExamCode(i int32) *ExamPapersUpdate {
	epu.mutation.SetExamCode(i)
	return epu
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableExamCode(i *int32) *ExamPapersUpdate {
	if i != nil {
		epu.SetExamCode(*i)
	}
	return epu
}

// ClearExamCode clears the value of the "ExamCode" field.
func (epu *ExamPapersUpdate) ClearExamCode() *ExamPapersUpdate {
	epu.mutation.ClearExamCode()
	return epu
}

// SetCompetitiveQualifying sets the "competitiveQualifying" field.
func (epu *ExamPapersUpdate) SetCompetitiveQualifying(s string) *ExamPapersUpdate {
	epu.mutation.SetCompetitiveQualifying(s)
	return epu
}

// SetExceptionForDisability sets the "exceptionForDisability" field.
func (epu *ExamPapersUpdate) SetExceptionForDisability(s string) *ExamPapersUpdate {
	epu.mutation.SetExceptionForDisability(s)
	return epu
}

// SetMaximumMarks sets the "MaximumMarks" field.
func (epu *ExamPapersUpdate) SetMaximumMarks(i int) *ExamPapersUpdate {
	epu.mutation.ResetMaximumMarks()
	epu.mutation.SetMaximumMarks(i)
	return epu
}

// AddMaximumMarks adds i to the "MaximumMarks" field.
func (epu *ExamPapersUpdate) AddMaximumMarks(i int) *ExamPapersUpdate {
	epu.mutation.AddMaximumMarks(i)
	return epu
}

// SetDuration sets the "Duration" field.
func (epu *ExamPapersUpdate) SetDuration(i int) *ExamPapersUpdate {
	epu.mutation.ResetDuration()
	epu.mutation.SetDuration(i)
	return epu
}

// AddDuration adds i to the "Duration" field.
func (epu *ExamPapersUpdate) AddDuration(i int) *ExamPapersUpdate {
	epu.mutation.AddDuration(i)
	return epu
}

// SetLocalLanguageAllowedQuestionPaper sets the "localLanguageAllowedQuestionPaper" field.
func (epu *ExamPapersUpdate) SetLocalLanguageAllowedQuestionPaper(s string) *ExamPapersUpdate {
	epu.mutation.SetLocalLanguageAllowedQuestionPaper(s)
	return epu
}

// SetLocalLanguageAllowedAnswerPaper sets the "localLanguageAllowedAnswerPaper" field.
func (epu *ExamPapersUpdate) SetLocalLanguageAllowedAnswerPaper(s string) *ExamPapersUpdate {
	epu.mutation.SetLocalLanguageAllowedAnswerPaper(s)
	return epu
}

// SetOrderNumber sets the "OrderNumber" field.
func (epu *ExamPapersUpdate) SetOrderNumber(s string) *ExamPapersUpdate {
	epu.mutation.SetOrderNumber(s)
	return epu
}

// SetPaperStatus sets the "PaperStatus" field.
func (epu *ExamPapersUpdate) SetPaperStatus(s string) *ExamPapersUpdate {
	epu.mutation.SetPaperStatus(s)
	return epu
}

// SetCalendarCode sets the "CalendarCode" field.
func (epu *ExamPapersUpdate) SetCalendarCode(i int32) *ExamPapersUpdate {
	epu.mutation.ResetCalendarCode()
	epu.mutation.SetCalendarCode(i)
	return epu
}

// SetNillableCalendarCode sets the "CalendarCode" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableCalendarCode(i *int32) *ExamPapersUpdate {
	if i != nil {
		epu.SetCalendarCode(*i)
	}
	return epu
}

// AddCalendarCode adds i to the "CalendarCode" field.
func (epu *ExamPapersUpdate) AddCalendarCode(i int32) *ExamPapersUpdate {
	epu.mutation.AddCalendarCode(i)
	return epu
}

// ClearCalendarCode clears the value of the "CalendarCode" field.
func (epu *ExamPapersUpdate) ClearCalendarCode() *ExamPapersUpdate {
	epu.mutation.ClearCalendarCode()
	return epu
}

// SetCreatedDate sets the "CreatedDate" field.
func (epu *ExamPapersUpdate) SetCreatedDate(t time.Time) *ExamPapersUpdate {
	epu.mutation.SetCreatedDate(t)
	return epu
}

// AddCenterIDs adds the "centers" edge to the Center entity by IDs.
func (epu *ExamPapersUpdate) AddCenterIDs(ids ...int32) *ExamPapersUpdate {
	epu.mutation.AddCenterIDs(ids...)
	return epu
}

// AddCenters adds the "centers" edges to the Center entity.
func (epu *ExamPapersUpdate) AddCenters(c ...*Center) *ExamPapersUpdate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return epu.AddCenterIDs(ids...)
}

// SetExamID sets the "exam" edge to the Exam entity by ID.
func (epu *ExamPapersUpdate) SetExamID(id int32) *ExamPapersUpdate {
	epu.mutation.SetExamID(id)
	return epu
}

// SetNillableExamID sets the "exam" edge to the Exam entity by ID if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableExamID(id *int32) *ExamPapersUpdate {
	if id != nil {
		epu = epu.SetExamID(*id)
	}
	return epu
}

// SetExam sets the "exam" edge to the Exam entity.
func (epu *ExamPapersUpdate) SetExam(e *Exam) *ExamPapersUpdate {
	return epu.SetExamID(e.ID)
}

// AddExampapersTypeIDs adds the "exampapers_types" edge to the PaperTypes entity by IDs.
func (epu *ExamPapersUpdate) AddExampapersTypeIDs(ids ...int32) *ExamPapersUpdate {
	epu.mutation.AddExampapersTypeIDs(ids...)
	return epu
}

// AddExampapersTypes adds the "exampapers_types" edges to the PaperTypes entity.
func (epu *ExamPapersUpdate) AddExampapersTypes(p ...*PaperTypes) *ExamPapersUpdate {
	ids := make([]int32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return epu.AddExampapersTypeIDs(ids...)
}

// AddPapersRefIDs adds the "papers_ref" edge to the ExamCalendar entity by IDs.
func (epu *ExamPapersUpdate) AddPapersRefIDs(ids ...int32) *ExamPapersUpdate {
	epu.mutation.AddPapersRefIDs(ids...)
	return epu
}

// AddPapersRef adds the "papers_ref" edges to the ExamCalendar entity.
func (epu *ExamPapersUpdate) AddPapersRef(e ...*ExamCalendar) *ExamPapersUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.AddPapersRefIDs(ids...)
}

// Mutation returns the ExamPapersMutation object of the builder.
func (epu *ExamPapersUpdate) Mutation() *ExamPapersMutation {
	return epu.mutation
}

// ClearCenters clears all "centers" edges to the Center entity.
func (epu *ExamPapersUpdate) ClearCenters() *ExamPapersUpdate {
	epu.mutation.ClearCenters()
	return epu
}

// RemoveCenterIDs removes the "centers" edge to Center entities by IDs.
func (epu *ExamPapersUpdate) RemoveCenterIDs(ids ...int32) *ExamPapersUpdate {
	epu.mutation.RemoveCenterIDs(ids...)
	return epu
}

// RemoveCenters removes "centers" edges to Center entities.
func (epu *ExamPapersUpdate) RemoveCenters(c ...*Center) *ExamPapersUpdate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return epu.RemoveCenterIDs(ids...)
}

// ClearExam clears the "exam" edge to the Exam entity.
func (epu *ExamPapersUpdate) ClearExam() *ExamPapersUpdate {
	epu.mutation.ClearExam()
	return epu
}

// ClearExampapersTypes clears all "exampapers_types" edges to the PaperTypes entity.
func (epu *ExamPapersUpdate) ClearExampapersTypes() *ExamPapersUpdate {
	epu.mutation.ClearExampapersTypes()
	return epu
}

// RemoveExampapersTypeIDs removes the "exampapers_types" edge to PaperTypes entities by IDs.
func (epu *ExamPapersUpdate) RemoveExampapersTypeIDs(ids ...int32) *ExamPapersUpdate {
	epu.mutation.RemoveExampapersTypeIDs(ids...)
	return epu
}

// RemoveExampapersTypes removes "exampapers_types" edges to PaperTypes entities.
func (epu *ExamPapersUpdate) RemoveExampapersTypes(p ...*PaperTypes) *ExamPapersUpdate {
	ids := make([]int32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return epu.RemoveExampapersTypeIDs(ids...)
}

// ClearPapersRef clears all "papers_ref" edges to the ExamCalendar entity.
func (epu *ExamPapersUpdate) ClearPapersRef() *ExamPapersUpdate {
	epu.mutation.ClearPapersRef()
	return epu
}

// RemovePapersRefIDs removes the "papers_ref" edge to ExamCalendar entities by IDs.
func (epu *ExamPapersUpdate) RemovePapersRefIDs(ids ...int32) *ExamPapersUpdate {
	epu.mutation.RemovePapersRefIDs(ids...)
	return epu
}

// RemovePapersRef removes "papers_ref" edges to ExamCalendar entities.
func (epu *ExamPapersUpdate) RemovePapersRef(e ...*ExamCalendar) *ExamPapersUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.RemovePapersRefIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (epu *ExamPapersUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, epu.sqlSave, epu.mutation, epu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epu *ExamPapersUpdate) SaveX(ctx context.Context) int {
	affected, err := epu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (epu *ExamPapersUpdate) Exec(ctx context.Context) error {
	_, err := epu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epu *ExamPapersUpdate) ExecX(ctx context.Context) {
	if err := epu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (epu *ExamPapersUpdate) check() error {
	if v, ok := epu.mutation.PaperDescription(); ok {
		if err := exampapers.PaperDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "PaperDescription", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.PaperDescription": %w`, err)}
		}
	}
	if v, ok := epu.mutation.CompetitiveQualifying(); ok {
		if err := exampapers.CompetitiveQualifyingValidator(v); err != nil {
			return &ValidationError{Name: "competitiveQualifying", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.competitiveQualifying": %w`, err)}
		}
	}
	if v, ok := epu.mutation.ExceptionForDisability(); ok {
		if err := exampapers.ExceptionForDisabilityValidator(v); err != nil {
			return &ValidationError{Name: "exceptionForDisability", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.exceptionForDisability": %w`, err)}
		}
	}
	if v, ok := epu.mutation.MaximumMarks(); ok {
		if err := exampapers.MaximumMarksValidator(v); err != nil {
			return &ValidationError{Name: "MaximumMarks", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.MaximumMarks": %w`, err)}
		}
	}
	if v, ok := epu.mutation.Duration(); ok {
		if err := exampapers.DurationValidator(v); err != nil {
			return &ValidationError{Name: "Duration", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.Duration": %w`, err)}
		}
	}
	if v, ok := epu.mutation.LocalLanguageAllowedQuestionPaper(); ok {
		if err := exampapers.LocalLanguageAllowedQuestionPaperValidator(v); err != nil {
			return &ValidationError{Name: "localLanguageAllowedQuestionPaper", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.localLanguageAllowedQuestionPaper": %w`, err)}
		}
	}
	if v, ok := epu.mutation.LocalLanguageAllowedAnswerPaper(); ok {
		if err := exampapers.LocalLanguageAllowedAnswerPaperValidator(v); err != nil {
			return &ValidationError{Name: "localLanguageAllowedAnswerPaper", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.localLanguageAllowedAnswerPaper": %w`, err)}
		}
	}
	if v, ok := epu.mutation.OrderNumber(); ok {
		if err := exampapers.OrderNumberValidator(v); err != nil {
			return &ValidationError{Name: "OrderNumber", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.OrderNumber": %w`, err)}
		}
	}
	if v, ok := epu.mutation.PaperStatus(); ok {
		if err := exampapers.PaperStatusValidator(v); err != nil {
			return &ValidationError{Name: "PaperStatus", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.PaperStatus": %w`, err)}
		}
	}
	return nil
}

func (epu *ExamPapersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := epu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(exampapers.Table, exampapers.Columns, sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32))
	if ps := epu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epu.mutation.PaperDescription(); ok {
		_spec.SetField(exampapers.FieldPaperDescription, field.TypeString, value)
	}
	if value, ok := epu.mutation.CompetitiveQualifying(); ok {
		_spec.SetField(exampapers.FieldCompetitiveQualifying, field.TypeString, value)
	}
	if value, ok := epu.mutation.ExceptionForDisability(); ok {
		_spec.SetField(exampapers.FieldExceptionForDisability, field.TypeString, value)
	}
	if value, ok := epu.mutation.MaximumMarks(); ok {
		_spec.SetField(exampapers.FieldMaximumMarks, field.TypeInt, value)
	}
	if value, ok := epu.mutation.AddedMaximumMarks(); ok {
		_spec.AddField(exampapers.FieldMaximumMarks, field.TypeInt, value)
	}
	if value, ok := epu.mutation.Duration(); ok {
		_spec.SetField(exampapers.FieldDuration, field.TypeInt, value)
	}
	if value, ok := epu.mutation.AddedDuration(); ok {
		_spec.AddField(exampapers.FieldDuration, field.TypeInt, value)
	}
	if value, ok := epu.mutation.LocalLanguageAllowedQuestionPaper(); ok {
		_spec.SetField(exampapers.FieldLocalLanguageAllowedQuestionPaper, field.TypeString, value)
	}
	if value, ok := epu.mutation.LocalLanguageAllowedAnswerPaper(); ok {
		_spec.SetField(exampapers.FieldLocalLanguageAllowedAnswerPaper, field.TypeString, value)
	}
	if value, ok := epu.mutation.OrderNumber(); ok {
		_spec.SetField(exampapers.FieldOrderNumber, field.TypeString, value)
	}
	if value, ok := epu.mutation.PaperStatus(); ok {
		_spec.SetField(exampapers.FieldPaperStatus, field.TypeString, value)
	}
	if value, ok := epu.mutation.CalendarCode(); ok {
		_spec.SetField(exampapers.FieldCalendarCode, field.TypeInt32, value)
	}
	if value, ok := epu.mutation.AddedCalendarCode(); ok {
		_spec.AddField(exampapers.FieldCalendarCode, field.TypeInt32, value)
	}
	if epu.mutation.CalendarCodeCleared() {
		_spec.ClearField(exampapers.FieldCalendarCode, field.TypeInt32)
	}
	if value, ok := epu.mutation.CreatedDate(); ok {
		_spec.SetField(exampapers.FieldCreatedDate, field.TypeTime, value)
	}
	if epu.mutation.CentersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.CentersTable,
			Columns: []string{exampapers.CentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.RemovedCentersIDs(); len(nodes) > 0 && !epu.mutation.CentersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.CentersTable,
			Columns: []string{exampapers.CentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.CentersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.CentersTable,
			Columns: []string{exampapers.CentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epu.mutation.ExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exampapers.ExamTable,
			Columns: []string{exampapers.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.ExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exampapers.ExamTable,
			Columns: []string{exampapers.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epu.mutation.ExampapersTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.ExampapersTypesTable,
			Columns: []string{exampapers.ExampapersTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(papertypes.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.RemovedExampapersTypesIDs(); len(nodes) > 0 && !epu.mutation.ExampapersTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.ExampapersTypesTable,
			Columns: []string{exampapers.ExampapersTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(papertypes.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.ExampapersTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.ExampapersTypesTable,
			Columns: []string{exampapers.ExampapersTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(papertypes.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epu.mutation.PapersRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.PapersRefTable,
			Columns: []string{exampapers.PapersRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.RemovedPapersRefIDs(); len(nodes) > 0 && !epu.mutation.PapersRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.PapersRefTable,
			Columns: []string{exampapers.PapersRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.PapersRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.PapersRefTable,
			Columns: []string{exampapers.PapersRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, epu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exampapers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	epu.mutation.done = true
	return n, nil
}

// ExamPapersUpdateOne is the builder for updating a single ExamPapers entity.
type ExamPapersUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExamPapersMutation
}

// SetPaperDescription sets the "PaperDescription" field.
func (epuo *ExamPapersUpdateOne) SetPaperDescription(s string) *ExamPapersUpdateOne {
	epuo.mutation.SetPaperDescription(s)
	return epuo
}

// SetExamCode sets the "ExamCode" field.
func (epuo *ExamPapersUpdateOne) SetExamCode(i int32) *ExamPapersUpdateOne {
	epuo.mutation.SetExamCode(i)
	return epuo
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableExamCode(i *int32) *ExamPapersUpdateOne {
	if i != nil {
		epuo.SetExamCode(*i)
	}
	return epuo
}

// ClearExamCode clears the value of the "ExamCode" field.
func (epuo *ExamPapersUpdateOne) ClearExamCode() *ExamPapersUpdateOne {
	epuo.mutation.ClearExamCode()
	return epuo
}

// SetCompetitiveQualifying sets the "competitiveQualifying" field.
func (epuo *ExamPapersUpdateOne) SetCompetitiveQualifying(s string) *ExamPapersUpdateOne {
	epuo.mutation.SetCompetitiveQualifying(s)
	return epuo
}

// SetExceptionForDisability sets the "exceptionForDisability" field.
func (epuo *ExamPapersUpdateOne) SetExceptionForDisability(s string) *ExamPapersUpdateOne {
	epuo.mutation.SetExceptionForDisability(s)
	return epuo
}

// SetMaximumMarks sets the "MaximumMarks" field.
func (epuo *ExamPapersUpdateOne) SetMaximumMarks(i int) *ExamPapersUpdateOne {
	epuo.mutation.ResetMaximumMarks()
	epuo.mutation.SetMaximumMarks(i)
	return epuo
}

// AddMaximumMarks adds i to the "MaximumMarks" field.
func (epuo *ExamPapersUpdateOne) AddMaximumMarks(i int) *ExamPapersUpdateOne {
	epuo.mutation.AddMaximumMarks(i)
	return epuo
}

// SetDuration sets the "Duration" field.
func (epuo *ExamPapersUpdateOne) SetDuration(i int) *ExamPapersUpdateOne {
	epuo.mutation.ResetDuration()
	epuo.mutation.SetDuration(i)
	return epuo
}

// AddDuration adds i to the "Duration" field.
func (epuo *ExamPapersUpdateOne) AddDuration(i int) *ExamPapersUpdateOne {
	epuo.mutation.AddDuration(i)
	return epuo
}

// SetLocalLanguageAllowedQuestionPaper sets the "localLanguageAllowedQuestionPaper" field.
func (epuo *ExamPapersUpdateOne) SetLocalLanguageAllowedQuestionPaper(s string) *ExamPapersUpdateOne {
	epuo.mutation.SetLocalLanguageAllowedQuestionPaper(s)
	return epuo
}

// SetLocalLanguageAllowedAnswerPaper sets the "localLanguageAllowedAnswerPaper" field.
func (epuo *ExamPapersUpdateOne) SetLocalLanguageAllowedAnswerPaper(s string) *ExamPapersUpdateOne {
	epuo.mutation.SetLocalLanguageAllowedAnswerPaper(s)
	return epuo
}

// SetOrderNumber sets the "OrderNumber" field.
func (epuo *ExamPapersUpdateOne) SetOrderNumber(s string) *ExamPapersUpdateOne {
	epuo.mutation.SetOrderNumber(s)
	return epuo
}

// SetPaperStatus sets the "PaperStatus" field.
func (epuo *ExamPapersUpdateOne) SetPaperStatus(s string) *ExamPapersUpdateOne {
	epuo.mutation.SetPaperStatus(s)
	return epuo
}

// SetCalendarCode sets the "CalendarCode" field.
func (epuo *ExamPapersUpdateOne) SetCalendarCode(i int32) *ExamPapersUpdateOne {
	epuo.mutation.ResetCalendarCode()
	epuo.mutation.SetCalendarCode(i)
	return epuo
}

// SetNillableCalendarCode sets the "CalendarCode" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableCalendarCode(i *int32) *ExamPapersUpdateOne {
	if i != nil {
		epuo.SetCalendarCode(*i)
	}
	return epuo
}

// AddCalendarCode adds i to the "CalendarCode" field.
func (epuo *ExamPapersUpdateOne) AddCalendarCode(i int32) *ExamPapersUpdateOne {
	epuo.mutation.AddCalendarCode(i)
	return epuo
}

// ClearCalendarCode clears the value of the "CalendarCode" field.
func (epuo *ExamPapersUpdateOne) ClearCalendarCode() *ExamPapersUpdateOne {
	epuo.mutation.ClearCalendarCode()
	return epuo
}

// SetCreatedDate sets the "CreatedDate" field.
func (epuo *ExamPapersUpdateOne) SetCreatedDate(t time.Time) *ExamPapersUpdateOne {
	epuo.mutation.SetCreatedDate(t)
	return epuo
}

// AddCenterIDs adds the "centers" edge to the Center entity by IDs.
func (epuo *ExamPapersUpdateOne) AddCenterIDs(ids ...int32) *ExamPapersUpdateOne {
	epuo.mutation.AddCenterIDs(ids...)
	return epuo
}

// AddCenters adds the "centers" edges to the Center entity.
func (epuo *ExamPapersUpdateOne) AddCenters(c ...*Center) *ExamPapersUpdateOne {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return epuo.AddCenterIDs(ids...)
}

// SetExamID sets the "exam" edge to the Exam entity by ID.
func (epuo *ExamPapersUpdateOne) SetExamID(id int32) *ExamPapersUpdateOne {
	epuo.mutation.SetExamID(id)
	return epuo
}

// SetNillableExamID sets the "exam" edge to the Exam entity by ID if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableExamID(id *int32) *ExamPapersUpdateOne {
	if id != nil {
		epuo = epuo.SetExamID(*id)
	}
	return epuo
}

// SetExam sets the "exam" edge to the Exam entity.
func (epuo *ExamPapersUpdateOne) SetExam(e *Exam) *ExamPapersUpdateOne {
	return epuo.SetExamID(e.ID)
}

// AddExampapersTypeIDs adds the "exampapers_types" edge to the PaperTypes entity by IDs.
func (epuo *ExamPapersUpdateOne) AddExampapersTypeIDs(ids ...int32) *ExamPapersUpdateOne {
	epuo.mutation.AddExampapersTypeIDs(ids...)
	return epuo
}

// AddExampapersTypes adds the "exampapers_types" edges to the PaperTypes entity.
func (epuo *ExamPapersUpdateOne) AddExampapersTypes(p ...*PaperTypes) *ExamPapersUpdateOne {
	ids := make([]int32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return epuo.AddExampapersTypeIDs(ids...)
}

// AddPapersRefIDs adds the "papers_ref" edge to the ExamCalendar entity by IDs.
func (epuo *ExamPapersUpdateOne) AddPapersRefIDs(ids ...int32) *ExamPapersUpdateOne {
	epuo.mutation.AddPapersRefIDs(ids...)
	return epuo
}

// AddPapersRef adds the "papers_ref" edges to the ExamCalendar entity.
func (epuo *ExamPapersUpdateOne) AddPapersRef(e ...*ExamCalendar) *ExamPapersUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.AddPapersRefIDs(ids...)
}

// Mutation returns the ExamPapersMutation object of the builder.
func (epuo *ExamPapersUpdateOne) Mutation() *ExamPapersMutation {
	return epuo.mutation
}

// ClearCenters clears all "centers" edges to the Center entity.
func (epuo *ExamPapersUpdateOne) ClearCenters() *ExamPapersUpdateOne {
	epuo.mutation.ClearCenters()
	return epuo
}

// RemoveCenterIDs removes the "centers" edge to Center entities by IDs.
func (epuo *ExamPapersUpdateOne) RemoveCenterIDs(ids ...int32) *ExamPapersUpdateOne {
	epuo.mutation.RemoveCenterIDs(ids...)
	return epuo
}

// RemoveCenters removes "centers" edges to Center entities.
func (epuo *ExamPapersUpdateOne) RemoveCenters(c ...*Center) *ExamPapersUpdateOne {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return epuo.RemoveCenterIDs(ids...)
}

// ClearExam clears the "exam" edge to the Exam entity.
func (epuo *ExamPapersUpdateOne) ClearExam() *ExamPapersUpdateOne {
	epuo.mutation.ClearExam()
	return epuo
}

// ClearExampapersTypes clears all "exampapers_types" edges to the PaperTypes entity.
func (epuo *ExamPapersUpdateOne) ClearExampapersTypes() *ExamPapersUpdateOne {
	epuo.mutation.ClearExampapersTypes()
	return epuo
}

// RemoveExampapersTypeIDs removes the "exampapers_types" edge to PaperTypes entities by IDs.
func (epuo *ExamPapersUpdateOne) RemoveExampapersTypeIDs(ids ...int32) *ExamPapersUpdateOne {
	epuo.mutation.RemoveExampapersTypeIDs(ids...)
	return epuo
}

// RemoveExampapersTypes removes "exampapers_types" edges to PaperTypes entities.
func (epuo *ExamPapersUpdateOne) RemoveExampapersTypes(p ...*PaperTypes) *ExamPapersUpdateOne {
	ids := make([]int32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return epuo.RemoveExampapersTypeIDs(ids...)
}

// ClearPapersRef clears all "papers_ref" edges to the ExamCalendar entity.
func (epuo *ExamPapersUpdateOne) ClearPapersRef() *ExamPapersUpdateOne {
	epuo.mutation.ClearPapersRef()
	return epuo
}

// RemovePapersRefIDs removes the "papers_ref" edge to ExamCalendar entities by IDs.
func (epuo *ExamPapersUpdateOne) RemovePapersRefIDs(ids ...int32) *ExamPapersUpdateOne {
	epuo.mutation.RemovePapersRefIDs(ids...)
	return epuo
}

// RemovePapersRef removes "papers_ref" edges to ExamCalendar entities.
func (epuo *ExamPapersUpdateOne) RemovePapersRef(e ...*ExamCalendar) *ExamPapersUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.RemovePapersRefIDs(ids...)
}

// Where appends a list predicates to the ExamPapersUpdate builder.
func (epuo *ExamPapersUpdateOne) Where(ps ...predicate.ExamPapers) *ExamPapersUpdateOne {
	epuo.mutation.Where(ps...)
	return epuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (epuo *ExamPapersUpdateOne) Select(field string, fields ...string) *ExamPapersUpdateOne {
	epuo.fields = append([]string{field}, fields...)
	return epuo
}

// Save executes the query and returns the updated ExamPapers entity.
func (epuo *ExamPapersUpdateOne) Save(ctx context.Context) (*ExamPapers, error) {
	return withHooks(ctx, epuo.sqlSave, epuo.mutation, epuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epuo *ExamPapersUpdateOne) SaveX(ctx context.Context) *ExamPapers {
	node, err := epuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (epuo *ExamPapersUpdateOne) Exec(ctx context.Context) error {
	_, err := epuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epuo *ExamPapersUpdateOne) ExecX(ctx context.Context) {
	if err := epuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (epuo *ExamPapersUpdateOne) check() error {
	if v, ok := epuo.mutation.PaperDescription(); ok {
		if err := exampapers.PaperDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "PaperDescription", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.PaperDescription": %w`, err)}
		}
	}
	if v, ok := epuo.mutation.CompetitiveQualifying(); ok {
		if err := exampapers.CompetitiveQualifyingValidator(v); err != nil {
			return &ValidationError{Name: "competitiveQualifying", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.competitiveQualifying": %w`, err)}
		}
	}
	if v, ok := epuo.mutation.ExceptionForDisability(); ok {
		if err := exampapers.ExceptionForDisabilityValidator(v); err != nil {
			return &ValidationError{Name: "exceptionForDisability", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.exceptionForDisability": %w`, err)}
		}
	}
	if v, ok := epuo.mutation.MaximumMarks(); ok {
		if err := exampapers.MaximumMarksValidator(v); err != nil {
			return &ValidationError{Name: "MaximumMarks", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.MaximumMarks": %w`, err)}
		}
	}
	if v, ok := epuo.mutation.Duration(); ok {
		if err := exampapers.DurationValidator(v); err != nil {
			return &ValidationError{Name: "Duration", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.Duration": %w`, err)}
		}
	}
	if v, ok := epuo.mutation.LocalLanguageAllowedQuestionPaper(); ok {
		if err := exampapers.LocalLanguageAllowedQuestionPaperValidator(v); err != nil {
			return &ValidationError{Name: "localLanguageAllowedQuestionPaper", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.localLanguageAllowedQuestionPaper": %w`, err)}
		}
	}
	if v, ok := epuo.mutation.LocalLanguageAllowedAnswerPaper(); ok {
		if err := exampapers.LocalLanguageAllowedAnswerPaperValidator(v); err != nil {
			return &ValidationError{Name: "localLanguageAllowedAnswerPaper", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.localLanguageAllowedAnswerPaper": %w`, err)}
		}
	}
	if v, ok := epuo.mutation.OrderNumber(); ok {
		if err := exampapers.OrderNumberValidator(v); err != nil {
			return &ValidationError{Name: "OrderNumber", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.OrderNumber": %w`, err)}
		}
	}
	if v, ok := epuo.mutation.PaperStatus(); ok {
		if err := exampapers.PaperStatusValidator(v); err != nil {
			return &ValidationError{Name: "PaperStatus", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.PaperStatus": %w`, err)}
		}
	}
	return nil
}

func (epuo *ExamPapersUpdateOne) sqlSave(ctx context.Context) (_node *ExamPapers, err error) {
	if err := epuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(exampapers.Table, exampapers.Columns, sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32))
	id, ok := epuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExamPapers.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := epuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exampapers.FieldID)
		for _, f := range fields {
			if !exampapers.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exampapers.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := epuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epuo.mutation.PaperDescription(); ok {
		_spec.SetField(exampapers.FieldPaperDescription, field.TypeString, value)
	}
	if value, ok := epuo.mutation.CompetitiveQualifying(); ok {
		_spec.SetField(exampapers.FieldCompetitiveQualifying, field.TypeString, value)
	}
	if value, ok := epuo.mutation.ExceptionForDisability(); ok {
		_spec.SetField(exampapers.FieldExceptionForDisability, field.TypeString, value)
	}
	if value, ok := epuo.mutation.MaximumMarks(); ok {
		_spec.SetField(exampapers.FieldMaximumMarks, field.TypeInt, value)
	}
	if value, ok := epuo.mutation.AddedMaximumMarks(); ok {
		_spec.AddField(exampapers.FieldMaximumMarks, field.TypeInt, value)
	}
	if value, ok := epuo.mutation.Duration(); ok {
		_spec.SetField(exampapers.FieldDuration, field.TypeInt, value)
	}
	if value, ok := epuo.mutation.AddedDuration(); ok {
		_spec.AddField(exampapers.FieldDuration, field.TypeInt, value)
	}
	if value, ok := epuo.mutation.LocalLanguageAllowedQuestionPaper(); ok {
		_spec.SetField(exampapers.FieldLocalLanguageAllowedQuestionPaper, field.TypeString, value)
	}
	if value, ok := epuo.mutation.LocalLanguageAllowedAnswerPaper(); ok {
		_spec.SetField(exampapers.FieldLocalLanguageAllowedAnswerPaper, field.TypeString, value)
	}
	if value, ok := epuo.mutation.OrderNumber(); ok {
		_spec.SetField(exampapers.FieldOrderNumber, field.TypeString, value)
	}
	if value, ok := epuo.mutation.PaperStatus(); ok {
		_spec.SetField(exampapers.FieldPaperStatus, field.TypeString, value)
	}
	if value, ok := epuo.mutation.CalendarCode(); ok {
		_spec.SetField(exampapers.FieldCalendarCode, field.TypeInt32, value)
	}
	if value, ok := epuo.mutation.AddedCalendarCode(); ok {
		_spec.AddField(exampapers.FieldCalendarCode, field.TypeInt32, value)
	}
	if epuo.mutation.CalendarCodeCleared() {
		_spec.ClearField(exampapers.FieldCalendarCode, field.TypeInt32)
	}
	if value, ok := epuo.mutation.CreatedDate(); ok {
		_spec.SetField(exampapers.FieldCreatedDate, field.TypeTime, value)
	}
	if epuo.mutation.CentersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.CentersTable,
			Columns: []string{exampapers.CentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.RemovedCentersIDs(); len(nodes) > 0 && !epuo.mutation.CentersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.CentersTable,
			Columns: []string{exampapers.CentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.CentersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.CentersTable,
			Columns: []string{exampapers.CentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epuo.mutation.ExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exampapers.ExamTable,
			Columns: []string{exampapers.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.ExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exampapers.ExamTable,
			Columns: []string{exampapers.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epuo.mutation.ExampapersTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.ExampapersTypesTable,
			Columns: []string{exampapers.ExampapersTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(papertypes.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.RemovedExampapersTypesIDs(); len(nodes) > 0 && !epuo.mutation.ExampapersTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.ExampapersTypesTable,
			Columns: []string{exampapers.ExampapersTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(papertypes.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.ExampapersTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.ExampapersTypesTable,
			Columns: []string{exampapers.ExampapersTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(papertypes.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epuo.mutation.PapersRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.PapersRefTable,
			Columns: []string{exampapers.PapersRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.RemovedPapersRefIDs(); len(nodes) > 0 && !epuo.mutation.PapersRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.PapersRefTable,
			Columns: []string{exampapers.PapersRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.PapersRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.PapersRefTable,
			Columns: []string{exampapers.PapersRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ExamPapers{config: epuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, epuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exampapers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	epuo.mutation.done = true
	return _node, nil
}
