// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/exameligibility"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ExamEligibility is the model entity for the ExamEligibility schema.
type ExamEligibility struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// Examcode holds the value of the "Examcode" field.
	Examcode int32 `json:"Examcode,omitempty"`
	// AgeCriteria holds the value of the "AgeCriteria" field.
	AgeCriteria string `json:"AgeCriteria,omitempty"`
	// ServiceCriteria holds the value of the "ServiceCriteria" field.
	ServiceCriteria string `json:"ServiceCriteria,omitempty"`
	// DrivingLicenseCriteria holds the value of the "DrivingLicenseCriteria" field.
	DrivingLicenseCriteria string `json:"DrivingLicenseCriteria,omitempty"`
	// NotifyCode holds the value of the "NotifyCode" field.
	NotifyCode int32 `json:"NotifyCode,omitempty"`
	// EmployeeCadreID holds the value of the "EmployeeCadreID" field.
	EmployeeCadreID int32 `json:"EmployeeCadreID,omitempty"`
	// CategoryID holds the value of the "CategoryID" field.
	CategoryID int32 `json:"CategoryID,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExamEligibilityQuery when eager-loading is set.
	Edges        ExamEligibilityEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ExamEligibilityEdges holds the relations/edges for other nodes in the graph.
type ExamEligibilityEdges struct {
	// AgeEligibilities holds the value of the age_eligibilities edge.
	AgeEligibilities []*AgeEligibility `json:"age_eligibilities,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AgeEligibilitiesOrErr returns the AgeEligibilities value or an error if the edge
// was not loaded in eager-loading.
func (e ExamEligibilityEdges) AgeEligibilitiesOrErr() ([]*AgeEligibility, error) {
	if e.loadedTypes[0] {
		return e.AgeEligibilities, nil
	}
	return nil, &NotLoadedError{edge: "age_eligibilities"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ExamEligibility) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case exameligibility.FieldID, exameligibility.FieldExamcode, exameligibility.FieldNotifyCode, exameligibility.FieldEmployeeCadreID, exameligibility.FieldCategoryID:
			values[i] = new(sql.NullInt64)
		case exameligibility.FieldAgeCriteria, exameligibility.FieldServiceCriteria, exameligibility.FieldDrivingLicenseCriteria:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ExamEligibility fields.
func (ee *ExamEligibility) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case exameligibility.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ee.ID = int32(value.Int64)
		case exameligibility.FieldExamcode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Examcode", values[i])
			} else if value.Valid {
				ee.Examcode = int32(value.Int64)
			}
		case exameligibility.FieldAgeCriteria:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AgeCriteria", values[i])
			} else if value.Valid {
				ee.AgeCriteria = value.String
			}
		case exameligibility.FieldServiceCriteria:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ServiceCriteria", values[i])
			} else if value.Valid {
				ee.ServiceCriteria = value.String
			}
		case exameligibility.FieldDrivingLicenseCriteria:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DrivingLicenseCriteria", values[i])
			} else if value.Valid {
				ee.DrivingLicenseCriteria = value.String
			}
		case exameligibility.FieldNotifyCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field NotifyCode", values[i])
			} else if value.Valid {
				ee.NotifyCode = int32(value.Int64)
			}
		case exameligibility.FieldEmployeeCadreID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeCadreID", values[i])
			} else if value.Valid {
				ee.EmployeeCadreID = int32(value.Int64)
			}
		case exameligibility.FieldCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CategoryID", values[i])
			} else if value.Valid {
				ee.CategoryID = int32(value.Int64)
			}
		default:
			ee.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ExamEligibility.
// This includes values selected through modifiers, order, etc.
func (ee *ExamEligibility) Value(name string) (ent.Value, error) {
	return ee.selectValues.Get(name)
}

// QueryAgeEligibilities queries the "age_eligibilities" edge of the ExamEligibility entity.
func (ee *ExamEligibility) QueryAgeEligibilities() *AgeEligibilityQuery {
	return NewExamEligibilityClient(ee.config).QueryAgeEligibilities(ee)
}

// Update returns a builder for updating this ExamEligibility.
// Note that you need to call ExamEligibility.Unwrap() before calling this method if this ExamEligibility
// was returned from a transaction, and the transaction was committed or rolled back.
func (ee *ExamEligibility) Update() *ExamEligibilityUpdateOne {
	return NewExamEligibilityClient(ee.config).UpdateOne(ee)
}

// Unwrap unwraps the ExamEligibility entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ee *ExamEligibility) Unwrap() *ExamEligibility {
	_tx, ok := ee.config.driver.(*txDriver)
	if !ok {
		panic("ent: ExamEligibility is not a transactional entity")
	}
	ee.config.driver = _tx.drv
	return ee
}

// String implements the fmt.Stringer.
func (ee *ExamEligibility) String() string {
	var builder strings.Builder
	builder.WriteString("ExamEligibility(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ee.ID))
	builder.WriteString("Examcode=")
	builder.WriteString(fmt.Sprintf("%v", ee.Examcode))
	builder.WriteString(", ")
	builder.WriteString("AgeCriteria=")
	builder.WriteString(ee.AgeCriteria)
	builder.WriteString(", ")
	builder.WriteString("ServiceCriteria=")
	builder.WriteString(ee.ServiceCriteria)
	builder.WriteString(", ")
	builder.WriteString("DrivingLicenseCriteria=")
	builder.WriteString(ee.DrivingLicenseCriteria)
	builder.WriteString(", ")
	builder.WriteString("NotifyCode=")
	builder.WriteString(fmt.Sprintf("%v", ee.NotifyCode))
	builder.WriteString(", ")
	builder.WriteString("EmployeeCadreID=")
	builder.WriteString(fmt.Sprintf("%v", ee.EmployeeCadreID))
	builder.WriteString(", ")
	builder.WriteString("CategoryID=")
	builder.WriteString(fmt.Sprintf("%v", ee.CategoryID))
	builder.WriteByte(')')
	return builder.String()
}

// ExamEligibilities is a parsable slice of ExamEligibility.
type ExamEligibilities []*ExamEligibility
