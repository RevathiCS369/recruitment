// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/exam_pm"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamPMUpdate is the builder for updating Exam_PM entities.
type ExamPMUpdate struct {
	config
	hooks    []Hook
	mutation *ExamPMMutation
}

// Where appends a list predicates to the ExamPMUpdate builder.
func (epu *ExamPMUpdate) Where(ps ...predicate.Exam_PM) *ExamPMUpdate {
	epu.mutation.Where(ps...)
	return epu
}

// SetExamNameCode sets the "ExamNameCode" field.
func (epu *ExamPMUpdate) SetExamNameCode(s string) *ExamPMUpdate {
	epu.mutation.SetExamNameCode(s)
	return epu
}

// SetNillableExamNameCode sets the "ExamNameCode" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableExamNameCode(s *string) *ExamPMUpdate {
	if s != nil {
		epu.SetExamNameCode(*s)
	}
	return epu
}

// ClearExamNameCode clears the value of the "ExamNameCode" field.
func (epu *ExamPMUpdate) ClearExamNameCode() *ExamPMUpdate {
	epu.mutation.ClearExamNameCode()
	return epu
}

// SetExamName sets the "ExamName" field.
func (epu *ExamPMUpdate) SetExamName(s string) *ExamPMUpdate {
	epu.mutation.SetExamName(s)
	return epu
}

// SetExamType sets the "ExamType" field.
func (epu *ExamPMUpdate) SetExamType(s string) *ExamPMUpdate {
	epu.mutation.SetExamType(s)
	return epu
}

// SetNotificationCode sets the "NotificationCode" field.
func (epu *ExamPMUpdate) SetNotificationCode(i int32) *ExamPMUpdate {
	epu.mutation.ResetNotificationCode()
	epu.mutation.SetNotificationCode(i)
	return epu
}

// SetNillableNotificationCode sets the "NotificationCode" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableNotificationCode(i *int32) *ExamPMUpdate {
	if i != nil {
		epu.SetNotificationCode(*i)
	}
	return epu
}

// AddNotificationCode adds i to the "NotificationCode" field.
func (epu *ExamPMUpdate) AddNotificationCode(i int32) *ExamPMUpdate {
	epu.mutation.AddNotificationCode(i)
	return epu
}

// ClearNotificationCode clears the value of the "NotificationCode" field.
func (epu *ExamPMUpdate) ClearNotificationCode() *ExamPMUpdate {
	epu.mutation.ClearNotificationCode()
	return epu
}

// SetConductedBy sets the "ConductedBy" field.
func (epu *ExamPMUpdate) SetConductedBy(s string) *ExamPMUpdate {
	epu.mutation.SetConductedBy(s)
	return epu
}

// SetNodalOffice sets the "NodalOffice" field.
func (epu *ExamPMUpdate) SetNodalOffice(s string) *ExamPMUpdate {
	epu.mutation.SetNodalOffice(s)
	return epu
}

// SetNillableNodalOffice sets the "NodalOffice" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableNodalOffice(s *string) *ExamPMUpdate {
	if s != nil {
		epu.SetNodalOffice(*s)
	}
	return epu
}

// ClearNodalOffice clears the value of the "NodalOffice" field.
func (epu *ExamPMUpdate) ClearNodalOffice() *ExamPMUpdate {
	epu.mutation.ClearNodalOffice()
	return epu
}

// SetCalendarCode sets the "CalendarCode" field.
func (epu *ExamPMUpdate) SetCalendarCode(i int32) *ExamPMUpdate {
	epu.mutation.ResetCalendarCode()
	epu.mutation.SetCalendarCode(i)
	return epu
}

// SetNillableCalendarCode sets the "CalendarCode" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableCalendarCode(i *int32) *ExamPMUpdate {
	if i != nil {
		epu.SetCalendarCode(*i)
	}
	return epu
}

// AddCalendarCode adds i to the "CalendarCode" field.
func (epu *ExamPMUpdate) AddCalendarCode(i int32) *ExamPMUpdate {
	epu.mutation.AddCalendarCode(i)
	return epu
}

// ClearCalendarCode clears the value of the "CalendarCode" field.
func (epu *ExamPMUpdate) ClearCalendarCode() *ExamPMUpdate {
	epu.mutation.ClearCalendarCode()
	return epu
}

// SetPaperCode sets the "PaperCode" field.
func (epu *ExamPMUpdate) SetPaperCode(i int32) *ExamPMUpdate {
	epu.mutation.ResetPaperCode()
	epu.mutation.SetPaperCode(i)
	return epu
}

// SetNillablePaperCode sets the "PaperCode" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillablePaperCode(i *int32) *ExamPMUpdate {
	if i != nil {
		epu.SetPaperCode(*i)
	}
	return epu
}

// AddPaperCode adds i to the "PaperCode" field.
func (epu *ExamPMUpdate) AddPaperCode(i int32) *ExamPMUpdate {
	epu.mutation.AddPaperCode(i)
	return epu
}

// ClearPaperCode clears the value of the "PaperCode" field.
func (epu *ExamPMUpdate) ClearPaperCode() *ExamPMUpdate {
	epu.mutation.ClearPaperCode()
	return epu
}

// SetEligibleCadre sets the "EligibleCadre" field.
func (epu *ExamPMUpdate) SetEligibleCadre(s string) *ExamPMUpdate {
	epu.mutation.SetEligibleCadre(s)
	return epu
}

// SetNillableEligibleCadre sets the "EligibleCadre" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableEligibleCadre(s *string) *ExamPMUpdate {
	if s != nil {
		epu.SetEligibleCadre(*s)
	}
	return epu
}

// ClearEligibleCadre clears the value of the "EligibleCadre" field.
func (epu *ExamPMUpdate) ClearEligibleCadre() *ExamPMUpdate {
	epu.mutation.ClearEligibleCadre()
	return epu
}

// SetEligiblePost1 sets the "EligiblePost1" field.
func (epu *ExamPMUpdate) SetEligiblePost1(s string) *ExamPMUpdate {
	epu.mutation.SetEligiblePost1(s)
	return epu
}

// SetNillableEligiblePost1 sets the "EligiblePost1" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableEligiblePost1(s *string) *ExamPMUpdate {
	if s != nil {
		epu.SetEligiblePost1(*s)
	}
	return epu
}

// ClearEligiblePost1 clears the value of the "EligiblePost1" field.
func (epu *ExamPMUpdate) ClearEligiblePost1() *ExamPMUpdate {
	epu.mutation.ClearEligiblePost1()
	return epu
}

// SetEligiblePost2 sets the "EligiblePost2" field.
func (epu *ExamPMUpdate) SetEligiblePost2(s string) *ExamPMUpdate {
	epu.mutation.SetEligiblePost2(s)
	return epu
}

// SetNillableEligiblePost2 sets the "EligiblePost2" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableEligiblePost2(s *string) *ExamPMUpdate {
	if s != nil {
		epu.SetEligiblePost2(*s)
	}
	return epu
}

// ClearEligiblePost2 clears the value of the "EligiblePost2" field.
func (epu *ExamPMUpdate) ClearEligiblePost2() *ExamPMUpdate {
	epu.mutation.ClearEligiblePost2()
	return epu
}

// SetEligiblePost3 sets the "EligiblePost3" field.
func (epu *ExamPMUpdate) SetEligiblePost3(s string) *ExamPMUpdate {
	epu.mutation.SetEligiblePost3(s)
	return epu
}

// SetNillableEligiblePost3 sets the "EligiblePost3" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableEligiblePost3(s *string) *ExamPMUpdate {
	if s != nil {
		epu.SetEligiblePost3(*s)
	}
	return epu
}

// ClearEligiblePost3 clears the value of the "EligiblePost3" field.
func (epu *ExamPMUpdate) ClearEligiblePost3() *ExamPMUpdate {
	epu.mutation.ClearEligiblePost3()
	return epu
}

// SetEligiblePost4 sets the "EligiblePost4" field.
func (epu *ExamPMUpdate) SetEligiblePost4(s string) *ExamPMUpdate {
	epu.mutation.SetEligiblePost4(s)
	return epu
}

// SetNillableEligiblePost4 sets the "EligiblePost4" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableEligiblePost4(s *string) *ExamPMUpdate {
	if s != nil {
		epu.SetEligiblePost4(*s)
	}
	return epu
}

// ClearEligiblePost4 clears the value of the "EligiblePost4" field.
func (epu *ExamPMUpdate) ClearEligiblePost4() *ExamPMUpdate {
	epu.mutation.ClearEligiblePost4()
	return epu
}

// SetEligiblePost5 sets the "EligiblePost5" field.
func (epu *ExamPMUpdate) SetEligiblePost5(s string) *ExamPMUpdate {
	epu.mutation.SetEligiblePost5(s)
	return epu
}

// SetNillableEligiblePost5 sets the "EligiblePost5" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableEligiblePost5(s *string) *ExamPMUpdate {
	if s != nil {
		epu.SetEligiblePost5(*s)
	}
	return epu
}

// ClearEligiblePost5 clears the value of the "EligiblePost5" field.
func (epu *ExamPMUpdate) ClearEligiblePost5() *ExamPMUpdate {
	epu.mutation.ClearEligiblePost5()
	return epu
}

// SetExamPost1 sets the "ExamPost1" field.
func (epu *ExamPMUpdate) SetExamPost1(s string) *ExamPMUpdate {
	epu.mutation.SetExamPost1(s)
	return epu
}

// SetNillableExamPost1 sets the "ExamPost1" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableExamPost1(s *string) *ExamPMUpdate {
	if s != nil {
		epu.SetExamPost1(*s)
	}
	return epu
}

// ClearExamPost1 clears the value of the "ExamPost1" field.
func (epu *ExamPMUpdate) ClearExamPost1() *ExamPMUpdate {
	epu.mutation.ClearExamPost1()
	return epu
}

// SetExamPost2 sets the "ExamPost2" field.
func (epu *ExamPMUpdate) SetExamPost2(s string) *ExamPMUpdate {
	epu.mutation.SetExamPost2(s)
	return epu
}

// SetNillableExamPost2 sets the "ExamPost2" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableExamPost2(s *string) *ExamPMUpdate {
	if s != nil {
		epu.SetExamPost2(*s)
	}
	return epu
}

// ClearExamPost2 clears the value of the "ExamPost2" field.
func (epu *ExamPMUpdate) ClearExamPost2() *ExamPMUpdate {
	epu.mutation.ClearExamPost2()
	return epu
}

// SetExamPost3 sets the "ExamPost3" field.
func (epu *ExamPMUpdate) SetExamPost3(s string) *ExamPMUpdate {
	epu.mutation.SetExamPost3(s)
	return epu
}

// SetNillableExamPost3 sets the "ExamPost3" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableExamPost3(s *string) *ExamPMUpdate {
	if s != nil {
		epu.SetExamPost3(*s)
	}
	return epu
}

// ClearExamPost3 clears the value of the "ExamPost3" field.
func (epu *ExamPMUpdate) ClearExamPost3() *ExamPMUpdate {
	epu.mutation.ClearExamPost3()
	return epu
}

// SetExamPost4 sets the "ExamPost4" field.
func (epu *ExamPMUpdate) SetExamPost4(s string) *ExamPMUpdate {
	epu.mutation.SetExamPost4(s)
	return epu
}

// SetNillableExamPost4 sets the "ExamPost4" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableExamPost4(s *string) *ExamPMUpdate {
	if s != nil {
		epu.SetExamPost4(*s)
	}
	return epu
}

// ClearExamPost4 clears the value of the "ExamPost4" field.
func (epu *ExamPMUpdate) ClearExamPost4() *ExamPMUpdate {
	epu.mutation.ClearExamPost4()
	return epu
}

// SetExamPost5 sets the "ExamPost5" field.
func (epu *ExamPMUpdate) SetExamPost5(s string) *ExamPMUpdate {
	epu.mutation.SetExamPost5(s)
	return epu
}

// SetNillableExamPost5 sets the "ExamPost5" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableExamPost5(s *string) *ExamPMUpdate {
	if s != nil {
		epu.SetExamPost5(*s)
	}
	return epu
}

// ClearExamPost5 clears the value of the "ExamPost5" field.
func (epu *ExamPMUpdate) ClearExamPost5() *ExamPMUpdate {
	epu.mutation.ClearExamPost5()
	return epu
}

// SetEducationCriteria sets the "EducationCriteria" field.
func (epu *ExamPMUpdate) SetEducationCriteria(s string) *ExamPMUpdate {
	epu.mutation.SetEducationCriteria(s)
	return epu
}

// SetNillableEducationCriteria sets the "EducationCriteria" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableEducationCriteria(s *string) *ExamPMUpdate {
	if s != nil {
		epu.SetEducationCriteria(*s)
	}
	return epu
}

// ClearEducationCriteria clears the value of the "EducationCriteria" field.
func (epu *ExamPMUpdate) ClearEducationCriteria() *ExamPMUpdate {
	epu.mutation.ClearEducationCriteria()
	return epu
}

// SetCategoryAgeLimitGEN sets the "CategoryAgeLimitGEN" field.
func (epu *ExamPMUpdate) SetCategoryAgeLimitGEN(s string) *ExamPMUpdate {
	epu.mutation.SetCategoryAgeLimitGEN(s)
	return epu
}

// SetNillableCategoryAgeLimitGEN sets the "CategoryAgeLimitGEN" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableCategoryAgeLimitGEN(s *string) *ExamPMUpdate {
	if s != nil {
		epu.SetCategoryAgeLimitGEN(*s)
	}
	return epu
}

// ClearCategoryAgeLimitGEN clears the value of the "CategoryAgeLimitGEN" field.
func (epu *ExamPMUpdate) ClearCategoryAgeLimitGEN() *ExamPMUpdate {
	epu.mutation.ClearCategoryAgeLimitGEN()
	return epu
}

// SetCategoryAgeLimitSC sets the "CategoryAgeLimitSC" field.
func (epu *ExamPMUpdate) SetCategoryAgeLimitSC(s string) *ExamPMUpdate {
	epu.mutation.SetCategoryAgeLimitSC(s)
	return epu
}

// SetNillableCategoryAgeLimitSC sets the "CategoryAgeLimitSC" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableCategoryAgeLimitSC(s *string) *ExamPMUpdate {
	if s != nil {
		epu.SetCategoryAgeLimitSC(*s)
	}
	return epu
}

// ClearCategoryAgeLimitSC clears the value of the "CategoryAgeLimitSC" field.
func (epu *ExamPMUpdate) ClearCategoryAgeLimitSC() *ExamPMUpdate {
	epu.mutation.ClearCategoryAgeLimitSC()
	return epu
}

// SetCategoryAgeLimitST sets the "CategoryAgeLimitST" field.
func (epu *ExamPMUpdate) SetCategoryAgeLimitST(s string) *ExamPMUpdate {
	epu.mutation.SetCategoryAgeLimitST(s)
	return epu
}

// SetNillableCategoryAgeLimitST sets the "CategoryAgeLimitST" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableCategoryAgeLimitST(s *string) *ExamPMUpdate {
	if s != nil {
		epu.SetCategoryAgeLimitST(*s)
	}
	return epu
}

// ClearCategoryAgeLimitST clears the value of the "CategoryAgeLimitST" field.
func (epu *ExamPMUpdate) ClearCategoryAgeLimitST() *ExamPMUpdate {
	epu.mutation.ClearCategoryAgeLimitST()
	return epu
}

// SetServiceYears sets the "ServiceYears" field.
func (epu *ExamPMUpdate) SetServiceYears(s string) *ExamPMUpdate {
	epu.mutation.SetServiceYears(s)
	return epu
}

// SetNillableServiceYears sets the "ServiceYears" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableServiceYears(s *string) *ExamPMUpdate {
	if s != nil {
		epu.SetServiceYears(*s)
	}
	return epu
}

// ClearServiceYears clears the value of the "ServiceYears" field.
func (epu *ExamPMUpdate) ClearServiceYears() *ExamPMUpdate {
	epu.mutation.ClearServiceYears()
	return epu
}

// SetDrivingLicenseRequired sets the "DrivingLicenseRequired" field.
func (epu *ExamPMUpdate) SetDrivingLicenseRequired(s string) *ExamPMUpdate {
	epu.mutation.SetDrivingLicenseRequired(s)
	return epu
}

// SetNillableDrivingLicenseRequired sets the "DrivingLicenseRequired" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableDrivingLicenseRequired(s *string) *ExamPMUpdate {
	if s != nil {
		epu.SetDrivingLicenseRequired(*s)
	}
	return epu
}

// ClearDrivingLicenseRequired clears the value of the "DrivingLicenseRequired" field.
func (epu *ExamPMUpdate) ClearDrivingLicenseRequired() *ExamPMUpdate {
	epu.mutation.ClearDrivingLicenseRequired()
	return epu
}

// SetExamPaperCode sets the "ExamPaperCode" field.
func (epu *ExamPMUpdate) SetExamPaperCode(s string) *ExamPMUpdate {
	epu.mutation.SetExamPaperCode(s)
	return epu
}

// SetNillableExamPaperCode sets the "ExamPaperCode" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableExamPaperCode(s *string) *ExamPMUpdate {
	if s != nil {
		epu.SetExamPaperCode(*s)
	}
	return epu
}

// ClearExamPaperCode clears the value of the "ExamPaperCode" field.
func (epu *ExamPMUpdate) ClearExamPaperCode() *ExamPMUpdate {
	epu.mutation.ClearExamPaperCode()
	return epu
}

// SetExamPaper1 sets the "ExamPaper1" field.
func (epu *ExamPMUpdate) SetExamPaper1(s string) *ExamPMUpdate {
	epu.mutation.SetExamPaper1(s)
	return epu
}

// SetNillableExamPaper1 sets the "ExamPaper1" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableExamPaper1(s *string) *ExamPMUpdate {
	if s != nil {
		epu.SetExamPaper1(*s)
	}
	return epu
}

// ClearExamPaper1 clears the value of the "ExamPaper1" field.
func (epu *ExamPMUpdate) ClearExamPaper1() *ExamPMUpdate {
	epu.mutation.ClearExamPaper1()
	return epu
}

// SetExamPaper2 sets the "ExamPaper2" field.
func (epu *ExamPMUpdate) SetExamPaper2(s string) *ExamPMUpdate {
	epu.mutation.SetExamPaper2(s)
	return epu
}

// SetNillableExamPaper2 sets the "ExamPaper2" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableExamPaper2(s *string) *ExamPMUpdate {
	if s != nil {
		epu.SetExamPaper2(*s)
	}
	return epu
}

// ClearExamPaper2 clears the value of the "ExamPaper2" field.
func (epu *ExamPMUpdate) ClearExamPaper2() *ExamPMUpdate {
	epu.mutation.ClearExamPaper2()
	return epu
}

// SetExamPaper3 sets the "ExamPaper3" field.
func (epu *ExamPMUpdate) SetExamPaper3(s string) *ExamPMUpdate {
	epu.mutation.SetExamPaper3(s)
	return epu
}

// SetNillableExamPaper3 sets the "ExamPaper3" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableExamPaper3(s *string) *ExamPMUpdate {
	if s != nil {
		epu.SetExamPaper3(*s)
	}
	return epu
}

// ClearExamPaper3 clears the value of the "ExamPaper3" field.
func (epu *ExamPMUpdate) ClearExamPaper3() *ExamPMUpdate {
	epu.mutation.ClearExamPaper3()
	return epu
}

// SetExamPaper4 sets the "ExamPaper4" field.
func (epu *ExamPMUpdate) SetExamPaper4(s string) *ExamPMUpdate {
	epu.mutation.SetExamPaper4(s)
	return epu
}

// SetNillableExamPaper4 sets the "ExamPaper4" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableExamPaper4(s *string) *ExamPMUpdate {
	if s != nil {
		epu.SetExamPaper4(*s)
	}
	return epu
}

// ClearExamPaper4 clears the value of the "ExamPaper4" field.
func (epu *ExamPMUpdate) ClearExamPaper4() *ExamPMUpdate {
	epu.mutation.ClearExamPaper4()
	return epu
}

// SetExamPaper5 sets the "ExamPaper5" field.
func (epu *ExamPMUpdate) SetExamPaper5(s string) *ExamPMUpdate {
	epu.mutation.SetExamPaper5(s)
	return epu
}

// SetNillableExamPaper5 sets the "ExamPaper5" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableExamPaper5(s *string) *ExamPMUpdate {
	if s != nil {
		epu.SetExamPaper5(*s)
	}
	return epu
}

// ClearExamPaper5 clears the value of the "ExamPaper5" field.
func (epu *ExamPMUpdate) ClearExamPaper5() *ExamPMUpdate {
	epu.mutation.ClearExamPaper5()
	return epu
}

// SetExamPaper6 sets the "ExamPaper6" field.
func (epu *ExamPMUpdate) SetExamPaper6(s string) *ExamPMUpdate {
	epu.mutation.SetExamPaper6(s)
	return epu
}

// SetNillableExamPaper6 sets the "ExamPaper6" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableExamPaper6(s *string) *ExamPMUpdate {
	if s != nil {
		epu.SetExamPaper6(*s)
	}
	return epu
}

// ClearExamPaper6 clears the value of the "ExamPaper6" field.
func (epu *ExamPMUpdate) ClearExamPaper6() *ExamPMUpdate {
	epu.mutation.ClearExamPaper6()
	return epu
}

// SetPayLevelEligibilty sets the "PayLevelEligibilty" field.
func (epu *ExamPMUpdate) SetPayLevelEligibilty(b bool) *ExamPMUpdate {
	epu.mutation.SetPayLevelEligibilty(b)
	return epu
}

// SetNillablePayLevelEligibilty sets the "PayLevelEligibilty" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillablePayLevelEligibilty(b *bool) *ExamPMUpdate {
	if b != nil {
		epu.SetPayLevelEligibilty(*b)
	}
	return epu
}

// ClearPayLevelEligibilty clears the value of the "PayLevelEligibilty" field.
func (epu *ExamPMUpdate) ClearPayLevelEligibilty() *ExamPMUpdate {
	epu.mutation.ClearPayLevelEligibilty()
	return epu
}

// SetCategoryMinMarksSCSTPH sets the "CategoryMinMarksSCSTPH" field.
func (epu *ExamPMUpdate) SetCategoryMinMarksSCSTPH(s string) *ExamPMUpdate {
	epu.mutation.SetCategoryMinMarksSCSTPH(s)
	return epu
}

// SetNillableCategoryMinMarksSCSTPH sets the "CategoryMinMarksSCSTPH" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableCategoryMinMarksSCSTPH(s *string) *ExamPMUpdate {
	if s != nil {
		epu.SetCategoryMinMarksSCSTPH(*s)
	}
	return epu
}

// ClearCategoryMinMarksSCSTPH clears the value of the "CategoryMinMarksSCSTPH" field.
func (epu *ExamPMUpdate) ClearCategoryMinMarksSCSTPH() *ExamPMUpdate {
	epu.mutation.ClearCategoryMinMarksSCSTPH()
	return epu
}

// SetCategoryMinMarksGENOBC sets the "CategoryMinMarksGENOBC" field.
func (epu *ExamPMUpdate) SetCategoryMinMarksGENOBC(s string) *ExamPMUpdate {
	epu.mutation.SetCategoryMinMarksGENOBC(s)
	return epu
}

// SetNillableCategoryMinMarksGENOBC sets the "CategoryMinMarksGENOBC" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableCategoryMinMarksGENOBC(s *string) *ExamPMUpdate {
	if s != nil {
		epu.SetCategoryMinMarksGENOBC(*s)
	}
	return epu
}

// ClearCategoryMinMarksGENOBC clears the value of the "CategoryMinMarksGENOBC" field.
func (epu *ExamPMUpdate) ClearCategoryMinMarksGENOBC() *ExamPMUpdate {
	epu.mutation.ClearCategoryMinMarksGENOBC()
	return epu
}

// SetLocalLanguageAllowed sets the "LocalLanguageAllowed" field.
func (epu *ExamPMUpdate) SetLocalLanguageAllowed(b bool) *ExamPMUpdate {
	epu.mutation.SetLocalLanguageAllowed(b)
	return epu
}

// SetNillableLocalLanguageAllowed sets the "LocalLanguageAllowed" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableLocalLanguageAllowed(b *bool) *ExamPMUpdate {
	if b != nil {
		epu.SetLocalLanguageAllowed(*b)
	}
	return epu
}

// ClearLocalLanguageAllowed clears the value of the "LocalLanguageAllowed" field.
func (epu *ExamPMUpdate) ClearLocalLanguageAllowed() *ExamPMUpdate {
	epu.mutation.ClearLocalLanguageAllowed()
	return epu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (epu *ExamPMUpdate) SetUpdatedAt(t time.Time) *ExamPMUpdate {
	epu.mutation.SetUpdatedAt(t)
	return epu
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableUpdatedAt(t *time.Time) *ExamPMUpdate {
	if t != nil {
		epu.SetUpdatedAt(*t)
	}
	return epu
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (epu *ExamPMUpdate) ClearUpdatedAt() *ExamPMUpdate {
	epu.mutation.ClearUpdatedAt()
	return epu
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (epu *ExamPMUpdate) SetUpdatedBy(s string) *ExamPMUpdate {
	epu.mutation.SetUpdatedBy(s)
	return epu
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (epu *ExamPMUpdate) SetNillableUpdatedBy(s *string) *ExamPMUpdate {
	if s != nil {
		epu.SetUpdatedBy(*s)
	}
	return epu
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (epu *ExamPMUpdate) ClearUpdatedBy() *ExamPMUpdate {
	epu.mutation.ClearUpdatedBy()
	return epu
}

// Mutation returns the ExamPMMutation object of the builder.
func (epu *ExamPMUpdate) Mutation() *ExamPMMutation {
	return epu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (epu *ExamPMUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, epu.sqlSave, epu.mutation, epu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epu *ExamPMUpdate) SaveX(ctx context.Context) int {
	affected, err := epu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (epu *ExamPMUpdate) Exec(ctx context.Context) error {
	_, err := epu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epu *ExamPMUpdate) ExecX(ctx context.Context) {
	if err := epu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (epu *ExamPMUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(exam_pm.Table, exam_pm.Columns, sqlgraph.NewFieldSpec(exam_pm.FieldID, field.TypeInt32))
	if ps := epu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epu.mutation.ExamNameCode(); ok {
		_spec.SetField(exam_pm.FieldExamNameCode, field.TypeString, value)
	}
	if epu.mutation.ExamNameCodeCleared() {
		_spec.ClearField(exam_pm.FieldExamNameCode, field.TypeString)
	}
	if value, ok := epu.mutation.ExamName(); ok {
		_spec.SetField(exam_pm.FieldExamName, field.TypeString, value)
	}
	if value, ok := epu.mutation.ExamType(); ok {
		_spec.SetField(exam_pm.FieldExamType, field.TypeString, value)
	}
	if value, ok := epu.mutation.NotificationCode(); ok {
		_spec.SetField(exam_pm.FieldNotificationCode, field.TypeInt32, value)
	}
	if value, ok := epu.mutation.AddedNotificationCode(); ok {
		_spec.AddField(exam_pm.FieldNotificationCode, field.TypeInt32, value)
	}
	if epu.mutation.NotificationCodeCleared() {
		_spec.ClearField(exam_pm.FieldNotificationCode, field.TypeInt32)
	}
	if value, ok := epu.mutation.ConductedBy(); ok {
		_spec.SetField(exam_pm.FieldConductedBy, field.TypeString, value)
	}
	if value, ok := epu.mutation.NodalOffice(); ok {
		_spec.SetField(exam_pm.FieldNodalOffice, field.TypeString, value)
	}
	if epu.mutation.NodalOfficeCleared() {
		_spec.ClearField(exam_pm.FieldNodalOffice, field.TypeString)
	}
	if value, ok := epu.mutation.CalendarCode(); ok {
		_spec.SetField(exam_pm.FieldCalendarCode, field.TypeInt32, value)
	}
	if value, ok := epu.mutation.AddedCalendarCode(); ok {
		_spec.AddField(exam_pm.FieldCalendarCode, field.TypeInt32, value)
	}
	if epu.mutation.CalendarCodeCleared() {
		_spec.ClearField(exam_pm.FieldCalendarCode, field.TypeInt32)
	}
	if value, ok := epu.mutation.PaperCode(); ok {
		_spec.SetField(exam_pm.FieldPaperCode, field.TypeInt32, value)
	}
	if value, ok := epu.mutation.AddedPaperCode(); ok {
		_spec.AddField(exam_pm.FieldPaperCode, field.TypeInt32, value)
	}
	if epu.mutation.PaperCodeCleared() {
		_spec.ClearField(exam_pm.FieldPaperCode, field.TypeInt32)
	}
	if value, ok := epu.mutation.EligibleCadre(); ok {
		_spec.SetField(exam_pm.FieldEligibleCadre, field.TypeString, value)
	}
	if epu.mutation.EligibleCadreCleared() {
		_spec.ClearField(exam_pm.FieldEligibleCadre, field.TypeString)
	}
	if value, ok := epu.mutation.EligiblePost1(); ok {
		_spec.SetField(exam_pm.FieldEligiblePost1, field.TypeString, value)
	}
	if epu.mutation.EligiblePost1Cleared() {
		_spec.ClearField(exam_pm.FieldEligiblePost1, field.TypeString)
	}
	if value, ok := epu.mutation.EligiblePost2(); ok {
		_spec.SetField(exam_pm.FieldEligiblePost2, field.TypeString, value)
	}
	if epu.mutation.EligiblePost2Cleared() {
		_spec.ClearField(exam_pm.FieldEligiblePost2, field.TypeString)
	}
	if value, ok := epu.mutation.EligiblePost3(); ok {
		_spec.SetField(exam_pm.FieldEligiblePost3, field.TypeString, value)
	}
	if epu.mutation.EligiblePost3Cleared() {
		_spec.ClearField(exam_pm.FieldEligiblePost3, field.TypeString)
	}
	if value, ok := epu.mutation.EligiblePost4(); ok {
		_spec.SetField(exam_pm.FieldEligiblePost4, field.TypeString, value)
	}
	if epu.mutation.EligiblePost4Cleared() {
		_spec.ClearField(exam_pm.FieldEligiblePost4, field.TypeString)
	}
	if value, ok := epu.mutation.EligiblePost5(); ok {
		_spec.SetField(exam_pm.FieldEligiblePost5, field.TypeString, value)
	}
	if epu.mutation.EligiblePost5Cleared() {
		_spec.ClearField(exam_pm.FieldEligiblePost5, field.TypeString)
	}
	if value, ok := epu.mutation.ExamPost1(); ok {
		_spec.SetField(exam_pm.FieldExamPost1, field.TypeString, value)
	}
	if epu.mutation.ExamPost1Cleared() {
		_spec.ClearField(exam_pm.FieldExamPost1, field.TypeString)
	}
	if value, ok := epu.mutation.ExamPost2(); ok {
		_spec.SetField(exam_pm.FieldExamPost2, field.TypeString, value)
	}
	if epu.mutation.ExamPost2Cleared() {
		_spec.ClearField(exam_pm.FieldExamPost2, field.TypeString)
	}
	if value, ok := epu.mutation.ExamPost3(); ok {
		_spec.SetField(exam_pm.FieldExamPost3, field.TypeString, value)
	}
	if epu.mutation.ExamPost3Cleared() {
		_spec.ClearField(exam_pm.FieldExamPost3, field.TypeString)
	}
	if value, ok := epu.mutation.ExamPost4(); ok {
		_spec.SetField(exam_pm.FieldExamPost4, field.TypeString, value)
	}
	if epu.mutation.ExamPost4Cleared() {
		_spec.ClearField(exam_pm.FieldExamPost4, field.TypeString)
	}
	if value, ok := epu.mutation.ExamPost5(); ok {
		_spec.SetField(exam_pm.FieldExamPost5, field.TypeString, value)
	}
	if epu.mutation.ExamPost5Cleared() {
		_spec.ClearField(exam_pm.FieldExamPost5, field.TypeString)
	}
	if value, ok := epu.mutation.EducationCriteria(); ok {
		_spec.SetField(exam_pm.FieldEducationCriteria, field.TypeString, value)
	}
	if epu.mutation.EducationCriteriaCleared() {
		_spec.ClearField(exam_pm.FieldEducationCriteria, field.TypeString)
	}
	if value, ok := epu.mutation.CategoryAgeLimitGEN(); ok {
		_spec.SetField(exam_pm.FieldCategoryAgeLimitGEN, field.TypeString, value)
	}
	if epu.mutation.CategoryAgeLimitGENCleared() {
		_spec.ClearField(exam_pm.FieldCategoryAgeLimitGEN, field.TypeString)
	}
	if value, ok := epu.mutation.CategoryAgeLimitSC(); ok {
		_spec.SetField(exam_pm.FieldCategoryAgeLimitSC, field.TypeString, value)
	}
	if epu.mutation.CategoryAgeLimitSCCleared() {
		_spec.ClearField(exam_pm.FieldCategoryAgeLimitSC, field.TypeString)
	}
	if value, ok := epu.mutation.CategoryAgeLimitST(); ok {
		_spec.SetField(exam_pm.FieldCategoryAgeLimitST, field.TypeString, value)
	}
	if epu.mutation.CategoryAgeLimitSTCleared() {
		_spec.ClearField(exam_pm.FieldCategoryAgeLimitST, field.TypeString)
	}
	if value, ok := epu.mutation.ServiceYears(); ok {
		_spec.SetField(exam_pm.FieldServiceYears, field.TypeString, value)
	}
	if epu.mutation.ServiceYearsCleared() {
		_spec.ClearField(exam_pm.FieldServiceYears, field.TypeString)
	}
	if value, ok := epu.mutation.DrivingLicenseRequired(); ok {
		_spec.SetField(exam_pm.FieldDrivingLicenseRequired, field.TypeString, value)
	}
	if epu.mutation.DrivingLicenseRequiredCleared() {
		_spec.ClearField(exam_pm.FieldDrivingLicenseRequired, field.TypeString)
	}
	if value, ok := epu.mutation.ExamPaperCode(); ok {
		_spec.SetField(exam_pm.FieldExamPaperCode, field.TypeString, value)
	}
	if epu.mutation.ExamPaperCodeCleared() {
		_spec.ClearField(exam_pm.FieldExamPaperCode, field.TypeString)
	}
	if value, ok := epu.mutation.ExamPaper1(); ok {
		_spec.SetField(exam_pm.FieldExamPaper1, field.TypeString, value)
	}
	if epu.mutation.ExamPaper1Cleared() {
		_spec.ClearField(exam_pm.FieldExamPaper1, field.TypeString)
	}
	if value, ok := epu.mutation.ExamPaper2(); ok {
		_spec.SetField(exam_pm.FieldExamPaper2, field.TypeString, value)
	}
	if epu.mutation.ExamPaper2Cleared() {
		_spec.ClearField(exam_pm.FieldExamPaper2, field.TypeString)
	}
	if value, ok := epu.mutation.ExamPaper3(); ok {
		_spec.SetField(exam_pm.FieldExamPaper3, field.TypeString, value)
	}
	if epu.mutation.ExamPaper3Cleared() {
		_spec.ClearField(exam_pm.FieldExamPaper3, field.TypeString)
	}
	if value, ok := epu.mutation.ExamPaper4(); ok {
		_spec.SetField(exam_pm.FieldExamPaper4, field.TypeString, value)
	}
	if epu.mutation.ExamPaper4Cleared() {
		_spec.ClearField(exam_pm.FieldExamPaper4, field.TypeString)
	}
	if value, ok := epu.mutation.ExamPaper5(); ok {
		_spec.SetField(exam_pm.FieldExamPaper5, field.TypeString, value)
	}
	if epu.mutation.ExamPaper5Cleared() {
		_spec.ClearField(exam_pm.FieldExamPaper5, field.TypeString)
	}
	if value, ok := epu.mutation.ExamPaper6(); ok {
		_spec.SetField(exam_pm.FieldExamPaper6, field.TypeString, value)
	}
	if epu.mutation.ExamPaper6Cleared() {
		_spec.ClearField(exam_pm.FieldExamPaper6, field.TypeString)
	}
	if value, ok := epu.mutation.PayLevelEligibilty(); ok {
		_spec.SetField(exam_pm.FieldPayLevelEligibilty, field.TypeBool, value)
	}
	if epu.mutation.PayLevelEligibiltyCleared() {
		_spec.ClearField(exam_pm.FieldPayLevelEligibilty, field.TypeBool)
	}
	if value, ok := epu.mutation.CategoryMinMarksSCSTPH(); ok {
		_spec.SetField(exam_pm.FieldCategoryMinMarksSCSTPH, field.TypeString, value)
	}
	if epu.mutation.CategoryMinMarksSCSTPHCleared() {
		_spec.ClearField(exam_pm.FieldCategoryMinMarksSCSTPH, field.TypeString)
	}
	if value, ok := epu.mutation.CategoryMinMarksGENOBC(); ok {
		_spec.SetField(exam_pm.FieldCategoryMinMarksGENOBC, field.TypeString, value)
	}
	if epu.mutation.CategoryMinMarksGENOBCCleared() {
		_spec.ClearField(exam_pm.FieldCategoryMinMarksGENOBC, field.TypeString)
	}
	if value, ok := epu.mutation.LocalLanguageAllowed(); ok {
		_spec.SetField(exam_pm.FieldLocalLanguageAllowed, field.TypeBool, value)
	}
	if epu.mutation.LocalLanguageAllowedCleared() {
		_spec.ClearField(exam_pm.FieldLocalLanguageAllowed, field.TypeBool)
	}
	if value, ok := epu.mutation.UpdatedAt(); ok {
		_spec.SetField(exam_pm.FieldUpdatedAt, field.TypeTime, value)
	}
	if epu.mutation.UpdatedAtCleared() {
		_spec.ClearField(exam_pm.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := epu.mutation.UpdatedBy(); ok {
		_spec.SetField(exam_pm.FieldUpdatedBy, field.TypeString, value)
	}
	if epu.mutation.UpdatedByCleared() {
		_spec.ClearField(exam_pm.FieldUpdatedBy, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, epu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exam_pm.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	epu.mutation.done = true
	return n, nil
}

// ExamPMUpdateOne is the builder for updating a single Exam_PM entity.
type ExamPMUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExamPMMutation
}

// SetExamNameCode sets the "ExamNameCode" field.
func (epuo *ExamPMUpdateOne) SetExamNameCode(s string) *ExamPMUpdateOne {
	epuo.mutation.SetExamNameCode(s)
	return epuo
}

// SetNillableExamNameCode sets the "ExamNameCode" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableExamNameCode(s *string) *ExamPMUpdateOne {
	if s != nil {
		epuo.SetExamNameCode(*s)
	}
	return epuo
}

// ClearExamNameCode clears the value of the "ExamNameCode" field.
func (epuo *ExamPMUpdateOne) ClearExamNameCode() *ExamPMUpdateOne {
	epuo.mutation.ClearExamNameCode()
	return epuo
}

// SetExamName sets the "ExamName" field.
func (epuo *ExamPMUpdateOne) SetExamName(s string) *ExamPMUpdateOne {
	epuo.mutation.SetExamName(s)
	return epuo
}

// SetExamType sets the "ExamType" field.
func (epuo *ExamPMUpdateOne) SetExamType(s string) *ExamPMUpdateOne {
	epuo.mutation.SetExamType(s)
	return epuo
}

// SetNotificationCode sets the "NotificationCode" field.
func (epuo *ExamPMUpdateOne) SetNotificationCode(i int32) *ExamPMUpdateOne {
	epuo.mutation.ResetNotificationCode()
	epuo.mutation.SetNotificationCode(i)
	return epuo
}

// SetNillableNotificationCode sets the "NotificationCode" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableNotificationCode(i *int32) *ExamPMUpdateOne {
	if i != nil {
		epuo.SetNotificationCode(*i)
	}
	return epuo
}

// AddNotificationCode adds i to the "NotificationCode" field.
func (epuo *ExamPMUpdateOne) AddNotificationCode(i int32) *ExamPMUpdateOne {
	epuo.mutation.AddNotificationCode(i)
	return epuo
}

// ClearNotificationCode clears the value of the "NotificationCode" field.
func (epuo *ExamPMUpdateOne) ClearNotificationCode() *ExamPMUpdateOne {
	epuo.mutation.ClearNotificationCode()
	return epuo
}

// SetConductedBy sets the "ConductedBy" field.
func (epuo *ExamPMUpdateOne) SetConductedBy(s string) *ExamPMUpdateOne {
	epuo.mutation.SetConductedBy(s)
	return epuo
}

// SetNodalOffice sets the "NodalOffice" field.
func (epuo *ExamPMUpdateOne) SetNodalOffice(s string) *ExamPMUpdateOne {
	epuo.mutation.SetNodalOffice(s)
	return epuo
}

// SetNillableNodalOffice sets the "NodalOffice" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableNodalOffice(s *string) *ExamPMUpdateOne {
	if s != nil {
		epuo.SetNodalOffice(*s)
	}
	return epuo
}

// ClearNodalOffice clears the value of the "NodalOffice" field.
func (epuo *ExamPMUpdateOne) ClearNodalOffice() *ExamPMUpdateOne {
	epuo.mutation.ClearNodalOffice()
	return epuo
}

// SetCalendarCode sets the "CalendarCode" field.
func (epuo *ExamPMUpdateOne) SetCalendarCode(i int32) *ExamPMUpdateOne {
	epuo.mutation.ResetCalendarCode()
	epuo.mutation.SetCalendarCode(i)
	return epuo
}

// SetNillableCalendarCode sets the "CalendarCode" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableCalendarCode(i *int32) *ExamPMUpdateOne {
	if i != nil {
		epuo.SetCalendarCode(*i)
	}
	return epuo
}

// AddCalendarCode adds i to the "CalendarCode" field.
func (epuo *ExamPMUpdateOne) AddCalendarCode(i int32) *ExamPMUpdateOne {
	epuo.mutation.AddCalendarCode(i)
	return epuo
}

// ClearCalendarCode clears the value of the "CalendarCode" field.
func (epuo *ExamPMUpdateOne) ClearCalendarCode() *ExamPMUpdateOne {
	epuo.mutation.ClearCalendarCode()
	return epuo
}

// SetPaperCode sets the "PaperCode" field.
func (epuo *ExamPMUpdateOne) SetPaperCode(i int32) *ExamPMUpdateOne {
	epuo.mutation.ResetPaperCode()
	epuo.mutation.SetPaperCode(i)
	return epuo
}

// SetNillablePaperCode sets the "PaperCode" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillablePaperCode(i *int32) *ExamPMUpdateOne {
	if i != nil {
		epuo.SetPaperCode(*i)
	}
	return epuo
}

// AddPaperCode adds i to the "PaperCode" field.
func (epuo *ExamPMUpdateOne) AddPaperCode(i int32) *ExamPMUpdateOne {
	epuo.mutation.AddPaperCode(i)
	return epuo
}

// ClearPaperCode clears the value of the "PaperCode" field.
func (epuo *ExamPMUpdateOne) ClearPaperCode() *ExamPMUpdateOne {
	epuo.mutation.ClearPaperCode()
	return epuo
}

// SetEligibleCadre sets the "EligibleCadre" field.
func (epuo *ExamPMUpdateOne) SetEligibleCadre(s string) *ExamPMUpdateOne {
	epuo.mutation.SetEligibleCadre(s)
	return epuo
}

// SetNillableEligibleCadre sets the "EligibleCadre" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableEligibleCadre(s *string) *ExamPMUpdateOne {
	if s != nil {
		epuo.SetEligibleCadre(*s)
	}
	return epuo
}

// ClearEligibleCadre clears the value of the "EligibleCadre" field.
func (epuo *ExamPMUpdateOne) ClearEligibleCadre() *ExamPMUpdateOne {
	epuo.mutation.ClearEligibleCadre()
	return epuo
}

// SetEligiblePost1 sets the "EligiblePost1" field.
func (epuo *ExamPMUpdateOne) SetEligiblePost1(s string) *ExamPMUpdateOne {
	epuo.mutation.SetEligiblePost1(s)
	return epuo
}

// SetNillableEligiblePost1 sets the "EligiblePost1" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableEligiblePost1(s *string) *ExamPMUpdateOne {
	if s != nil {
		epuo.SetEligiblePost1(*s)
	}
	return epuo
}

// ClearEligiblePost1 clears the value of the "EligiblePost1" field.
func (epuo *ExamPMUpdateOne) ClearEligiblePost1() *ExamPMUpdateOne {
	epuo.mutation.ClearEligiblePost1()
	return epuo
}

// SetEligiblePost2 sets the "EligiblePost2" field.
func (epuo *ExamPMUpdateOne) SetEligiblePost2(s string) *ExamPMUpdateOne {
	epuo.mutation.SetEligiblePost2(s)
	return epuo
}

// SetNillableEligiblePost2 sets the "EligiblePost2" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableEligiblePost2(s *string) *ExamPMUpdateOne {
	if s != nil {
		epuo.SetEligiblePost2(*s)
	}
	return epuo
}

// ClearEligiblePost2 clears the value of the "EligiblePost2" field.
func (epuo *ExamPMUpdateOne) ClearEligiblePost2() *ExamPMUpdateOne {
	epuo.mutation.ClearEligiblePost2()
	return epuo
}

// SetEligiblePost3 sets the "EligiblePost3" field.
func (epuo *ExamPMUpdateOne) SetEligiblePost3(s string) *ExamPMUpdateOne {
	epuo.mutation.SetEligiblePost3(s)
	return epuo
}

// SetNillableEligiblePost3 sets the "EligiblePost3" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableEligiblePost3(s *string) *ExamPMUpdateOne {
	if s != nil {
		epuo.SetEligiblePost3(*s)
	}
	return epuo
}

// ClearEligiblePost3 clears the value of the "EligiblePost3" field.
func (epuo *ExamPMUpdateOne) ClearEligiblePost3() *ExamPMUpdateOne {
	epuo.mutation.ClearEligiblePost3()
	return epuo
}

// SetEligiblePost4 sets the "EligiblePost4" field.
func (epuo *ExamPMUpdateOne) SetEligiblePost4(s string) *ExamPMUpdateOne {
	epuo.mutation.SetEligiblePost4(s)
	return epuo
}

// SetNillableEligiblePost4 sets the "EligiblePost4" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableEligiblePost4(s *string) *ExamPMUpdateOne {
	if s != nil {
		epuo.SetEligiblePost4(*s)
	}
	return epuo
}

// ClearEligiblePost4 clears the value of the "EligiblePost4" field.
func (epuo *ExamPMUpdateOne) ClearEligiblePost4() *ExamPMUpdateOne {
	epuo.mutation.ClearEligiblePost4()
	return epuo
}

// SetEligiblePost5 sets the "EligiblePost5" field.
func (epuo *ExamPMUpdateOne) SetEligiblePost5(s string) *ExamPMUpdateOne {
	epuo.mutation.SetEligiblePost5(s)
	return epuo
}

// SetNillableEligiblePost5 sets the "EligiblePost5" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableEligiblePost5(s *string) *ExamPMUpdateOne {
	if s != nil {
		epuo.SetEligiblePost5(*s)
	}
	return epuo
}

// ClearEligiblePost5 clears the value of the "EligiblePost5" field.
func (epuo *ExamPMUpdateOne) ClearEligiblePost5() *ExamPMUpdateOne {
	epuo.mutation.ClearEligiblePost5()
	return epuo
}

// SetExamPost1 sets the "ExamPost1" field.
func (epuo *ExamPMUpdateOne) SetExamPost1(s string) *ExamPMUpdateOne {
	epuo.mutation.SetExamPost1(s)
	return epuo
}

// SetNillableExamPost1 sets the "ExamPost1" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableExamPost1(s *string) *ExamPMUpdateOne {
	if s != nil {
		epuo.SetExamPost1(*s)
	}
	return epuo
}

// ClearExamPost1 clears the value of the "ExamPost1" field.
func (epuo *ExamPMUpdateOne) ClearExamPost1() *ExamPMUpdateOne {
	epuo.mutation.ClearExamPost1()
	return epuo
}

// SetExamPost2 sets the "ExamPost2" field.
func (epuo *ExamPMUpdateOne) SetExamPost2(s string) *ExamPMUpdateOne {
	epuo.mutation.SetExamPost2(s)
	return epuo
}

// SetNillableExamPost2 sets the "ExamPost2" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableExamPost2(s *string) *ExamPMUpdateOne {
	if s != nil {
		epuo.SetExamPost2(*s)
	}
	return epuo
}

// ClearExamPost2 clears the value of the "ExamPost2" field.
func (epuo *ExamPMUpdateOne) ClearExamPost2() *ExamPMUpdateOne {
	epuo.mutation.ClearExamPost2()
	return epuo
}

// SetExamPost3 sets the "ExamPost3" field.
func (epuo *ExamPMUpdateOne) SetExamPost3(s string) *ExamPMUpdateOne {
	epuo.mutation.SetExamPost3(s)
	return epuo
}

// SetNillableExamPost3 sets the "ExamPost3" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableExamPost3(s *string) *ExamPMUpdateOne {
	if s != nil {
		epuo.SetExamPost3(*s)
	}
	return epuo
}

// ClearExamPost3 clears the value of the "ExamPost3" field.
func (epuo *ExamPMUpdateOne) ClearExamPost3() *ExamPMUpdateOne {
	epuo.mutation.ClearExamPost3()
	return epuo
}

// SetExamPost4 sets the "ExamPost4" field.
func (epuo *ExamPMUpdateOne) SetExamPost4(s string) *ExamPMUpdateOne {
	epuo.mutation.SetExamPost4(s)
	return epuo
}

// SetNillableExamPost4 sets the "ExamPost4" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableExamPost4(s *string) *ExamPMUpdateOne {
	if s != nil {
		epuo.SetExamPost4(*s)
	}
	return epuo
}

// ClearExamPost4 clears the value of the "ExamPost4" field.
func (epuo *ExamPMUpdateOne) ClearExamPost4() *ExamPMUpdateOne {
	epuo.mutation.ClearExamPost4()
	return epuo
}

// SetExamPost5 sets the "ExamPost5" field.
func (epuo *ExamPMUpdateOne) SetExamPost5(s string) *ExamPMUpdateOne {
	epuo.mutation.SetExamPost5(s)
	return epuo
}

// SetNillableExamPost5 sets the "ExamPost5" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableExamPost5(s *string) *ExamPMUpdateOne {
	if s != nil {
		epuo.SetExamPost5(*s)
	}
	return epuo
}

// ClearExamPost5 clears the value of the "ExamPost5" field.
func (epuo *ExamPMUpdateOne) ClearExamPost5() *ExamPMUpdateOne {
	epuo.mutation.ClearExamPost5()
	return epuo
}

// SetEducationCriteria sets the "EducationCriteria" field.
func (epuo *ExamPMUpdateOne) SetEducationCriteria(s string) *ExamPMUpdateOne {
	epuo.mutation.SetEducationCriteria(s)
	return epuo
}

// SetNillableEducationCriteria sets the "EducationCriteria" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableEducationCriteria(s *string) *ExamPMUpdateOne {
	if s != nil {
		epuo.SetEducationCriteria(*s)
	}
	return epuo
}

// ClearEducationCriteria clears the value of the "EducationCriteria" field.
func (epuo *ExamPMUpdateOne) ClearEducationCriteria() *ExamPMUpdateOne {
	epuo.mutation.ClearEducationCriteria()
	return epuo
}

// SetCategoryAgeLimitGEN sets the "CategoryAgeLimitGEN" field.
func (epuo *ExamPMUpdateOne) SetCategoryAgeLimitGEN(s string) *ExamPMUpdateOne {
	epuo.mutation.SetCategoryAgeLimitGEN(s)
	return epuo
}

// SetNillableCategoryAgeLimitGEN sets the "CategoryAgeLimitGEN" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableCategoryAgeLimitGEN(s *string) *ExamPMUpdateOne {
	if s != nil {
		epuo.SetCategoryAgeLimitGEN(*s)
	}
	return epuo
}

// ClearCategoryAgeLimitGEN clears the value of the "CategoryAgeLimitGEN" field.
func (epuo *ExamPMUpdateOne) ClearCategoryAgeLimitGEN() *ExamPMUpdateOne {
	epuo.mutation.ClearCategoryAgeLimitGEN()
	return epuo
}

// SetCategoryAgeLimitSC sets the "CategoryAgeLimitSC" field.
func (epuo *ExamPMUpdateOne) SetCategoryAgeLimitSC(s string) *ExamPMUpdateOne {
	epuo.mutation.SetCategoryAgeLimitSC(s)
	return epuo
}

// SetNillableCategoryAgeLimitSC sets the "CategoryAgeLimitSC" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableCategoryAgeLimitSC(s *string) *ExamPMUpdateOne {
	if s != nil {
		epuo.SetCategoryAgeLimitSC(*s)
	}
	return epuo
}

// ClearCategoryAgeLimitSC clears the value of the "CategoryAgeLimitSC" field.
func (epuo *ExamPMUpdateOne) ClearCategoryAgeLimitSC() *ExamPMUpdateOne {
	epuo.mutation.ClearCategoryAgeLimitSC()
	return epuo
}

// SetCategoryAgeLimitST sets the "CategoryAgeLimitST" field.
func (epuo *ExamPMUpdateOne) SetCategoryAgeLimitST(s string) *ExamPMUpdateOne {
	epuo.mutation.SetCategoryAgeLimitST(s)
	return epuo
}

// SetNillableCategoryAgeLimitST sets the "CategoryAgeLimitST" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableCategoryAgeLimitST(s *string) *ExamPMUpdateOne {
	if s != nil {
		epuo.SetCategoryAgeLimitST(*s)
	}
	return epuo
}

// ClearCategoryAgeLimitST clears the value of the "CategoryAgeLimitST" field.
func (epuo *ExamPMUpdateOne) ClearCategoryAgeLimitST() *ExamPMUpdateOne {
	epuo.mutation.ClearCategoryAgeLimitST()
	return epuo
}

// SetServiceYears sets the "ServiceYears" field.
func (epuo *ExamPMUpdateOne) SetServiceYears(s string) *ExamPMUpdateOne {
	epuo.mutation.SetServiceYears(s)
	return epuo
}

// SetNillableServiceYears sets the "ServiceYears" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableServiceYears(s *string) *ExamPMUpdateOne {
	if s != nil {
		epuo.SetServiceYears(*s)
	}
	return epuo
}

// ClearServiceYears clears the value of the "ServiceYears" field.
func (epuo *ExamPMUpdateOne) ClearServiceYears() *ExamPMUpdateOne {
	epuo.mutation.ClearServiceYears()
	return epuo
}

// SetDrivingLicenseRequired sets the "DrivingLicenseRequired" field.
func (epuo *ExamPMUpdateOne) SetDrivingLicenseRequired(s string) *ExamPMUpdateOne {
	epuo.mutation.SetDrivingLicenseRequired(s)
	return epuo
}

// SetNillableDrivingLicenseRequired sets the "DrivingLicenseRequired" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableDrivingLicenseRequired(s *string) *ExamPMUpdateOne {
	if s != nil {
		epuo.SetDrivingLicenseRequired(*s)
	}
	return epuo
}

// ClearDrivingLicenseRequired clears the value of the "DrivingLicenseRequired" field.
func (epuo *ExamPMUpdateOne) ClearDrivingLicenseRequired() *ExamPMUpdateOne {
	epuo.mutation.ClearDrivingLicenseRequired()
	return epuo
}

// SetExamPaperCode sets the "ExamPaperCode" field.
func (epuo *ExamPMUpdateOne) SetExamPaperCode(s string) *ExamPMUpdateOne {
	epuo.mutation.SetExamPaperCode(s)
	return epuo
}

// SetNillableExamPaperCode sets the "ExamPaperCode" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableExamPaperCode(s *string) *ExamPMUpdateOne {
	if s != nil {
		epuo.SetExamPaperCode(*s)
	}
	return epuo
}

// ClearExamPaperCode clears the value of the "ExamPaperCode" field.
func (epuo *ExamPMUpdateOne) ClearExamPaperCode() *ExamPMUpdateOne {
	epuo.mutation.ClearExamPaperCode()
	return epuo
}

// SetExamPaper1 sets the "ExamPaper1" field.
func (epuo *ExamPMUpdateOne) SetExamPaper1(s string) *ExamPMUpdateOne {
	epuo.mutation.SetExamPaper1(s)
	return epuo
}

// SetNillableExamPaper1 sets the "ExamPaper1" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableExamPaper1(s *string) *ExamPMUpdateOne {
	if s != nil {
		epuo.SetExamPaper1(*s)
	}
	return epuo
}

// ClearExamPaper1 clears the value of the "ExamPaper1" field.
func (epuo *ExamPMUpdateOne) ClearExamPaper1() *ExamPMUpdateOne {
	epuo.mutation.ClearExamPaper1()
	return epuo
}

// SetExamPaper2 sets the "ExamPaper2" field.
func (epuo *ExamPMUpdateOne) SetExamPaper2(s string) *ExamPMUpdateOne {
	epuo.mutation.SetExamPaper2(s)
	return epuo
}

// SetNillableExamPaper2 sets the "ExamPaper2" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableExamPaper2(s *string) *ExamPMUpdateOne {
	if s != nil {
		epuo.SetExamPaper2(*s)
	}
	return epuo
}

// ClearExamPaper2 clears the value of the "ExamPaper2" field.
func (epuo *ExamPMUpdateOne) ClearExamPaper2() *ExamPMUpdateOne {
	epuo.mutation.ClearExamPaper2()
	return epuo
}

// SetExamPaper3 sets the "ExamPaper3" field.
func (epuo *ExamPMUpdateOne) SetExamPaper3(s string) *ExamPMUpdateOne {
	epuo.mutation.SetExamPaper3(s)
	return epuo
}

// SetNillableExamPaper3 sets the "ExamPaper3" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableExamPaper3(s *string) *ExamPMUpdateOne {
	if s != nil {
		epuo.SetExamPaper3(*s)
	}
	return epuo
}

// ClearExamPaper3 clears the value of the "ExamPaper3" field.
func (epuo *ExamPMUpdateOne) ClearExamPaper3() *ExamPMUpdateOne {
	epuo.mutation.ClearExamPaper3()
	return epuo
}

// SetExamPaper4 sets the "ExamPaper4" field.
func (epuo *ExamPMUpdateOne) SetExamPaper4(s string) *ExamPMUpdateOne {
	epuo.mutation.SetExamPaper4(s)
	return epuo
}

// SetNillableExamPaper4 sets the "ExamPaper4" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableExamPaper4(s *string) *ExamPMUpdateOne {
	if s != nil {
		epuo.SetExamPaper4(*s)
	}
	return epuo
}

// ClearExamPaper4 clears the value of the "ExamPaper4" field.
func (epuo *ExamPMUpdateOne) ClearExamPaper4() *ExamPMUpdateOne {
	epuo.mutation.ClearExamPaper4()
	return epuo
}

// SetExamPaper5 sets the "ExamPaper5" field.
func (epuo *ExamPMUpdateOne) SetExamPaper5(s string) *ExamPMUpdateOne {
	epuo.mutation.SetExamPaper5(s)
	return epuo
}

// SetNillableExamPaper5 sets the "ExamPaper5" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableExamPaper5(s *string) *ExamPMUpdateOne {
	if s != nil {
		epuo.SetExamPaper5(*s)
	}
	return epuo
}

// ClearExamPaper5 clears the value of the "ExamPaper5" field.
func (epuo *ExamPMUpdateOne) ClearExamPaper5() *ExamPMUpdateOne {
	epuo.mutation.ClearExamPaper5()
	return epuo
}

// SetExamPaper6 sets the "ExamPaper6" field.
func (epuo *ExamPMUpdateOne) SetExamPaper6(s string) *ExamPMUpdateOne {
	epuo.mutation.SetExamPaper6(s)
	return epuo
}

// SetNillableExamPaper6 sets the "ExamPaper6" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableExamPaper6(s *string) *ExamPMUpdateOne {
	if s != nil {
		epuo.SetExamPaper6(*s)
	}
	return epuo
}

// ClearExamPaper6 clears the value of the "ExamPaper6" field.
func (epuo *ExamPMUpdateOne) ClearExamPaper6() *ExamPMUpdateOne {
	epuo.mutation.ClearExamPaper6()
	return epuo
}

// SetPayLevelEligibilty sets the "PayLevelEligibilty" field.
func (epuo *ExamPMUpdateOne) SetPayLevelEligibilty(b bool) *ExamPMUpdateOne {
	epuo.mutation.SetPayLevelEligibilty(b)
	return epuo
}

// SetNillablePayLevelEligibilty sets the "PayLevelEligibilty" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillablePayLevelEligibilty(b *bool) *ExamPMUpdateOne {
	if b != nil {
		epuo.SetPayLevelEligibilty(*b)
	}
	return epuo
}

// ClearPayLevelEligibilty clears the value of the "PayLevelEligibilty" field.
func (epuo *ExamPMUpdateOne) ClearPayLevelEligibilty() *ExamPMUpdateOne {
	epuo.mutation.ClearPayLevelEligibilty()
	return epuo
}

// SetCategoryMinMarksSCSTPH sets the "CategoryMinMarksSCSTPH" field.
func (epuo *ExamPMUpdateOne) SetCategoryMinMarksSCSTPH(s string) *ExamPMUpdateOne {
	epuo.mutation.SetCategoryMinMarksSCSTPH(s)
	return epuo
}

// SetNillableCategoryMinMarksSCSTPH sets the "CategoryMinMarksSCSTPH" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableCategoryMinMarksSCSTPH(s *string) *ExamPMUpdateOne {
	if s != nil {
		epuo.SetCategoryMinMarksSCSTPH(*s)
	}
	return epuo
}

// ClearCategoryMinMarksSCSTPH clears the value of the "CategoryMinMarksSCSTPH" field.
func (epuo *ExamPMUpdateOne) ClearCategoryMinMarksSCSTPH() *ExamPMUpdateOne {
	epuo.mutation.ClearCategoryMinMarksSCSTPH()
	return epuo
}

// SetCategoryMinMarksGENOBC sets the "CategoryMinMarksGENOBC" field.
func (epuo *ExamPMUpdateOne) SetCategoryMinMarksGENOBC(s string) *ExamPMUpdateOne {
	epuo.mutation.SetCategoryMinMarksGENOBC(s)
	return epuo
}

// SetNillableCategoryMinMarksGENOBC sets the "CategoryMinMarksGENOBC" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableCategoryMinMarksGENOBC(s *string) *ExamPMUpdateOne {
	if s != nil {
		epuo.SetCategoryMinMarksGENOBC(*s)
	}
	return epuo
}

// ClearCategoryMinMarksGENOBC clears the value of the "CategoryMinMarksGENOBC" field.
func (epuo *ExamPMUpdateOne) ClearCategoryMinMarksGENOBC() *ExamPMUpdateOne {
	epuo.mutation.ClearCategoryMinMarksGENOBC()
	return epuo
}

// SetLocalLanguageAllowed sets the "LocalLanguageAllowed" field.
func (epuo *ExamPMUpdateOne) SetLocalLanguageAllowed(b bool) *ExamPMUpdateOne {
	epuo.mutation.SetLocalLanguageAllowed(b)
	return epuo
}

// SetNillableLocalLanguageAllowed sets the "LocalLanguageAllowed" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableLocalLanguageAllowed(b *bool) *ExamPMUpdateOne {
	if b != nil {
		epuo.SetLocalLanguageAllowed(*b)
	}
	return epuo
}

// ClearLocalLanguageAllowed clears the value of the "LocalLanguageAllowed" field.
func (epuo *ExamPMUpdateOne) ClearLocalLanguageAllowed() *ExamPMUpdateOne {
	epuo.mutation.ClearLocalLanguageAllowed()
	return epuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (epuo *ExamPMUpdateOne) SetUpdatedAt(t time.Time) *ExamPMUpdateOne {
	epuo.mutation.SetUpdatedAt(t)
	return epuo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableUpdatedAt(t *time.Time) *ExamPMUpdateOne {
	if t != nil {
		epuo.SetUpdatedAt(*t)
	}
	return epuo
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (epuo *ExamPMUpdateOne) ClearUpdatedAt() *ExamPMUpdateOne {
	epuo.mutation.ClearUpdatedAt()
	return epuo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (epuo *ExamPMUpdateOne) SetUpdatedBy(s string) *ExamPMUpdateOne {
	epuo.mutation.SetUpdatedBy(s)
	return epuo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (epuo *ExamPMUpdateOne) SetNillableUpdatedBy(s *string) *ExamPMUpdateOne {
	if s != nil {
		epuo.SetUpdatedBy(*s)
	}
	return epuo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (epuo *ExamPMUpdateOne) ClearUpdatedBy() *ExamPMUpdateOne {
	epuo.mutation.ClearUpdatedBy()
	return epuo
}

// Mutation returns the ExamPMMutation object of the builder.
func (epuo *ExamPMUpdateOne) Mutation() *ExamPMMutation {
	return epuo.mutation
}

// Where appends a list predicates to the ExamPMUpdate builder.
func (epuo *ExamPMUpdateOne) Where(ps ...predicate.Exam_PM) *ExamPMUpdateOne {
	epuo.mutation.Where(ps...)
	return epuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (epuo *ExamPMUpdateOne) Select(field string, fields ...string) *ExamPMUpdateOne {
	epuo.fields = append([]string{field}, fields...)
	return epuo
}

// Save executes the query and returns the updated Exam_PM entity.
func (epuo *ExamPMUpdateOne) Save(ctx context.Context) (*Exam_PM, error) {
	return withHooks(ctx, epuo.sqlSave, epuo.mutation, epuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epuo *ExamPMUpdateOne) SaveX(ctx context.Context) *Exam_PM {
	node, err := epuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (epuo *ExamPMUpdateOne) Exec(ctx context.Context) error {
	_, err := epuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epuo *ExamPMUpdateOne) ExecX(ctx context.Context) {
	if err := epuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (epuo *ExamPMUpdateOne) sqlSave(ctx context.Context) (_node *Exam_PM, err error) {
	_spec := sqlgraph.NewUpdateSpec(exam_pm.Table, exam_pm.Columns, sqlgraph.NewFieldSpec(exam_pm.FieldID, field.TypeInt32))
	id, ok := epuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Exam_PM.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := epuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exam_pm.FieldID)
		for _, f := range fields {
			if !exam_pm.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exam_pm.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := epuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epuo.mutation.ExamNameCode(); ok {
		_spec.SetField(exam_pm.FieldExamNameCode, field.TypeString, value)
	}
	if epuo.mutation.ExamNameCodeCleared() {
		_spec.ClearField(exam_pm.FieldExamNameCode, field.TypeString)
	}
	if value, ok := epuo.mutation.ExamName(); ok {
		_spec.SetField(exam_pm.FieldExamName, field.TypeString, value)
	}
	if value, ok := epuo.mutation.ExamType(); ok {
		_spec.SetField(exam_pm.FieldExamType, field.TypeString, value)
	}
	if value, ok := epuo.mutation.NotificationCode(); ok {
		_spec.SetField(exam_pm.FieldNotificationCode, field.TypeInt32, value)
	}
	if value, ok := epuo.mutation.AddedNotificationCode(); ok {
		_spec.AddField(exam_pm.FieldNotificationCode, field.TypeInt32, value)
	}
	if epuo.mutation.NotificationCodeCleared() {
		_spec.ClearField(exam_pm.FieldNotificationCode, field.TypeInt32)
	}
	if value, ok := epuo.mutation.ConductedBy(); ok {
		_spec.SetField(exam_pm.FieldConductedBy, field.TypeString, value)
	}
	if value, ok := epuo.mutation.NodalOffice(); ok {
		_spec.SetField(exam_pm.FieldNodalOffice, field.TypeString, value)
	}
	if epuo.mutation.NodalOfficeCleared() {
		_spec.ClearField(exam_pm.FieldNodalOffice, field.TypeString)
	}
	if value, ok := epuo.mutation.CalendarCode(); ok {
		_spec.SetField(exam_pm.FieldCalendarCode, field.TypeInt32, value)
	}
	if value, ok := epuo.mutation.AddedCalendarCode(); ok {
		_spec.AddField(exam_pm.FieldCalendarCode, field.TypeInt32, value)
	}
	if epuo.mutation.CalendarCodeCleared() {
		_spec.ClearField(exam_pm.FieldCalendarCode, field.TypeInt32)
	}
	if value, ok := epuo.mutation.PaperCode(); ok {
		_spec.SetField(exam_pm.FieldPaperCode, field.TypeInt32, value)
	}
	if value, ok := epuo.mutation.AddedPaperCode(); ok {
		_spec.AddField(exam_pm.FieldPaperCode, field.TypeInt32, value)
	}
	if epuo.mutation.PaperCodeCleared() {
		_spec.ClearField(exam_pm.FieldPaperCode, field.TypeInt32)
	}
	if value, ok := epuo.mutation.EligibleCadre(); ok {
		_spec.SetField(exam_pm.FieldEligibleCadre, field.TypeString, value)
	}
	if epuo.mutation.EligibleCadreCleared() {
		_spec.ClearField(exam_pm.FieldEligibleCadre, field.TypeString)
	}
	if value, ok := epuo.mutation.EligiblePost1(); ok {
		_spec.SetField(exam_pm.FieldEligiblePost1, field.TypeString, value)
	}
	if epuo.mutation.EligiblePost1Cleared() {
		_spec.ClearField(exam_pm.FieldEligiblePost1, field.TypeString)
	}
	if value, ok := epuo.mutation.EligiblePost2(); ok {
		_spec.SetField(exam_pm.FieldEligiblePost2, field.TypeString, value)
	}
	if epuo.mutation.EligiblePost2Cleared() {
		_spec.ClearField(exam_pm.FieldEligiblePost2, field.TypeString)
	}
	if value, ok := epuo.mutation.EligiblePost3(); ok {
		_spec.SetField(exam_pm.FieldEligiblePost3, field.TypeString, value)
	}
	if epuo.mutation.EligiblePost3Cleared() {
		_spec.ClearField(exam_pm.FieldEligiblePost3, field.TypeString)
	}
	if value, ok := epuo.mutation.EligiblePost4(); ok {
		_spec.SetField(exam_pm.FieldEligiblePost4, field.TypeString, value)
	}
	if epuo.mutation.EligiblePost4Cleared() {
		_spec.ClearField(exam_pm.FieldEligiblePost4, field.TypeString)
	}
	if value, ok := epuo.mutation.EligiblePost5(); ok {
		_spec.SetField(exam_pm.FieldEligiblePost5, field.TypeString, value)
	}
	if epuo.mutation.EligiblePost5Cleared() {
		_spec.ClearField(exam_pm.FieldEligiblePost5, field.TypeString)
	}
	if value, ok := epuo.mutation.ExamPost1(); ok {
		_spec.SetField(exam_pm.FieldExamPost1, field.TypeString, value)
	}
	if epuo.mutation.ExamPost1Cleared() {
		_spec.ClearField(exam_pm.FieldExamPost1, field.TypeString)
	}
	if value, ok := epuo.mutation.ExamPost2(); ok {
		_spec.SetField(exam_pm.FieldExamPost2, field.TypeString, value)
	}
	if epuo.mutation.ExamPost2Cleared() {
		_spec.ClearField(exam_pm.FieldExamPost2, field.TypeString)
	}
	if value, ok := epuo.mutation.ExamPost3(); ok {
		_spec.SetField(exam_pm.FieldExamPost3, field.TypeString, value)
	}
	if epuo.mutation.ExamPost3Cleared() {
		_spec.ClearField(exam_pm.FieldExamPost3, field.TypeString)
	}
	if value, ok := epuo.mutation.ExamPost4(); ok {
		_spec.SetField(exam_pm.FieldExamPost4, field.TypeString, value)
	}
	if epuo.mutation.ExamPost4Cleared() {
		_spec.ClearField(exam_pm.FieldExamPost4, field.TypeString)
	}
	if value, ok := epuo.mutation.ExamPost5(); ok {
		_spec.SetField(exam_pm.FieldExamPost5, field.TypeString, value)
	}
	if epuo.mutation.ExamPost5Cleared() {
		_spec.ClearField(exam_pm.FieldExamPost5, field.TypeString)
	}
	if value, ok := epuo.mutation.EducationCriteria(); ok {
		_spec.SetField(exam_pm.FieldEducationCriteria, field.TypeString, value)
	}
	if epuo.mutation.EducationCriteriaCleared() {
		_spec.ClearField(exam_pm.FieldEducationCriteria, field.TypeString)
	}
	if value, ok := epuo.mutation.CategoryAgeLimitGEN(); ok {
		_spec.SetField(exam_pm.FieldCategoryAgeLimitGEN, field.TypeString, value)
	}
	if epuo.mutation.CategoryAgeLimitGENCleared() {
		_spec.ClearField(exam_pm.FieldCategoryAgeLimitGEN, field.TypeString)
	}
	if value, ok := epuo.mutation.CategoryAgeLimitSC(); ok {
		_spec.SetField(exam_pm.FieldCategoryAgeLimitSC, field.TypeString, value)
	}
	if epuo.mutation.CategoryAgeLimitSCCleared() {
		_spec.ClearField(exam_pm.FieldCategoryAgeLimitSC, field.TypeString)
	}
	if value, ok := epuo.mutation.CategoryAgeLimitST(); ok {
		_spec.SetField(exam_pm.FieldCategoryAgeLimitST, field.TypeString, value)
	}
	if epuo.mutation.CategoryAgeLimitSTCleared() {
		_spec.ClearField(exam_pm.FieldCategoryAgeLimitST, field.TypeString)
	}
	if value, ok := epuo.mutation.ServiceYears(); ok {
		_spec.SetField(exam_pm.FieldServiceYears, field.TypeString, value)
	}
	if epuo.mutation.ServiceYearsCleared() {
		_spec.ClearField(exam_pm.FieldServiceYears, field.TypeString)
	}
	if value, ok := epuo.mutation.DrivingLicenseRequired(); ok {
		_spec.SetField(exam_pm.FieldDrivingLicenseRequired, field.TypeString, value)
	}
	if epuo.mutation.DrivingLicenseRequiredCleared() {
		_spec.ClearField(exam_pm.FieldDrivingLicenseRequired, field.TypeString)
	}
	if value, ok := epuo.mutation.ExamPaperCode(); ok {
		_spec.SetField(exam_pm.FieldExamPaperCode, field.TypeString, value)
	}
	if epuo.mutation.ExamPaperCodeCleared() {
		_spec.ClearField(exam_pm.FieldExamPaperCode, field.TypeString)
	}
	if value, ok := epuo.mutation.ExamPaper1(); ok {
		_spec.SetField(exam_pm.FieldExamPaper1, field.TypeString, value)
	}
	if epuo.mutation.ExamPaper1Cleared() {
		_spec.ClearField(exam_pm.FieldExamPaper1, field.TypeString)
	}
	if value, ok := epuo.mutation.ExamPaper2(); ok {
		_spec.SetField(exam_pm.FieldExamPaper2, field.TypeString, value)
	}
	if epuo.mutation.ExamPaper2Cleared() {
		_spec.ClearField(exam_pm.FieldExamPaper2, field.TypeString)
	}
	if value, ok := epuo.mutation.ExamPaper3(); ok {
		_spec.SetField(exam_pm.FieldExamPaper3, field.TypeString, value)
	}
	if epuo.mutation.ExamPaper3Cleared() {
		_spec.ClearField(exam_pm.FieldExamPaper3, field.TypeString)
	}
	if value, ok := epuo.mutation.ExamPaper4(); ok {
		_spec.SetField(exam_pm.FieldExamPaper4, field.TypeString, value)
	}
	if epuo.mutation.ExamPaper4Cleared() {
		_spec.ClearField(exam_pm.FieldExamPaper4, field.TypeString)
	}
	if value, ok := epuo.mutation.ExamPaper5(); ok {
		_spec.SetField(exam_pm.FieldExamPaper5, field.TypeString, value)
	}
	if epuo.mutation.ExamPaper5Cleared() {
		_spec.ClearField(exam_pm.FieldExamPaper5, field.TypeString)
	}
	if value, ok := epuo.mutation.ExamPaper6(); ok {
		_spec.SetField(exam_pm.FieldExamPaper6, field.TypeString, value)
	}
	if epuo.mutation.ExamPaper6Cleared() {
		_spec.ClearField(exam_pm.FieldExamPaper6, field.TypeString)
	}
	if value, ok := epuo.mutation.PayLevelEligibilty(); ok {
		_spec.SetField(exam_pm.FieldPayLevelEligibilty, field.TypeBool, value)
	}
	if epuo.mutation.PayLevelEligibiltyCleared() {
		_spec.ClearField(exam_pm.FieldPayLevelEligibilty, field.TypeBool)
	}
	if value, ok := epuo.mutation.CategoryMinMarksSCSTPH(); ok {
		_spec.SetField(exam_pm.FieldCategoryMinMarksSCSTPH, field.TypeString, value)
	}
	if epuo.mutation.CategoryMinMarksSCSTPHCleared() {
		_spec.ClearField(exam_pm.FieldCategoryMinMarksSCSTPH, field.TypeString)
	}
	if value, ok := epuo.mutation.CategoryMinMarksGENOBC(); ok {
		_spec.SetField(exam_pm.FieldCategoryMinMarksGENOBC, field.TypeString, value)
	}
	if epuo.mutation.CategoryMinMarksGENOBCCleared() {
		_spec.ClearField(exam_pm.FieldCategoryMinMarksGENOBC, field.TypeString)
	}
	if value, ok := epuo.mutation.LocalLanguageAllowed(); ok {
		_spec.SetField(exam_pm.FieldLocalLanguageAllowed, field.TypeBool, value)
	}
	if epuo.mutation.LocalLanguageAllowedCleared() {
		_spec.ClearField(exam_pm.FieldLocalLanguageAllowed, field.TypeBool)
	}
	if value, ok := epuo.mutation.UpdatedAt(); ok {
		_spec.SetField(exam_pm.FieldUpdatedAt, field.TypeTime, value)
	}
	if epuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(exam_pm.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := epuo.mutation.UpdatedBy(); ok {
		_spec.SetField(exam_pm.FieldUpdatedBy, field.TypeString, value)
	}
	if epuo.mutation.UpdatedByCleared() {
		_spec.ClearField(exam_pm.FieldUpdatedBy, field.TypeString)
	}
	_node = &Exam_PM{config: epuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, epuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exam_pm.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	epuo.mutation.done = true
	return _node, nil
}
