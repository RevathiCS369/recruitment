// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/divisionmaster"
	"recruit/ent/facility"
	"recruit/ent/predicate"
	"recruit/ent/regionmaster"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DivisionMasterUpdate is the builder for updating DivisionMaster entities.
type DivisionMasterUpdate struct {
	config
	hooks    []Hook
	mutation *DivisionMasterMutation
}

// Where appends a list predicates to the DivisionMasterUpdate builder.
func (dmu *DivisionMasterUpdate) Where(ps ...predicate.DivisionMaster) *DivisionMasterUpdate {
	dmu.mutation.Where(ps...)
	return dmu
}

// SetDivisionCode sets the "DivisionCode" field.
func (dmu *DivisionMasterUpdate) SetDivisionCode(i int32) *DivisionMasterUpdate {
	dmu.mutation.ResetDivisionCode()
	dmu.mutation.SetDivisionCode(i)
	return dmu
}

// AddDivisionCode adds i to the "DivisionCode" field.
func (dmu *DivisionMasterUpdate) AddDivisionCode(i int32) *DivisionMasterUpdate {
	dmu.mutation.AddDivisionCode(i)
	return dmu
}

// SetOfficeType sets the "OfficeType" field.
func (dmu *DivisionMasterUpdate) SetOfficeType(s string) *DivisionMasterUpdate {
	dmu.mutation.SetOfficeType(s)
	return dmu
}

// SetDivisionOfficeID sets the "DivisionOfficeID" field.
func (dmu *DivisionMasterUpdate) SetDivisionOfficeID(s string) *DivisionMasterUpdate {
	dmu.mutation.SetDivisionOfficeID(s)
	return dmu
}

// SetDivisionOfficeName sets the "DivisionOfficeName" field.
func (dmu *DivisionMasterUpdate) SetDivisionOfficeName(s string) *DivisionMasterUpdate {
	dmu.mutation.SetDivisionOfficeName(s)
	return dmu
}

// SetReportingOfficeType sets the "ReportingOfficeType" field.
func (dmu *DivisionMasterUpdate) SetReportingOfficeType(s string) *DivisionMasterUpdate {
	dmu.mutation.SetReportingOfficeType(s)
	return dmu
}

// SetNillableReportingOfficeType sets the "ReportingOfficeType" field if the given value is not nil.
func (dmu *DivisionMasterUpdate) SetNillableReportingOfficeType(s *string) *DivisionMasterUpdate {
	if s != nil {
		dmu.SetReportingOfficeType(*s)
	}
	return dmu
}

// ClearReportingOfficeType clears the value of the "ReportingOfficeType" field.
func (dmu *DivisionMasterUpdate) ClearReportingOfficeType() *DivisionMasterUpdate {
	dmu.mutation.ClearReportingOfficeType()
	return dmu
}

// SetReportingOfficeCode sets the "ReportingOfficeCode" field.
func (dmu *DivisionMasterUpdate) SetReportingOfficeCode(s string) *DivisionMasterUpdate {
	dmu.mutation.SetReportingOfficeCode(s)
	return dmu
}

// SetNillableReportingOfficeCode sets the "ReportingOfficeCode" field if the given value is not nil.
func (dmu *DivisionMasterUpdate) SetNillableReportingOfficeCode(s *string) *DivisionMasterUpdate {
	if s != nil {
		dmu.SetReportingOfficeCode(*s)
	}
	return dmu
}

// ClearReportingOfficeCode clears the value of the "ReportingOfficeCode" field.
func (dmu *DivisionMasterUpdate) ClearReportingOfficeCode() *DivisionMasterUpdate {
	dmu.mutation.ClearReportingOfficeCode()
	return dmu
}

// SetEmailID sets the "EmailID" field.
func (dmu *DivisionMasterUpdate) SetEmailID(s string) *DivisionMasterUpdate {
	dmu.mutation.SetEmailID(s)
	return dmu
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (dmu *DivisionMasterUpdate) SetNillableEmailID(s *string) *DivisionMasterUpdate {
	if s != nil {
		dmu.SetEmailID(*s)
	}
	return dmu
}

// ClearEmailID clears the value of the "EmailID" field.
func (dmu *DivisionMasterUpdate) ClearEmailID() *DivisionMasterUpdate {
	dmu.mutation.ClearEmailID()
	return dmu
}

// SetMobileNumber sets the "MobileNumber" field.
func (dmu *DivisionMasterUpdate) SetMobileNumber(i int32) *DivisionMasterUpdate {
	dmu.mutation.ResetMobileNumber()
	dmu.mutation.SetMobileNumber(i)
	return dmu
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (dmu *DivisionMasterUpdate) SetNillableMobileNumber(i *int32) *DivisionMasterUpdate {
	if i != nil {
		dmu.SetMobileNumber(*i)
	}
	return dmu
}

// AddMobileNumber adds i to the "MobileNumber" field.
func (dmu *DivisionMasterUpdate) AddMobileNumber(i int32) *DivisionMasterUpdate {
	dmu.mutation.AddMobileNumber(i)
	return dmu
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (dmu *DivisionMasterUpdate) ClearMobileNumber() *DivisionMasterUpdate {
	dmu.mutation.ClearMobileNumber()
	return dmu
}

// SetRegionCode sets the "RegionCode" field.
func (dmu *DivisionMasterUpdate) SetRegionCode(i int32) *DivisionMasterUpdate {
	dmu.mutation.ResetRegionCode()
	dmu.mutation.SetRegionCode(i)
	return dmu
}

// SetNillableRegionCode sets the "RegionCode" field if the given value is not nil.
func (dmu *DivisionMasterUpdate) SetNillableRegionCode(i *int32) *DivisionMasterUpdate {
	if i != nil {
		dmu.SetRegionCode(*i)
	}
	return dmu
}

// AddRegionCode adds i to the "RegionCode" field.
func (dmu *DivisionMasterUpdate) AddRegionCode(i int32) *DivisionMasterUpdate {
	dmu.mutation.AddRegionCode(i)
	return dmu
}

// ClearRegionCode clears the value of the "RegionCode" field.
func (dmu *DivisionMasterUpdate) ClearRegionCode() *DivisionMasterUpdate {
	dmu.mutation.ClearRegionCode()
	return dmu
}

// AddRegionIDs adds the "regions" edge to the RegionMaster entity by IDs.
func (dmu *DivisionMasterUpdate) AddRegionIDs(ids ...int32) *DivisionMasterUpdate {
	dmu.mutation.AddRegionIDs(ids...)
	return dmu
}

// AddRegions adds the "regions" edges to the RegionMaster entity.
func (dmu *DivisionMasterUpdate) AddRegions(r ...*RegionMaster) *DivisionMasterUpdate {
	ids := make([]int32, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return dmu.AddRegionIDs(ids...)
}

// AddDivisionsRefIDs adds the "divisions_ref" edge to the Facility entity by IDs.
func (dmu *DivisionMasterUpdate) AddDivisionsRefIDs(ids ...int32) *DivisionMasterUpdate {
	dmu.mutation.AddDivisionsRefIDs(ids...)
	return dmu
}

// AddDivisionsRef adds the "divisions_ref" edges to the Facility entity.
func (dmu *DivisionMasterUpdate) AddDivisionsRef(f ...*Facility) *DivisionMasterUpdate {
	ids := make([]int32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return dmu.AddDivisionsRefIDs(ids...)
}

// Mutation returns the DivisionMasterMutation object of the builder.
func (dmu *DivisionMasterUpdate) Mutation() *DivisionMasterMutation {
	return dmu.mutation
}

// ClearRegions clears all "regions" edges to the RegionMaster entity.
func (dmu *DivisionMasterUpdate) ClearRegions() *DivisionMasterUpdate {
	dmu.mutation.ClearRegions()
	return dmu
}

// RemoveRegionIDs removes the "regions" edge to RegionMaster entities by IDs.
func (dmu *DivisionMasterUpdate) RemoveRegionIDs(ids ...int32) *DivisionMasterUpdate {
	dmu.mutation.RemoveRegionIDs(ids...)
	return dmu
}

// RemoveRegions removes "regions" edges to RegionMaster entities.
func (dmu *DivisionMasterUpdate) RemoveRegions(r ...*RegionMaster) *DivisionMasterUpdate {
	ids := make([]int32, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return dmu.RemoveRegionIDs(ids...)
}

// ClearDivisionsRef clears all "divisions_ref" edges to the Facility entity.
func (dmu *DivisionMasterUpdate) ClearDivisionsRef() *DivisionMasterUpdate {
	dmu.mutation.ClearDivisionsRef()
	return dmu
}

// RemoveDivisionsRefIDs removes the "divisions_ref" edge to Facility entities by IDs.
func (dmu *DivisionMasterUpdate) RemoveDivisionsRefIDs(ids ...int32) *DivisionMasterUpdate {
	dmu.mutation.RemoveDivisionsRefIDs(ids...)
	return dmu
}

// RemoveDivisionsRef removes "divisions_ref" edges to Facility entities.
func (dmu *DivisionMasterUpdate) RemoveDivisionsRef(f ...*Facility) *DivisionMasterUpdate {
	ids := make([]int32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return dmu.RemoveDivisionsRefIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dmu *DivisionMasterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dmu.sqlSave, dmu.mutation, dmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dmu *DivisionMasterUpdate) SaveX(ctx context.Context) int {
	affected, err := dmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dmu *DivisionMasterUpdate) Exec(ctx context.Context) error {
	_, err := dmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmu *DivisionMasterUpdate) ExecX(ctx context.Context) {
	if err := dmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dmu *DivisionMasterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(divisionmaster.Table, divisionmaster.Columns, sqlgraph.NewFieldSpec(divisionmaster.FieldID, field.TypeInt32))
	if ps := dmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dmu.mutation.DivisionCode(); ok {
		_spec.SetField(divisionmaster.FieldDivisionCode, field.TypeInt32, value)
	}
	if value, ok := dmu.mutation.AddedDivisionCode(); ok {
		_spec.AddField(divisionmaster.FieldDivisionCode, field.TypeInt32, value)
	}
	if value, ok := dmu.mutation.OfficeType(); ok {
		_spec.SetField(divisionmaster.FieldOfficeType, field.TypeString, value)
	}
	if value, ok := dmu.mutation.DivisionOfficeID(); ok {
		_spec.SetField(divisionmaster.FieldDivisionOfficeID, field.TypeString, value)
	}
	if value, ok := dmu.mutation.DivisionOfficeName(); ok {
		_spec.SetField(divisionmaster.FieldDivisionOfficeName, field.TypeString, value)
	}
	if value, ok := dmu.mutation.ReportingOfficeType(); ok {
		_spec.SetField(divisionmaster.FieldReportingOfficeType, field.TypeString, value)
	}
	if dmu.mutation.ReportingOfficeTypeCleared() {
		_spec.ClearField(divisionmaster.FieldReportingOfficeType, field.TypeString)
	}
	if value, ok := dmu.mutation.ReportingOfficeCode(); ok {
		_spec.SetField(divisionmaster.FieldReportingOfficeCode, field.TypeString, value)
	}
	if dmu.mutation.ReportingOfficeCodeCleared() {
		_spec.ClearField(divisionmaster.FieldReportingOfficeCode, field.TypeString)
	}
	if value, ok := dmu.mutation.EmailID(); ok {
		_spec.SetField(divisionmaster.FieldEmailID, field.TypeString, value)
	}
	if dmu.mutation.EmailIDCleared() {
		_spec.ClearField(divisionmaster.FieldEmailID, field.TypeString)
	}
	if value, ok := dmu.mutation.MobileNumber(); ok {
		_spec.SetField(divisionmaster.FieldMobileNumber, field.TypeInt32, value)
	}
	if value, ok := dmu.mutation.AddedMobileNumber(); ok {
		_spec.AddField(divisionmaster.FieldMobileNumber, field.TypeInt32, value)
	}
	if dmu.mutation.MobileNumberCleared() {
		_spec.ClearField(divisionmaster.FieldMobileNumber, field.TypeInt32)
	}
	if value, ok := dmu.mutation.RegionCode(); ok {
		_spec.SetField(divisionmaster.FieldRegionCode, field.TypeInt32, value)
	}
	if value, ok := dmu.mutation.AddedRegionCode(); ok {
		_spec.AddField(divisionmaster.FieldRegionCode, field.TypeInt32, value)
	}
	if dmu.mutation.RegionCodeCleared() {
		_spec.ClearField(divisionmaster.FieldRegionCode, field.TypeInt32)
	}
	if dmu.mutation.RegionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   divisionmaster.RegionsTable,
			Columns: []string{divisionmaster.RegionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionmaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmu.mutation.RemovedRegionsIDs(); len(nodes) > 0 && !dmu.mutation.RegionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   divisionmaster.RegionsTable,
			Columns: []string{divisionmaster.RegionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionmaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmu.mutation.RegionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   divisionmaster.RegionsTable,
			Columns: []string{divisionmaster.RegionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionmaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dmu.mutation.DivisionsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   divisionmaster.DivisionsRefTable,
			Columns: []string{divisionmaster.DivisionsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmu.mutation.RemovedDivisionsRefIDs(); len(nodes) > 0 && !dmu.mutation.DivisionsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   divisionmaster.DivisionsRefTable,
			Columns: []string{divisionmaster.DivisionsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmu.mutation.DivisionsRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   divisionmaster.DivisionsRefTable,
			Columns: []string{divisionmaster.DivisionsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{divisionmaster.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dmu.mutation.done = true
	return n, nil
}

// DivisionMasterUpdateOne is the builder for updating a single DivisionMaster entity.
type DivisionMasterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DivisionMasterMutation
}

// SetDivisionCode sets the "DivisionCode" field.
func (dmuo *DivisionMasterUpdateOne) SetDivisionCode(i int32) *DivisionMasterUpdateOne {
	dmuo.mutation.ResetDivisionCode()
	dmuo.mutation.SetDivisionCode(i)
	return dmuo
}

// AddDivisionCode adds i to the "DivisionCode" field.
func (dmuo *DivisionMasterUpdateOne) AddDivisionCode(i int32) *DivisionMasterUpdateOne {
	dmuo.mutation.AddDivisionCode(i)
	return dmuo
}

// SetOfficeType sets the "OfficeType" field.
func (dmuo *DivisionMasterUpdateOne) SetOfficeType(s string) *DivisionMasterUpdateOne {
	dmuo.mutation.SetOfficeType(s)
	return dmuo
}

// SetDivisionOfficeID sets the "DivisionOfficeID" field.
func (dmuo *DivisionMasterUpdateOne) SetDivisionOfficeID(s string) *DivisionMasterUpdateOne {
	dmuo.mutation.SetDivisionOfficeID(s)
	return dmuo
}

// SetDivisionOfficeName sets the "DivisionOfficeName" field.
func (dmuo *DivisionMasterUpdateOne) SetDivisionOfficeName(s string) *DivisionMasterUpdateOne {
	dmuo.mutation.SetDivisionOfficeName(s)
	return dmuo
}

// SetReportingOfficeType sets the "ReportingOfficeType" field.
func (dmuo *DivisionMasterUpdateOne) SetReportingOfficeType(s string) *DivisionMasterUpdateOne {
	dmuo.mutation.SetReportingOfficeType(s)
	return dmuo
}

// SetNillableReportingOfficeType sets the "ReportingOfficeType" field if the given value is not nil.
func (dmuo *DivisionMasterUpdateOne) SetNillableReportingOfficeType(s *string) *DivisionMasterUpdateOne {
	if s != nil {
		dmuo.SetReportingOfficeType(*s)
	}
	return dmuo
}

// ClearReportingOfficeType clears the value of the "ReportingOfficeType" field.
func (dmuo *DivisionMasterUpdateOne) ClearReportingOfficeType() *DivisionMasterUpdateOne {
	dmuo.mutation.ClearReportingOfficeType()
	return dmuo
}

// SetReportingOfficeCode sets the "ReportingOfficeCode" field.
func (dmuo *DivisionMasterUpdateOne) SetReportingOfficeCode(s string) *DivisionMasterUpdateOne {
	dmuo.mutation.SetReportingOfficeCode(s)
	return dmuo
}

// SetNillableReportingOfficeCode sets the "ReportingOfficeCode" field if the given value is not nil.
func (dmuo *DivisionMasterUpdateOne) SetNillableReportingOfficeCode(s *string) *DivisionMasterUpdateOne {
	if s != nil {
		dmuo.SetReportingOfficeCode(*s)
	}
	return dmuo
}

// ClearReportingOfficeCode clears the value of the "ReportingOfficeCode" field.
func (dmuo *DivisionMasterUpdateOne) ClearReportingOfficeCode() *DivisionMasterUpdateOne {
	dmuo.mutation.ClearReportingOfficeCode()
	return dmuo
}

// SetEmailID sets the "EmailID" field.
func (dmuo *DivisionMasterUpdateOne) SetEmailID(s string) *DivisionMasterUpdateOne {
	dmuo.mutation.SetEmailID(s)
	return dmuo
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (dmuo *DivisionMasterUpdateOne) SetNillableEmailID(s *string) *DivisionMasterUpdateOne {
	if s != nil {
		dmuo.SetEmailID(*s)
	}
	return dmuo
}

// ClearEmailID clears the value of the "EmailID" field.
func (dmuo *DivisionMasterUpdateOne) ClearEmailID() *DivisionMasterUpdateOne {
	dmuo.mutation.ClearEmailID()
	return dmuo
}

// SetMobileNumber sets the "MobileNumber" field.
func (dmuo *DivisionMasterUpdateOne) SetMobileNumber(i int32) *DivisionMasterUpdateOne {
	dmuo.mutation.ResetMobileNumber()
	dmuo.mutation.SetMobileNumber(i)
	return dmuo
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (dmuo *DivisionMasterUpdateOne) SetNillableMobileNumber(i *int32) *DivisionMasterUpdateOne {
	if i != nil {
		dmuo.SetMobileNumber(*i)
	}
	return dmuo
}

// AddMobileNumber adds i to the "MobileNumber" field.
func (dmuo *DivisionMasterUpdateOne) AddMobileNumber(i int32) *DivisionMasterUpdateOne {
	dmuo.mutation.AddMobileNumber(i)
	return dmuo
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (dmuo *DivisionMasterUpdateOne) ClearMobileNumber() *DivisionMasterUpdateOne {
	dmuo.mutation.ClearMobileNumber()
	return dmuo
}

// SetRegionCode sets the "RegionCode" field.
func (dmuo *DivisionMasterUpdateOne) SetRegionCode(i int32) *DivisionMasterUpdateOne {
	dmuo.mutation.ResetRegionCode()
	dmuo.mutation.SetRegionCode(i)
	return dmuo
}

// SetNillableRegionCode sets the "RegionCode" field if the given value is not nil.
func (dmuo *DivisionMasterUpdateOne) SetNillableRegionCode(i *int32) *DivisionMasterUpdateOne {
	if i != nil {
		dmuo.SetRegionCode(*i)
	}
	return dmuo
}

// AddRegionCode adds i to the "RegionCode" field.
func (dmuo *DivisionMasterUpdateOne) AddRegionCode(i int32) *DivisionMasterUpdateOne {
	dmuo.mutation.AddRegionCode(i)
	return dmuo
}

// ClearRegionCode clears the value of the "RegionCode" field.
func (dmuo *DivisionMasterUpdateOne) ClearRegionCode() *DivisionMasterUpdateOne {
	dmuo.mutation.ClearRegionCode()
	return dmuo
}

// AddRegionIDs adds the "regions" edge to the RegionMaster entity by IDs.
func (dmuo *DivisionMasterUpdateOne) AddRegionIDs(ids ...int32) *DivisionMasterUpdateOne {
	dmuo.mutation.AddRegionIDs(ids...)
	return dmuo
}

// AddRegions adds the "regions" edges to the RegionMaster entity.
func (dmuo *DivisionMasterUpdateOne) AddRegions(r ...*RegionMaster) *DivisionMasterUpdateOne {
	ids := make([]int32, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return dmuo.AddRegionIDs(ids...)
}

// AddDivisionsRefIDs adds the "divisions_ref" edge to the Facility entity by IDs.
func (dmuo *DivisionMasterUpdateOne) AddDivisionsRefIDs(ids ...int32) *DivisionMasterUpdateOne {
	dmuo.mutation.AddDivisionsRefIDs(ids...)
	return dmuo
}

// AddDivisionsRef adds the "divisions_ref" edges to the Facility entity.
func (dmuo *DivisionMasterUpdateOne) AddDivisionsRef(f ...*Facility) *DivisionMasterUpdateOne {
	ids := make([]int32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return dmuo.AddDivisionsRefIDs(ids...)
}

// Mutation returns the DivisionMasterMutation object of the builder.
func (dmuo *DivisionMasterUpdateOne) Mutation() *DivisionMasterMutation {
	return dmuo.mutation
}

// ClearRegions clears all "regions" edges to the RegionMaster entity.
func (dmuo *DivisionMasterUpdateOne) ClearRegions() *DivisionMasterUpdateOne {
	dmuo.mutation.ClearRegions()
	return dmuo
}

// RemoveRegionIDs removes the "regions" edge to RegionMaster entities by IDs.
func (dmuo *DivisionMasterUpdateOne) RemoveRegionIDs(ids ...int32) *DivisionMasterUpdateOne {
	dmuo.mutation.RemoveRegionIDs(ids...)
	return dmuo
}

// RemoveRegions removes "regions" edges to RegionMaster entities.
func (dmuo *DivisionMasterUpdateOne) RemoveRegions(r ...*RegionMaster) *DivisionMasterUpdateOne {
	ids := make([]int32, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return dmuo.RemoveRegionIDs(ids...)
}

// ClearDivisionsRef clears all "divisions_ref" edges to the Facility entity.
func (dmuo *DivisionMasterUpdateOne) ClearDivisionsRef() *DivisionMasterUpdateOne {
	dmuo.mutation.ClearDivisionsRef()
	return dmuo
}

// RemoveDivisionsRefIDs removes the "divisions_ref" edge to Facility entities by IDs.
func (dmuo *DivisionMasterUpdateOne) RemoveDivisionsRefIDs(ids ...int32) *DivisionMasterUpdateOne {
	dmuo.mutation.RemoveDivisionsRefIDs(ids...)
	return dmuo
}

// RemoveDivisionsRef removes "divisions_ref" edges to Facility entities.
func (dmuo *DivisionMasterUpdateOne) RemoveDivisionsRef(f ...*Facility) *DivisionMasterUpdateOne {
	ids := make([]int32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return dmuo.RemoveDivisionsRefIDs(ids...)
}

// Where appends a list predicates to the DivisionMasterUpdate builder.
func (dmuo *DivisionMasterUpdateOne) Where(ps ...predicate.DivisionMaster) *DivisionMasterUpdateOne {
	dmuo.mutation.Where(ps...)
	return dmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dmuo *DivisionMasterUpdateOne) Select(field string, fields ...string) *DivisionMasterUpdateOne {
	dmuo.fields = append([]string{field}, fields...)
	return dmuo
}

// Save executes the query and returns the updated DivisionMaster entity.
func (dmuo *DivisionMasterUpdateOne) Save(ctx context.Context) (*DivisionMaster, error) {
	return withHooks(ctx, dmuo.sqlSave, dmuo.mutation, dmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dmuo *DivisionMasterUpdateOne) SaveX(ctx context.Context) *DivisionMaster {
	node, err := dmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dmuo *DivisionMasterUpdateOne) Exec(ctx context.Context) error {
	_, err := dmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmuo *DivisionMasterUpdateOne) ExecX(ctx context.Context) {
	if err := dmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dmuo *DivisionMasterUpdateOne) sqlSave(ctx context.Context) (_node *DivisionMaster, err error) {
	_spec := sqlgraph.NewUpdateSpec(divisionmaster.Table, divisionmaster.Columns, sqlgraph.NewFieldSpec(divisionmaster.FieldID, field.TypeInt32))
	id, ok := dmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DivisionMaster.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, divisionmaster.FieldID)
		for _, f := range fields {
			if !divisionmaster.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != divisionmaster.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dmuo.mutation.DivisionCode(); ok {
		_spec.SetField(divisionmaster.FieldDivisionCode, field.TypeInt32, value)
	}
	if value, ok := dmuo.mutation.AddedDivisionCode(); ok {
		_spec.AddField(divisionmaster.FieldDivisionCode, field.TypeInt32, value)
	}
	if value, ok := dmuo.mutation.OfficeType(); ok {
		_spec.SetField(divisionmaster.FieldOfficeType, field.TypeString, value)
	}
	if value, ok := dmuo.mutation.DivisionOfficeID(); ok {
		_spec.SetField(divisionmaster.FieldDivisionOfficeID, field.TypeString, value)
	}
	if value, ok := dmuo.mutation.DivisionOfficeName(); ok {
		_spec.SetField(divisionmaster.FieldDivisionOfficeName, field.TypeString, value)
	}
	if value, ok := dmuo.mutation.ReportingOfficeType(); ok {
		_spec.SetField(divisionmaster.FieldReportingOfficeType, field.TypeString, value)
	}
	if dmuo.mutation.ReportingOfficeTypeCleared() {
		_spec.ClearField(divisionmaster.FieldReportingOfficeType, field.TypeString)
	}
	if value, ok := dmuo.mutation.ReportingOfficeCode(); ok {
		_spec.SetField(divisionmaster.FieldReportingOfficeCode, field.TypeString, value)
	}
	if dmuo.mutation.ReportingOfficeCodeCleared() {
		_spec.ClearField(divisionmaster.FieldReportingOfficeCode, field.TypeString)
	}
	if value, ok := dmuo.mutation.EmailID(); ok {
		_spec.SetField(divisionmaster.FieldEmailID, field.TypeString, value)
	}
	if dmuo.mutation.EmailIDCleared() {
		_spec.ClearField(divisionmaster.FieldEmailID, field.TypeString)
	}
	if value, ok := dmuo.mutation.MobileNumber(); ok {
		_spec.SetField(divisionmaster.FieldMobileNumber, field.TypeInt32, value)
	}
	if value, ok := dmuo.mutation.AddedMobileNumber(); ok {
		_spec.AddField(divisionmaster.FieldMobileNumber, field.TypeInt32, value)
	}
	if dmuo.mutation.MobileNumberCleared() {
		_spec.ClearField(divisionmaster.FieldMobileNumber, field.TypeInt32)
	}
	if value, ok := dmuo.mutation.RegionCode(); ok {
		_spec.SetField(divisionmaster.FieldRegionCode, field.TypeInt32, value)
	}
	if value, ok := dmuo.mutation.AddedRegionCode(); ok {
		_spec.AddField(divisionmaster.FieldRegionCode, field.TypeInt32, value)
	}
	if dmuo.mutation.RegionCodeCleared() {
		_spec.ClearField(divisionmaster.FieldRegionCode, field.TypeInt32)
	}
	if dmuo.mutation.RegionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   divisionmaster.RegionsTable,
			Columns: []string{divisionmaster.RegionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionmaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmuo.mutation.RemovedRegionsIDs(); len(nodes) > 0 && !dmuo.mutation.RegionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   divisionmaster.RegionsTable,
			Columns: []string{divisionmaster.RegionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionmaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmuo.mutation.RegionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   divisionmaster.RegionsTable,
			Columns: []string{divisionmaster.RegionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionmaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dmuo.mutation.DivisionsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   divisionmaster.DivisionsRefTable,
			Columns: []string{divisionmaster.DivisionsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmuo.mutation.RemovedDivisionsRefIDs(); len(nodes) > 0 && !dmuo.mutation.DivisionsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   divisionmaster.DivisionsRefTable,
			Columns: []string{divisionmaster.DivisionsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmuo.mutation.DivisionsRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   divisionmaster.DivisionsRefTable,
			Columns: []string{divisionmaster.DivisionsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DivisionMaster{config: dmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{divisionmaster.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dmuo.mutation.done = true
	return _node, nil
}
