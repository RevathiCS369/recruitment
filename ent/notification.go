// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/exam"
	"recruit/ent/notification"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Notification is the model entity for the Notification schema.
type Notification struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// ExamCode holds the value of the "ExamCode" field.
	ExamCode int32 `json:"ExamCode,omitempty"`
	// ExamYear holds the value of the "ExamYear" field.
	ExamYear int32 `json:"ExamYear,omitempty"`
	// ApplicationStartDate holds the value of the "ApplicationStartDate" field.
	ApplicationStartDate time.Time `json:"ApplicationStartDate,omitempty"`
	// ApplicationEndDate holds the value of the "ApplicationEndDate" field.
	ApplicationEndDate time.Time `json:"ApplicationEndDate,omitempty"`
	// VerificationDateByController holds the value of the "VerificationDateByController" field.
	VerificationDateByController time.Time `json:"VerificationDateByController,omitempty"`
	// CorrectionDateByCandidate holds the value of the "CorrectionDateByCandidate" field.
	CorrectionDateByCandidate time.Time `json:"CorrectionDateByCandidate,omitempty"`
	// CorrectionVeriyDateByController holds the value of the "CorrectionVeriyDateByController" field.
	CorrectionVeriyDateByController time.Time `json:"CorrectionVeriyDateByController,omitempty"`
	// HallTicketAllotmentDateByNodalOfficer holds the value of the "HallTicketAllotmentDateByNodalOfficer" field.
	HallTicketAllotmentDateByNodalOfficer time.Time `json:"HallTicketAllotmentDateByNodalOfficer,omitempty"`
	// HallTicketDownloadDate holds the value of the "HallTicketDownloadDate" field.
	HallTicketDownloadDate time.Time `json:"HallTicketDownloadDate,omitempty"`
	// NotifyFile holds the value of the "NotifyFile" field.
	NotifyFile string `json:"NotifyFile,omitempty"`
	// SyllabusFile holds the value of the "SyllabusFile" field.
	SyllabusFile string `json:"SyllabusFile,omitempty"`
	// VacanciesFile holds the value of the "VacanciesFile" field.
	VacanciesFile string `json:"VacanciesFile,omitempty"`
	// ExamCodePS holds the value of the "ExamCodePS" field.
	ExamCodePS int32 `json:"ExamCodePS,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NotificationQuery when eager-loading is set.
	Edges                            NotificationEdges `json:"edges"`
	eligibility_master_notifications *int32
	exam_calendar_notify_ref         *int32
	exam_ip_notifications_ip         *int32
	exam_pa_notifications_ps         *int32
	exam_ps_notifications_ps         *int32
	selectValues                     sql.SelectValues
}

// NotificationEdges holds the relations/edges for other nodes in the graph.
type NotificationEdges struct {
	// Applications holds the value of the applications edge.
	Applications []*Application `json:"applications,omitempty"`
	// Centers holds the value of the centers edge.
	Centers []*Center `json:"centers,omitempty"`
	// NodalOfficers holds the value of the nodal_officers edge.
	NodalOfficers []*NodalOfficer `json:"nodal_officers,omitempty"`
	// Exam holds the value of the exam edge.
	Exam *Exam `json:"exam,omitempty"`
	// VacancyYears holds the value of the vacancy_years edge.
	VacancyYears []*VacancyYear `json:"vacancy_years,omitempty"`
	// NotifyRef holds the value of the notify_ref edge.
	NotifyRef []*Notification `json:"notify_ref,omitempty"`
	// NotificationsPs holds the value of the notifications_ps edge.
	NotificationsPs []*Exam_PS `json:"notifications_ps,omitempty"`
	// NotificationsIP holds the value of the notifications_ip edge.
	NotificationsIP []*Exam_IP `json:"notifications_ip,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// ApplicationsOrErr returns the Applications value or an error if the edge
// was not loaded in eager-loading.
func (e NotificationEdges) ApplicationsOrErr() ([]*Application, error) {
	if e.loadedTypes[0] {
		return e.Applications, nil
	}
	return nil, &NotLoadedError{edge: "applications"}
}

// CentersOrErr returns the Centers value or an error if the edge
// was not loaded in eager-loading.
func (e NotificationEdges) CentersOrErr() ([]*Center, error) {
	if e.loadedTypes[1] {
		return e.Centers, nil
	}
	return nil, &NotLoadedError{edge: "centers"}
}

// NodalOfficersOrErr returns the NodalOfficers value or an error if the edge
// was not loaded in eager-loading.
func (e NotificationEdges) NodalOfficersOrErr() ([]*NodalOfficer, error) {
	if e.loadedTypes[2] {
		return e.NodalOfficers, nil
	}
	return nil, &NotLoadedError{edge: "nodal_officers"}
}

// ExamOrErr returns the Exam value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NotificationEdges) ExamOrErr() (*Exam, error) {
	if e.loadedTypes[3] {
		if e.Exam == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: exam.Label}
		}
		return e.Exam, nil
	}
	return nil, &NotLoadedError{edge: "exam"}
}

// VacancyYearsOrErr returns the VacancyYears value or an error if the edge
// was not loaded in eager-loading.
func (e NotificationEdges) VacancyYearsOrErr() ([]*VacancyYear, error) {
	if e.loadedTypes[4] {
		return e.VacancyYears, nil
	}
	return nil, &NotLoadedError{edge: "vacancy_years"}
}

// NotifyRefOrErr returns the NotifyRef value or an error if the edge
// was not loaded in eager-loading.
func (e NotificationEdges) NotifyRefOrErr() ([]*Notification, error) {
	if e.loadedTypes[5] {
		return e.NotifyRef, nil
	}
	return nil, &NotLoadedError{edge: "notify_ref"}
}

// NotificationsPsOrErr returns the NotificationsPs value or an error if the edge
// was not loaded in eager-loading.
func (e NotificationEdges) NotificationsPsOrErr() ([]*Exam_PS, error) {
	if e.loadedTypes[6] {
		return e.NotificationsPs, nil
	}
	return nil, &NotLoadedError{edge: "notifications_ps"}
}

// NotificationsIPOrErr returns the NotificationsIP value or an error if the edge
// was not loaded in eager-loading.
func (e NotificationEdges) NotificationsIPOrErr() ([]*Exam_IP, error) {
	if e.loadedTypes[7] {
		return e.NotificationsIP, nil
	}
	return nil, &NotLoadedError{edge: "notifications_ip"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Notification) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case notification.FieldID, notification.FieldExamCode, notification.FieldExamYear, notification.FieldExamCodePS:
			values[i] = new(sql.NullInt64)
		case notification.FieldNotifyFile, notification.FieldSyllabusFile, notification.FieldVacanciesFile:
			values[i] = new(sql.NullString)
		case notification.FieldApplicationStartDate, notification.FieldApplicationEndDate, notification.FieldVerificationDateByController, notification.FieldCorrectionDateByCandidate, notification.FieldCorrectionVeriyDateByController, notification.FieldHallTicketAllotmentDateByNodalOfficer, notification.FieldHallTicketDownloadDate:
			values[i] = new(sql.NullTime)
		case notification.ForeignKeys[0]: // eligibility_master_notifications
			values[i] = new(sql.NullInt64)
		case notification.ForeignKeys[1]: // exam_calendar_notify_ref
			values[i] = new(sql.NullInt64)
		case notification.ForeignKeys[2]: // exam_ip_notifications_ip
			values[i] = new(sql.NullInt64)
		case notification.ForeignKeys[3]: // exam_pa_notifications_ps
			values[i] = new(sql.NullInt64)
		case notification.ForeignKeys[4]: // exam_ps_notifications_ps
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Notification fields.
func (n *Notification) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notification.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			n.ID = int32(value.Int64)
		case notification.FieldExamCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamCode", values[i])
			} else if value.Valid {
				n.ExamCode = int32(value.Int64)
			}
		case notification.FieldExamYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamYear", values[i])
			} else if value.Valid {
				n.ExamYear = int32(value.Int64)
			}
		case notification.FieldApplicationStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ApplicationStartDate", values[i])
			} else if value.Valid {
				n.ApplicationStartDate = value.Time
			}
		case notification.FieldApplicationEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ApplicationEndDate", values[i])
			} else if value.Valid {
				n.ApplicationEndDate = value.Time
			}
		case notification.FieldVerificationDateByController:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field VerificationDateByController", values[i])
			} else if value.Valid {
				n.VerificationDateByController = value.Time
			}
		case notification.FieldCorrectionDateByCandidate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CorrectionDateByCandidate", values[i])
			} else if value.Valid {
				n.CorrectionDateByCandidate = value.Time
			}
		case notification.FieldCorrectionVeriyDateByController:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CorrectionVeriyDateByController", values[i])
			} else if value.Valid {
				n.CorrectionVeriyDateByController = value.Time
			}
		case notification.FieldHallTicketAllotmentDateByNodalOfficer:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field HallTicketAllotmentDateByNodalOfficer", values[i])
			} else if value.Valid {
				n.HallTicketAllotmentDateByNodalOfficer = value.Time
			}
		case notification.FieldHallTicketDownloadDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field HallTicketDownloadDate", values[i])
			} else if value.Valid {
				n.HallTicketDownloadDate = value.Time
			}
		case notification.FieldNotifyFile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NotifyFile", values[i])
			} else if value.Valid {
				n.NotifyFile = value.String
			}
		case notification.FieldSyllabusFile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field SyllabusFile", values[i])
			} else if value.Valid {
				n.SyllabusFile = value.String
			}
		case notification.FieldVacanciesFile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VacanciesFile", values[i])
			} else if value.Valid {
				n.VacanciesFile = value.String
			}
		case notification.FieldExamCodePS:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamCodePS", values[i])
			} else if value.Valid {
				n.ExamCodePS = int32(value.Int64)
			}
		case notification.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field eligibility_master_notifications", value)
			} else if value.Valid {
				n.eligibility_master_notifications = new(int32)
				*n.eligibility_master_notifications = int32(value.Int64)
			}
		case notification.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exam_calendar_notify_ref", value)
			} else if value.Valid {
				n.exam_calendar_notify_ref = new(int32)
				*n.exam_calendar_notify_ref = int32(value.Int64)
			}
		case notification.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exam_ip_notifications_ip", value)
			} else if value.Valid {
				n.exam_ip_notifications_ip = new(int32)
				*n.exam_ip_notifications_ip = int32(value.Int64)
			}
		case notification.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exam_pa_notifications_ps", value)
			} else if value.Valid {
				n.exam_pa_notifications_ps = new(int32)
				*n.exam_pa_notifications_ps = int32(value.Int64)
			}
		case notification.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exam_ps_notifications_ps", value)
			} else if value.Valid {
				n.exam_ps_notifications_ps = new(int32)
				*n.exam_ps_notifications_ps = int32(value.Int64)
			}
		default:
			n.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Notification.
// This includes values selected through modifiers, order, etc.
func (n *Notification) Value(name string) (ent.Value, error) {
	return n.selectValues.Get(name)
}

// QueryApplications queries the "applications" edge of the Notification entity.
func (n *Notification) QueryApplications() *ApplicationQuery {
	return NewNotificationClient(n.config).QueryApplications(n)
}

// QueryCenters queries the "centers" edge of the Notification entity.
func (n *Notification) QueryCenters() *CenterQuery {
	return NewNotificationClient(n.config).QueryCenters(n)
}

// QueryNodalOfficers queries the "nodal_officers" edge of the Notification entity.
func (n *Notification) QueryNodalOfficers() *NodalOfficerQuery {
	return NewNotificationClient(n.config).QueryNodalOfficers(n)
}

// QueryExam queries the "exam" edge of the Notification entity.
func (n *Notification) QueryExam() *ExamQuery {
	return NewNotificationClient(n.config).QueryExam(n)
}

// QueryVacancyYears queries the "vacancy_years" edge of the Notification entity.
func (n *Notification) QueryVacancyYears() *VacancyYearQuery {
	return NewNotificationClient(n.config).QueryVacancyYears(n)
}

// QueryNotifyRef queries the "notify_ref" edge of the Notification entity.
func (n *Notification) QueryNotifyRef() *NotificationQuery {
	return NewNotificationClient(n.config).QueryNotifyRef(n)
}

// QueryNotificationsPs queries the "notifications_ps" edge of the Notification entity.
func (n *Notification) QueryNotificationsPs() *ExamPSQuery {
	return NewNotificationClient(n.config).QueryNotificationsPs(n)
}

// QueryNotificationsIP queries the "notifications_ip" edge of the Notification entity.
func (n *Notification) QueryNotificationsIP() *ExamIPQuery {
	return NewNotificationClient(n.config).QueryNotificationsIP(n)
}

// Update returns a builder for updating this Notification.
// Note that you need to call Notification.Unwrap() before calling this method if this Notification
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Notification) Update() *NotificationUpdateOne {
	return NewNotificationClient(n.config).UpdateOne(n)
}

// Unwrap unwraps the Notification entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Notification) Unwrap() *Notification {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Notification is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Notification) String() string {
	var builder strings.Builder
	builder.WriteString("Notification(")
	builder.WriteString(fmt.Sprintf("id=%v, ", n.ID))
	builder.WriteString("ExamCode=")
	builder.WriteString(fmt.Sprintf("%v", n.ExamCode))
	builder.WriteString(", ")
	builder.WriteString("ExamYear=")
	builder.WriteString(fmt.Sprintf("%v", n.ExamYear))
	builder.WriteString(", ")
	builder.WriteString("ApplicationStartDate=")
	builder.WriteString(n.ApplicationStartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ApplicationEndDate=")
	builder.WriteString(n.ApplicationEndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("VerificationDateByController=")
	builder.WriteString(n.VerificationDateByController.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("CorrectionDateByCandidate=")
	builder.WriteString(n.CorrectionDateByCandidate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("CorrectionVeriyDateByController=")
	builder.WriteString(n.CorrectionVeriyDateByController.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("HallTicketAllotmentDateByNodalOfficer=")
	builder.WriteString(n.HallTicketAllotmentDateByNodalOfficer.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("HallTicketDownloadDate=")
	builder.WriteString(n.HallTicketDownloadDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("NotifyFile=")
	builder.WriteString(n.NotifyFile)
	builder.WriteString(", ")
	builder.WriteString("SyllabusFile=")
	builder.WriteString(n.SyllabusFile)
	builder.WriteString(", ")
	builder.WriteString("VacanciesFile=")
	builder.WriteString(n.VacanciesFile)
	builder.WriteString(", ")
	builder.WriteString("ExamCodePS=")
	builder.WriteString(fmt.Sprintf("%v", n.ExamCodePS))
	builder.WriteByte(')')
	return builder.String()
}

// Notifications is a parsable slice of Notification.
type Notifications []*Notification
