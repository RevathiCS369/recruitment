// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/employeemaster"
	"recruit/ent/exam_applications_ip"
	"recruit/ent/exam_applications_ps"
	"recruit/ent/exam_ip"
	"recruit/ent/exam_ps"
	"recruit/ent/predicate"
	"recruit/ent/rolemaster"
	"recruit/ent/usermaster"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserMasterUpdate is the builder for updating UserMaster entities.
type UserMasterUpdate struct {
	config
	hooks    []Hook
	mutation *UserMasterMutation
}

// Where appends a list predicates to the UserMasterUpdate builder.
func (umu *UserMasterUpdate) Where(ps ...predicate.UserMaster) *UserMasterUpdate {
	umu.mutation.Where(ps...)
	return umu
}

// SetEmployeeID sets the "EmployeeID" field.
func (umu *UserMasterUpdate) SetEmployeeID(i int64) *UserMasterUpdate {
	umu.mutation.ResetEmployeeID()
	umu.mutation.SetEmployeeID(i)
	return umu
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableEmployeeID(i *int64) *UserMasterUpdate {
	if i != nil {
		umu.SetEmployeeID(*i)
	}
	return umu
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (umu *UserMasterUpdate) AddEmployeeID(i int64) *UserMasterUpdate {
	umu.mutation.AddEmployeeID(i)
	return umu
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (umu *UserMasterUpdate) ClearEmployeeID() *UserMasterUpdate {
	umu.mutation.ClearEmployeeID()
	return umu
}

// SetEmployeeName sets the "EmployeeName" field.
func (umu *UserMasterUpdate) SetEmployeeName(s string) *UserMasterUpdate {
	umu.mutation.SetEmployeeName(s)
	return umu
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableEmployeeName(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetEmployeeName(*s)
	}
	return umu
}

// ClearEmployeeName clears the value of the "EmployeeName" field.
func (umu *UserMasterUpdate) ClearEmployeeName() *UserMasterUpdate {
	umu.mutation.ClearEmployeeName()
	return umu
}

// SetFacilityID sets the "FacilityID" field.
func (umu *UserMasterUpdate) SetFacilityID(s string) *UserMasterUpdate {
	umu.mutation.SetFacilityID(s)
	return umu
}

// SetNillableFacilityID sets the "FacilityID" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableFacilityID(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetFacilityID(*s)
	}
	return umu
}

// ClearFacilityID clears the value of the "FacilityID" field.
func (umu *UserMasterUpdate) ClearFacilityID() *UserMasterUpdate {
	umu.mutation.ClearFacilityID()
	return umu
}

// SetCadre sets the "Cadre" field.
func (umu *UserMasterUpdate) SetCadre(s string) *UserMasterUpdate {
	umu.mutation.SetCadre(s)
	return umu
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableCadre(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetCadre(*s)
	}
	return umu
}

// ClearCadre clears the value of the "Cadre" field.
func (umu *UserMasterUpdate) ClearCadre() *UserMasterUpdate {
	umu.mutation.ClearCadre()
	return umu
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (umu *UserMasterUpdate) SetRoleUserCode(i int32) *UserMasterUpdate {
	umu.mutation.SetRoleUserCode(i)
	return umu
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableRoleUserCode(i *int32) *UserMasterUpdate {
	if i != nil {
		umu.SetRoleUserCode(*i)
	}
	return umu
}

// ClearRoleUserCode clears the value of the "RoleUserCode" field.
func (umu *UserMasterUpdate) ClearRoleUserCode() *UserMasterUpdate {
	umu.mutation.ClearRoleUserCode()
	return umu
}

// SetMobile sets the "Mobile" field.
func (umu *UserMasterUpdate) SetMobile(s string) *UserMasterUpdate {
	umu.mutation.SetMobile(s)
	return umu
}

// SetNillableMobile sets the "Mobile" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableMobile(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetMobile(*s)
	}
	return umu
}

// ClearMobile clears the value of the "Mobile" field.
func (umu *UserMasterUpdate) ClearMobile() *UserMasterUpdate {
	umu.mutation.ClearMobile()
	return umu
}

// SetEmailID sets the "EmailID" field.
func (umu *UserMasterUpdate) SetEmailID(s string) *UserMasterUpdate {
	umu.mutation.SetEmailID(s)
	return umu
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableEmailID(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetEmailID(*s)
	}
	return umu
}

// ClearEmailID clears the value of the "EmailID" field.
func (umu *UserMasterUpdate) ClearEmailID() *UserMasterUpdate {
	umu.mutation.ClearEmailID()
	return umu
}

// SetUserName sets the "UserName" field.
func (umu *UserMasterUpdate) SetUserName(s string) *UserMasterUpdate {
	umu.mutation.SetUserName(s)
	return umu
}

// SetNillableUserName sets the "UserName" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableUserName(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetUserName(*s)
	}
	return umu
}

// ClearUserName clears the value of the "UserName" field.
func (umu *UserMasterUpdate) ClearUserName() *UserMasterUpdate {
	umu.mutation.ClearUserName()
	return umu
}

// SetPassword sets the "Password" field.
func (umu *UserMasterUpdate) SetPassword(s string) *UserMasterUpdate {
	umu.mutation.SetPassword(s)
	return umu
}

// SetNillablePassword sets the "Password" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillablePassword(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetPassword(*s)
	}
	return umu
}

// ClearPassword clears the value of the "Password" field.
func (umu *UserMasterUpdate) ClearPassword() *UserMasterUpdate {
	umu.mutation.ClearPassword()
	return umu
}

// SetOTP sets the "OTP" field.
func (umu *UserMasterUpdate) SetOTP(i int32) *UserMasterUpdate {
	umu.mutation.ResetOTP()
	umu.mutation.SetOTP(i)
	return umu
}

// SetNillableOTP sets the "OTP" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableOTP(i *int32) *UserMasterUpdate {
	if i != nil {
		umu.SetOTP(*i)
	}
	return umu
}

// AddOTP adds i to the "OTP" field.
func (umu *UserMasterUpdate) AddOTP(i int32) *UserMasterUpdate {
	umu.mutation.AddOTP(i)
	return umu
}

// ClearOTP clears the value of the "OTP" field.
func (umu *UserMasterUpdate) ClearOTP() *UserMasterUpdate {
	umu.mutation.ClearOTP()
	return umu
}

// SetExamCode sets the "ExamCode" field.
func (umu *UserMasterUpdate) SetExamCode(i int32) *UserMasterUpdate {
	umu.mutation.ResetExamCode()
	umu.mutation.SetExamCode(i)
	return umu
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableExamCode(i *int32) *UserMasterUpdate {
	if i != nil {
		umu.SetExamCode(*i)
	}
	return umu
}

// AddExamCode adds i to the "ExamCode" field.
func (umu *UserMasterUpdate) AddExamCode(i int32) *UserMasterUpdate {
	umu.mutation.AddExamCode(i)
	return umu
}

// ClearExamCode clears the value of the "ExamCode" field.
func (umu *UserMasterUpdate) ClearExamCode() *UserMasterUpdate {
	umu.mutation.ClearExamCode()
	return umu
}

// SetExamCodePS sets the "ExamCodePS" field.
func (umu *UserMasterUpdate) SetExamCodePS(i int32) *UserMasterUpdate {
	umu.mutation.ResetExamCodePS()
	umu.mutation.SetExamCodePS(i)
	return umu
}

// SetNillableExamCodePS sets the "ExamCodePS" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableExamCodePS(i *int32) *UserMasterUpdate {
	if i != nil {
		umu.SetExamCodePS(*i)
	}
	return umu
}

// AddExamCodePS adds i to the "ExamCodePS" field.
func (umu *UserMasterUpdate) AddExamCodePS(i int32) *UserMasterUpdate {
	umu.mutation.AddExamCodePS(i)
	return umu
}

// ClearExamCodePS clears the value of the "ExamCodePS" field.
func (umu *UserMasterUpdate) ClearExamCodePS() *UserMasterUpdate {
	umu.mutation.ClearExamCodePS()
	return umu
}

// SetOTPRemarks sets the "OTPRemarks" field.
func (umu *UserMasterUpdate) SetOTPRemarks(s string) *UserMasterUpdate {
	umu.mutation.SetOTPRemarks(s)
	return umu
}

// SetNillableOTPRemarks sets the "OTPRemarks" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableOTPRemarks(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetOTPRemarks(*s)
	}
	return umu
}

// ClearOTPRemarks clears the value of the "OTPRemarks" field.
func (umu *UserMasterUpdate) ClearOTPRemarks() *UserMasterUpdate {
	umu.mutation.ClearOTPRemarks()
	return umu
}

// SetStatus sets the "Status" field.
func (umu *UserMasterUpdate) SetStatus(b bool) *UserMasterUpdate {
	umu.mutation.SetStatus(b)
	return umu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableStatus(b *bool) *UserMasterUpdate {
	if b != nil {
		umu.SetStatus(*b)
	}
	return umu
}

// ClearStatus clears the value of the "Status" field.
func (umu *UserMasterUpdate) ClearStatus() *UserMasterUpdate {
	umu.mutation.ClearStatus()
	return umu
}

// SetNewPasswordRequest sets the "NewPasswordRequest" field.
func (umu *UserMasterUpdate) SetNewPasswordRequest(b bool) *UserMasterUpdate {
	umu.mutation.SetNewPasswordRequest(b)
	return umu
}

// SetNillableNewPasswordRequest sets the "NewPasswordRequest" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableNewPasswordRequest(b *bool) *UserMasterUpdate {
	if b != nil {
		umu.SetNewPasswordRequest(*b)
	}
	return umu
}

// ClearNewPasswordRequest clears the value of the "NewPasswordRequest" field.
func (umu *UserMasterUpdate) ClearNewPasswordRequest() *UserMasterUpdate {
	umu.mutation.ClearNewPasswordRequest()
	return umu
}

// SetCreatedAt sets the "CreatedAt" field.
func (umu *UserMasterUpdate) SetCreatedAt(t time.Time) *UserMasterUpdate {
	umu.mutation.SetCreatedAt(t)
	return umu
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableCreatedAt(t *time.Time) *UserMasterUpdate {
	if t != nil {
		umu.SetCreatedAt(*t)
	}
	return umu
}

// ClearCreatedAt clears the value of the "CreatedAt" field.
func (umu *UserMasterUpdate) ClearCreatedAt() *UserMasterUpdate {
	umu.mutation.ClearCreatedAt()
	return umu
}

// SetOTPTriggeredTime sets the "OTPTriggeredTime" field.
func (umu *UserMasterUpdate) SetOTPTriggeredTime(t time.Time) *UserMasterUpdate {
	umu.mutation.SetOTPTriggeredTime(t)
	return umu
}

// SetNillableOTPTriggeredTime sets the "OTPTriggeredTime" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableOTPTriggeredTime(t *time.Time) *UserMasterUpdate {
	if t != nil {
		umu.SetOTPTriggeredTime(*t)
	}
	return umu
}

// ClearOTPTriggeredTime clears the value of the "OTPTriggeredTime" field.
func (umu *UserMasterUpdate) ClearOTPTriggeredTime() *UserMasterUpdate {
	umu.mutation.ClearOTPTriggeredTime()
	return umu
}

// SetCreatedBy sets the "CreatedBy" field.
func (umu *UserMasterUpdate) SetCreatedBy(s string) *UserMasterUpdate {
	umu.mutation.SetCreatedBy(s)
	return umu
}

// SetNillableCreatedBy sets the "CreatedBy" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableCreatedBy(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetCreatedBy(*s)
	}
	return umu
}

// ClearCreatedBy clears the value of the "CreatedBy" field.
func (umu *UserMasterUpdate) ClearCreatedBy() *UserMasterUpdate {
	umu.mutation.ClearCreatedBy()
	return umu
}

// SetRolesID sets the "roles" edge to the RoleMaster entity by ID.
func (umu *UserMasterUpdate) SetRolesID(id int32) *UserMasterUpdate {
	umu.mutation.SetRolesID(id)
	return umu
}

// SetNillableRolesID sets the "roles" edge to the RoleMaster entity by ID if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableRolesID(id *int32) *UserMasterUpdate {
	if id != nil {
		umu = umu.SetRolesID(*id)
	}
	return umu
}

// SetRoles sets the "roles" edge to the RoleMaster entity.
func (umu *UserMasterUpdate) SetRoles(r *RoleMaster) *UserMasterUpdate {
	return umu.SetRolesID(r.ID)
}

// AddUsermasterRefIDs adds the "UsermasterRef" edge to the EmployeeMaster entity by IDs.
func (umu *UserMasterUpdate) AddUsermasterRefIDs(ids ...int64) *UserMasterUpdate {
	umu.mutation.AddUsermasterRefIDs(ids...)
	return umu
}

// AddUsermasterRef adds the "UsermasterRef" edges to the EmployeeMaster entity.
func (umu *UserMasterUpdate) AddUsermasterRef(e ...*EmployeeMaster) *UserMasterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umu.AddUsermasterRefIDs(ids...)
}

// AddUsersPSRefIDs adds the "UsersPSRef" edge to the Exam_Applications_PS entity by IDs.
func (umu *UserMasterUpdate) AddUsersPSRefIDs(ids ...int64) *UserMasterUpdate {
	umu.mutation.AddUsersPSRefIDs(ids...)
	return umu
}

// AddUsersPSRef adds the "UsersPSRef" edges to the Exam_Applications_PS entity.
func (umu *UserMasterUpdate) AddUsersPSRef(e ...*Exam_Applications_PS) *UserMasterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umu.AddUsersPSRefIDs(ids...)
}

// AddUsersIPRefIDs adds the "UsersIPRef" edge to the Exam_Applications_IP entity by IDs.
func (umu *UserMasterUpdate) AddUsersIPRefIDs(ids ...int64) *UserMasterUpdate {
	umu.mutation.AddUsersIPRefIDs(ids...)
	return umu
}

// AddUsersIPRef adds the "UsersIPRef" edges to the Exam_Applications_IP entity.
func (umu *UserMasterUpdate) AddUsersIPRef(e ...*Exam_Applications_IP) *UserMasterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umu.AddUsersIPRefIDs(ids...)
}

// AddUsersPsTypeIDs adds the "users_ps_type" edge to the Exam_PS entity by IDs.
func (umu *UserMasterUpdate) AddUsersPsTypeIDs(ids ...int32) *UserMasterUpdate {
	umu.mutation.AddUsersPsTypeIDs(ids...)
	return umu
}

// AddUsersPsType adds the "users_ps_type" edges to the Exam_PS entity.
func (umu *UserMasterUpdate) AddUsersPsType(e ...*Exam_PS) *UserMasterUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umu.AddUsersPsTypeIDs(ids...)
}

// AddUsersIPTypeIDs adds the "users_ip_type" edge to the Exam_IP entity by IDs.
func (umu *UserMasterUpdate) AddUsersIPTypeIDs(ids ...int32) *UserMasterUpdate {
	umu.mutation.AddUsersIPTypeIDs(ids...)
	return umu
}

// AddUsersIPType adds the "users_ip_type" edges to the Exam_IP entity.
func (umu *UserMasterUpdate) AddUsersIPType(e ...*Exam_IP) *UserMasterUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umu.AddUsersIPTypeIDs(ids...)
}

// Mutation returns the UserMasterMutation object of the builder.
func (umu *UserMasterUpdate) Mutation() *UserMasterMutation {
	return umu.mutation
}

// ClearRoles clears the "roles" edge to the RoleMaster entity.
func (umu *UserMasterUpdate) ClearRoles() *UserMasterUpdate {
	umu.mutation.ClearRoles()
	return umu
}

// ClearUsermasterRef clears all "UsermasterRef" edges to the EmployeeMaster entity.
func (umu *UserMasterUpdate) ClearUsermasterRef() *UserMasterUpdate {
	umu.mutation.ClearUsermasterRef()
	return umu
}

// RemoveUsermasterRefIDs removes the "UsermasterRef" edge to EmployeeMaster entities by IDs.
func (umu *UserMasterUpdate) RemoveUsermasterRefIDs(ids ...int64) *UserMasterUpdate {
	umu.mutation.RemoveUsermasterRefIDs(ids...)
	return umu
}

// RemoveUsermasterRef removes "UsermasterRef" edges to EmployeeMaster entities.
func (umu *UserMasterUpdate) RemoveUsermasterRef(e ...*EmployeeMaster) *UserMasterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umu.RemoveUsermasterRefIDs(ids...)
}

// ClearUsersPSRef clears all "UsersPSRef" edges to the Exam_Applications_PS entity.
func (umu *UserMasterUpdate) ClearUsersPSRef() *UserMasterUpdate {
	umu.mutation.ClearUsersPSRef()
	return umu
}

// RemoveUsersPSRefIDs removes the "UsersPSRef" edge to Exam_Applications_PS entities by IDs.
func (umu *UserMasterUpdate) RemoveUsersPSRefIDs(ids ...int64) *UserMasterUpdate {
	umu.mutation.RemoveUsersPSRefIDs(ids...)
	return umu
}

// RemoveUsersPSRef removes "UsersPSRef" edges to Exam_Applications_PS entities.
func (umu *UserMasterUpdate) RemoveUsersPSRef(e ...*Exam_Applications_PS) *UserMasterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umu.RemoveUsersPSRefIDs(ids...)
}

// ClearUsersIPRef clears all "UsersIPRef" edges to the Exam_Applications_IP entity.
func (umu *UserMasterUpdate) ClearUsersIPRef() *UserMasterUpdate {
	umu.mutation.ClearUsersIPRef()
	return umu
}

// RemoveUsersIPRefIDs removes the "UsersIPRef" edge to Exam_Applications_IP entities by IDs.
func (umu *UserMasterUpdate) RemoveUsersIPRefIDs(ids ...int64) *UserMasterUpdate {
	umu.mutation.RemoveUsersIPRefIDs(ids...)
	return umu
}

// RemoveUsersIPRef removes "UsersIPRef" edges to Exam_Applications_IP entities.
func (umu *UserMasterUpdate) RemoveUsersIPRef(e ...*Exam_Applications_IP) *UserMasterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umu.RemoveUsersIPRefIDs(ids...)
}

// ClearUsersPsType clears all "users_ps_type" edges to the Exam_PS entity.
func (umu *UserMasterUpdate) ClearUsersPsType() *UserMasterUpdate {
	umu.mutation.ClearUsersPsType()
	return umu
}

// RemoveUsersPsTypeIDs removes the "users_ps_type" edge to Exam_PS entities by IDs.
func (umu *UserMasterUpdate) RemoveUsersPsTypeIDs(ids ...int32) *UserMasterUpdate {
	umu.mutation.RemoveUsersPsTypeIDs(ids...)
	return umu
}

// RemoveUsersPsType removes "users_ps_type" edges to Exam_PS entities.
func (umu *UserMasterUpdate) RemoveUsersPsType(e ...*Exam_PS) *UserMasterUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umu.RemoveUsersPsTypeIDs(ids...)
}

// ClearUsersIPType clears all "users_ip_type" edges to the Exam_IP entity.
func (umu *UserMasterUpdate) ClearUsersIPType() *UserMasterUpdate {
	umu.mutation.ClearUsersIPType()
	return umu
}

// RemoveUsersIPTypeIDs removes the "users_ip_type" edge to Exam_IP entities by IDs.
func (umu *UserMasterUpdate) RemoveUsersIPTypeIDs(ids ...int32) *UserMasterUpdate {
	umu.mutation.RemoveUsersIPTypeIDs(ids...)
	return umu
}

// RemoveUsersIPType removes "users_ip_type" edges to Exam_IP entities.
func (umu *UserMasterUpdate) RemoveUsersIPType(e ...*Exam_IP) *UserMasterUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umu.RemoveUsersIPTypeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (umu *UserMasterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, umu.sqlSave, umu.mutation, umu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (umu *UserMasterUpdate) SaveX(ctx context.Context) int {
	affected, err := umu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (umu *UserMasterUpdate) Exec(ctx context.Context) error {
	_, err := umu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umu *UserMasterUpdate) ExecX(ctx context.Context) {
	if err := umu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (umu *UserMasterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(usermaster.Table, usermaster.Columns, sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64))
	if ps := umu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := umu.mutation.EmployeeID(); ok {
		_spec.SetField(usermaster.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := umu.mutation.AddedEmployeeID(); ok {
		_spec.AddField(usermaster.FieldEmployeeID, field.TypeInt64, value)
	}
	if umu.mutation.EmployeeIDCleared() {
		_spec.ClearField(usermaster.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := umu.mutation.EmployeeName(); ok {
		_spec.SetField(usermaster.FieldEmployeeName, field.TypeString, value)
	}
	if umu.mutation.EmployeeNameCleared() {
		_spec.ClearField(usermaster.FieldEmployeeName, field.TypeString)
	}
	if value, ok := umu.mutation.FacilityID(); ok {
		_spec.SetField(usermaster.FieldFacilityID, field.TypeString, value)
	}
	if umu.mutation.FacilityIDCleared() {
		_spec.ClearField(usermaster.FieldFacilityID, field.TypeString)
	}
	if value, ok := umu.mutation.Cadre(); ok {
		_spec.SetField(usermaster.FieldCadre, field.TypeString, value)
	}
	if umu.mutation.CadreCleared() {
		_spec.ClearField(usermaster.FieldCadre, field.TypeString)
	}
	if value, ok := umu.mutation.Mobile(); ok {
		_spec.SetField(usermaster.FieldMobile, field.TypeString, value)
	}
	if umu.mutation.MobileCleared() {
		_spec.ClearField(usermaster.FieldMobile, field.TypeString)
	}
	if value, ok := umu.mutation.EmailID(); ok {
		_spec.SetField(usermaster.FieldEmailID, field.TypeString, value)
	}
	if umu.mutation.EmailIDCleared() {
		_spec.ClearField(usermaster.FieldEmailID, field.TypeString)
	}
	if value, ok := umu.mutation.UserName(); ok {
		_spec.SetField(usermaster.FieldUserName, field.TypeString, value)
	}
	if umu.mutation.UserNameCleared() {
		_spec.ClearField(usermaster.FieldUserName, field.TypeString)
	}
	if value, ok := umu.mutation.Password(); ok {
		_spec.SetField(usermaster.FieldPassword, field.TypeString, value)
	}
	if umu.mutation.PasswordCleared() {
		_spec.ClearField(usermaster.FieldPassword, field.TypeString)
	}
	if value, ok := umu.mutation.OTP(); ok {
		_spec.SetField(usermaster.FieldOTP, field.TypeInt32, value)
	}
	if value, ok := umu.mutation.AddedOTP(); ok {
		_spec.AddField(usermaster.FieldOTP, field.TypeInt32, value)
	}
	if umu.mutation.OTPCleared() {
		_spec.ClearField(usermaster.FieldOTP, field.TypeInt32)
	}
	if value, ok := umu.mutation.ExamCode(); ok {
		_spec.SetField(usermaster.FieldExamCode, field.TypeInt32, value)
	}
	if value, ok := umu.mutation.AddedExamCode(); ok {
		_spec.AddField(usermaster.FieldExamCode, field.TypeInt32, value)
	}
	if umu.mutation.ExamCodeCleared() {
		_spec.ClearField(usermaster.FieldExamCode, field.TypeInt32)
	}
	if value, ok := umu.mutation.ExamCodePS(); ok {
		_spec.SetField(usermaster.FieldExamCodePS, field.TypeInt32, value)
	}
	if value, ok := umu.mutation.AddedExamCodePS(); ok {
		_spec.AddField(usermaster.FieldExamCodePS, field.TypeInt32, value)
	}
	if umu.mutation.ExamCodePSCleared() {
		_spec.ClearField(usermaster.FieldExamCodePS, field.TypeInt32)
	}
	if value, ok := umu.mutation.OTPRemarks(); ok {
		_spec.SetField(usermaster.FieldOTPRemarks, field.TypeString, value)
	}
	if umu.mutation.OTPRemarksCleared() {
		_spec.ClearField(usermaster.FieldOTPRemarks, field.TypeString)
	}
	if value, ok := umu.mutation.Status(); ok {
		_spec.SetField(usermaster.FieldStatus, field.TypeBool, value)
	}
	if umu.mutation.StatusCleared() {
		_spec.ClearField(usermaster.FieldStatus, field.TypeBool)
	}
	if value, ok := umu.mutation.NewPasswordRequest(); ok {
		_spec.SetField(usermaster.FieldNewPasswordRequest, field.TypeBool, value)
	}
	if umu.mutation.NewPasswordRequestCleared() {
		_spec.ClearField(usermaster.FieldNewPasswordRequest, field.TypeBool)
	}
	if value, ok := umu.mutation.CreatedAt(); ok {
		_spec.SetField(usermaster.FieldCreatedAt, field.TypeTime, value)
	}
	if umu.mutation.CreatedAtCleared() {
		_spec.ClearField(usermaster.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := umu.mutation.OTPTriggeredTime(); ok {
		_spec.SetField(usermaster.FieldOTPTriggeredTime, field.TypeTime, value)
	}
	if umu.mutation.OTPTriggeredTimeCleared() {
		_spec.ClearField(usermaster.FieldOTPTriggeredTime, field.TypeTime)
	}
	if value, ok := umu.mutation.CreatedBy(); ok {
		_spec.SetField(usermaster.FieldCreatedBy, field.TypeString, value)
	}
	if umu.mutation.CreatedByCleared() {
		_spec.ClearField(usermaster.FieldCreatedBy, field.TypeString)
	}
	if umu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermaster.RolesTable,
			Columns: []string{usermaster.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermaster.RolesTable,
			Columns: []string{usermaster.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if umu.mutation.UsermasterRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsermasterRefTable,
			Columns: []string{usermaster.UsermasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeemaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.RemovedUsermasterRefIDs(); len(nodes) > 0 && !umu.mutation.UsermasterRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsermasterRefTable,
			Columns: []string{usermaster.UsermasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeemaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.UsermasterRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsermasterRefTable,
			Columns: []string{usermaster.UsermasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeemaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if umu.mutation.UsersPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersPSRefTable,
			Columns: []string{usermaster.UsersPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.RemovedUsersPSRefIDs(); len(nodes) > 0 && !umu.mutation.UsersPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersPSRefTable,
			Columns: []string{usermaster.UsersPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.UsersPSRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersPSRefTable,
			Columns: []string{usermaster.UsersPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if umu.mutation.UsersIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersIPRefTable,
			Columns: []string{usermaster.UsersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.RemovedUsersIPRefIDs(); len(nodes) > 0 && !umu.mutation.UsersIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersIPRefTable,
			Columns: []string{usermaster.UsersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.UsersIPRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersIPRefTable,
			Columns: []string{usermaster.UsersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if umu.mutation.UsersPsTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersPsTypeTable,
			Columns: []string{usermaster.UsersPsTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_ps.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.RemovedUsersPsTypeIDs(); len(nodes) > 0 && !umu.mutation.UsersPsTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersPsTypeTable,
			Columns: []string{usermaster.UsersPsTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_ps.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.UsersPsTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersPsTypeTable,
			Columns: []string{usermaster.UsersPsTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_ps.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if umu.mutation.UsersIPTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersIPTypeTable,
			Columns: []string{usermaster.UsersIPTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_ip.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.RemovedUsersIPTypeIDs(); len(nodes) > 0 && !umu.mutation.UsersIPTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersIPTypeTable,
			Columns: []string{usermaster.UsersIPTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_ip.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.UsersIPTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersIPTypeTable,
			Columns: []string{usermaster.UsersIPTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_ip.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, umu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usermaster.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	umu.mutation.done = true
	return n, nil
}

// UserMasterUpdateOne is the builder for updating a single UserMaster entity.
type UserMasterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMasterMutation
}

// SetEmployeeID sets the "EmployeeID" field.
func (umuo *UserMasterUpdateOne) SetEmployeeID(i int64) *UserMasterUpdateOne {
	umuo.mutation.ResetEmployeeID()
	umuo.mutation.SetEmployeeID(i)
	return umuo
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableEmployeeID(i *int64) *UserMasterUpdateOne {
	if i != nil {
		umuo.SetEmployeeID(*i)
	}
	return umuo
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (umuo *UserMasterUpdateOne) AddEmployeeID(i int64) *UserMasterUpdateOne {
	umuo.mutation.AddEmployeeID(i)
	return umuo
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (umuo *UserMasterUpdateOne) ClearEmployeeID() *UserMasterUpdateOne {
	umuo.mutation.ClearEmployeeID()
	return umuo
}

// SetEmployeeName sets the "EmployeeName" field.
func (umuo *UserMasterUpdateOne) SetEmployeeName(s string) *UserMasterUpdateOne {
	umuo.mutation.SetEmployeeName(s)
	return umuo
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableEmployeeName(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetEmployeeName(*s)
	}
	return umuo
}

// ClearEmployeeName clears the value of the "EmployeeName" field.
func (umuo *UserMasterUpdateOne) ClearEmployeeName() *UserMasterUpdateOne {
	umuo.mutation.ClearEmployeeName()
	return umuo
}

// SetFacilityID sets the "FacilityID" field.
func (umuo *UserMasterUpdateOne) SetFacilityID(s string) *UserMasterUpdateOne {
	umuo.mutation.SetFacilityID(s)
	return umuo
}

// SetNillableFacilityID sets the "FacilityID" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableFacilityID(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetFacilityID(*s)
	}
	return umuo
}

// ClearFacilityID clears the value of the "FacilityID" field.
func (umuo *UserMasterUpdateOne) ClearFacilityID() *UserMasterUpdateOne {
	umuo.mutation.ClearFacilityID()
	return umuo
}

// SetCadre sets the "Cadre" field.
func (umuo *UserMasterUpdateOne) SetCadre(s string) *UserMasterUpdateOne {
	umuo.mutation.SetCadre(s)
	return umuo
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableCadre(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetCadre(*s)
	}
	return umuo
}

// ClearCadre clears the value of the "Cadre" field.
func (umuo *UserMasterUpdateOne) ClearCadre() *UserMasterUpdateOne {
	umuo.mutation.ClearCadre()
	return umuo
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (umuo *UserMasterUpdateOne) SetRoleUserCode(i int32) *UserMasterUpdateOne {
	umuo.mutation.SetRoleUserCode(i)
	return umuo
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableRoleUserCode(i *int32) *UserMasterUpdateOne {
	if i != nil {
		umuo.SetRoleUserCode(*i)
	}
	return umuo
}

// ClearRoleUserCode clears the value of the "RoleUserCode" field.
func (umuo *UserMasterUpdateOne) ClearRoleUserCode() *UserMasterUpdateOne {
	umuo.mutation.ClearRoleUserCode()
	return umuo
}

// SetMobile sets the "Mobile" field.
func (umuo *UserMasterUpdateOne) SetMobile(s string) *UserMasterUpdateOne {
	umuo.mutation.SetMobile(s)
	return umuo
}

// SetNillableMobile sets the "Mobile" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableMobile(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetMobile(*s)
	}
	return umuo
}

// ClearMobile clears the value of the "Mobile" field.
func (umuo *UserMasterUpdateOne) ClearMobile() *UserMasterUpdateOne {
	umuo.mutation.ClearMobile()
	return umuo
}

// SetEmailID sets the "EmailID" field.
func (umuo *UserMasterUpdateOne) SetEmailID(s string) *UserMasterUpdateOne {
	umuo.mutation.SetEmailID(s)
	return umuo
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableEmailID(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetEmailID(*s)
	}
	return umuo
}

// ClearEmailID clears the value of the "EmailID" field.
func (umuo *UserMasterUpdateOne) ClearEmailID() *UserMasterUpdateOne {
	umuo.mutation.ClearEmailID()
	return umuo
}

// SetUserName sets the "UserName" field.
func (umuo *UserMasterUpdateOne) SetUserName(s string) *UserMasterUpdateOne {
	umuo.mutation.SetUserName(s)
	return umuo
}

// SetNillableUserName sets the "UserName" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableUserName(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetUserName(*s)
	}
	return umuo
}

// ClearUserName clears the value of the "UserName" field.
func (umuo *UserMasterUpdateOne) ClearUserName() *UserMasterUpdateOne {
	umuo.mutation.ClearUserName()
	return umuo
}

// SetPassword sets the "Password" field.
func (umuo *UserMasterUpdateOne) SetPassword(s string) *UserMasterUpdateOne {
	umuo.mutation.SetPassword(s)
	return umuo
}

// SetNillablePassword sets the "Password" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillablePassword(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetPassword(*s)
	}
	return umuo
}

// ClearPassword clears the value of the "Password" field.
func (umuo *UserMasterUpdateOne) ClearPassword() *UserMasterUpdateOne {
	umuo.mutation.ClearPassword()
	return umuo
}

// SetOTP sets the "OTP" field.
func (umuo *UserMasterUpdateOne) SetOTP(i int32) *UserMasterUpdateOne {
	umuo.mutation.ResetOTP()
	umuo.mutation.SetOTP(i)
	return umuo
}

// SetNillableOTP sets the "OTP" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableOTP(i *int32) *UserMasterUpdateOne {
	if i != nil {
		umuo.SetOTP(*i)
	}
	return umuo
}

// AddOTP adds i to the "OTP" field.
func (umuo *UserMasterUpdateOne) AddOTP(i int32) *UserMasterUpdateOne {
	umuo.mutation.AddOTP(i)
	return umuo
}

// ClearOTP clears the value of the "OTP" field.
func (umuo *UserMasterUpdateOne) ClearOTP() *UserMasterUpdateOne {
	umuo.mutation.ClearOTP()
	return umuo
}

// SetExamCode sets the "ExamCode" field.
func (umuo *UserMasterUpdateOne) SetExamCode(i int32) *UserMasterUpdateOne {
	umuo.mutation.ResetExamCode()
	umuo.mutation.SetExamCode(i)
	return umuo
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableExamCode(i *int32) *UserMasterUpdateOne {
	if i != nil {
		umuo.SetExamCode(*i)
	}
	return umuo
}

// AddExamCode adds i to the "ExamCode" field.
func (umuo *UserMasterUpdateOne) AddExamCode(i int32) *UserMasterUpdateOne {
	umuo.mutation.AddExamCode(i)
	return umuo
}

// ClearExamCode clears the value of the "ExamCode" field.
func (umuo *UserMasterUpdateOne) ClearExamCode() *UserMasterUpdateOne {
	umuo.mutation.ClearExamCode()
	return umuo
}

// SetExamCodePS sets the "ExamCodePS" field.
func (umuo *UserMasterUpdateOne) SetExamCodePS(i int32) *UserMasterUpdateOne {
	umuo.mutation.ResetExamCodePS()
	umuo.mutation.SetExamCodePS(i)
	return umuo
}

// SetNillableExamCodePS sets the "ExamCodePS" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableExamCodePS(i *int32) *UserMasterUpdateOne {
	if i != nil {
		umuo.SetExamCodePS(*i)
	}
	return umuo
}

// AddExamCodePS adds i to the "ExamCodePS" field.
func (umuo *UserMasterUpdateOne) AddExamCodePS(i int32) *UserMasterUpdateOne {
	umuo.mutation.AddExamCodePS(i)
	return umuo
}

// ClearExamCodePS clears the value of the "ExamCodePS" field.
func (umuo *UserMasterUpdateOne) ClearExamCodePS() *UserMasterUpdateOne {
	umuo.mutation.ClearExamCodePS()
	return umuo
}

// SetOTPRemarks sets the "OTPRemarks" field.
func (umuo *UserMasterUpdateOne) SetOTPRemarks(s string) *UserMasterUpdateOne {
	umuo.mutation.SetOTPRemarks(s)
	return umuo
}

// SetNillableOTPRemarks sets the "OTPRemarks" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableOTPRemarks(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetOTPRemarks(*s)
	}
	return umuo
}

// ClearOTPRemarks clears the value of the "OTPRemarks" field.
func (umuo *UserMasterUpdateOne) ClearOTPRemarks() *UserMasterUpdateOne {
	umuo.mutation.ClearOTPRemarks()
	return umuo
}

// SetStatus sets the "Status" field.
func (umuo *UserMasterUpdateOne) SetStatus(b bool) *UserMasterUpdateOne {
	umuo.mutation.SetStatus(b)
	return umuo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableStatus(b *bool) *UserMasterUpdateOne {
	if b != nil {
		umuo.SetStatus(*b)
	}
	return umuo
}

// ClearStatus clears the value of the "Status" field.
func (umuo *UserMasterUpdateOne) ClearStatus() *UserMasterUpdateOne {
	umuo.mutation.ClearStatus()
	return umuo
}

// SetNewPasswordRequest sets the "NewPasswordRequest" field.
func (umuo *UserMasterUpdateOne) SetNewPasswordRequest(b bool) *UserMasterUpdateOne {
	umuo.mutation.SetNewPasswordRequest(b)
	return umuo
}

// SetNillableNewPasswordRequest sets the "NewPasswordRequest" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableNewPasswordRequest(b *bool) *UserMasterUpdateOne {
	if b != nil {
		umuo.SetNewPasswordRequest(*b)
	}
	return umuo
}

// ClearNewPasswordRequest clears the value of the "NewPasswordRequest" field.
func (umuo *UserMasterUpdateOne) ClearNewPasswordRequest() *UserMasterUpdateOne {
	umuo.mutation.ClearNewPasswordRequest()
	return umuo
}

// SetCreatedAt sets the "CreatedAt" field.
func (umuo *UserMasterUpdateOne) SetCreatedAt(t time.Time) *UserMasterUpdateOne {
	umuo.mutation.SetCreatedAt(t)
	return umuo
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableCreatedAt(t *time.Time) *UserMasterUpdateOne {
	if t != nil {
		umuo.SetCreatedAt(*t)
	}
	return umuo
}

// ClearCreatedAt clears the value of the "CreatedAt" field.
func (umuo *UserMasterUpdateOne) ClearCreatedAt() *UserMasterUpdateOne {
	umuo.mutation.ClearCreatedAt()
	return umuo
}

// SetOTPTriggeredTime sets the "OTPTriggeredTime" field.
func (umuo *UserMasterUpdateOne) SetOTPTriggeredTime(t time.Time) *UserMasterUpdateOne {
	umuo.mutation.SetOTPTriggeredTime(t)
	return umuo
}

// SetNillableOTPTriggeredTime sets the "OTPTriggeredTime" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableOTPTriggeredTime(t *time.Time) *UserMasterUpdateOne {
	if t != nil {
		umuo.SetOTPTriggeredTime(*t)
	}
	return umuo
}

// ClearOTPTriggeredTime clears the value of the "OTPTriggeredTime" field.
func (umuo *UserMasterUpdateOne) ClearOTPTriggeredTime() *UserMasterUpdateOne {
	umuo.mutation.ClearOTPTriggeredTime()
	return umuo
}

// SetCreatedBy sets the "CreatedBy" field.
func (umuo *UserMasterUpdateOne) SetCreatedBy(s string) *UserMasterUpdateOne {
	umuo.mutation.SetCreatedBy(s)
	return umuo
}

// SetNillableCreatedBy sets the "CreatedBy" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableCreatedBy(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetCreatedBy(*s)
	}
	return umuo
}

// ClearCreatedBy clears the value of the "CreatedBy" field.
func (umuo *UserMasterUpdateOne) ClearCreatedBy() *UserMasterUpdateOne {
	umuo.mutation.ClearCreatedBy()
	return umuo
}

// SetRolesID sets the "roles" edge to the RoleMaster entity by ID.
func (umuo *UserMasterUpdateOne) SetRolesID(id int32) *UserMasterUpdateOne {
	umuo.mutation.SetRolesID(id)
	return umuo
}

// SetNillableRolesID sets the "roles" edge to the RoleMaster entity by ID if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableRolesID(id *int32) *UserMasterUpdateOne {
	if id != nil {
		umuo = umuo.SetRolesID(*id)
	}
	return umuo
}

// SetRoles sets the "roles" edge to the RoleMaster entity.
func (umuo *UserMasterUpdateOne) SetRoles(r *RoleMaster) *UserMasterUpdateOne {
	return umuo.SetRolesID(r.ID)
}

// AddUsermasterRefIDs adds the "UsermasterRef" edge to the EmployeeMaster entity by IDs.
func (umuo *UserMasterUpdateOne) AddUsermasterRefIDs(ids ...int64) *UserMasterUpdateOne {
	umuo.mutation.AddUsermasterRefIDs(ids...)
	return umuo
}

// AddUsermasterRef adds the "UsermasterRef" edges to the EmployeeMaster entity.
func (umuo *UserMasterUpdateOne) AddUsermasterRef(e ...*EmployeeMaster) *UserMasterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umuo.AddUsermasterRefIDs(ids...)
}

// AddUsersPSRefIDs adds the "UsersPSRef" edge to the Exam_Applications_PS entity by IDs.
func (umuo *UserMasterUpdateOne) AddUsersPSRefIDs(ids ...int64) *UserMasterUpdateOne {
	umuo.mutation.AddUsersPSRefIDs(ids...)
	return umuo
}

// AddUsersPSRef adds the "UsersPSRef" edges to the Exam_Applications_PS entity.
func (umuo *UserMasterUpdateOne) AddUsersPSRef(e ...*Exam_Applications_PS) *UserMasterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umuo.AddUsersPSRefIDs(ids...)
}

// AddUsersIPRefIDs adds the "UsersIPRef" edge to the Exam_Applications_IP entity by IDs.
func (umuo *UserMasterUpdateOne) AddUsersIPRefIDs(ids ...int64) *UserMasterUpdateOne {
	umuo.mutation.AddUsersIPRefIDs(ids...)
	return umuo
}

// AddUsersIPRef adds the "UsersIPRef" edges to the Exam_Applications_IP entity.
func (umuo *UserMasterUpdateOne) AddUsersIPRef(e ...*Exam_Applications_IP) *UserMasterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umuo.AddUsersIPRefIDs(ids...)
}

// AddUsersPsTypeIDs adds the "users_ps_type" edge to the Exam_PS entity by IDs.
func (umuo *UserMasterUpdateOne) AddUsersPsTypeIDs(ids ...int32) *UserMasterUpdateOne {
	umuo.mutation.AddUsersPsTypeIDs(ids...)
	return umuo
}

// AddUsersPsType adds the "users_ps_type" edges to the Exam_PS entity.
func (umuo *UserMasterUpdateOne) AddUsersPsType(e ...*Exam_PS) *UserMasterUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umuo.AddUsersPsTypeIDs(ids...)
}

// AddUsersIPTypeIDs adds the "users_ip_type" edge to the Exam_IP entity by IDs.
func (umuo *UserMasterUpdateOne) AddUsersIPTypeIDs(ids ...int32) *UserMasterUpdateOne {
	umuo.mutation.AddUsersIPTypeIDs(ids...)
	return umuo
}

// AddUsersIPType adds the "users_ip_type" edges to the Exam_IP entity.
func (umuo *UserMasterUpdateOne) AddUsersIPType(e ...*Exam_IP) *UserMasterUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umuo.AddUsersIPTypeIDs(ids...)
}

// Mutation returns the UserMasterMutation object of the builder.
func (umuo *UserMasterUpdateOne) Mutation() *UserMasterMutation {
	return umuo.mutation
}

// ClearRoles clears the "roles" edge to the RoleMaster entity.
func (umuo *UserMasterUpdateOne) ClearRoles() *UserMasterUpdateOne {
	umuo.mutation.ClearRoles()
	return umuo
}

// ClearUsermasterRef clears all "UsermasterRef" edges to the EmployeeMaster entity.
func (umuo *UserMasterUpdateOne) ClearUsermasterRef() *UserMasterUpdateOne {
	umuo.mutation.ClearUsermasterRef()
	return umuo
}

// RemoveUsermasterRefIDs removes the "UsermasterRef" edge to EmployeeMaster entities by IDs.
func (umuo *UserMasterUpdateOne) RemoveUsermasterRefIDs(ids ...int64) *UserMasterUpdateOne {
	umuo.mutation.RemoveUsermasterRefIDs(ids...)
	return umuo
}

// RemoveUsermasterRef removes "UsermasterRef" edges to EmployeeMaster entities.
func (umuo *UserMasterUpdateOne) RemoveUsermasterRef(e ...*EmployeeMaster) *UserMasterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umuo.RemoveUsermasterRefIDs(ids...)
}

// ClearUsersPSRef clears all "UsersPSRef" edges to the Exam_Applications_PS entity.
func (umuo *UserMasterUpdateOne) ClearUsersPSRef() *UserMasterUpdateOne {
	umuo.mutation.ClearUsersPSRef()
	return umuo
}

// RemoveUsersPSRefIDs removes the "UsersPSRef" edge to Exam_Applications_PS entities by IDs.
func (umuo *UserMasterUpdateOne) RemoveUsersPSRefIDs(ids ...int64) *UserMasterUpdateOne {
	umuo.mutation.RemoveUsersPSRefIDs(ids...)
	return umuo
}

// RemoveUsersPSRef removes "UsersPSRef" edges to Exam_Applications_PS entities.
func (umuo *UserMasterUpdateOne) RemoveUsersPSRef(e ...*Exam_Applications_PS) *UserMasterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umuo.RemoveUsersPSRefIDs(ids...)
}

// ClearUsersIPRef clears all "UsersIPRef" edges to the Exam_Applications_IP entity.
func (umuo *UserMasterUpdateOne) ClearUsersIPRef() *UserMasterUpdateOne {
	umuo.mutation.ClearUsersIPRef()
	return umuo
}

// RemoveUsersIPRefIDs removes the "UsersIPRef" edge to Exam_Applications_IP entities by IDs.
func (umuo *UserMasterUpdateOne) RemoveUsersIPRefIDs(ids ...int64) *UserMasterUpdateOne {
	umuo.mutation.RemoveUsersIPRefIDs(ids...)
	return umuo
}

// RemoveUsersIPRef removes "UsersIPRef" edges to Exam_Applications_IP entities.
func (umuo *UserMasterUpdateOne) RemoveUsersIPRef(e ...*Exam_Applications_IP) *UserMasterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umuo.RemoveUsersIPRefIDs(ids...)
}

// ClearUsersPsType clears all "users_ps_type" edges to the Exam_PS entity.
func (umuo *UserMasterUpdateOne) ClearUsersPsType() *UserMasterUpdateOne {
	umuo.mutation.ClearUsersPsType()
	return umuo
}

// RemoveUsersPsTypeIDs removes the "users_ps_type" edge to Exam_PS entities by IDs.
func (umuo *UserMasterUpdateOne) RemoveUsersPsTypeIDs(ids ...int32) *UserMasterUpdateOne {
	umuo.mutation.RemoveUsersPsTypeIDs(ids...)
	return umuo
}

// RemoveUsersPsType removes "users_ps_type" edges to Exam_PS entities.
func (umuo *UserMasterUpdateOne) RemoveUsersPsType(e ...*Exam_PS) *UserMasterUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umuo.RemoveUsersPsTypeIDs(ids...)
}

// ClearUsersIPType clears all "users_ip_type" edges to the Exam_IP entity.
func (umuo *UserMasterUpdateOne) ClearUsersIPType() *UserMasterUpdateOne {
	umuo.mutation.ClearUsersIPType()
	return umuo
}

// RemoveUsersIPTypeIDs removes the "users_ip_type" edge to Exam_IP entities by IDs.
func (umuo *UserMasterUpdateOne) RemoveUsersIPTypeIDs(ids ...int32) *UserMasterUpdateOne {
	umuo.mutation.RemoveUsersIPTypeIDs(ids...)
	return umuo
}

// RemoveUsersIPType removes "users_ip_type" edges to Exam_IP entities.
func (umuo *UserMasterUpdateOne) RemoveUsersIPType(e ...*Exam_IP) *UserMasterUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umuo.RemoveUsersIPTypeIDs(ids...)
}

// Where appends a list predicates to the UserMasterUpdate builder.
func (umuo *UserMasterUpdateOne) Where(ps ...predicate.UserMaster) *UserMasterUpdateOne {
	umuo.mutation.Where(ps...)
	return umuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (umuo *UserMasterUpdateOne) Select(field string, fields ...string) *UserMasterUpdateOne {
	umuo.fields = append([]string{field}, fields...)
	return umuo
}

// Save executes the query and returns the updated UserMaster entity.
func (umuo *UserMasterUpdateOne) Save(ctx context.Context) (*UserMaster, error) {
	return withHooks(ctx, umuo.sqlSave, umuo.mutation, umuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (umuo *UserMasterUpdateOne) SaveX(ctx context.Context) *UserMaster {
	node, err := umuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (umuo *UserMasterUpdateOne) Exec(ctx context.Context) error {
	_, err := umuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umuo *UserMasterUpdateOne) ExecX(ctx context.Context) {
	if err := umuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (umuo *UserMasterUpdateOne) sqlSave(ctx context.Context) (_node *UserMaster, err error) {
	_spec := sqlgraph.NewUpdateSpec(usermaster.Table, usermaster.Columns, sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64))
	id, ok := umuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserMaster.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := umuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usermaster.FieldID)
		for _, f := range fields {
			if !usermaster.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usermaster.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := umuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := umuo.mutation.EmployeeID(); ok {
		_spec.SetField(usermaster.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := umuo.mutation.AddedEmployeeID(); ok {
		_spec.AddField(usermaster.FieldEmployeeID, field.TypeInt64, value)
	}
	if umuo.mutation.EmployeeIDCleared() {
		_spec.ClearField(usermaster.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := umuo.mutation.EmployeeName(); ok {
		_spec.SetField(usermaster.FieldEmployeeName, field.TypeString, value)
	}
	if umuo.mutation.EmployeeNameCleared() {
		_spec.ClearField(usermaster.FieldEmployeeName, field.TypeString)
	}
	if value, ok := umuo.mutation.FacilityID(); ok {
		_spec.SetField(usermaster.FieldFacilityID, field.TypeString, value)
	}
	if umuo.mutation.FacilityIDCleared() {
		_spec.ClearField(usermaster.FieldFacilityID, field.TypeString)
	}
	if value, ok := umuo.mutation.Cadre(); ok {
		_spec.SetField(usermaster.FieldCadre, field.TypeString, value)
	}
	if umuo.mutation.CadreCleared() {
		_spec.ClearField(usermaster.FieldCadre, field.TypeString)
	}
	if value, ok := umuo.mutation.Mobile(); ok {
		_spec.SetField(usermaster.FieldMobile, field.TypeString, value)
	}
	if umuo.mutation.MobileCleared() {
		_spec.ClearField(usermaster.FieldMobile, field.TypeString)
	}
	if value, ok := umuo.mutation.EmailID(); ok {
		_spec.SetField(usermaster.FieldEmailID, field.TypeString, value)
	}
	if umuo.mutation.EmailIDCleared() {
		_spec.ClearField(usermaster.FieldEmailID, field.TypeString)
	}
	if value, ok := umuo.mutation.UserName(); ok {
		_spec.SetField(usermaster.FieldUserName, field.TypeString, value)
	}
	if umuo.mutation.UserNameCleared() {
		_spec.ClearField(usermaster.FieldUserName, field.TypeString)
	}
	if value, ok := umuo.mutation.Password(); ok {
		_spec.SetField(usermaster.FieldPassword, field.TypeString, value)
	}
	if umuo.mutation.PasswordCleared() {
		_spec.ClearField(usermaster.FieldPassword, field.TypeString)
	}
	if value, ok := umuo.mutation.OTP(); ok {
		_spec.SetField(usermaster.FieldOTP, field.TypeInt32, value)
	}
	if value, ok := umuo.mutation.AddedOTP(); ok {
		_spec.AddField(usermaster.FieldOTP, field.TypeInt32, value)
	}
	if umuo.mutation.OTPCleared() {
		_spec.ClearField(usermaster.FieldOTP, field.TypeInt32)
	}
	if value, ok := umuo.mutation.ExamCode(); ok {
		_spec.SetField(usermaster.FieldExamCode, field.TypeInt32, value)
	}
	if value, ok := umuo.mutation.AddedExamCode(); ok {
		_spec.AddField(usermaster.FieldExamCode, field.TypeInt32, value)
	}
	if umuo.mutation.ExamCodeCleared() {
		_spec.ClearField(usermaster.FieldExamCode, field.TypeInt32)
	}
	if value, ok := umuo.mutation.ExamCodePS(); ok {
		_spec.SetField(usermaster.FieldExamCodePS, field.TypeInt32, value)
	}
	if value, ok := umuo.mutation.AddedExamCodePS(); ok {
		_spec.AddField(usermaster.FieldExamCodePS, field.TypeInt32, value)
	}
	if umuo.mutation.ExamCodePSCleared() {
		_spec.ClearField(usermaster.FieldExamCodePS, field.TypeInt32)
	}
	if value, ok := umuo.mutation.OTPRemarks(); ok {
		_spec.SetField(usermaster.FieldOTPRemarks, field.TypeString, value)
	}
	if umuo.mutation.OTPRemarksCleared() {
		_spec.ClearField(usermaster.FieldOTPRemarks, field.TypeString)
	}
	if value, ok := umuo.mutation.Status(); ok {
		_spec.SetField(usermaster.FieldStatus, field.TypeBool, value)
	}
	if umuo.mutation.StatusCleared() {
		_spec.ClearField(usermaster.FieldStatus, field.TypeBool)
	}
	if value, ok := umuo.mutation.NewPasswordRequest(); ok {
		_spec.SetField(usermaster.FieldNewPasswordRequest, field.TypeBool, value)
	}
	if umuo.mutation.NewPasswordRequestCleared() {
		_spec.ClearField(usermaster.FieldNewPasswordRequest, field.TypeBool)
	}
	if value, ok := umuo.mutation.CreatedAt(); ok {
		_spec.SetField(usermaster.FieldCreatedAt, field.TypeTime, value)
	}
	if umuo.mutation.CreatedAtCleared() {
		_spec.ClearField(usermaster.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := umuo.mutation.OTPTriggeredTime(); ok {
		_spec.SetField(usermaster.FieldOTPTriggeredTime, field.TypeTime, value)
	}
	if umuo.mutation.OTPTriggeredTimeCleared() {
		_spec.ClearField(usermaster.FieldOTPTriggeredTime, field.TypeTime)
	}
	if value, ok := umuo.mutation.CreatedBy(); ok {
		_spec.SetField(usermaster.FieldCreatedBy, field.TypeString, value)
	}
	if umuo.mutation.CreatedByCleared() {
		_spec.ClearField(usermaster.FieldCreatedBy, field.TypeString)
	}
	if umuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermaster.RolesTable,
			Columns: []string{usermaster.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermaster.RolesTable,
			Columns: []string{usermaster.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if umuo.mutation.UsermasterRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsermasterRefTable,
			Columns: []string{usermaster.UsermasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeemaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.RemovedUsermasterRefIDs(); len(nodes) > 0 && !umuo.mutation.UsermasterRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsermasterRefTable,
			Columns: []string{usermaster.UsermasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeemaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.UsermasterRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsermasterRefTable,
			Columns: []string{usermaster.UsermasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeemaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if umuo.mutation.UsersPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersPSRefTable,
			Columns: []string{usermaster.UsersPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.RemovedUsersPSRefIDs(); len(nodes) > 0 && !umuo.mutation.UsersPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersPSRefTable,
			Columns: []string{usermaster.UsersPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.UsersPSRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersPSRefTable,
			Columns: []string{usermaster.UsersPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if umuo.mutation.UsersIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersIPRefTable,
			Columns: []string{usermaster.UsersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.RemovedUsersIPRefIDs(); len(nodes) > 0 && !umuo.mutation.UsersIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersIPRefTable,
			Columns: []string{usermaster.UsersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.UsersIPRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersIPRefTable,
			Columns: []string{usermaster.UsersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if umuo.mutation.UsersPsTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersPsTypeTable,
			Columns: []string{usermaster.UsersPsTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_ps.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.RemovedUsersPsTypeIDs(); len(nodes) > 0 && !umuo.mutation.UsersPsTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersPsTypeTable,
			Columns: []string{usermaster.UsersPsTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_ps.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.UsersPsTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersPsTypeTable,
			Columns: []string{usermaster.UsersPsTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_ps.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if umuo.mutation.UsersIPTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersIPTypeTable,
			Columns: []string{usermaster.UsersIPTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_ip.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.RemovedUsersIPTypeIDs(); len(nodes) > 0 && !umuo.mutation.UsersIPTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersIPTypeTable,
			Columns: []string{usermaster.UsersIPTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_ip.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.UsersIPTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersIPTypeTable,
			Columns: []string{usermaster.UsersIPTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_ip.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserMaster{config: umuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, umuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usermaster.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	umuo.mutation.done = true
	return _node, nil
}
