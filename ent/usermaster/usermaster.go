// Code generated by ent, DO NOT EDIT.

package usermaster

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the usermaster type in the database.
	Label = "user_master"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "UserID"
	// FieldEmployeeID holds the string denoting the employeeid field in the database.
	FieldEmployeeID = "employee_id"
	// FieldEmployeeName holds the string denoting the employeename field in the database.
	FieldEmployeeName = "employee_name"
	// FieldFacilityID holds the string denoting the facilityid field in the database.
	FieldFacilityID = "facility_id"
	// FieldCadre holds the string denoting the cadre field in the database.
	FieldCadre = "cadre"
	// FieldRoleUserCode holds the string denoting the roleusercode field in the database.
	FieldRoleUserCode = "role_user_code"
	// FieldMobile holds the string denoting the mobile field in the database.
	FieldMobile = "mobile"
	// FieldEmailID holds the string denoting the emailid field in the database.
	FieldEmailID = "email_id"
	// FieldUserName holds the string denoting the username field in the database.
	FieldUserName = "user_name"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldOTP holds the string denoting the otp field in the database.
	FieldOTP = "otp"
	// FieldExamCode holds the string denoting the examcode field in the database.
	FieldExamCode = "exam_code"
	// FieldExamCodePS holds the string denoting the examcodeps field in the database.
	FieldExamCodePS = "exam_code_ps"
	// FieldOTPRemarks holds the string denoting the otpremarks field in the database.
	FieldOTPRemarks = "otp_remarks"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldNewPasswordRequest holds the string denoting the newpasswordrequest field in the database.
	FieldNewPasswordRequest = "new_password_request"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldOTPTriggeredTime holds the string denoting the otptriggeredtime field in the database.
	FieldOTPTriggeredTime = "otp_triggered_time"
	// FieldCreatedBy holds the string denoting the createdby field in the database.
	FieldCreatedBy = "created_by"
	// EdgeRoles holds the string denoting the roles edge name in mutations.
	EdgeRoles = "roles"
	// EdgeUsermasterRef holds the string denoting the usermasterref edge name in mutations.
	EdgeUsermasterRef = "UsermasterRef"
	// EdgeUsersPSRef holds the string denoting the userspsref edge name in mutations.
	EdgeUsersPSRef = "UsersPSRef"
	// EdgeUsersIPRef holds the string denoting the usersipref edge name in mutations.
	EdgeUsersIPRef = "UsersIPRef"
	// EdgeUsersPsType holds the string denoting the users_ps_type edge name in mutations.
	EdgeUsersPsType = "users_ps_type"
	// EdgeUsersIPType holds the string denoting the users_ip_type edge name in mutations.
	EdgeUsersIPType = "users_ip_type"
	// RoleMasterFieldID holds the string denoting the ID field of the RoleMaster.
	RoleMasterFieldID = "RoleUserCode"
	// EmployeeMasterFieldID holds the string denoting the ID field of the EmployeeMaster.
	EmployeeMasterFieldID = "EmpID"
	// Exam_Applications_PSFieldID holds the string denoting the ID field of the Exam_Applications_PS.
	Exam_Applications_PSFieldID = "ApplicationID"
	// Exam_Applications_IPFieldID holds the string denoting the ID field of the Exam_Applications_IP.
	Exam_Applications_IPFieldID = "ApplicationID"
	// Exam_PSFieldID holds the string denoting the ID field of the Exam_PS.
	Exam_PSFieldID = "ExamCodePS"
	// Exam_IPFieldID holds the string denoting the ID field of the Exam_IP.
	Exam_IPFieldID = "ExamCodeIP"
	// Table holds the table name of the usermaster in the database.
	Table = "UserMaster"
	// RolesTable is the table that holds the roles relation/edge.
	RolesTable = "UserMaster"
	// RolesInverseTable is the table name for the RoleMaster entity.
	// It exists in this package in order to avoid circular dependency with the "rolemaster" package.
	RolesInverseTable = "RoleMaster"
	// RolesColumn is the table column denoting the roles relation/edge.
	RolesColumn = "role_user_code"
	// UsermasterRefTable is the table that holds the UsermasterRef relation/edge.
	UsermasterRefTable = "EmployeeMaster"
	// UsermasterRefInverseTable is the table name for the EmployeeMaster entity.
	// It exists in this package in order to avoid circular dependency with the "employeemaster" package.
	UsermasterRefInverseTable = "EmployeeMaster"
	// UsermasterRefColumn is the table column denoting the UsermasterRef relation/edge.
	UsermasterRefColumn = "user_master_usermaster_ref"
	// UsersPSRefTable is the table that holds the UsersPSRef relation/edge.
	UsersPSRefTable = "Exam_Applications_PS"
	// UsersPSRefInverseTable is the table name for the Exam_Applications_PS entity.
	// It exists in this package in order to avoid circular dependency with the "exam_applications_ps" package.
	UsersPSRefInverseTable = "Exam_Applications_PS"
	// UsersPSRefColumn is the table column denoting the UsersPSRef relation/edge.
	UsersPSRefColumn = "user_master_users_ps_ref"
	// UsersIPRefTable is the table that holds the UsersIPRef relation/edge.
	UsersIPRefTable = "Exam_Applications_IP"
	// UsersIPRefInverseTable is the table name for the Exam_Applications_IP entity.
	// It exists in this package in order to avoid circular dependency with the "exam_applications_ip" package.
	UsersIPRefInverseTable = "Exam_Applications_IP"
	// UsersIPRefColumn is the table column denoting the UsersIPRef relation/edge.
	UsersIPRefColumn = "user_master_users_ip_ref"
	// UsersPsTypeTable is the table that holds the users_ps_type relation/edge.
	UsersPsTypeTable = "Exam_PS"
	// UsersPsTypeInverseTable is the table name for the Exam_PS entity.
	// It exists in this package in order to avoid circular dependency with the "exam_ps" package.
	UsersPsTypeInverseTable = "Exam_PS"
	// UsersPsTypeColumn is the table column denoting the users_ps_type relation/edge.
	UsersPsTypeColumn = "user_master_users_ps_type"
	// UsersIPTypeTable is the table that holds the users_ip_type relation/edge.
	UsersIPTypeTable = "Exam_IP"
	// UsersIPTypeInverseTable is the table name for the Exam_IP entity.
	// It exists in this package in order to avoid circular dependency with the "exam_ip" package.
	UsersIPTypeInverseTable = "Exam_IP"
	// UsersIPTypeColumn is the table column denoting the users_ip_type relation/edge.
	UsersIPTypeColumn = "user_master_users_ip_type"
)

// Columns holds all SQL columns for usermaster fields.
var Columns = []string{
	FieldID,
	FieldEmployeeID,
	FieldEmployeeName,
	FieldFacilityID,
	FieldCadre,
	FieldRoleUserCode,
	FieldMobile,
	FieldEmailID,
	FieldUserName,
	FieldPassword,
	FieldOTP,
	FieldExamCode,
	FieldExamCodePS,
	FieldOTPRemarks,
	FieldStatus,
	FieldNewPasswordRequest,
	FieldCreatedAt,
	FieldOTPTriggeredTime,
	FieldCreatedBy,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "UserMaster"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"employee_master_usermaster_ref",
	"exam_applications_ip_users_ip_ref",
	"exam_applications_ps_users_ps_ref",
	"exam_ip_users_ip_type",
	"exam_pa_users_ps_type",
	"exam_ps_users_ps_type",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatus holds the default value on creation for the "Status" field.
	DefaultStatus bool
	// DefaultOTPTriggeredTime holds the default value on creation for the "OTPTriggeredTime" field.
	DefaultOTPTriggeredTime func() time.Time
	// DefaultCreatedBy holds the default value on creation for the "CreatedBy" field.
	DefaultCreatedBy string
)

// OrderOption defines the ordering options for the UserMaster queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEmployeeID orders the results by the EmployeeID field.
func ByEmployeeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeID, opts...).ToFunc()
}

// ByEmployeeName orders the results by the EmployeeName field.
func ByEmployeeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeName, opts...).ToFunc()
}

// ByFacilityID orders the results by the FacilityID field.
func ByFacilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFacilityID, opts...).ToFunc()
}

// ByCadre orders the results by the Cadre field.
func ByCadre(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCadre, opts...).ToFunc()
}

// ByRoleUserCode orders the results by the RoleUserCode field.
func ByRoleUserCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoleUserCode, opts...).ToFunc()
}

// ByMobile orders the results by the Mobile field.
func ByMobile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobile, opts...).ToFunc()
}

// ByEmailID orders the results by the EmailID field.
func ByEmailID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailID, opts...).ToFunc()
}

// ByUserName orders the results by the UserName field.
func ByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserName, opts...).ToFunc()
}

// ByPassword orders the results by the Password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByOTP orders the results by the OTP field.
func ByOTP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOTP, opts...).ToFunc()
}

// ByExamCode orders the results by the ExamCode field.
func ByExamCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamCode, opts...).ToFunc()
}

// ByExamCodePS orders the results by the ExamCodePS field.
func ByExamCodePS(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamCodePS, opts...).ToFunc()
}

// ByOTPRemarks orders the results by the OTPRemarks field.
func ByOTPRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOTPRemarks, opts...).ToFunc()
}

// ByStatus orders the results by the Status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByNewPasswordRequest orders the results by the NewPasswordRequest field.
func ByNewPasswordRequest(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNewPasswordRequest, opts...).ToFunc()
}

// ByCreatedAt orders the results by the CreatedAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByOTPTriggeredTime orders the results by the OTPTriggeredTime field.
func ByOTPTriggeredTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOTPTriggeredTime, opts...).ToFunc()
}

// ByCreatedBy orders the results by the CreatedBy field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByRolesField orders the results by roles field.
func ByRolesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRolesStep(), sql.OrderByField(field, opts...))
	}
}

// ByUsermasterRefCount orders the results by UsermasterRef count.
func ByUsermasterRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsermasterRefStep(), opts...)
	}
}

// ByUsermasterRef orders the results by UsermasterRef terms.
func ByUsermasterRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsermasterRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUsersPSRefCount orders the results by UsersPSRef count.
func ByUsersPSRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersPSRefStep(), opts...)
	}
}

// ByUsersPSRef orders the results by UsersPSRef terms.
func ByUsersPSRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersPSRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUsersIPRefCount orders the results by UsersIPRef count.
func ByUsersIPRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersIPRefStep(), opts...)
	}
}

// ByUsersIPRef orders the results by UsersIPRef terms.
func ByUsersIPRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersIPRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUsersPsTypeCount orders the results by users_ps_type count.
func ByUsersPsTypeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersPsTypeStep(), opts...)
	}
}

// ByUsersPsType orders the results by users_ps_type terms.
func ByUsersPsType(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersPsTypeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUsersIPTypeCount orders the results by users_ip_type count.
func ByUsersIPTypeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersIPTypeStep(), opts...)
	}
}

// ByUsersIPType orders the results by users_ip_type terms.
func ByUsersIPType(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersIPTypeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RolesInverseTable, RoleMasterFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RolesTable, RolesColumn),
	)
}
func newUsermasterRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsermasterRefInverseTable, EmployeeMasterFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UsermasterRefTable, UsermasterRefColumn),
	)
}
func newUsersPSRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersPSRefInverseTable, Exam_Applications_PSFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UsersPSRefTable, UsersPSRefColumn),
	)
}
func newUsersIPRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersIPRefInverseTable, Exam_Applications_IPFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UsersIPRefTable, UsersIPRefColumn),
	)
}
func newUsersPsTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersPsTypeInverseTable, Exam_PSFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UsersPsTypeTable, UsersPsTypeColumn),
	)
}
func newUsersIPTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersIPTypeInverseTable, Exam_IPFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UsersIPTypeTable, UsersIPTypeColumn),
	)
}
