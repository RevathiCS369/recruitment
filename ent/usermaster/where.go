// Code generated by ent, DO NOT EDIT.

package usermaster

import (
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldID, id))
}

// EmployeeID applies equality check predicate on the "EmployeeID" field. It's identical to EmployeeIDEQ.
func EmployeeID(v int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldEmployeeID, v))
}

// EmployeeName applies equality check predicate on the "EmployeeName" field. It's identical to EmployeeNameEQ.
func EmployeeName(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldEmployeeName, v))
}

// FacilityID applies equality check predicate on the "FacilityID" field. It's identical to FacilityIDEQ.
func FacilityID(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldFacilityID, v))
}

// Cadre applies equality check predicate on the "Cadre" field. It's identical to CadreEQ.
func Cadre(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldCadre, v))
}

// RoleUserCode applies equality check predicate on the "RoleUserCode" field. It's identical to RoleUserCodeEQ.
func RoleUserCode(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldRoleUserCode, v))
}

// Mobile applies equality check predicate on the "Mobile" field. It's identical to MobileEQ.
func Mobile(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldMobile, v))
}

// EmailID applies equality check predicate on the "EmailID" field. It's identical to EmailIDEQ.
func EmailID(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldEmailID, v))
}

// UserName applies equality check predicate on the "UserName" field. It's identical to UserNameEQ.
func UserName(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldUserName, v))
}

// Password applies equality check predicate on the "Password" field. It's identical to PasswordEQ.
func Password(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldPassword, v))
}

// OTP applies equality check predicate on the "OTP" field. It's identical to OTPEQ.
func OTP(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldOTP, v))
}

// ExamCode applies equality check predicate on the "ExamCode" field. It's identical to ExamCodeEQ.
func ExamCode(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldExamCode, v))
}

// ExamCodePS applies equality check predicate on the "ExamCodePS" field. It's identical to ExamCodePSEQ.
func ExamCodePS(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldExamCodePS, v))
}

// OTPRemarks applies equality check predicate on the "OTPRemarks" field. It's identical to OTPRemarksEQ.
func OTPRemarks(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldOTPRemarks, v))
}

// Status applies equality check predicate on the "Status" field. It's identical to StatusEQ.
func Status(v bool) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldStatus, v))
}

// NewPasswordRequest applies equality check predicate on the "NewPasswordRequest" field. It's identical to NewPasswordRequestEQ.
func NewPasswordRequest(v bool) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldNewPasswordRequest, v))
}

// CreatedAt applies equality check predicate on the "CreatedAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldCreatedAt, v))
}

// OTPTriggeredTime applies equality check predicate on the "OTPTriggeredTime" field. It's identical to OTPTriggeredTimeEQ.
func OTPTriggeredTime(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldOTPTriggeredTime, v))
}

// CreatedBy applies equality check predicate on the "CreatedBy" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldCreatedBy, v))
}

// EmployeeIDEQ applies the EQ predicate on the "EmployeeID" field.
func EmployeeIDEQ(v int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldEmployeeID, v))
}

// EmployeeIDNEQ applies the NEQ predicate on the "EmployeeID" field.
func EmployeeIDNEQ(v int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldEmployeeID, v))
}

// EmployeeIDIn applies the In predicate on the "EmployeeID" field.
func EmployeeIDIn(vs ...int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldEmployeeID, vs...))
}

// EmployeeIDNotIn applies the NotIn predicate on the "EmployeeID" field.
func EmployeeIDNotIn(vs ...int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldEmployeeID, vs...))
}

// EmployeeIDGT applies the GT predicate on the "EmployeeID" field.
func EmployeeIDGT(v int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldEmployeeID, v))
}

// EmployeeIDGTE applies the GTE predicate on the "EmployeeID" field.
func EmployeeIDGTE(v int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldEmployeeID, v))
}

// EmployeeIDLT applies the LT predicate on the "EmployeeID" field.
func EmployeeIDLT(v int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldEmployeeID, v))
}

// EmployeeIDLTE applies the LTE predicate on the "EmployeeID" field.
func EmployeeIDLTE(v int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldEmployeeID, v))
}

// EmployeeIDIsNil applies the IsNil predicate on the "EmployeeID" field.
func EmployeeIDIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldEmployeeID))
}

// EmployeeIDNotNil applies the NotNil predicate on the "EmployeeID" field.
func EmployeeIDNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldEmployeeID))
}

// EmployeeNameEQ applies the EQ predicate on the "EmployeeName" field.
func EmployeeNameEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldEmployeeName, v))
}

// EmployeeNameNEQ applies the NEQ predicate on the "EmployeeName" field.
func EmployeeNameNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldEmployeeName, v))
}

// EmployeeNameIn applies the In predicate on the "EmployeeName" field.
func EmployeeNameIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldEmployeeName, vs...))
}

// EmployeeNameNotIn applies the NotIn predicate on the "EmployeeName" field.
func EmployeeNameNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldEmployeeName, vs...))
}

// EmployeeNameGT applies the GT predicate on the "EmployeeName" field.
func EmployeeNameGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldEmployeeName, v))
}

// EmployeeNameGTE applies the GTE predicate on the "EmployeeName" field.
func EmployeeNameGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldEmployeeName, v))
}

// EmployeeNameLT applies the LT predicate on the "EmployeeName" field.
func EmployeeNameLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldEmployeeName, v))
}

// EmployeeNameLTE applies the LTE predicate on the "EmployeeName" field.
func EmployeeNameLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldEmployeeName, v))
}

// EmployeeNameContains applies the Contains predicate on the "EmployeeName" field.
func EmployeeNameContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldEmployeeName, v))
}

// EmployeeNameHasPrefix applies the HasPrefix predicate on the "EmployeeName" field.
func EmployeeNameHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldEmployeeName, v))
}

// EmployeeNameHasSuffix applies the HasSuffix predicate on the "EmployeeName" field.
func EmployeeNameHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldEmployeeName, v))
}

// EmployeeNameIsNil applies the IsNil predicate on the "EmployeeName" field.
func EmployeeNameIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldEmployeeName))
}

// EmployeeNameNotNil applies the NotNil predicate on the "EmployeeName" field.
func EmployeeNameNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldEmployeeName))
}

// EmployeeNameEqualFold applies the EqualFold predicate on the "EmployeeName" field.
func EmployeeNameEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldEmployeeName, v))
}

// EmployeeNameContainsFold applies the ContainsFold predicate on the "EmployeeName" field.
func EmployeeNameContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldEmployeeName, v))
}

// FacilityIDEQ applies the EQ predicate on the "FacilityID" field.
func FacilityIDEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldFacilityID, v))
}

// FacilityIDNEQ applies the NEQ predicate on the "FacilityID" field.
func FacilityIDNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldFacilityID, v))
}

// FacilityIDIn applies the In predicate on the "FacilityID" field.
func FacilityIDIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldFacilityID, vs...))
}

// FacilityIDNotIn applies the NotIn predicate on the "FacilityID" field.
func FacilityIDNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldFacilityID, vs...))
}

// FacilityIDGT applies the GT predicate on the "FacilityID" field.
func FacilityIDGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldFacilityID, v))
}

// FacilityIDGTE applies the GTE predicate on the "FacilityID" field.
func FacilityIDGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldFacilityID, v))
}

// FacilityIDLT applies the LT predicate on the "FacilityID" field.
func FacilityIDLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldFacilityID, v))
}

// FacilityIDLTE applies the LTE predicate on the "FacilityID" field.
func FacilityIDLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldFacilityID, v))
}

// FacilityIDContains applies the Contains predicate on the "FacilityID" field.
func FacilityIDContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldFacilityID, v))
}

// FacilityIDHasPrefix applies the HasPrefix predicate on the "FacilityID" field.
func FacilityIDHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldFacilityID, v))
}

// FacilityIDHasSuffix applies the HasSuffix predicate on the "FacilityID" field.
func FacilityIDHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldFacilityID, v))
}

// FacilityIDIsNil applies the IsNil predicate on the "FacilityID" field.
func FacilityIDIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldFacilityID))
}

// FacilityIDNotNil applies the NotNil predicate on the "FacilityID" field.
func FacilityIDNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldFacilityID))
}

// FacilityIDEqualFold applies the EqualFold predicate on the "FacilityID" field.
func FacilityIDEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldFacilityID, v))
}

// FacilityIDContainsFold applies the ContainsFold predicate on the "FacilityID" field.
func FacilityIDContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldFacilityID, v))
}

// CadreEQ applies the EQ predicate on the "Cadre" field.
func CadreEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldCadre, v))
}

// CadreNEQ applies the NEQ predicate on the "Cadre" field.
func CadreNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldCadre, v))
}

// CadreIn applies the In predicate on the "Cadre" field.
func CadreIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldCadre, vs...))
}

// CadreNotIn applies the NotIn predicate on the "Cadre" field.
func CadreNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldCadre, vs...))
}

// CadreGT applies the GT predicate on the "Cadre" field.
func CadreGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldCadre, v))
}

// CadreGTE applies the GTE predicate on the "Cadre" field.
func CadreGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldCadre, v))
}

// CadreLT applies the LT predicate on the "Cadre" field.
func CadreLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldCadre, v))
}

// CadreLTE applies the LTE predicate on the "Cadre" field.
func CadreLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldCadre, v))
}

// CadreContains applies the Contains predicate on the "Cadre" field.
func CadreContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldCadre, v))
}

// CadreHasPrefix applies the HasPrefix predicate on the "Cadre" field.
func CadreHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldCadre, v))
}

// CadreHasSuffix applies the HasSuffix predicate on the "Cadre" field.
func CadreHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldCadre, v))
}

// CadreIsNil applies the IsNil predicate on the "Cadre" field.
func CadreIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldCadre))
}

// CadreNotNil applies the NotNil predicate on the "Cadre" field.
func CadreNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldCadre))
}

// CadreEqualFold applies the EqualFold predicate on the "Cadre" field.
func CadreEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldCadre, v))
}

// CadreContainsFold applies the ContainsFold predicate on the "Cadre" field.
func CadreContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldCadre, v))
}

// RoleUserCodeEQ applies the EQ predicate on the "RoleUserCode" field.
func RoleUserCodeEQ(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldRoleUserCode, v))
}

// RoleUserCodeNEQ applies the NEQ predicate on the "RoleUserCode" field.
func RoleUserCodeNEQ(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldRoleUserCode, v))
}

// RoleUserCodeIn applies the In predicate on the "RoleUserCode" field.
func RoleUserCodeIn(vs ...int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldRoleUserCode, vs...))
}

// RoleUserCodeNotIn applies the NotIn predicate on the "RoleUserCode" field.
func RoleUserCodeNotIn(vs ...int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldRoleUserCode, vs...))
}

// RoleUserCodeIsNil applies the IsNil predicate on the "RoleUserCode" field.
func RoleUserCodeIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldRoleUserCode))
}

// RoleUserCodeNotNil applies the NotNil predicate on the "RoleUserCode" field.
func RoleUserCodeNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldRoleUserCode))
}

// MobileEQ applies the EQ predicate on the "Mobile" field.
func MobileEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldMobile, v))
}

// MobileNEQ applies the NEQ predicate on the "Mobile" field.
func MobileNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldMobile, v))
}

// MobileIn applies the In predicate on the "Mobile" field.
func MobileIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldMobile, vs...))
}

// MobileNotIn applies the NotIn predicate on the "Mobile" field.
func MobileNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldMobile, vs...))
}

// MobileGT applies the GT predicate on the "Mobile" field.
func MobileGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldMobile, v))
}

// MobileGTE applies the GTE predicate on the "Mobile" field.
func MobileGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldMobile, v))
}

// MobileLT applies the LT predicate on the "Mobile" field.
func MobileLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldMobile, v))
}

// MobileLTE applies the LTE predicate on the "Mobile" field.
func MobileLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldMobile, v))
}

// MobileContains applies the Contains predicate on the "Mobile" field.
func MobileContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldMobile, v))
}

// MobileHasPrefix applies the HasPrefix predicate on the "Mobile" field.
func MobileHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldMobile, v))
}

// MobileHasSuffix applies the HasSuffix predicate on the "Mobile" field.
func MobileHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldMobile, v))
}

// MobileIsNil applies the IsNil predicate on the "Mobile" field.
func MobileIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldMobile))
}

// MobileNotNil applies the NotNil predicate on the "Mobile" field.
func MobileNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldMobile))
}

// MobileEqualFold applies the EqualFold predicate on the "Mobile" field.
func MobileEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldMobile, v))
}

// MobileContainsFold applies the ContainsFold predicate on the "Mobile" field.
func MobileContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldMobile, v))
}

// EmailIDEQ applies the EQ predicate on the "EmailID" field.
func EmailIDEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldEmailID, v))
}

// EmailIDNEQ applies the NEQ predicate on the "EmailID" field.
func EmailIDNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldEmailID, v))
}

// EmailIDIn applies the In predicate on the "EmailID" field.
func EmailIDIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldEmailID, vs...))
}

// EmailIDNotIn applies the NotIn predicate on the "EmailID" field.
func EmailIDNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldEmailID, vs...))
}

// EmailIDGT applies the GT predicate on the "EmailID" field.
func EmailIDGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldEmailID, v))
}

// EmailIDGTE applies the GTE predicate on the "EmailID" field.
func EmailIDGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldEmailID, v))
}

// EmailIDLT applies the LT predicate on the "EmailID" field.
func EmailIDLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldEmailID, v))
}

// EmailIDLTE applies the LTE predicate on the "EmailID" field.
func EmailIDLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldEmailID, v))
}

// EmailIDContains applies the Contains predicate on the "EmailID" field.
func EmailIDContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldEmailID, v))
}

// EmailIDHasPrefix applies the HasPrefix predicate on the "EmailID" field.
func EmailIDHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldEmailID, v))
}

// EmailIDHasSuffix applies the HasSuffix predicate on the "EmailID" field.
func EmailIDHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldEmailID, v))
}

// EmailIDIsNil applies the IsNil predicate on the "EmailID" field.
func EmailIDIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldEmailID))
}

// EmailIDNotNil applies the NotNil predicate on the "EmailID" field.
func EmailIDNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldEmailID))
}

// EmailIDEqualFold applies the EqualFold predicate on the "EmailID" field.
func EmailIDEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldEmailID, v))
}

// EmailIDContainsFold applies the ContainsFold predicate on the "EmailID" field.
func EmailIDContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldEmailID, v))
}

// UserNameEQ applies the EQ predicate on the "UserName" field.
func UserNameEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldUserName, v))
}

// UserNameNEQ applies the NEQ predicate on the "UserName" field.
func UserNameNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldUserName, v))
}

// UserNameIn applies the In predicate on the "UserName" field.
func UserNameIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldUserName, vs...))
}

// UserNameNotIn applies the NotIn predicate on the "UserName" field.
func UserNameNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldUserName, vs...))
}

// UserNameGT applies the GT predicate on the "UserName" field.
func UserNameGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldUserName, v))
}

// UserNameGTE applies the GTE predicate on the "UserName" field.
func UserNameGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldUserName, v))
}

// UserNameLT applies the LT predicate on the "UserName" field.
func UserNameLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldUserName, v))
}

// UserNameLTE applies the LTE predicate on the "UserName" field.
func UserNameLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldUserName, v))
}

// UserNameContains applies the Contains predicate on the "UserName" field.
func UserNameContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldUserName, v))
}

// UserNameHasPrefix applies the HasPrefix predicate on the "UserName" field.
func UserNameHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldUserName, v))
}

// UserNameHasSuffix applies the HasSuffix predicate on the "UserName" field.
func UserNameHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldUserName, v))
}

// UserNameIsNil applies the IsNil predicate on the "UserName" field.
func UserNameIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldUserName))
}

// UserNameNotNil applies the NotNil predicate on the "UserName" field.
func UserNameNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldUserName))
}

// UserNameEqualFold applies the EqualFold predicate on the "UserName" field.
func UserNameEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldUserName, v))
}

// UserNameContainsFold applies the ContainsFold predicate on the "UserName" field.
func UserNameContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldUserName, v))
}

// PasswordEQ applies the EQ predicate on the "Password" field.
func PasswordEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "Password" field.
func PasswordNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "Password" field.
func PasswordIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "Password" field.
func PasswordNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "Password" field.
func PasswordGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "Password" field.
func PasswordGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "Password" field.
func PasswordLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "Password" field.
func PasswordLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "Password" field.
func PasswordContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "Password" field.
func PasswordHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "Password" field.
func PasswordHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordIsNil applies the IsNil predicate on the "Password" field.
func PasswordIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldPassword))
}

// PasswordNotNil applies the NotNil predicate on the "Password" field.
func PasswordNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldPassword))
}

// PasswordEqualFold applies the EqualFold predicate on the "Password" field.
func PasswordEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "Password" field.
func PasswordContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldPassword, v))
}

// OTPEQ applies the EQ predicate on the "OTP" field.
func OTPEQ(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldOTP, v))
}

// OTPNEQ applies the NEQ predicate on the "OTP" field.
func OTPNEQ(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldOTP, v))
}

// OTPIn applies the In predicate on the "OTP" field.
func OTPIn(vs ...int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldOTP, vs...))
}

// OTPNotIn applies the NotIn predicate on the "OTP" field.
func OTPNotIn(vs ...int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldOTP, vs...))
}

// OTPGT applies the GT predicate on the "OTP" field.
func OTPGT(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldOTP, v))
}

// OTPGTE applies the GTE predicate on the "OTP" field.
func OTPGTE(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldOTP, v))
}

// OTPLT applies the LT predicate on the "OTP" field.
func OTPLT(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldOTP, v))
}

// OTPLTE applies the LTE predicate on the "OTP" field.
func OTPLTE(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldOTP, v))
}

// OTPIsNil applies the IsNil predicate on the "OTP" field.
func OTPIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldOTP))
}

// OTPNotNil applies the NotNil predicate on the "OTP" field.
func OTPNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldOTP))
}

// ExamCodeEQ applies the EQ predicate on the "ExamCode" field.
func ExamCodeEQ(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldExamCode, v))
}

// ExamCodeNEQ applies the NEQ predicate on the "ExamCode" field.
func ExamCodeNEQ(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldExamCode, v))
}

// ExamCodeIn applies the In predicate on the "ExamCode" field.
func ExamCodeIn(vs ...int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldExamCode, vs...))
}

// ExamCodeNotIn applies the NotIn predicate on the "ExamCode" field.
func ExamCodeNotIn(vs ...int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldExamCode, vs...))
}

// ExamCodeGT applies the GT predicate on the "ExamCode" field.
func ExamCodeGT(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldExamCode, v))
}

// ExamCodeGTE applies the GTE predicate on the "ExamCode" field.
func ExamCodeGTE(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldExamCode, v))
}

// ExamCodeLT applies the LT predicate on the "ExamCode" field.
func ExamCodeLT(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldExamCode, v))
}

// ExamCodeLTE applies the LTE predicate on the "ExamCode" field.
func ExamCodeLTE(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldExamCode, v))
}

// ExamCodeIsNil applies the IsNil predicate on the "ExamCode" field.
func ExamCodeIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldExamCode))
}

// ExamCodeNotNil applies the NotNil predicate on the "ExamCode" field.
func ExamCodeNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldExamCode))
}

// ExamCodePSEQ applies the EQ predicate on the "ExamCodePS" field.
func ExamCodePSEQ(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldExamCodePS, v))
}

// ExamCodePSNEQ applies the NEQ predicate on the "ExamCodePS" field.
func ExamCodePSNEQ(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldExamCodePS, v))
}

// ExamCodePSIn applies the In predicate on the "ExamCodePS" field.
func ExamCodePSIn(vs ...int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldExamCodePS, vs...))
}

// ExamCodePSNotIn applies the NotIn predicate on the "ExamCodePS" field.
func ExamCodePSNotIn(vs ...int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldExamCodePS, vs...))
}

// ExamCodePSGT applies the GT predicate on the "ExamCodePS" field.
func ExamCodePSGT(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldExamCodePS, v))
}

// ExamCodePSGTE applies the GTE predicate on the "ExamCodePS" field.
func ExamCodePSGTE(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldExamCodePS, v))
}

// ExamCodePSLT applies the LT predicate on the "ExamCodePS" field.
func ExamCodePSLT(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldExamCodePS, v))
}

// ExamCodePSLTE applies the LTE predicate on the "ExamCodePS" field.
func ExamCodePSLTE(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldExamCodePS, v))
}

// ExamCodePSIsNil applies the IsNil predicate on the "ExamCodePS" field.
func ExamCodePSIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldExamCodePS))
}

// ExamCodePSNotNil applies the NotNil predicate on the "ExamCodePS" field.
func ExamCodePSNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldExamCodePS))
}

// OTPRemarksEQ applies the EQ predicate on the "OTPRemarks" field.
func OTPRemarksEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldOTPRemarks, v))
}

// OTPRemarksNEQ applies the NEQ predicate on the "OTPRemarks" field.
func OTPRemarksNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldOTPRemarks, v))
}

// OTPRemarksIn applies the In predicate on the "OTPRemarks" field.
func OTPRemarksIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldOTPRemarks, vs...))
}

// OTPRemarksNotIn applies the NotIn predicate on the "OTPRemarks" field.
func OTPRemarksNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldOTPRemarks, vs...))
}

// OTPRemarksGT applies the GT predicate on the "OTPRemarks" field.
func OTPRemarksGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldOTPRemarks, v))
}

// OTPRemarksGTE applies the GTE predicate on the "OTPRemarks" field.
func OTPRemarksGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldOTPRemarks, v))
}

// OTPRemarksLT applies the LT predicate on the "OTPRemarks" field.
func OTPRemarksLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldOTPRemarks, v))
}

// OTPRemarksLTE applies the LTE predicate on the "OTPRemarks" field.
func OTPRemarksLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldOTPRemarks, v))
}

// OTPRemarksContains applies the Contains predicate on the "OTPRemarks" field.
func OTPRemarksContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldOTPRemarks, v))
}

// OTPRemarksHasPrefix applies the HasPrefix predicate on the "OTPRemarks" field.
func OTPRemarksHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldOTPRemarks, v))
}

// OTPRemarksHasSuffix applies the HasSuffix predicate on the "OTPRemarks" field.
func OTPRemarksHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldOTPRemarks, v))
}

// OTPRemarksIsNil applies the IsNil predicate on the "OTPRemarks" field.
func OTPRemarksIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldOTPRemarks))
}

// OTPRemarksNotNil applies the NotNil predicate on the "OTPRemarks" field.
func OTPRemarksNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldOTPRemarks))
}

// OTPRemarksEqualFold applies the EqualFold predicate on the "OTPRemarks" field.
func OTPRemarksEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldOTPRemarks, v))
}

// OTPRemarksContainsFold applies the ContainsFold predicate on the "OTPRemarks" field.
func OTPRemarksContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldOTPRemarks, v))
}

// StatusEQ applies the EQ predicate on the "Status" field.
func StatusEQ(v bool) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "Status" field.
func StatusNEQ(v bool) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "Status" field.
func StatusIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "Status" field.
func StatusNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldStatus))
}

// NewPasswordRequestEQ applies the EQ predicate on the "NewPasswordRequest" field.
func NewPasswordRequestEQ(v bool) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldNewPasswordRequest, v))
}

// NewPasswordRequestNEQ applies the NEQ predicate on the "NewPasswordRequest" field.
func NewPasswordRequestNEQ(v bool) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldNewPasswordRequest, v))
}

// NewPasswordRequestIsNil applies the IsNil predicate on the "NewPasswordRequest" field.
func NewPasswordRequestIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldNewPasswordRequest))
}

// NewPasswordRequestNotNil applies the NotNil predicate on the "NewPasswordRequest" field.
func NewPasswordRequestNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldNewPasswordRequest))
}

// CreatedAtEQ applies the EQ predicate on the "CreatedAt" field.
func CreatedAtEQ(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "CreatedAt" field.
func CreatedAtNEQ(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "CreatedAt" field.
func CreatedAtIn(vs ...time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "CreatedAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "CreatedAt" field.
func CreatedAtGT(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "CreatedAt" field.
func CreatedAtGTE(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "CreatedAt" field.
func CreatedAtLT(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "CreatedAt" field.
func CreatedAtLTE(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "CreatedAt" field.
func CreatedAtIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "CreatedAt" field.
func CreatedAtNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldCreatedAt))
}

// OTPTriggeredTimeEQ applies the EQ predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeEQ(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldOTPTriggeredTime, v))
}

// OTPTriggeredTimeNEQ applies the NEQ predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeNEQ(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldOTPTriggeredTime, v))
}

// OTPTriggeredTimeIn applies the In predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeIn(vs ...time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldOTPTriggeredTime, vs...))
}

// OTPTriggeredTimeNotIn applies the NotIn predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeNotIn(vs ...time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldOTPTriggeredTime, vs...))
}

// OTPTriggeredTimeGT applies the GT predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeGT(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldOTPTriggeredTime, v))
}

// OTPTriggeredTimeGTE applies the GTE predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeGTE(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldOTPTriggeredTime, v))
}

// OTPTriggeredTimeLT applies the LT predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeLT(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldOTPTriggeredTime, v))
}

// OTPTriggeredTimeLTE applies the LTE predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeLTE(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldOTPTriggeredTime, v))
}

// OTPTriggeredTimeIsNil applies the IsNil predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldOTPTriggeredTime))
}

// OTPTriggeredTimeNotNil applies the NotNil predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldOTPTriggeredTime))
}

// CreatedByEQ applies the EQ predicate on the "CreatedBy" field.
func CreatedByEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "CreatedBy" field.
func CreatedByNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "CreatedBy" field.
func CreatedByIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "CreatedBy" field.
func CreatedByNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "CreatedBy" field.
func CreatedByGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "CreatedBy" field.
func CreatedByGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "CreatedBy" field.
func CreatedByLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "CreatedBy" field.
func CreatedByLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "CreatedBy" field.
func CreatedByContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "CreatedBy" field.
func CreatedByHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "CreatedBy" field.
func CreatedByHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "CreatedBy" field.
func CreatedByIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "CreatedBy" field.
func CreatedByNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "CreatedBy" field.
func CreatedByEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "CreatedBy" field.
func CreatedByContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldCreatedBy, v))
}

// HasRoles applies the HasEdge predicate on the "roles" edge.
func HasRoles() predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RolesTable, RolesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesWith applies the HasEdge predicate on the "roles" edge with a given conditions (other predicates).
func HasRolesWith(preds ...predicate.RoleMaster) predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := newRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsermasterRef applies the HasEdge predicate on the "UsermasterRef" edge.
func HasUsermasterRef() predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsermasterRefTable, UsermasterRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsermasterRefWith applies the HasEdge predicate on the "UsermasterRef" edge with a given conditions (other predicates).
func HasUsermasterRefWith(preds ...predicate.EmployeeMaster) predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := newUsermasterRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsersPSRef applies the HasEdge predicate on the "UsersPSRef" edge.
func HasUsersPSRef() predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersPSRefTable, UsersPSRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersPSRefWith applies the HasEdge predicate on the "UsersPSRef" edge with a given conditions (other predicates).
func HasUsersPSRefWith(preds ...predicate.Exam_Applications_PS) predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := newUsersPSRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsersIPRef applies the HasEdge predicate on the "UsersIPRef" edge.
func HasUsersIPRef() predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersIPRefTable, UsersIPRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersIPRefWith applies the HasEdge predicate on the "UsersIPRef" edge with a given conditions (other predicates).
func HasUsersIPRefWith(preds ...predicate.Exam_Applications_IP) predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := newUsersIPRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsersPsType applies the HasEdge predicate on the "users_ps_type" edge.
func HasUsersPsType() predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersPsTypeTable, UsersPsTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersPsTypeWith applies the HasEdge predicate on the "users_ps_type" edge with a given conditions (other predicates).
func HasUsersPsTypeWith(preds ...predicate.Exam_PS) predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := newUsersPsTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsersIPType applies the HasEdge predicate on the "users_ip_type" edge.
func HasUsersIPType() predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersIPTypeTable, UsersIPTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersIPTypeWith applies the HasEdge predicate on the "users_ip_type" edge with a given conditions (other predicates).
func HasUsersIPTypeWith(preds ...predicate.Exam_IP) predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := newUsersIPTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserMaster) predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserMaster) predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserMaster) predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		p(s.Not())
	})
}
