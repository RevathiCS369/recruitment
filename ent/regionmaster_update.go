// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/circlemaster"
	"recruit/ent/divisionmaster"
	"recruit/ent/facility"
	"recruit/ent/predicate"
	"recruit/ent/regionmaster"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RegionMasterUpdate is the builder for updating RegionMaster entities.
type RegionMasterUpdate struct {
	config
	hooks    []Hook
	mutation *RegionMasterMutation
}

// Where appends a list predicates to the RegionMasterUpdate builder.
func (rmu *RegionMasterUpdate) Where(ps ...predicate.RegionMaster) *RegionMasterUpdate {
	rmu.mutation.Where(ps...)
	return rmu
}

// SetRegionCode sets the "RegionCode" field.
func (rmu *RegionMasterUpdate) SetRegionCode(i int32) *RegionMasterUpdate {
	rmu.mutation.ResetRegionCode()
	rmu.mutation.SetRegionCode(i)
	return rmu
}

// AddRegionCode adds i to the "RegionCode" field.
func (rmu *RegionMasterUpdate) AddRegionCode(i int32) *RegionMasterUpdate {
	rmu.mutation.AddRegionCode(i)
	return rmu
}

// SetRegionOfficeId sets the "RegionOfficeId" field.
func (rmu *RegionMasterUpdate) SetRegionOfficeId(s string) *RegionMasterUpdate {
	rmu.mutation.SetRegionOfficeId(s)
	return rmu
}

// SetOfficeType sets the "OfficeType" field.
func (rmu *RegionMasterUpdate) SetOfficeType(s string) *RegionMasterUpdate {
	rmu.mutation.SetOfficeType(s)
	return rmu
}

// SetRegionOfficeName sets the "RegionOfficeName" field.
func (rmu *RegionMasterUpdate) SetRegionOfficeName(s string) *RegionMasterUpdate {
	rmu.mutation.SetRegionOfficeName(s)
	return rmu
}

// SetReportingOfficeType sets the "ReportingOfficeType" field.
func (rmu *RegionMasterUpdate) SetReportingOfficeType(s string) *RegionMasterUpdate {
	rmu.mutation.SetReportingOfficeType(s)
	return rmu
}

// SetNillableReportingOfficeType sets the "ReportingOfficeType" field if the given value is not nil.
func (rmu *RegionMasterUpdate) SetNillableReportingOfficeType(s *string) *RegionMasterUpdate {
	if s != nil {
		rmu.SetReportingOfficeType(*s)
	}
	return rmu
}

// ClearReportingOfficeType clears the value of the "ReportingOfficeType" field.
func (rmu *RegionMasterUpdate) ClearReportingOfficeType() *RegionMasterUpdate {
	rmu.mutation.ClearReportingOfficeType()
	return rmu
}

// SetReportingOfficeCode sets the "ReportingOfficeCode" field.
func (rmu *RegionMasterUpdate) SetReportingOfficeCode(s string) *RegionMasterUpdate {
	rmu.mutation.SetReportingOfficeCode(s)
	return rmu
}

// SetNillableReportingOfficeCode sets the "ReportingOfficeCode" field if the given value is not nil.
func (rmu *RegionMasterUpdate) SetNillableReportingOfficeCode(s *string) *RegionMasterUpdate {
	if s != nil {
		rmu.SetReportingOfficeCode(*s)
	}
	return rmu
}

// ClearReportingOfficeCode clears the value of the "ReportingOfficeCode" field.
func (rmu *RegionMasterUpdate) ClearReportingOfficeCode() *RegionMasterUpdate {
	rmu.mutation.ClearReportingOfficeCode()
	return rmu
}

// SetEmailID sets the "EmailID" field.
func (rmu *RegionMasterUpdate) SetEmailID(s string) *RegionMasterUpdate {
	rmu.mutation.SetEmailID(s)
	return rmu
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (rmu *RegionMasterUpdate) SetNillableEmailID(s *string) *RegionMasterUpdate {
	if s != nil {
		rmu.SetEmailID(*s)
	}
	return rmu
}

// ClearEmailID clears the value of the "EmailID" field.
func (rmu *RegionMasterUpdate) ClearEmailID() *RegionMasterUpdate {
	rmu.mutation.ClearEmailID()
	return rmu
}

// SetMobileNumber sets the "MobileNumber" field.
func (rmu *RegionMasterUpdate) SetMobileNumber(i int32) *RegionMasterUpdate {
	rmu.mutation.ResetMobileNumber()
	rmu.mutation.SetMobileNumber(i)
	return rmu
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (rmu *RegionMasterUpdate) SetNillableMobileNumber(i *int32) *RegionMasterUpdate {
	if i != nil {
		rmu.SetMobileNumber(*i)
	}
	return rmu
}

// AddMobileNumber adds i to the "MobileNumber" field.
func (rmu *RegionMasterUpdate) AddMobileNumber(i int32) *RegionMasterUpdate {
	rmu.mutation.AddMobileNumber(i)
	return rmu
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (rmu *RegionMasterUpdate) ClearMobileNumber() *RegionMasterUpdate {
	rmu.mutation.ClearMobileNumber()
	return rmu
}

// SetCircleCode sets the "CircleCode" field.
func (rmu *RegionMasterUpdate) SetCircleCode(i int32) *RegionMasterUpdate {
	rmu.mutation.ResetCircleCode()
	rmu.mutation.SetCircleCode(i)
	return rmu
}

// SetNillableCircleCode sets the "CircleCode" field if the given value is not nil.
func (rmu *RegionMasterUpdate) SetNillableCircleCode(i *int32) *RegionMasterUpdate {
	if i != nil {
		rmu.SetCircleCode(*i)
	}
	return rmu
}

// AddCircleCode adds i to the "CircleCode" field.
func (rmu *RegionMasterUpdate) AddCircleCode(i int32) *RegionMasterUpdate {
	rmu.mutation.AddCircleCode(i)
	return rmu
}

// ClearCircleCode clears the value of the "CircleCode" field.
func (rmu *RegionMasterUpdate) ClearCircleCode() *RegionMasterUpdate {
	rmu.mutation.ClearCircleCode()
	return rmu
}

// AddCircleRefIDs adds the "circle_ref" edge to the CircleMaster entity by IDs.
func (rmu *RegionMasterUpdate) AddCircleRefIDs(ids ...int32) *RegionMasterUpdate {
	rmu.mutation.AddCircleRefIDs(ids...)
	return rmu
}

// AddCircleRef adds the "circle_ref" edges to the CircleMaster entity.
func (rmu *RegionMasterUpdate) AddCircleRef(c ...*CircleMaster) *RegionMasterUpdate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rmu.AddCircleRefIDs(ids...)
}

// AddRegionIDs adds the "regions" edge to the DivisionMaster entity by IDs.
func (rmu *RegionMasterUpdate) AddRegionIDs(ids ...int32) *RegionMasterUpdate {
	rmu.mutation.AddRegionIDs(ids...)
	return rmu
}

// AddRegions adds the "regions" edges to the DivisionMaster entity.
func (rmu *RegionMasterUpdate) AddRegions(d ...*DivisionMaster) *RegionMasterUpdate {
	ids := make([]int32, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return rmu.AddRegionIDs(ids...)
}

// AddRegionRefRefIDs adds the "region_ref_ref" edge to the Facility entity by IDs.
func (rmu *RegionMasterUpdate) AddRegionRefRefIDs(ids ...int32) *RegionMasterUpdate {
	rmu.mutation.AddRegionRefRefIDs(ids...)
	return rmu
}

// AddRegionRefRef adds the "region_ref_ref" edges to the Facility entity.
func (rmu *RegionMasterUpdate) AddRegionRefRef(f ...*Facility) *RegionMasterUpdate {
	ids := make([]int32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return rmu.AddRegionRefRefIDs(ids...)
}

// Mutation returns the RegionMasterMutation object of the builder.
func (rmu *RegionMasterUpdate) Mutation() *RegionMasterMutation {
	return rmu.mutation
}

// ClearCircleRef clears all "circle_ref" edges to the CircleMaster entity.
func (rmu *RegionMasterUpdate) ClearCircleRef() *RegionMasterUpdate {
	rmu.mutation.ClearCircleRef()
	return rmu
}

// RemoveCircleRefIDs removes the "circle_ref" edge to CircleMaster entities by IDs.
func (rmu *RegionMasterUpdate) RemoveCircleRefIDs(ids ...int32) *RegionMasterUpdate {
	rmu.mutation.RemoveCircleRefIDs(ids...)
	return rmu
}

// RemoveCircleRef removes "circle_ref" edges to CircleMaster entities.
func (rmu *RegionMasterUpdate) RemoveCircleRef(c ...*CircleMaster) *RegionMasterUpdate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rmu.RemoveCircleRefIDs(ids...)
}

// ClearRegions clears all "regions" edges to the DivisionMaster entity.
func (rmu *RegionMasterUpdate) ClearRegions() *RegionMasterUpdate {
	rmu.mutation.ClearRegions()
	return rmu
}

// RemoveRegionIDs removes the "regions" edge to DivisionMaster entities by IDs.
func (rmu *RegionMasterUpdate) RemoveRegionIDs(ids ...int32) *RegionMasterUpdate {
	rmu.mutation.RemoveRegionIDs(ids...)
	return rmu
}

// RemoveRegions removes "regions" edges to DivisionMaster entities.
func (rmu *RegionMasterUpdate) RemoveRegions(d ...*DivisionMaster) *RegionMasterUpdate {
	ids := make([]int32, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return rmu.RemoveRegionIDs(ids...)
}

// ClearRegionRefRef clears all "region_ref_ref" edges to the Facility entity.
func (rmu *RegionMasterUpdate) ClearRegionRefRef() *RegionMasterUpdate {
	rmu.mutation.ClearRegionRefRef()
	return rmu
}

// RemoveRegionRefRefIDs removes the "region_ref_ref" edge to Facility entities by IDs.
func (rmu *RegionMasterUpdate) RemoveRegionRefRefIDs(ids ...int32) *RegionMasterUpdate {
	rmu.mutation.RemoveRegionRefRefIDs(ids...)
	return rmu
}

// RemoveRegionRefRef removes "region_ref_ref" edges to Facility entities.
func (rmu *RegionMasterUpdate) RemoveRegionRefRef(f ...*Facility) *RegionMasterUpdate {
	ids := make([]int32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return rmu.RemoveRegionRefRefIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rmu *RegionMasterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rmu.sqlSave, rmu.mutation, rmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rmu *RegionMasterUpdate) SaveX(ctx context.Context) int {
	affected, err := rmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rmu *RegionMasterUpdate) Exec(ctx context.Context) error {
	_, err := rmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmu *RegionMasterUpdate) ExecX(ctx context.Context) {
	if err := rmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rmu *RegionMasterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(regionmaster.Table, regionmaster.Columns, sqlgraph.NewFieldSpec(regionmaster.FieldID, field.TypeInt32))
	if ps := rmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rmu.mutation.RegionCode(); ok {
		_spec.SetField(regionmaster.FieldRegionCode, field.TypeInt32, value)
	}
	if value, ok := rmu.mutation.AddedRegionCode(); ok {
		_spec.AddField(regionmaster.FieldRegionCode, field.TypeInt32, value)
	}
	if value, ok := rmu.mutation.RegionOfficeId(); ok {
		_spec.SetField(regionmaster.FieldRegionOfficeId, field.TypeString, value)
	}
	if value, ok := rmu.mutation.OfficeType(); ok {
		_spec.SetField(regionmaster.FieldOfficeType, field.TypeString, value)
	}
	if value, ok := rmu.mutation.RegionOfficeName(); ok {
		_spec.SetField(regionmaster.FieldRegionOfficeName, field.TypeString, value)
	}
	if value, ok := rmu.mutation.ReportingOfficeType(); ok {
		_spec.SetField(regionmaster.FieldReportingOfficeType, field.TypeString, value)
	}
	if rmu.mutation.ReportingOfficeTypeCleared() {
		_spec.ClearField(regionmaster.FieldReportingOfficeType, field.TypeString)
	}
	if value, ok := rmu.mutation.ReportingOfficeCode(); ok {
		_spec.SetField(regionmaster.FieldReportingOfficeCode, field.TypeString, value)
	}
	if rmu.mutation.ReportingOfficeCodeCleared() {
		_spec.ClearField(regionmaster.FieldReportingOfficeCode, field.TypeString)
	}
	if value, ok := rmu.mutation.EmailID(); ok {
		_spec.SetField(regionmaster.FieldEmailID, field.TypeString, value)
	}
	if rmu.mutation.EmailIDCleared() {
		_spec.ClearField(regionmaster.FieldEmailID, field.TypeString)
	}
	if value, ok := rmu.mutation.MobileNumber(); ok {
		_spec.SetField(regionmaster.FieldMobileNumber, field.TypeInt32, value)
	}
	if value, ok := rmu.mutation.AddedMobileNumber(); ok {
		_spec.AddField(regionmaster.FieldMobileNumber, field.TypeInt32, value)
	}
	if rmu.mutation.MobileNumberCleared() {
		_spec.ClearField(regionmaster.FieldMobileNumber, field.TypeInt32)
	}
	if value, ok := rmu.mutation.CircleCode(); ok {
		_spec.SetField(regionmaster.FieldCircleCode, field.TypeInt32, value)
	}
	if value, ok := rmu.mutation.AddedCircleCode(); ok {
		_spec.AddField(regionmaster.FieldCircleCode, field.TypeInt32, value)
	}
	if rmu.mutation.CircleCodeCleared() {
		_spec.ClearField(regionmaster.FieldCircleCode, field.TypeInt32)
	}
	if rmu.mutation.CircleRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   regionmaster.CircleRefTable,
			Columns: []string{regionmaster.CircleRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlemaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmu.mutation.RemovedCircleRefIDs(); len(nodes) > 0 && !rmu.mutation.CircleRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   regionmaster.CircleRefTable,
			Columns: []string{regionmaster.CircleRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmu.mutation.CircleRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   regionmaster.CircleRefTable,
			Columns: []string{regionmaster.CircleRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rmu.mutation.RegionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   regionmaster.RegionsTable,
			Columns: []string{regionmaster.RegionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(divisionmaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmu.mutation.RemovedRegionsIDs(); len(nodes) > 0 && !rmu.mutation.RegionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   regionmaster.RegionsTable,
			Columns: []string{regionmaster.RegionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(divisionmaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmu.mutation.RegionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   regionmaster.RegionsTable,
			Columns: []string{regionmaster.RegionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(divisionmaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rmu.mutation.RegionRefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   regionmaster.RegionRefRefTable,
			Columns: []string{regionmaster.RegionRefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmu.mutation.RemovedRegionRefRefIDs(); len(nodes) > 0 && !rmu.mutation.RegionRefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   regionmaster.RegionRefRefTable,
			Columns: []string{regionmaster.RegionRefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmu.mutation.RegionRefRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   regionmaster.RegionRefRefTable,
			Columns: []string{regionmaster.RegionRefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{regionmaster.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rmu.mutation.done = true
	return n, nil
}

// RegionMasterUpdateOne is the builder for updating a single RegionMaster entity.
type RegionMasterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RegionMasterMutation
}

// SetRegionCode sets the "RegionCode" field.
func (rmuo *RegionMasterUpdateOne) SetRegionCode(i int32) *RegionMasterUpdateOne {
	rmuo.mutation.ResetRegionCode()
	rmuo.mutation.SetRegionCode(i)
	return rmuo
}

// AddRegionCode adds i to the "RegionCode" field.
func (rmuo *RegionMasterUpdateOne) AddRegionCode(i int32) *RegionMasterUpdateOne {
	rmuo.mutation.AddRegionCode(i)
	return rmuo
}

// SetRegionOfficeId sets the "RegionOfficeId" field.
func (rmuo *RegionMasterUpdateOne) SetRegionOfficeId(s string) *RegionMasterUpdateOne {
	rmuo.mutation.SetRegionOfficeId(s)
	return rmuo
}

// SetOfficeType sets the "OfficeType" field.
func (rmuo *RegionMasterUpdateOne) SetOfficeType(s string) *RegionMasterUpdateOne {
	rmuo.mutation.SetOfficeType(s)
	return rmuo
}

// SetRegionOfficeName sets the "RegionOfficeName" field.
func (rmuo *RegionMasterUpdateOne) SetRegionOfficeName(s string) *RegionMasterUpdateOne {
	rmuo.mutation.SetRegionOfficeName(s)
	return rmuo
}

// SetReportingOfficeType sets the "ReportingOfficeType" field.
func (rmuo *RegionMasterUpdateOne) SetReportingOfficeType(s string) *RegionMasterUpdateOne {
	rmuo.mutation.SetReportingOfficeType(s)
	return rmuo
}

// SetNillableReportingOfficeType sets the "ReportingOfficeType" field if the given value is not nil.
func (rmuo *RegionMasterUpdateOne) SetNillableReportingOfficeType(s *string) *RegionMasterUpdateOne {
	if s != nil {
		rmuo.SetReportingOfficeType(*s)
	}
	return rmuo
}

// ClearReportingOfficeType clears the value of the "ReportingOfficeType" field.
func (rmuo *RegionMasterUpdateOne) ClearReportingOfficeType() *RegionMasterUpdateOne {
	rmuo.mutation.ClearReportingOfficeType()
	return rmuo
}

// SetReportingOfficeCode sets the "ReportingOfficeCode" field.
func (rmuo *RegionMasterUpdateOne) SetReportingOfficeCode(s string) *RegionMasterUpdateOne {
	rmuo.mutation.SetReportingOfficeCode(s)
	return rmuo
}

// SetNillableReportingOfficeCode sets the "ReportingOfficeCode" field if the given value is not nil.
func (rmuo *RegionMasterUpdateOne) SetNillableReportingOfficeCode(s *string) *RegionMasterUpdateOne {
	if s != nil {
		rmuo.SetReportingOfficeCode(*s)
	}
	return rmuo
}

// ClearReportingOfficeCode clears the value of the "ReportingOfficeCode" field.
func (rmuo *RegionMasterUpdateOne) ClearReportingOfficeCode() *RegionMasterUpdateOne {
	rmuo.mutation.ClearReportingOfficeCode()
	return rmuo
}

// SetEmailID sets the "EmailID" field.
func (rmuo *RegionMasterUpdateOne) SetEmailID(s string) *RegionMasterUpdateOne {
	rmuo.mutation.SetEmailID(s)
	return rmuo
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (rmuo *RegionMasterUpdateOne) SetNillableEmailID(s *string) *RegionMasterUpdateOne {
	if s != nil {
		rmuo.SetEmailID(*s)
	}
	return rmuo
}

// ClearEmailID clears the value of the "EmailID" field.
func (rmuo *RegionMasterUpdateOne) ClearEmailID() *RegionMasterUpdateOne {
	rmuo.mutation.ClearEmailID()
	return rmuo
}

// SetMobileNumber sets the "MobileNumber" field.
func (rmuo *RegionMasterUpdateOne) SetMobileNumber(i int32) *RegionMasterUpdateOne {
	rmuo.mutation.ResetMobileNumber()
	rmuo.mutation.SetMobileNumber(i)
	return rmuo
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (rmuo *RegionMasterUpdateOne) SetNillableMobileNumber(i *int32) *RegionMasterUpdateOne {
	if i != nil {
		rmuo.SetMobileNumber(*i)
	}
	return rmuo
}

// AddMobileNumber adds i to the "MobileNumber" field.
func (rmuo *RegionMasterUpdateOne) AddMobileNumber(i int32) *RegionMasterUpdateOne {
	rmuo.mutation.AddMobileNumber(i)
	return rmuo
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (rmuo *RegionMasterUpdateOne) ClearMobileNumber() *RegionMasterUpdateOne {
	rmuo.mutation.ClearMobileNumber()
	return rmuo
}

// SetCircleCode sets the "CircleCode" field.
func (rmuo *RegionMasterUpdateOne) SetCircleCode(i int32) *RegionMasterUpdateOne {
	rmuo.mutation.ResetCircleCode()
	rmuo.mutation.SetCircleCode(i)
	return rmuo
}

// SetNillableCircleCode sets the "CircleCode" field if the given value is not nil.
func (rmuo *RegionMasterUpdateOne) SetNillableCircleCode(i *int32) *RegionMasterUpdateOne {
	if i != nil {
		rmuo.SetCircleCode(*i)
	}
	return rmuo
}

// AddCircleCode adds i to the "CircleCode" field.
func (rmuo *RegionMasterUpdateOne) AddCircleCode(i int32) *RegionMasterUpdateOne {
	rmuo.mutation.AddCircleCode(i)
	return rmuo
}

// ClearCircleCode clears the value of the "CircleCode" field.
func (rmuo *RegionMasterUpdateOne) ClearCircleCode() *RegionMasterUpdateOne {
	rmuo.mutation.ClearCircleCode()
	return rmuo
}

// AddCircleRefIDs adds the "circle_ref" edge to the CircleMaster entity by IDs.
func (rmuo *RegionMasterUpdateOne) AddCircleRefIDs(ids ...int32) *RegionMasterUpdateOne {
	rmuo.mutation.AddCircleRefIDs(ids...)
	return rmuo
}

// AddCircleRef adds the "circle_ref" edges to the CircleMaster entity.
func (rmuo *RegionMasterUpdateOne) AddCircleRef(c ...*CircleMaster) *RegionMasterUpdateOne {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rmuo.AddCircleRefIDs(ids...)
}

// AddRegionIDs adds the "regions" edge to the DivisionMaster entity by IDs.
func (rmuo *RegionMasterUpdateOne) AddRegionIDs(ids ...int32) *RegionMasterUpdateOne {
	rmuo.mutation.AddRegionIDs(ids...)
	return rmuo
}

// AddRegions adds the "regions" edges to the DivisionMaster entity.
func (rmuo *RegionMasterUpdateOne) AddRegions(d ...*DivisionMaster) *RegionMasterUpdateOne {
	ids := make([]int32, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return rmuo.AddRegionIDs(ids...)
}

// AddRegionRefRefIDs adds the "region_ref_ref" edge to the Facility entity by IDs.
func (rmuo *RegionMasterUpdateOne) AddRegionRefRefIDs(ids ...int32) *RegionMasterUpdateOne {
	rmuo.mutation.AddRegionRefRefIDs(ids...)
	return rmuo
}

// AddRegionRefRef adds the "region_ref_ref" edges to the Facility entity.
func (rmuo *RegionMasterUpdateOne) AddRegionRefRef(f ...*Facility) *RegionMasterUpdateOne {
	ids := make([]int32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return rmuo.AddRegionRefRefIDs(ids...)
}

// Mutation returns the RegionMasterMutation object of the builder.
func (rmuo *RegionMasterUpdateOne) Mutation() *RegionMasterMutation {
	return rmuo.mutation
}

// ClearCircleRef clears all "circle_ref" edges to the CircleMaster entity.
func (rmuo *RegionMasterUpdateOne) ClearCircleRef() *RegionMasterUpdateOne {
	rmuo.mutation.ClearCircleRef()
	return rmuo
}

// RemoveCircleRefIDs removes the "circle_ref" edge to CircleMaster entities by IDs.
func (rmuo *RegionMasterUpdateOne) RemoveCircleRefIDs(ids ...int32) *RegionMasterUpdateOne {
	rmuo.mutation.RemoveCircleRefIDs(ids...)
	return rmuo
}

// RemoveCircleRef removes "circle_ref" edges to CircleMaster entities.
func (rmuo *RegionMasterUpdateOne) RemoveCircleRef(c ...*CircleMaster) *RegionMasterUpdateOne {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rmuo.RemoveCircleRefIDs(ids...)
}

// ClearRegions clears all "regions" edges to the DivisionMaster entity.
func (rmuo *RegionMasterUpdateOne) ClearRegions() *RegionMasterUpdateOne {
	rmuo.mutation.ClearRegions()
	return rmuo
}

// RemoveRegionIDs removes the "regions" edge to DivisionMaster entities by IDs.
func (rmuo *RegionMasterUpdateOne) RemoveRegionIDs(ids ...int32) *RegionMasterUpdateOne {
	rmuo.mutation.RemoveRegionIDs(ids...)
	return rmuo
}

// RemoveRegions removes "regions" edges to DivisionMaster entities.
func (rmuo *RegionMasterUpdateOne) RemoveRegions(d ...*DivisionMaster) *RegionMasterUpdateOne {
	ids := make([]int32, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return rmuo.RemoveRegionIDs(ids...)
}

// ClearRegionRefRef clears all "region_ref_ref" edges to the Facility entity.
func (rmuo *RegionMasterUpdateOne) ClearRegionRefRef() *RegionMasterUpdateOne {
	rmuo.mutation.ClearRegionRefRef()
	return rmuo
}

// RemoveRegionRefRefIDs removes the "region_ref_ref" edge to Facility entities by IDs.
func (rmuo *RegionMasterUpdateOne) RemoveRegionRefRefIDs(ids ...int32) *RegionMasterUpdateOne {
	rmuo.mutation.RemoveRegionRefRefIDs(ids...)
	return rmuo
}

// RemoveRegionRefRef removes "region_ref_ref" edges to Facility entities.
func (rmuo *RegionMasterUpdateOne) RemoveRegionRefRef(f ...*Facility) *RegionMasterUpdateOne {
	ids := make([]int32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return rmuo.RemoveRegionRefRefIDs(ids...)
}

// Where appends a list predicates to the RegionMasterUpdate builder.
func (rmuo *RegionMasterUpdateOne) Where(ps ...predicate.RegionMaster) *RegionMasterUpdateOne {
	rmuo.mutation.Where(ps...)
	return rmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rmuo *RegionMasterUpdateOne) Select(field string, fields ...string) *RegionMasterUpdateOne {
	rmuo.fields = append([]string{field}, fields...)
	return rmuo
}

// Save executes the query and returns the updated RegionMaster entity.
func (rmuo *RegionMasterUpdateOne) Save(ctx context.Context) (*RegionMaster, error) {
	return withHooks(ctx, rmuo.sqlSave, rmuo.mutation, rmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rmuo *RegionMasterUpdateOne) SaveX(ctx context.Context) *RegionMaster {
	node, err := rmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rmuo *RegionMasterUpdateOne) Exec(ctx context.Context) error {
	_, err := rmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmuo *RegionMasterUpdateOne) ExecX(ctx context.Context) {
	if err := rmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rmuo *RegionMasterUpdateOne) sqlSave(ctx context.Context) (_node *RegionMaster, err error) {
	_spec := sqlgraph.NewUpdateSpec(regionmaster.Table, regionmaster.Columns, sqlgraph.NewFieldSpec(regionmaster.FieldID, field.TypeInt32))
	id, ok := rmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RegionMaster.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, regionmaster.FieldID)
		for _, f := range fields {
			if !regionmaster.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != regionmaster.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rmuo.mutation.RegionCode(); ok {
		_spec.SetField(regionmaster.FieldRegionCode, field.TypeInt32, value)
	}
	if value, ok := rmuo.mutation.AddedRegionCode(); ok {
		_spec.AddField(regionmaster.FieldRegionCode, field.TypeInt32, value)
	}
	if value, ok := rmuo.mutation.RegionOfficeId(); ok {
		_spec.SetField(regionmaster.FieldRegionOfficeId, field.TypeString, value)
	}
	if value, ok := rmuo.mutation.OfficeType(); ok {
		_spec.SetField(regionmaster.FieldOfficeType, field.TypeString, value)
	}
	if value, ok := rmuo.mutation.RegionOfficeName(); ok {
		_spec.SetField(regionmaster.FieldRegionOfficeName, field.TypeString, value)
	}
	if value, ok := rmuo.mutation.ReportingOfficeType(); ok {
		_spec.SetField(regionmaster.FieldReportingOfficeType, field.TypeString, value)
	}
	if rmuo.mutation.ReportingOfficeTypeCleared() {
		_spec.ClearField(regionmaster.FieldReportingOfficeType, field.TypeString)
	}
	if value, ok := rmuo.mutation.ReportingOfficeCode(); ok {
		_spec.SetField(regionmaster.FieldReportingOfficeCode, field.TypeString, value)
	}
	if rmuo.mutation.ReportingOfficeCodeCleared() {
		_spec.ClearField(regionmaster.FieldReportingOfficeCode, field.TypeString)
	}
	if value, ok := rmuo.mutation.EmailID(); ok {
		_spec.SetField(regionmaster.FieldEmailID, field.TypeString, value)
	}
	if rmuo.mutation.EmailIDCleared() {
		_spec.ClearField(regionmaster.FieldEmailID, field.TypeString)
	}
	if value, ok := rmuo.mutation.MobileNumber(); ok {
		_spec.SetField(regionmaster.FieldMobileNumber, field.TypeInt32, value)
	}
	if value, ok := rmuo.mutation.AddedMobileNumber(); ok {
		_spec.AddField(regionmaster.FieldMobileNumber, field.TypeInt32, value)
	}
	if rmuo.mutation.MobileNumberCleared() {
		_spec.ClearField(regionmaster.FieldMobileNumber, field.TypeInt32)
	}
	if value, ok := rmuo.mutation.CircleCode(); ok {
		_spec.SetField(regionmaster.FieldCircleCode, field.TypeInt32, value)
	}
	if value, ok := rmuo.mutation.AddedCircleCode(); ok {
		_spec.AddField(regionmaster.FieldCircleCode, field.TypeInt32, value)
	}
	if rmuo.mutation.CircleCodeCleared() {
		_spec.ClearField(regionmaster.FieldCircleCode, field.TypeInt32)
	}
	if rmuo.mutation.CircleRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   regionmaster.CircleRefTable,
			Columns: []string{regionmaster.CircleRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlemaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmuo.mutation.RemovedCircleRefIDs(); len(nodes) > 0 && !rmuo.mutation.CircleRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   regionmaster.CircleRefTable,
			Columns: []string{regionmaster.CircleRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmuo.mutation.CircleRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   regionmaster.CircleRefTable,
			Columns: []string{regionmaster.CircleRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rmuo.mutation.RegionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   regionmaster.RegionsTable,
			Columns: []string{regionmaster.RegionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(divisionmaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmuo.mutation.RemovedRegionsIDs(); len(nodes) > 0 && !rmuo.mutation.RegionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   regionmaster.RegionsTable,
			Columns: []string{regionmaster.RegionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(divisionmaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmuo.mutation.RegionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   regionmaster.RegionsTable,
			Columns: []string{regionmaster.RegionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(divisionmaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rmuo.mutation.RegionRefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   regionmaster.RegionRefRefTable,
			Columns: []string{regionmaster.RegionRefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmuo.mutation.RemovedRegionRefRefIDs(); len(nodes) > 0 && !rmuo.mutation.RegionRefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   regionmaster.RegionRefRefTable,
			Columns: []string{regionmaster.RegionRefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmuo.mutation.RegionRefRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   regionmaster.RegionRefRefTable,
			Columns: []string{regionmaster.RegionRefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RegionMaster{config: rmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{regionmaster.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rmuo.mutation.done = true
	return _node, nil
}
