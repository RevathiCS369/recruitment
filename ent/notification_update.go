// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/application"
	"recruit/ent/center"
	"recruit/ent/exam"
	"recruit/ent/nodalofficer"
	"recruit/ent/notification"
	"recruit/ent/predicate"
	"recruit/ent/vacancyyear"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NotificationUpdate is the builder for updating Notification entities.
type NotificationUpdate struct {
	config
	hooks    []Hook
	mutation *NotificationMutation
}

// Where appends a list predicates to the NotificationUpdate builder.
func (nu *NotificationUpdate) Where(ps ...predicate.Notification) *NotificationUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetExamCode sets the "ExamCode" field.
func (nu *NotificationUpdate) SetExamCode(i int32) *NotificationUpdate {
	nu.mutation.SetExamCode(i)
	return nu
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableExamCode(i *int32) *NotificationUpdate {
	if i != nil {
		nu.SetExamCode(*i)
	}
	return nu
}

// ClearExamCode clears the value of the "ExamCode" field.
func (nu *NotificationUpdate) ClearExamCode() *NotificationUpdate {
	nu.mutation.ClearExamCode()
	return nu
}

// SetExamYear sets the "ExamYear" field.
func (nu *NotificationUpdate) SetExamYear(i int32) *NotificationUpdate {
	nu.mutation.ResetExamYear()
	nu.mutation.SetExamYear(i)
	return nu
}

// AddExamYear adds i to the "ExamYear" field.
func (nu *NotificationUpdate) AddExamYear(i int32) *NotificationUpdate {
	nu.mutation.AddExamYear(i)
	return nu
}

// SetApplicationStartDate sets the "ApplicationStartDate" field.
func (nu *NotificationUpdate) SetApplicationStartDate(t time.Time) *NotificationUpdate {
	nu.mutation.SetApplicationStartDate(t)
	return nu
}

// SetApplicationEndDate sets the "ApplicationEndDate" field.
func (nu *NotificationUpdate) SetApplicationEndDate(t time.Time) *NotificationUpdate {
	nu.mutation.SetApplicationEndDate(t)
	return nu
}

// SetVerificationDateByController sets the "VerificationDateByController" field.
func (nu *NotificationUpdate) SetVerificationDateByController(t time.Time) *NotificationUpdate {
	nu.mutation.SetVerificationDateByController(t)
	return nu
}

// SetCorrectionDateByCandidate sets the "CorrectionDateByCandidate" field.
func (nu *NotificationUpdate) SetCorrectionDateByCandidate(t time.Time) *NotificationUpdate {
	nu.mutation.SetCorrectionDateByCandidate(t)
	return nu
}

// SetCorrectionVeriyDateByController sets the "CorrectionVeriyDateByController" field.
func (nu *NotificationUpdate) SetCorrectionVeriyDateByController(t time.Time) *NotificationUpdate {
	nu.mutation.SetCorrectionVeriyDateByController(t)
	return nu
}

// SetHallTicketAllotmentDateByNodalOfficer sets the "HallTicketAllotmentDateByNodalOfficer" field.
func (nu *NotificationUpdate) SetHallTicketAllotmentDateByNodalOfficer(t time.Time) *NotificationUpdate {
	nu.mutation.SetHallTicketAllotmentDateByNodalOfficer(t)
	return nu
}

// SetHallTicketDownloadDate sets the "HallTicketDownloadDate" field.
func (nu *NotificationUpdate) SetHallTicketDownloadDate(t time.Time) *NotificationUpdate {
	nu.mutation.SetHallTicketDownloadDate(t)
	return nu
}

// SetNillableHallTicketDownloadDate sets the "HallTicketDownloadDate" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableHallTicketDownloadDate(t *time.Time) *NotificationUpdate {
	if t != nil {
		nu.SetHallTicketDownloadDate(*t)
	}
	return nu
}

// ClearHallTicketDownloadDate clears the value of the "HallTicketDownloadDate" field.
func (nu *NotificationUpdate) ClearHallTicketDownloadDate() *NotificationUpdate {
	nu.mutation.ClearHallTicketDownloadDate()
	return nu
}

// SetNotifyFile sets the "NotifyFile" field.
func (nu *NotificationUpdate) SetNotifyFile(s string) *NotificationUpdate {
	nu.mutation.SetNotifyFile(s)
	return nu
}

// SetNillableNotifyFile sets the "NotifyFile" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableNotifyFile(s *string) *NotificationUpdate {
	if s != nil {
		nu.SetNotifyFile(*s)
	}
	return nu
}

// ClearNotifyFile clears the value of the "NotifyFile" field.
func (nu *NotificationUpdate) ClearNotifyFile() *NotificationUpdate {
	nu.mutation.ClearNotifyFile()
	return nu
}

// SetSyllabusFile sets the "SyllabusFile" field.
func (nu *NotificationUpdate) SetSyllabusFile(s string) *NotificationUpdate {
	nu.mutation.SetSyllabusFile(s)
	return nu
}

// SetNillableSyllabusFile sets the "SyllabusFile" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableSyllabusFile(s *string) *NotificationUpdate {
	if s != nil {
		nu.SetSyllabusFile(*s)
	}
	return nu
}

// ClearSyllabusFile clears the value of the "SyllabusFile" field.
func (nu *NotificationUpdate) ClearSyllabusFile() *NotificationUpdate {
	nu.mutation.ClearSyllabusFile()
	return nu
}

// SetVacanciesFile sets the "VacanciesFile" field.
func (nu *NotificationUpdate) SetVacanciesFile(s string) *NotificationUpdate {
	nu.mutation.SetVacanciesFile(s)
	return nu
}

// SetNillableVacanciesFile sets the "VacanciesFile" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableVacanciesFile(s *string) *NotificationUpdate {
	if s != nil {
		nu.SetVacanciesFile(*s)
	}
	return nu
}

// ClearVacanciesFile clears the value of the "VacanciesFile" field.
func (nu *NotificationUpdate) ClearVacanciesFile() *NotificationUpdate {
	nu.mutation.ClearVacanciesFile()
	return nu
}

// AddApplicationIDs adds the "applications" edge to the Application entity by IDs.
func (nu *NotificationUpdate) AddApplicationIDs(ids ...int32) *NotificationUpdate {
	nu.mutation.AddApplicationIDs(ids...)
	return nu
}

// AddApplications adds the "applications" edges to the Application entity.
func (nu *NotificationUpdate) AddApplications(a ...*Application) *NotificationUpdate {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nu.AddApplicationIDs(ids...)
}

// AddCenterIDs adds the "centers" edge to the Center entity by IDs.
func (nu *NotificationUpdate) AddCenterIDs(ids ...int32) *NotificationUpdate {
	nu.mutation.AddCenterIDs(ids...)
	return nu
}

// AddCenters adds the "centers" edges to the Center entity.
func (nu *NotificationUpdate) AddCenters(c ...*Center) *NotificationUpdate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nu.AddCenterIDs(ids...)
}

// AddNodalOfficerIDs adds the "nodal_officers" edge to the NodalOfficer entity by IDs.
func (nu *NotificationUpdate) AddNodalOfficerIDs(ids ...int32) *NotificationUpdate {
	nu.mutation.AddNodalOfficerIDs(ids...)
	return nu
}

// AddNodalOfficers adds the "nodal_officers" edges to the NodalOfficer entity.
func (nu *NotificationUpdate) AddNodalOfficers(n ...*NodalOfficer) *NotificationUpdate {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.AddNodalOfficerIDs(ids...)
}

// SetExamID sets the "exam" edge to the Exam entity by ID.
func (nu *NotificationUpdate) SetExamID(id int32) *NotificationUpdate {
	nu.mutation.SetExamID(id)
	return nu
}

// SetNillableExamID sets the "exam" edge to the Exam entity by ID if the given value is not nil.
func (nu *NotificationUpdate) SetNillableExamID(id *int32) *NotificationUpdate {
	if id != nil {
		nu = nu.SetExamID(*id)
	}
	return nu
}

// SetExam sets the "exam" edge to the Exam entity.
func (nu *NotificationUpdate) SetExam(e *Exam) *NotificationUpdate {
	return nu.SetExamID(e.ID)
}

// AddVacancyYearIDs adds the "vacancy_years" edge to the VacancyYear entity by IDs.
func (nu *NotificationUpdate) AddVacancyYearIDs(ids ...int32) *NotificationUpdate {
	nu.mutation.AddVacancyYearIDs(ids...)
	return nu
}

// AddVacancyYears adds the "vacancy_years" edges to the VacancyYear entity.
func (nu *NotificationUpdate) AddVacancyYears(v ...*VacancyYear) *NotificationUpdate {
	ids := make([]int32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return nu.AddVacancyYearIDs(ids...)
}

// AddNotifyRefIDs adds the "notify_ref" edge to the Notification entity by IDs.
func (nu *NotificationUpdate) AddNotifyRefIDs(ids ...int32) *NotificationUpdate {
	nu.mutation.AddNotifyRefIDs(ids...)
	return nu
}

// AddNotifyRef adds the "notify_ref" edges to the Notification entity.
func (nu *NotificationUpdate) AddNotifyRef(n ...*Notification) *NotificationUpdate {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.AddNotifyRefIDs(ids...)
}

// Mutation returns the NotificationMutation object of the builder.
func (nu *NotificationUpdate) Mutation() *NotificationMutation {
	return nu.mutation
}

// ClearApplications clears all "applications" edges to the Application entity.
func (nu *NotificationUpdate) ClearApplications() *NotificationUpdate {
	nu.mutation.ClearApplications()
	return nu
}

// RemoveApplicationIDs removes the "applications" edge to Application entities by IDs.
func (nu *NotificationUpdate) RemoveApplicationIDs(ids ...int32) *NotificationUpdate {
	nu.mutation.RemoveApplicationIDs(ids...)
	return nu
}

// RemoveApplications removes "applications" edges to Application entities.
func (nu *NotificationUpdate) RemoveApplications(a ...*Application) *NotificationUpdate {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nu.RemoveApplicationIDs(ids...)
}

// ClearCenters clears all "centers" edges to the Center entity.
func (nu *NotificationUpdate) ClearCenters() *NotificationUpdate {
	nu.mutation.ClearCenters()
	return nu
}

// RemoveCenterIDs removes the "centers" edge to Center entities by IDs.
func (nu *NotificationUpdate) RemoveCenterIDs(ids ...int32) *NotificationUpdate {
	nu.mutation.RemoveCenterIDs(ids...)
	return nu
}

// RemoveCenters removes "centers" edges to Center entities.
func (nu *NotificationUpdate) RemoveCenters(c ...*Center) *NotificationUpdate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nu.RemoveCenterIDs(ids...)
}

// ClearNodalOfficers clears all "nodal_officers" edges to the NodalOfficer entity.
func (nu *NotificationUpdate) ClearNodalOfficers() *NotificationUpdate {
	nu.mutation.ClearNodalOfficers()
	return nu
}

// RemoveNodalOfficerIDs removes the "nodal_officers" edge to NodalOfficer entities by IDs.
func (nu *NotificationUpdate) RemoveNodalOfficerIDs(ids ...int32) *NotificationUpdate {
	nu.mutation.RemoveNodalOfficerIDs(ids...)
	return nu
}

// RemoveNodalOfficers removes "nodal_officers" edges to NodalOfficer entities.
func (nu *NotificationUpdate) RemoveNodalOfficers(n ...*NodalOfficer) *NotificationUpdate {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.RemoveNodalOfficerIDs(ids...)
}

// ClearExam clears the "exam" edge to the Exam entity.
func (nu *NotificationUpdate) ClearExam() *NotificationUpdate {
	nu.mutation.ClearExam()
	return nu
}

// ClearVacancyYears clears all "vacancy_years" edges to the VacancyYear entity.
func (nu *NotificationUpdate) ClearVacancyYears() *NotificationUpdate {
	nu.mutation.ClearVacancyYears()
	return nu
}

// RemoveVacancyYearIDs removes the "vacancy_years" edge to VacancyYear entities by IDs.
func (nu *NotificationUpdate) RemoveVacancyYearIDs(ids ...int32) *NotificationUpdate {
	nu.mutation.RemoveVacancyYearIDs(ids...)
	return nu
}

// RemoveVacancyYears removes "vacancy_years" edges to VacancyYear entities.
func (nu *NotificationUpdate) RemoveVacancyYears(v ...*VacancyYear) *NotificationUpdate {
	ids := make([]int32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return nu.RemoveVacancyYearIDs(ids...)
}

// ClearNotifyRef clears all "notify_ref" edges to the Notification entity.
func (nu *NotificationUpdate) ClearNotifyRef() *NotificationUpdate {
	nu.mutation.ClearNotifyRef()
	return nu
}

// RemoveNotifyRefIDs removes the "notify_ref" edge to Notification entities by IDs.
func (nu *NotificationUpdate) RemoveNotifyRefIDs(ids ...int32) *NotificationUpdate {
	nu.mutation.RemoveNotifyRefIDs(ids...)
	return nu
}

// RemoveNotifyRef removes "notify_ref" edges to Notification entities.
func (nu *NotificationUpdate) RemoveNotifyRef(n ...*Notification) *NotificationUpdate {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.RemoveNotifyRefIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NotificationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NotificationUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NotificationUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NotificationUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nu *NotificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(notification.Table, notification.Columns, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.ExamYear(); ok {
		_spec.SetField(notification.FieldExamYear, field.TypeInt32, value)
	}
	if value, ok := nu.mutation.AddedExamYear(); ok {
		_spec.AddField(notification.FieldExamYear, field.TypeInt32, value)
	}
	if value, ok := nu.mutation.ApplicationStartDate(); ok {
		_spec.SetField(notification.FieldApplicationStartDate, field.TypeTime, value)
	}
	if value, ok := nu.mutation.ApplicationEndDate(); ok {
		_spec.SetField(notification.FieldApplicationEndDate, field.TypeTime, value)
	}
	if value, ok := nu.mutation.VerificationDateByController(); ok {
		_spec.SetField(notification.FieldVerificationDateByController, field.TypeTime, value)
	}
	if value, ok := nu.mutation.CorrectionDateByCandidate(); ok {
		_spec.SetField(notification.FieldCorrectionDateByCandidate, field.TypeTime, value)
	}
	if value, ok := nu.mutation.CorrectionVeriyDateByController(); ok {
		_spec.SetField(notification.FieldCorrectionVeriyDateByController, field.TypeTime, value)
	}
	if value, ok := nu.mutation.HallTicketAllotmentDateByNodalOfficer(); ok {
		_spec.SetField(notification.FieldHallTicketAllotmentDateByNodalOfficer, field.TypeTime, value)
	}
	if value, ok := nu.mutation.HallTicketDownloadDate(); ok {
		_spec.SetField(notification.FieldHallTicketDownloadDate, field.TypeTime, value)
	}
	if nu.mutation.HallTicketDownloadDateCleared() {
		_spec.ClearField(notification.FieldHallTicketDownloadDate, field.TypeTime)
	}
	if value, ok := nu.mutation.NotifyFile(); ok {
		_spec.SetField(notification.FieldNotifyFile, field.TypeString, value)
	}
	if nu.mutation.NotifyFileCleared() {
		_spec.ClearField(notification.FieldNotifyFile, field.TypeString)
	}
	if value, ok := nu.mutation.SyllabusFile(); ok {
		_spec.SetField(notification.FieldSyllabusFile, field.TypeString, value)
	}
	if nu.mutation.SyllabusFileCleared() {
		_spec.ClearField(notification.FieldSyllabusFile, field.TypeString)
	}
	if value, ok := nu.mutation.VacanciesFile(); ok {
		_spec.SetField(notification.FieldVacanciesFile, field.TypeString, value)
	}
	if nu.mutation.VacanciesFileCleared() {
		_spec.ClearField(notification.FieldVacanciesFile, field.TypeString)
	}
	if nu.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.ApplicationsTable,
			Columns: []string{notification.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedApplicationsIDs(); len(nodes) > 0 && !nu.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.ApplicationsTable,
			Columns: []string{notification.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.ApplicationsTable,
			Columns: []string{notification.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.CentersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.CentersTable,
			Columns: []string{notification.CentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedCentersIDs(); len(nodes) > 0 && !nu.mutation.CentersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.CentersTable,
			Columns: []string{notification.CentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.CentersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.CentersTable,
			Columns: []string{notification.CentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.NodalOfficersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.NodalOfficersTable,
			Columns: []string{notification.NodalOfficersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodalofficer.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedNodalOfficersIDs(); len(nodes) > 0 && !nu.mutation.NodalOfficersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.NodalOfficersTable,
			Columns: []string{notification.NodalOfficersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodalofficer.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.NodalOfficersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.NodalOfficersTable,
			Columns: []string{notification.NodalOfficersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodalofficer.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.ExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.ExamTable,
			Columns: []string{notification.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.ExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.ExamTable,
			Columns: []string{notification.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.VacancyYearsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.VacancyYearsTable,
			Columns: []string{notification.VacancyYearsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vacancyyear.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedVacancyYearsIDs(); len(nodes) > 0 && !nu.mutation.VacancyYearsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.VacancyYearsTable,
			Columns: []string{notification.VacancyYearsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vacancyyear.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.VacancyYearsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.VacancyYearsTable,
			Columns: []string{notification.VacancyYearsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vacancyyear.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.NotifyRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notification.NotifyRefTable,
			Columns: notification.NotifyRefPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedNotifyRefIDs(); len(nodes) > 0 && !nu.mutation.NotifyRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notification.NotifyRefTable,
			Columns: notification.NotifyRefPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.NotifyRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notification.NotifyRefTable,
			Columns: notification.NotifyRefPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NotificationUpdateOne is the builder for updating a single Notification entity.
type NotificationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotificationMutation
}

// SetExamCode sets the "ExamCode" field.
func (nuo *NotificationUpdateOne) SetExamCode(i int32) *NotificationUpdateOne {
	nuo.mutation.SetExamCode(i)
	return nuo
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableExamCode(i *int32) *NotificationUpdateOne {
	if i != nil {
		nuo.SetExamCode(*i)
	}
	return nuo
}

// ClearExamCode clears the value of the "ExamCode" field.
func (nuo *NotificationUpdateOne) ClearExamCode() *NotificationUpdateOne {
	nuo.mutation.ClearExamCode()
	return nuo
}

// SetExamYear sets the "ExamYear" field.
func (nuo *NotificationUpdateOne) SetExamYear(i int32) *NotificationUpdateOne {
	nuo.mutation.ResetExamYear()
	nuo.mutation.SetExamYear(i)
	return nuo
}

// AddExamYear adds i to the "ExamYear" field.
func (nuo *NotificationUpdateOne) AddExamYear(i int32) *NotificationUpdateOne {
	nuo.mutation.AddExamYear(i)
	return nuo
}

// SetApplicationStartDate sets the "ApplicationStartDate" field.
func (nuo *NotificationUpdateOne) SetApplicationStartDate(t time.Time) *NotificationUpdateOne {
	nuo.mutation.SetApplicationStartDate(t)
	return nuo
}

// SetApplicationEndDate sets the "ApplicationEndDate" field.
func (nuo *NotificationUpdateOne) SetApplicationEndDate(t time.Time) *NotificationUpdateOne {
	nuo.mutation.SetApplicationEndDate(t)
	return nuo
}

// SetVerificationDateByController sets the "VerificationDateByController" field.
func (nuo *NotificationUpdateOne) SetVerificationDateByController(t time.Time) *NotificationUpdateOne {
	nuo.mutation.SetVerificationDateByController(t)
	return nuo
}

// SetCorrectionDateByCandidate sets the "CorrectionDateByCandidate" field.
func (nuo *NotificationUpdateOne) SetCorrectionDateByCandidate(t time.Time) *NotificationUpdateOne {
	nuo.mutation.SetCorrectionDateByCandidate(t)
	return nuo
}

// SetCorrectionVeriyDateByController sets the "CorrectionVeriyDateByController" field.
func (nuo *NotificationUpdateOne) SetCorrectionVeriyDateByController(t time.Time) *NotificationUpdateOne {
	nuo.mutation.SetCorrectionVeriyDateByController(t)
	return nuo
}

// SetHallTicketAllotmentDateByNodalOfficer sets the "HallTicketAllotmentDateByNodalOfficer" field.
func (nuo *NotificationUpdateOne) SetHallTicketAllotmentDateByNodalOfficer(t time.Time) *NotificationUpdateOne {
	nuo.mutation.SetHallTicketAllotmentDateByNodalOfficer(t)
	return nuo
}

// SetHallTicketDownloadDate sets the "HallTicketDownloadDate" field.
func (nuo *NotificationUpdateOne) SetHallTicketDownloadDate(t time.Time) *NotificationUpdateOne {
	nuo.mutation.SetHallTicketDownloadDate(t)
	return nuo
}

// SetNillableHallTicketDownloadDate sets the "HallTicketDownloadDate" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableHallTicketDownloadDate(t *time.Time) *NotificationUpdateOne {
	if t != nil {
		nuo.SetHallTicketDownloadDate(*t)
	}
	return nuo
}

// ClearHallTicketDownloadDate clears the value of the "HallTicketDownloadDate" field.
func (nuo *NotificationUpdateOne) ClearHallTicketDownloadDate() *NotificationUpdateOne {
	nuo.mutation.ClearHallTicketDownloadDate()
	return nuo
}

// SetNotifyFile sets the "NotifyFile" field.
func (nuo *NotificationUpdateOne) SetNotifyFile(s string) *NotificationUpdateOne {
	nuo.mutation.SetNotifyFile(s)
	return nuo
}

// SetNillableNotifyFile sets the "NotifyFile" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableNotifyFile(s *string) *NotificationUpdateOne {
	if s != nil {
		nuo.SetNotifyFile(*s)
	}
	return nuo
}

// ClearNotifyFile clears the value of the "NotifyFile" field.
func (nuo *NotificationUpdateOne) ClearNotifyFile() *NotificationUpdateOne {
	nuo.mutation.ClearNotifyFile()
	return nuo
}

// SetSyllabusFile sets the "SyllabusFile" field.
func (nuo *NotificationUpdateOne) SetSyllabusFile(s string) *NotificationUpdateOne {
	nuo.mutation.SetSyllabusFile(s)
	return nuo
}

// SetNillableSyllabusFile sets the "SyllabusFile" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableSyllabusFile(s *string) *NotificationUpdateOne {
	if s != nil {
		nuo.SetSyllabusFile(*s)
	}
	return nuo
}

// ClearSyllabusFile clears the value of the "SyllabusFile" field.
func (nuo *NotificationUpdateOne) ClearSyllabusFile() *NotificationUpdateOne {
	nuo.mutation.ClearSyllabusFile()
	return nuo
}

// SetVacanciesFile sets the "VacanciesFile" field.
func (nuo *NotificationUpdateOne) SetVacanciesFile(s string) *NotificationUpdateOne {
	nuo.mutation.SetVacanciesFile(s)
	return nuo
}

// SetNillableVacanciesFile sets the "VacanciesFile" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableVacanciesFile(s *string) *NotificationUpdateOne {
	if s != nil {
		nuo.SetVacanciesFile(*s)
	}
	return nuo
}

// ClearVacanciesFile clears the value of the "VacanciesFile" field.
func (nuo *NotificationUpdateOne) ClearVacanciesFile() *NotificationUpdateOne {
	nuo.mutation.ClearVacanciesFile()
	return nuo
}

// AddApplicationIDs adds the "applications" edge to the Application entity by IDs.
func (nuo *NotificationUpdateOne) AddApplicationIDs(ids ...int32) *NotificationUpdateOne {
	nuo.mutation.AddApplicationIDs(ids...)
	return nuo
}

// AddApplications adds the "applications" edges to the Application entity.
func (nuo *NotificationUpdateOne) AddApplications(a ...*Application) *NotificationUpdateOne {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nuo.AddApplicationIDs(ids...)
}

// AddCenterIDs adds the "centers" edge to the Center entity by IDs.
func (nuo *NotificationUpdateOne) AddCenterIDs(ids ...int32) *NotificationUpdateOne {
	nuo.mutation.AddCenterIDs(ids...)
	return nuo
}

// AddCenters adds the "centers" edges to the Center entity.
func (nuo *NotificationUpdateOne) AddCenters(c ...*Center) *NotificationUpdateOne {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nuo.AddCenterIDs(ids...)
}

// AddNodalOfficerIDs adds the "nodal_officers" edge to the NodalOfficer entity by IDs.
func (nuo *NotificationUpdateOne) AddNodalOfficerIDs(ids ...int32) *NotificationUpdateOne {
	nuo.mutation.AddNodalOfficerIDs(ids...)
	return nuo
}

// AddNodalOfficers adds the "nodal_officers" edges to the NodalOfficer entity.
func (nuo *NotificationUpdateOne) AddNodalOfficers(n ...*NodalOfficer) *NotificationUpdateOne {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.AddNodalOfficerIDs(ids...)
}

// SetExamID sets the "exam" edge to the Exam entity by ID.
func (nuo *NotificationUpdateOne) SetExamID(id int32) *NotificationUpdateOne {
	nuo.mutation.SetExamID(id)
	return nuo
}

// SetNillableExamID sets the "exam" edge to the Exam entity by ID if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableExamID(id *int32) *NotificationUpdateOne {
	if id != nil {
		nuo = nuo.SetExamID(*id)
	}
	return nuo
}

// SetExam sets the "exam" edge to the Exam entity.
func (nuo *NotificationUpdateOne) SetExam(e *Exam) *NotificationUpdateOne {
	return nuo.SetExamID(e.ID)
}

// AddVacancyYearIDs adds the "vacancy_years" edge to the VacancyYear entity by IDs.
func (nuo *NotificationUpdateOne) AddVacancyYearIDs(ids ...int32) *NotificationUpdateOne {
	nuo.mutation.AddVacancyYearIDs(ids...)
	return nuo
}

// AddVacancyYears adds the "vacancy_years" edges to the VacancyYear entity.
func (nuo *NotificationUpdateOne) AddVacancyYears(v ...*VacancyYear) *NotificationUpdateOne {
	ids := make([]int32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return nuo.AddVacancyYearIDs(ids...)
}

// AddNotifyRefIDs adds the "notify_ref" edge to the Notification entity by IDs.
func (nuo *NotificationUpdateOne) AddNotifyRefIDs(ids ...int32) *NotificationUpdateOne {
	nuo.mutation.AddNotifyRefIDs(ids...)
	return nuo
}

// AddNotifyRef adds the "notify_ref" edges to the Notification entity.
func (nuo *NotificationUpdateOne) AddNotifyRef(n ...*Notification) *NotificationUpdateOne {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.AddNotifyRefIDs(ids...)
}

// Mutation returns the NotificationMutation object of the builder.
func (nuo *NotificationUpdateOne) Mutation() *NotificationMutation {
	return nuo.mutation
}

// ClearApplications clears all "applications" edges to the Application entity.
func (nuo *NotificationUpdateOne) ClearApplications() *NotificationUpdateOne {
	nuo.mutation.ClearApplications()
	return nuo
}

// RemoveApplicationIDs removes the "applications" edge to Application entities by IDs.
func (nuo *NotificationUpdateOne) RemoveApplicationIDs(ids ...int32) *NotificationUpdateOne {
	nuo.mutation.RemoveApplicationIDs(ids...)
	return nuo
}

// RemoveApplications removes "applications" edges to Application entities.
func (nuo *NotificationUpdateOne) RemoveApplications(a ...*Application) *NotificationUpdateOne {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nuo.RemoveApplicationIDs(ids...)
}

// ClearCenters clears all "centers" edges to the Center entity.
func (nuo *NotificationUpdateOne) ClearCenters() *NotificationUpdateOne {
	nuo.mutation.ClearCenters()
	return nuo
}

// RemoveCenterIDs removes the "centers" edge to Center entities by IDs.
func (nuo *NotificationUpdateOne) RemoveCenterIDs(ids ...int32) *NotificationUpdateOne {
	nuo.mutation.RemoveCenterIDs(ids...)
	return nuo
}

// RemoveCenters removes "centers" edges to Center entities.
func (nuo *NotificationUpdateOne) RemoveCenters(c ...*Center) *NotificationUpdateOne {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nuo.RemoveCenterIDs(ids...)
}

// ClearNodalOfficers clears all "nodal_officers" edges to the NodalOfficer entity.
func (nuo *NotificationUpdateOne) ClearNodalOfficers() *NotificationUpdateOne {
	nuo.mutation.ClearNodalOfficers()
	return nuo
}

// RemoveNodalOfficerIDs removes the "nodal_officers" edge to NodalOfficer entities by IDs.
func (nuo *NotificationUpdateOne) RemoveNodalOfficerIDs(ids ...int32) *NotificationUpdateOne {
	nuo.mutation.RemoveNodalOfficerIDs(ids...)
	return nuo
}

// RemoveNodalOfficers removes "nodal_officers" edges to NodalOfficer entities.
func (nuo *NotificationUpdateOne) RemoveNodalOfficers(n ...*NodalOfficer) *NotificationUpdateOne {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.RemoveNodalOfficerIDs(ids...)
}

// ClearExam clears the "exam" edge to the Exam entity.
func (nuo *NotificationUpdateOne) ClearExam() *NotificationUpdateOne {
	nuo.mutation.ClearExam()
	return nuo
}

// ClearVacancyYears clears all "vacancy_years" edges to the VacancyYear entity.
func (nuo *NotificationUpdateOne) ClearVacancyYears() *NotificationUpdateOne {
	nuo.mutation.ClearVacancyYears()
	return nuo
}

// RemoveVacancyYearIDs removes the "vacancy_years" edge to VacancyYear entities by IDs.
func (nuo *NotificationUpdateOne) RemoveVacancyYearIDs(ids ...int32) *NotificationUpdateOne {
	nuo.mutation.RemoveVacancyYearIDs(ids...)
	return nuo
}

// RemoveVacancyYears removes "vacancy_years" edges to VacancyYear entities.
func (nuo *NotificationUpdateOne) RemoveVacancyYears(v ...*VacancyYear) *NotificationUpdateOne {
	ids := make([]int32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return nuo.RemoveVacancyYearIDs(ids...)
}

// ClearNotifyRef clears all "notify_ref" edges to the Notification entity.
func (nuo *NotificationUpdateOne) ClearNotifyRef() *NotificationUpdateOne {
	nuo.mutation.ClearNotifyRef()
	return nuo
}

// RemoveNotifyRefIDs removes the "notify_ref" edge to Notification entities by IDs.
func (nuo *NotificationUpdateOne) RemoveNotifyRefIDs(ids ...int32) *NotificationUpdateOne {
	nuo.mutation.RemoveNotifyRefIDs(ids...)
	return nuo
}

// RemoveNotifyRef removes "notify_ref" edges to Notification entities.
func (nuo *NotificationUpdateOne) RemoveNotifyRef(n ...*Notification) *NotificationUpdateOne {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.RemoveNotifyRefIDs(ids...)
}

// Where appends a list predicates to the NotificationUpdate builder.
func (nuo *NotificationUpdateOne) Where(ps ...predicate.Notification) *NotificationUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NotificationUpdateOne) Select(field string, fields ...string) *NotificationUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Notification entity.
func (nuo *NotificationUpdateOne) Save(ctx context.Context) (*Notification, error) {
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NotificationUpdateOne) SaveX(ctx context.Context) *Notification {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NotificationUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NotificationUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nuo *NotificationUpdateOne) sqlSave(ctx context.Context) (_node *Notification, err error) {
	_spec := sqlgraph.NewUpdateSpec(notification.Table, notification.Columns, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Notification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notification.FieldID)
		for _, f := range fields {
			if !notification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.ExamYear(); ok {
		_spec.SetField(notification.FieldExamYear, field.TypeInt32, value)
	}
	if value, ok := nuo.mutation.AddedExamYear(); ok {
		_spec.AddField(notification.FieldExamYear, field.TypeInt32, value)
	}
	if value, ok := nuo.mutation.ApplicationStartDate(); ok {
		_spec.SetField(notification.FieldApplicationStartDate, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.ApplicationEndDate(); ok {
		_spec.SetField(notification.FieldApplicationEndDate, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.VerificationDateByController(); ok {
		_spec.SetField(notification.FieldVerificationDateByController, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.CorrectionDateByCandidate(); ok {
		_spec.SetField(notification.FieldCorrectionDateByCandidate, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.CorrectionVeriyDateByController(); ok {
		_spec.SetField(notification.FieldCorrectionVeriyDateByController, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.HallTicketAllotmentDateByNodalOfficer(); ok {
		_spec.SetField(notification.FieldHallTicketAllotmentDateByNodalOfficer, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.HallTicketDownloadDate(); ok {
		_spec.SetField(notification.FieldHallTicketDownloadDate, field.TypeTime, value)
	}
	if nuo.mutation.HallTicketDownloadDateCleared() {
		_spec.ClearField(notification.FieldHallTicketDownloadDate, field.TypeTime)
	}
	if value, ok := nuo.mutation.NotifyFile(); ok {
		_spec.SetField(notification.FieldNotifyFile, field.TypeString, value)
	}
	if nuo.mutation.NotifyFileCleared() {
		_spec.ClearField(notification.FieldNotifyFile, field.TypeString)
	}
	if value, ok := nuo.mutation.SyllabusFile(); ok {
		_spec.SetField(notification.FieldSyllabusFile, field.TypeString, value)
	}
	if nuo.mutation.SyllabusFileCleared() {
		_spec.ClearField(notification.FieldSyllabusFile, field.TypeString)
	}
	if value, ok := nuo.mutation.VacanciesFile(); ok {
		_spec.SetField(notification.FieldVacanciesFile, field.TypeString, value)
	}
	if nuo.mutation.VacanciesFileCleared() {
		_spec.ClearField(notification.FieldVacanciesFile, field.TypeString)
	}
	if nuo.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.ApplicationsTable,
			Columns: []string{notification.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedApplicationsIDs(); len(nodes) > 0 && !nuo.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.ApplicationsTable,
			Columns: []string{notification.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.ApplicationsTable,
			Columns: []string{notification.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.CentersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.CentersTable,
			Columns: []string{notification.CentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedCentersIDs(); len(nodes) > 0 && !nuo.mutation.CentersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.CentersTable,
			Columns: []string{notification.CentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.CentersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.CentersTable,
			Columns: []string{notification.CentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.NodalOfficersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.NodalOfficersTable,
			Columns: []string{notification.NodalOfficersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodalofficer.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedNodalOfficersIDs(); len(nodes) > 0 && !nuo.mutation.NodalOfficersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.NodalOfficersTable,
			Columns: []string{notification.NodalOfficersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodalofficer.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.NodalOfficersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.NodalOfficersTable,
			Columns: []string{notification.NodalOfficersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodalofficer.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.ExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.ExamTable,
			Columns: []string{notification.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.ExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.ExamTable,
			Columns: []string{notification.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.VacancyYearsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.VacancyYearsTable,
			Columns: []string{notification.VacancyYearsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vacancyyear.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedVacancyYearsIDs(); len(nodes) > 0 && !nuo.mutation.VacancyYearsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.VacancyYearsTable,
			Columns: []string{notification.VacancyYearsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vacancyyear.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.VacancyYearsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notification.VacancyYearsTable,
			Columns: []string{notification.VacancyYearsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vacancyyear.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.NotifyRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notification.NotifyRefTable,
			Columns: notification.NotifyRefPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedNotifyRefIDs(); len(nodes) > 0 && !nuo.mutation.NotifyRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notification.NotifyRefTable,
			Columns: notification.NotifyRefPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.NotifyRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notification.NotifyRefTable,
			Columns: notification.NotifyRefPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Notification{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
