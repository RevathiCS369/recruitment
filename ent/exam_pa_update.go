// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/exam_applications_ps"
	"recruit/ent/exam_pa"
	"recruit/ent/examcalendar"
	"recruit/ent/exampapers"
	"recruit/ent/notification"
	"recruit/ent/predicate"
	"recruit/ent/usermaster"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamPAUpdate is the builder for updating Exam_PA entities.
type ExamPAUpdate struct {
	config
	hooks    []Hook
	mutation *ExamPAMutation
}

// Where appends a list predicates to the ExamPAUpdate builder.
func (epu *ExamPAUpdate) Where(ps ...predicate.Exam_PA) *ExamPAUpdate {
	epu.mutation.Where(ps...)
	return epu
}

// SetExamNameCode sets the "ExamNameCode" field.
func (epu *ExamPAUpdate) SetExamNameCode(s string) *ExamPAUpdate {
	epu.mutation.SetExamNameCode(s)
	return epu
}

// SetNillableExamNameCode sets the "ExamNameCode" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableExamNameCode(s *string) *ExamPAUpdate {
	if s != nil {
		epu.SetExamNameCode(*s)
	}
	return epu
}

// ClearExamNameCode clears the value of the "ExamNameCode" field.
func (epu *ExamPAUpdate) ClearExamNameCode() *ExamPAUpdate {
	epu.mutation.ClearExamNameCode()
	return epu
}

// SetExamName sets the "ExamName" field.
func (epu *ExamPAUpdate) SetExamName(s string) *ExamPAUpdate {
	epu.mutation.SetExamName(s)
	return epu
}

// SetExamType sets the "ExamType" field.
func (epu *ExamPAUpdate) SetExamType(s string) *ExamPAUpdate {
	epu.mutation.SetExamType(s)
	return epu
}

// SetNotificationCode sets the "NotificationCode" field.
func (epu *ExamPAUpdate) SetNotificationCode(i int32) *ExamPAUpdate {
	epu.mutation.ResetNotificationCode()
	epu.mutation.SetNotificationCode(i)
	return epu
}

// SetNillableNotificationCode sets the "NotificationCode" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableNotificationCode(i *int32) *ExamPAUpdate {
	if i != nil {
		epu.SetNotificationCode(*i)
	}
	return epu
}

// AddNotificationCode adds i to the "NotificationCode" field.
func (epu *ExamPAUpdate) AddNotificationCode(i int32) *ExamPAUpdate {
	epu.mutation.AddNotificationCode(i)
	return epu
}

// ClearNotificationCode clears the value of the "NotificationCode" field.
func (epu *ExamPAUpdate) ClearNotificationCode() *ExamPAUpdate {
	epu.mutation.ClearNotificationCode()
	return epu
}

// SetConductedBy sets the "ConductedBy" field.
func (epu *ExamPAUpdate) SetConductedBy(s string) *ExamPAUpdate {
	epu.mutation.SetConductedBy(s)
	return epu
}

// SetNodalOffice sets the "NodalOffice" field.
func (epu *ExamPAUpdate) SetNodalOffice(s string) *ExamPAUpdate {
	epu.mutation.SetNodalOffice(s)
	return epu
}

// SetNillableNodalOffice sets the "NodalOffice" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableNodalOffice(s *string) *ExamPAUpdate {
	if s != nil {
		epu.SetNodalOffice(*s)
	}
	return epu
}

// ClearNodalOffice clears the value of the "NodalOffice" field.
func (epu *ExamPAUpdate) ClearNodalOffice() *ExamPAUpdate {
	epu.mutation.ClearNodalOffice()
	return epu
}

// SetCalendarCode sets the "CalendarCode" field.
func (epu *ExamPAUpdate) SetCalendarCode(i int32) *ExamPAUpdate {
	epu.mutation.ResetCalendarCode()
	epu.mutation.SetCalendarCode(i)
	return epu
}

// SetNillableCalendarCode sets the "CalendarCode" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableCalendarCode(i *int32) *ExamPAUpdate {
	if i != nil {
		epu.SetCalendarCode(*i)
	}
	return epu
}

// AddCalendarCode adds i to the "CalendarCode" field.
func (epu *ExamPAUpdate) AddCalendarCode(i int32) *ExamPAUpdate {
	epu.mutation.AddCalendarCode(i)
	return epu
}

// ClearCalendarCode clears the value of the "CalendarCode" field.
func (epu *ExamPAUpdate) ClearCalendarCode() *ExamPAUpdate {
	epu.mutation.ClearCalendarCode()
	return epu
}

// SetPaperCode sets the "PaperCode" field.
func (epu *ExamPAUpdate) SetPaperCode(i int32) *ExamPAUpdate {
	epu.mutation.ResetPaperCode()
	epu.mutation.SetPaperCode(i)
	return epu
}

// SetNillablePaperCode sets the "PaperCode" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillablePaperCode(i *int32) *ExamPAUpdate {
	if i != nil {
		epu.SetPaperCode(*i)
	}
	return epu
}

// AddPaperCode adds i to the "PaperCode" field.
func (epu *ExamPAUpdate) AddPaperCode(i int32) *ExamPAUpdate {
	epu.mutation.AddPaperCode(i)
	return epu
}

// ClearPaperCode clears the value of the "PaperCode" field.
func (epu *ExamPAUpdate) ClearPaperCode() *ExamPAUpdate {
	epu.mutation.ClearPaperCode()
	return epu
}

// SetEligibleCadre sets the "EligibleCadre" field.
func (epu *ExamPAUpdate) SetEligibleCadre(s string) *ExamPAUpdate {
	epu.mutation.SetEligibleCadre(s)
	return epu
}

// SetNillableEligibleCadre sets the "EligibleCadre" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableEligibleCadre(s *string) *ExamPAUpdate {
	if s != nil {
		epu.SetEligibleCadre(*s)
	}
	return epu
}

// ClearEligibleCadre clears the value of the "EligibleCadre" field.
func (epu *ExamPAUpdate) ClearEligibleCadre() *ExamPAUpdate {
	epu.mutation.ClearEligibleCadre()
	return epu
}

// SetEligiblePost1 sets the "EligiblePost1" field.
func (epu *ExamPAUpdate) SetEligiblePost1(s string) *ExamPAUpdate {
	epu.mutation.SetEligiblePost1(s)
	return epu
}

// SetNillableEligiblePost1 sets the "EligiblePost1" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableEligiblePost1(s *string) *ExamPAUpdate {
	if s != nil {
		epu.SetEligiblePost1(*s)
	}
	return epu
}

// ClearEligiblePost1 clears the value of the "EligiblePost1" field.
func (epu *ExamPAUpdate) ClearEligiblePost1() *ExamPAUpdate {
	epu.mutation.ClearEligiblePost1()
	return epu
}

// SetEligiblePost2 sets the "EligiblePost2" field.
func (epu *ExamPAUpdate) SetEligiblePost2(s string) *ExamPAUpdate {
	epu.mutation.SetEligiblePost2(s)
	return epu
}

// SetNillableEligiblePost2 sets the "EligiblePost2" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableEligiblePost2(s *string) *ExamPAUpdate {
	if s != nil {
		epu.SetEligiblePost2(*s)
	}
	return epu
}

// ClearEligiblePost2 clears the value of the "EligiblePost2" field.
func (epu *ExamPAUpdate) ClearEligiblePost2() *ExamPAUpdate {
	epu.mutation.ClearEligiblePost2()
	return epu
}

// SetEligiblePost3 sets the "EligiblePost3" field.
func (epu *ExamPAUpdate) SetEligiblePost3(s string) *ExamPAUpdate {
	epu.mutation.SetEligiblePost3(s)
	return epu
}

// SetNillableEligiblePost3 sets the "EligiblePost3" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableEligiblePost3(s *string) *ExamPAUpdate {
	if s != nil {
		epu.SetEligiblePost3(*s)
	}
	return epu
}

// ClearEligiblePost3 clears the value of the "EligiblePost3" field.
func (epu *ExamPAUpdate) ClearEligiblePost3() *ExamPAUpdate {
	epu.mutation.ClearEligiblePost3()
	return epu
}

// SetEligiblePost4 sets the "EligiblePost4" field.
func (epu *ExamPAUpdate) SetEligiblePost4(s string) *ExamPAUpdate {
	epu.mutation.SetEligiblePost4(s)
	return epu
}

// SetNillableEligiblePost4 sets the "EligiblePost4" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableEligiblePost4(s *string) *ExamPAUpdate {
	if s != nil {
		epu.SetEligiblePost4(*s)
	}
	return epu
}

// ClearEligiblePost4 clears the value of the "EligiblePost4" field.
func (epu *ExamPAUpdate) ClearEligiblePost4() *ExamPAUpdate {
	epu.mutation.ClearEligiblePost4()
	return epu
}

// SetEligiblePost5 sets the "EligiblePost5" field.
func (epu *ExamPAUpdate) SetEligiblePost5(s string) *ExamPAUpdate {
	epu.mutation.SetEligiblePost5(s)
	return epu
}

// SetNillableEligiblePost5 sets the "EligiblePost5" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableEligiblePost5(s *string) *ExamPAUpdate {
	if s != nil {
		epu.SetEligiblePost5(*s)
	}
	return epu
}

// ClearEligiblePost5 clears the value of the "EligiblePost5" field.
func (epu *ExamPAUpdate) ClearEligiblePost5() *ExamPAUpdate {
	epu.mutation.ClearEligiblePost5()
	return epu
}

// SetExamPost1 sets the "ExamPost1" field.
func (epu *ExamPAUpdate) SetExamPost1(s string) *ExamPAUpdate {
	epu.mutation.SetExamPost1(s)
	return epu
}

// SetNillableExamPost1 sets the "ExamPost1" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableExamPost1(s *string) *ExamPAUpdate {
	if s != nil {
		epu.SetExamPost1(*s)
	}
	return epu
}

// ClearExamPost1 clears the value of the "ExamPost1" field.
func (epu *ExamPAUpdate) ClearExamPost1() *ExamPAUpdate {
	epu.mutation.ClearExamPost1()
	return epu
}

// SetExamPost2 sets the "ExamPost2" field.
func (epu *ExamPAUpdate) SetExamPost2(s string) *ExamPAUpdate {
	epu.mutation.SetExamPost2(s)
	return epu
}

// SetNillableExamPost2 sets the "ExamPost2" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableExamPost2(s *string) *ExamPAUpdate {
	if s != nil {
		epu.SetExamPost2(*s)
	}
	return epu
}

// ClearExamPost2 clears the value of the "ExamPost2" field.
func (epu *ExamPAUpdate) ClearExamPost2() *ExamPAUpdate {
	epu.mutation.ClearExamPost2()
	return epu
}

// SetExamPost3 sets the "ExamPost3" field.
func (epu *ExamPAUpdate) SetExamPost3(s string) *ExamPAUpdate {
	epu.mutation.SetExamPost3(s)
	return epu
}

// SetNillableExamPost3 sets the "ExamPost3" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableExamPost3(s *string) *ExamPAUpdate {
	if s != nil {
		epu.SetExamPost3(*s)
	}
	return epu
}

// ClearExamPost3 clears the value of the "ExamPost3" field.
func (epu *ExamPAUpdate) ClearExamPost3() *ExamPAUpdate {
	epu.mutation.ClearExamPost3()
	return epu
}

// SetExamPost4 sets the "ExamPost4" field.
func (epu *ExamPAUpdate) SetExamPost4(s string) *ExamPAUpdate {
	epu.mutation.SetExamPost4(s)
	return epu
}

// SetNillableExamPost4 sets the "ExamPost4" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableExamPost4(s *string) *ExamPAUpdate {
	if s != nil {
		epu.SetExamPost4(*s)
	}
	return epu
}

// ClearExamPost4 clears the value of the "ExamPost4" field.
func (epu *ExamPAUpdate) ClearExamPost4() *ExamPAUpdate {
	epu.mutation.ClearExamPost4()
	return epu
}

// SetExamPost5 sets the "ExamPost5" field.
func (epu *ExamPAUpdate) SetExamPost5(s string) *ExamPAUpdate {
	epu.mutation.SetExamPost5(s)
	return epu
}

// SetNillableExamPost5 sets the "ExamPost5" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableExamPost5(s *string) *ExamPAUpdate {
	if s != nil {
		epu.SetExamPost5(*s)
	}
	return epu
}

// ClearExamPost5 clears the value of the "ExamPost5" field.
func (epu *ExamPAUpdate) ClearExamPost5() *ExamPAUpdate {
	epu.mutation.ClearExamPost5()
	return epu
}

// SetEducationCriteria sets the "EducationCriteria" field.
func (epu *ExamPAUpdate) SetEducationCriteria(s string) *ExamPAUpdate {
	epu.mutation.SetEducationCriteria(s)
	return epu
}

// SetNillableEducationCriteria sets the "EducationCriteria" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableEducationCriteria(s *string) *ExamPAUpdate {
	if s != nil {
		epu.SetEducationCriteria(*s)
	}
	return epu
}

// ClearEducationCriteria clears the value of the "EducationCriteria" field.
func (epu *ExamPAUpdate) ClearEducationCriteria() *ExamPAUpdate {
	epu.mutation.ClearEducationCriteria()
	return epu
}

// SetCategoryAgeLimitGEN sets the "CategoryAgeLimitGEN" field.
func (epu *ExamPAUpdate) SetCategoryAgeLimitGEN(s string) *ExamPAUpdate {
	epu.mutation.SetCategoryAgeLimitGEN(s)
	return epu
}

// SetNillableCategoryAgeLimitGEN sets the "CategoryAgeLimitGEN" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableCategoryAgeLimitGEN(s *string) *ExamPAUpdate {
	if s != nil {
		epu.SetCategoryAgeLimitGEN(*s)
	}
	return epu
}

// ClearCategoryAgeLimitGEN clears the value of the "CategoryAgeLimitGEN" field.
func (epu *ExamPAUpdate) ClearCategoryAgeLimitGEN() *ExamPAUpdate {
	epu.mutation.ClearCategoryAgeLimitGEN()
	return epu
}

// SetCategoryAgeLimitSC sets the "CategoryAgeLimitSC" field.
func (epu *ExamPAUpdate) SetCategoryAgeLimitSC(s string) *ExamPAUpdate {
	epu.mutation.SetCategoryAgeLimitSC(s)
	return epu
}

// SetNillableCategoryAgeLimitSC sets the "CategoryAgeLimitSC" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableCategoryAgeLimitSC(s *string) *ExamPAUpdate {
	if s != nil {
		epu.SetCategoryAgeLimitSC(*s)
	}
	return epu
}

// ClearCategoryAgeLimitSC clears the value of the "CategoryAgeLimitSC" field.
func (epu *ExamPAUpdate) ClearCategoryAgeLimitSC() *ExamPAUpdate {
	epu.mutation.ClearCategoryAgeLimitSC()
	return epu
}

// SetCategoryAgeLimitST sets the "CategoryAgeLimitST" field.
func (epu *ExamPAUpdate) SetCategoryAgeLimitST(s string) *ExamPAUpdate {
	epu.mutation.SetCategoryAgeLimitST(s)
	return epu
}

// SetNillableCategoryAgeLimitST sets the "CategoryAgeLimitST" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableCategoryAgeLimitST(s *string) *ExamPAUpdate {
	if s != nil {
		epu.SetCategoryAgeLimitST(*s)
	}
	return epu
}

// ClearCategoryAgeLimitST clears the value of the "CategoryAgeLimitST" field.
func (epu *ExamPAUpdate) ClearCategoryAgeLimitST() *ExamPAUpdate {
	epu.mutation.ClearCategoryAgeLimitST()
	return epu
}

// SetServiceYears sets the "ServiceYears" field.
func (epu *ExamPAUpdate) SetServiceYears(s string) *ExamPAUpdate {
	epu.mutation.SetServiceYears(s)
	return epu
}

// SetNillableServiceYears sets the "ServiceYears" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableServiceYears(s *string) *ExamPAUpdate {
	if s != nil {
		epu.SetServiceYears(*s)
	}
	return epu
}

// ClearServiceYears clears the value of the "ServiceYears" field.
func (epu *ExamPAUpdate) ClearServiceYears() *ExamPAUpdate {
	epu.mutation.ClearServiceYears()
	return epu
}

// SetDrivingLicenseRequired sets the "DrivingLicenseRequired" field.
func (epu *ExamPAUpdate) SetDrivingLicenseRequired(s string) *ExamPAUpdate {
	epu.mutation.SetDrivingLicenseRequired(s)
	return epu
}

// SetNillableDrivingLicenseRequired sets the "DrivingLicenseRequired" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableDrivingLicenseRequired(s *string) *ExamPAUpdate {
	if s != nil {
		epu.SetDrivingLicenseRequired(*s)
	}
	return epu
}

// ClearDrivingLicenseRequired clears the value of the "DrivingLicenseRequired" field.
func (epu *ExamPAUpdate) ClearDrivingLicenseRequired() *ExamPAUpdate {
	epu.mutation.ClearDrivingLicenseRequired()
	return epu
}

// SetExamPaperCode sets the "ExamPaperCode" field.
func (epu *ExamPAUpdate) SetExamPaperCode(s string) *ExamPAUpdate {
	epu.mutation.SetExamPaperCode(s)
	return epu
}

// SetNillableExamPaperCode sets the "ExamPaperCode" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableExamPaperCode(s *string) *ExamPAUpdate {
	if s != nil {
		epu.SetExamPaperCode(*s)
	}
	return epu
}

// ClearExamPaperCode clears the value of the "ExamPaperCode" field.
func (epu *ExamPAUpdate) ClearExamPaperCode() *ExamPAUpdate {
	epu.mutation.ClearExamPaperCode()
	return epu
}

// SetExamPaper1 sets the "ExamPaper1" field.
func (epu *ExamPAUpdate) SetExamPaper1(s string) *ExamPAUpdate {
	epu.mutation.SetExamPaper1(s)
	return epu
}

// SetNillableExamPaper1 sets the "ExamPaper1" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableExamPaper1(s *string) *ExamPAUpdate {
	if s != nil {
		epu.SetExamPaper1(*s)
	}
	return epu
}

// ClearExamPaper1 clears the value of the "ExamPaper1" field.
func (epu *ExamPAUpdate) ClearExamPaper1() *ExamPAUpdate {
	epu.mutation.ClearExamPaper1()
	return epu
}

// SetExamPaper2 sets the "ExamPaper2" field.
func (epu *ExamPAUpdate) SetExamPaper2(s string) *ExamPAUpdate {
	epu.mutation.SetExamPaper2(s)
	return epu
}

// SetNillableExamPaper2 sets the "ExamPaper2" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableExamPaper2(s *string) *ExamPAUpdate {
	if s != nil {
		epu.SetExamPaper2(*s)
	}
	return epu
}

// ClearExamPaper2 clears the value of the "ExamPaper2" field.
func (epu *ExamPAUpdate) ClearExamPaper2() *ExamPAUpdate {
	epu.mutation.ClearExamPaper2()
	return epu
}

// SetExamPaper3 sets the "ExamPaper3" field.
func (epu *ExamPAUpdate) SetExamPaper3(s string) *ExamPAUpdate {
	epu.mutation.SetExamPaper3(s)
	return epu
}

// SetNillableExamPaper3 sets the "ExamPaper3" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableExamPaper3(s *string) *ExamPAUpdate {
	if s != nil {
		epu.SetExamPaper3(*s)
	}
	return epu
}

// ClearExamPaper3 clears the value of the "ExamPaper3" field.
func (epu *ExamPAUpdate) ClearExamPaper3() *ExamPAUpdate {
	epu.mutation.ClearExamPaper3()
	return epu
}

// SetExamPaper4 sets the "ExamPaper4" field.
func (epu *ExamPAUpdate) SetExamPaper4(s string) *ExamPAUpdate {
	epu.mutation.SetExamPaper4(s)
	return epu
}

// SetNillableExamPaper4 sets the "ExamPaper4" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableExamPaper4(s *string) *ExamPAUpdate {
	if s != nil {
		epu.SetExamPaper4(*s)
	}
	return epu
}

// ClearExamPaper4 clears the value of the "ExamPaper4" field.
func (epu *ExamPAUpdate) ClearExamPaper4() *ExamPAUpdate {
	epu.mutation.ClearExamPaper4()
	return epu
}

// SetExamPaper5 sets the "ExamPaper5" field.
func (epu *ExamPAUpdate) SetExamPaper5(s string) *ExamPAUpdate {
	epu.mutation.SetExamPaper5(s)
	return epu
}

// SetNillableExamPaper5 sets the "ExamPaper5" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableExamPaper5(s *string) *ExamPAUpdate {
	if s != nil {
		epu.SetExamPaper5(*s)
	}
	return epu
}

// ClearExamPaper5 clears the value of the "ExamPaper5" field.
func (epu *ExamPAUpdate) ClearExamPaper5() *ExamPAUpdate {
	epu.mutation.ClearExamPaper5()
	return epu
}

// SetExamPaper6 sets the "ExamPaper6" field.
func (epu *ExamPAUpdate) SetExamPaper6(s string) *ExamPAUpdate {
	epu.mutation.SetExamPaper6(s)
	return epu
}

// SetNillableExamPaper6 sets the "ExamPaper6" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableExamPaper6(s *string) *ExamPAUpdate {
	if s != nil {
		epu.SetExamPaper6(*s)
	}
	return epu
}

// ClearExamPaper6 clears the value of the "ExamPaper6" field.
func (epu *ExamPAUpdate) ClearExamPaper6() *ExamPAUpdate {
	epu.mutation.ClearExamPaper6()
	return epu
}

// SetPayLevelEligibilty sets the "PayLevelEligibilty" field.
func (epu *ExamPAUpdate) SetPayLevelEligibilty(b bool) *ExamPAUpdate {
	epu.mutation.SetPayLevelEligibilty(b)
	return epu
}

// SetNillablePayLevelEligibilty sets the "PayLevelEligibilty" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillablePayLevelEligibilty(b *bool) *ExamPAUpdate {
	if b != nil {
		epu.SetPayLevelEligibilty(*b)
	}
	return epu
}

// ClearPayLevelEligibilty clears the value of the "PayLevelEligibilty" field.
func (epu *ExamPAUpdate) ClearPayLevelEligibilty() *ExamPAUpdate {
	epu.mutation.ClearPayLevelEligibilty()
	return epu
}

// SetCategoryMinMarksSCSTPH sets the "CategoryMinMarksSCSTPH" field.
func (epu *ExamPAUpdate) SetCategoryMinMarksSCSTPH(s string) *ExamPAUpdate {
	epu.mutation.SetCategoryMinMarksSCSTPH(s)
	return epu
}

// SetNillableCategoryMinMarksSCSTPH sets the "CategoryMinMarksSCSTPH" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableCategoryMinMarksSCSTPH(s *string) *ExamPAUpdate {
	if s != nil {
		epu.SetCategoryMinMarksSCSTPH(*s)
	}
	return epu
}

// ClearCategoryMinMarksSCSTPH clears the value of the "CategoryMinMarksSCSTPH" field.
func (epu *ExamPAUpdate) ClearCategoryMinMarksSCSTPH() *ExamPAUpdate {
	epu.mutation.ClearCategoryMinMarksSCSTPH()
	return epu
}

// SetCategoryMinMarksGENOBC sets the "CategoryMinMarksGENOBC" field.
func (epu *ExamPAUpdate) SetCategoryMinMarksGENOBC(s string) *ExamPAUpdate {
	epu.mutation.SetCategoryMinMarksGENOBC(s)
	return epu
}

// SetNillableCategoryMinMarksGENOBC sets the "CategoryMinMarksGENOBC" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableCategoryMinMarksGENOBC(s *string) *ExamPAUpdate {
	if s != nil {
		epu.SetCategoryMinMarksGENOBC(*s)
	}
	return epu
}

// ClearCategoryMinMarksGENOBC clears the value of the "CategoryMinMarksGENOBC" field.
func (epu *ExamPAUpdate) ClearCategoryMinMarksGENOBC() *ExamPAUpdate {
	epu.mutation.ClearCategoryMinMarksGENOBC()
	return epu
}

// SetLocalLanguageAllowed sets the "LocalLanguageAllowed" field.
func (epu *ExamPAUpdate) SetLocalLanguageAllowed(b bool) *ExamPAUpdate {
	epu.mutation.SetLocalLanguageAllowed(b)
	return epu
}

// SetNillableLocalLanguageAllowed sets the "LocalLanguageAllowed" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableLocalLanguageAllowed(b *bool) *ExamPAUpdate {
	if b != nil {
		epu.SetLocalLanguageAllowed(*b)
	}
	return epu
}

// ClearLocalLanguageAllowed clears the value of the "LocalLanguageAllowed" field.
func (epu *ExamPAUpdate) ClearLocalLanguageAllowed() *ExamPAUpdate {
	epu.mutation.ClearLocalLanguageAllowed()
	return epu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (epu *ExamPAUpdate) SetUpdatedAt(t time.Time) *ExamPAUpdate {
	epu.mutation.SetUpdatedAt(t)
	return epu
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableUpdatedAt(t *time.Time) *ExamPAUpdate {
	if t != nil {
		epu.SetUpdatedAt(*t)
	}
	return epu
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (epu *ExamPAUpdate) ClearUpdatedAt() *ExamPAUpdate {
	epu.mutation.ClearUpdatedAt()
	return epu
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (epu *ExamPAUpdate) SetUpdatedBy(s string) *ExamPAUpdate {
	epu.mutation.SetUpdatedBy(s)
	return epu
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (epu *ExamPAUpdate) SetNillableUpdatedBy(s *string) *ExamPAUpdate {
	if s != nil {
		epu.SetUpdatedBy(*s)
	}
	return epu
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (epu *ExamPAUpdate) ClearUpdatedBy() *ExamPAUpdate {
	epu.mutation.ClearUpdatedBy()
	return epu
}

// AddExamcalPsRefIDs adds the "examcal_ps_ref" edge to the ExamCalendar entity by IDs.
func (epu *ExamPAUpdate) AddExamcalPsRefIDs(ids ...int32) *ExamPAUpdate {
	epu.mutation.AddExamcalPsRefIDs(ids...)
	return epu
}

// AddExamcalPsRef adds the "examcal_ps_ref" edges to the ExamCalendar entity.
func (epu *ExamPAUpdate) AddExamcalPsRef(e ...*ExamCalendar) *ExamPAUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.AddExamcalPsRefIDs(ids...)
}

// AddPapersPsRefIDs adds the "papers_ps_ref" edge to the ExamPapers entity by IDs.
func (epu *ExamPAUpdate) AddPapersPsRefIDs(ids ...int32) *ExamPAUpdate {
	epu.mutation.AddPapersPsRefIDs(ids...)
	return epu
}

// AddPapersPsRef adds the "papers_ps_ref" edges to the ExamPapers entity.
func (epu *ExamPAUpdate) AddPapersPsRef(e ...*ExamPapers) *ExamPAUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.AddPapersPsRefIDs(ids...)
}

// AddUsersPsTypeIDs adds the "users_ps_type" edge to the UserMaster entity by IDs.
func (epu *ExamPAUpdate) AddUsersPsTypeIDs(ids ...int64) *ExamPAUpdate {
	epu.mutation.AddUsersPsTypeIDs(ids...)
	return epu
}

// AddUsersPsType adds the "users_ps_type" edges to the UserMaster entity.
func (epu *ExamPAUpdate) AddUsersPsType(u ...*UserMaster) *ExamPAUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return epu.AddUsersPsTypeIDs(ids...)
}

// AddExamApplnPSRefIDs adds the "ExamAppln_PS_Ref" edge to the Exam_Applications_PS entity by IDs.
func (epu *ExamPAUpdate) AddExamApplnPSRefIDs(ids ...int64) *ExamPAUpdate {
	epu.mutation.AddExamApplnPSRefIDs(ids...)
	return epu
}

// AddExamApplnPSRef adds the "ExamAppln_PS_Ref" edges to the Exam_Applications_PS entity.
func (epu *ExamPAUpdate) AddExamApplnPSRef(e ...*Exam_Applications_PS) *ExamPAUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.AddExamApplnPSRefIDs(ids...)
}

// AddNotificationsPIDs adds the "notifications_ps" edge to the Notification entity by IDs.
func (epu *ExamPAUpdate) AddNotificationsPIDs(ids ...int32) *ExamPAUpdate {
	epu.mutation.AddNotificationsPIDs(ids...)
	return epu
}

// AddNotificationsPs adds the "notifications_ps" edges to the Notification entity.
func (epu *ExamPAUpdate) AddNotificationsPs(n ...*Notification) *ExamPAUpdate {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return epu.AddNotificationsPIDs(ids...)
}

// Mutation returns the ExamPAMutation object of the builder.
func (epu *ExamPAUpdate) Mutation() *ExamPAMutation {
	return epu.mutation
}

// ClearExamcalPsRef clears all "examcal_ps_ref" edges to the ExamCalendar entity.
func (epu *ExamPAUpdate) ClearExamcalPsRef() *ExamPAUpdate {
	epu.mutation.ClearExamcalPsRef()
	return epu
}

// RemoveExamcalPsRefIDs removes the "examcal_ps_ref" edge to ExamCalendar entities by IDs.
func (epu *ExamPAUpdate) RemoveExamcalPsRefIDs(ids ...int32) *ExamPAUpdate {
	epu.mutation.RemoveExamcalPsRefIDs(ids...)
	return epu
}

// RemoveExamcalPsRef removes "examcal_ps_ref" edges to ExamCalendar entities.
func (epu *ExamPAUpdate) RemoveExamcalPsRef(e ...*ExamCalendar) *ExamPAUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.RemoveExamcalPsRefIDs(ids...)
}

// ClearPapersPsRef clears all "papers_ps_ref" edges to the ExamPapers entity.
func (epu *ExamPAUpdate) ClearPapersPsRef() *ExamPAUpdate {
	epu.mutation.ClearPapersPsRef()
	return epu
}

// RemovePapersPsRefIDs removes the "papers_ps_ref" edge to ExamPapers entities by IDs.
func (epu *ExamPAUpdate) RemovePapersPsRefIDs(ids ...int32) *ExamPAUpdate {
	epu.mutation.RemovePapersPsRefIDs(ids...)
	return epu
}

// RemovePapersPsRef removes "papers_ps_ref" edges to ExamPapers entities.
func (epu *ExamPAUpdate) RemovePapersPsRef(e ...*ExamPapers) *ExamPAUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.RemovePapersPsRefIDs(ids...)
}

// ClearUsersPsType clears all "users_ps_type" edges to the UserMaster entity.
func (epu *ExamPAUpdate) ClearUsersPsType() *ExamPAUpdate {
	epu.mutation.ClearUsersPsType()
	return epu
}

// RemoveUsersPsTypeIDs removes the "users_ps_type" edge to UserMaster entities by IDs.
func (epu *ExamPAUpdate) RemoveUsersPsTypeIDs(ids ...int64) *ExamPAUpdate {
	epu.mutation.RemoveUsersPsTypeIDs(ids...)
	return epu
}

// RemoveUsersPsType removes "users_ps_type" edges to UserMaster entities.
func (epu *ExamPAUpdate) RemoveUsersPsType(u ...*UserMaster) *ExamPAUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return epu.RemoveUsersPsTypeIDs(ids...)
}

// ClearExamApplnPSRef clears all "ExamAppln_PS_Ref" edges to the Exam_Applications_PS entity.
func (epu *ExamPAUpdate) ClearExamApplnPSRef() *ExamPAUpdate {
	epu.mutation.ClearExamApplnPSRef()
	return epu
}

// RemoveExamApplnPSRefIDs removes the "ExamAppln_PS_Ref" edge to Exam_Applications_PS entities by IDs.
func (epu *ExamPAUpdate) RemoveExamApplnPSRefIDs(ids ...int64) *ExamPAUpdate {
	epu.mutation.RemoveExamApplnPSRefIDs(ids...)
	return epu
}

// RemoveExamApplnPSRef removes "ExamAppln_PS_Ref" edges to Exam_Applications_PS entities.
func (epu *ExamPAUpdate) RemoveExamApplnPSRef(e ...*Exam_Applications_PS) *ExamPAUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.RemoveExamApplnPSRefIDs(ids...)
}

// ClearNotificationsPs clears all "notifications_ps" edges to the Notification entity.
func (epu *ExamPAUpdate) ClearNotificationsPs() *ExamPAUpdate {
	epu.mutation.ClearNotificationsPs()
	return epu
}

// RemoveNotificationsPIDs removes the "notifications_ps" edge to Notification entities by IDs.
func (epu *ExamPAUpdate) RemoveNotificationsPIDs(ids ...int32) *ExamPAUpdate {
	epu.mutation.RemoveNotificationsPIDs(ids...)
	return epu
}

// RemoveNotificationsPs removes "notifications_ps" edges to Notification entities.
func (epu *ExamPAUpdate) RemoveNotificationsPs(n ...*Notification) *ExamPAUpdate {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return epu.RemoveNotificationsPIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (epu *ExamPAUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, epu.sqlSave, epu.mutation, epu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epu *ExamPAUpdate) SaveX(ctx context.Context) int {
	affected, err := epu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (epu *ExamPAUpdate) Exec(ctx context.Context) error {
	_, err := epu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epu *ExamPAUpdate) ExecX(ctx context.Context) {
	if err := epu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (epu *ExamPAUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(exam_pa.Table, exam_pa.Columns, sqlgraph.NewFieldSpec(exam_pa.FieldID, field.TypeInt32))
	if ps := epu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epu.mutation.ExamNameCode(); ok {
		_spec.SetField(exam_pa.FieldExamNameCode, field.TypeString, value)
	}
	if epu.mutation.ExamNameCodeCleared() {
		_spec.ClearField(exam_pa.FieldExamNameCode, field.TypeString)
	}
	if value, ok := epu.mutation.ExamName(); ok {
		_spec.SetField(exam_pa.FieldExamName, field.TypeString, value)
	}
	if value, ok := epu.mutation.ExamType(); ok {
		_spec.SetField(exam_pa.FieldExamType, field.TypeString, value)
	}
	if value, ok := epu.mutation.NotificationCode(); ok {
		_spec.SetField(exam_pa.FieldNotificationCode, field.TypeInt32, value)
	}
	if value, ok := epu.mutation.AddedNotificationCode(); ok {
		_spec.AddField(exam_pa.FieldNotificationCode, field.TypeInt32, value)
	}
	if epu.mutation.NotificationCodeCleared() {
		_spec.ClearField(exam_pa.FieldNotificationCode, field.TypeInt32)
	}
	if value, ok := epu.mutation.ConductedBy(); ok {
		_spec.SetField(exam_pa.FieldConductedBy, field.TypeString, value)
	}
	if value, ok := epu.mutation.NodalOffice(); ok {
		_spec.SetField(exam_pa.FieldNodalOffice, field.TypeString, value)
	}
	if epu.mutation.NodalOfficeCleared() {
		_spec.ClearField(exam_pa.FieldNodalOffice, field.TypeString)
	}
	if value, ok := epu.mutation.CalendarCode(); ok {
		_spec.SetField(exam_pa.FieldCalendarCode, field.TypeInt32, value)
	}
	if value, ok := epu.mutation.AddedCalendarCode(); ok {
		_spec.AddField(exam_pa.FieldCalendarCode, field.TypeInt32, value)
	}
	if epu.mutation.CalendarCodeCleared() {
		_spec.ClearField(exam_pa.FieldCalendarCode, field.TypeInt32)
	}
	if value, ok := epu.mutation.PaperCode(); ok {
		_spec.SetField(exam_pa.FieldPaperCode, field.TypeInt32, value)
	}
	if value, ok := epu.mutation.AddedPaperCode(); ok {
		_spec.AddField(exam_pa.FieldPaperCode, field.TypeInt32, value)
	}
	if epu.mutation.PaperCodeCleared() {
		_spec.ClearField(exam_pa.FieldPaperCode, field.TypeInt32)
	}
	if value, ok := epu.mutation.EligibleCadre(); ok {
		_spec.SetField(exam_pa.FieldEligibleCadre, field.TypeString, value)
	}
	if epu.mutation.EligibleCadreCleared() {
		_spec.ClearField(exam_pa.FieldEligibleCadre, field.TypeString)
	}
	if value, ok := epu.mutation.EligiblePost1(); ok {
		_spec.SetField(exam_pa.FieldEligiblePost1, field.TypeString, value)
	}
	if epu.mutation.EligiblePost1Cleared() {
		_spec.ClearField(exam_pa.FieldEligiblePost1, field.TypeString)
	}
	if value, ok := epu.mutation.EligiblePost2(); ok {
		_spec.SetField(exam_pa.FieldEligiblePost2, field.TypeString, value)
	}
	if epu.mutation.EligiblePost2Cleared() {
		_spec.ClearField(exam_pa.FieldEligiblePost2, field.TypeString)
	}
	if value, ok := epu.mutation.EligiblePost3(); ok {
		_spec.SetField(exam_pa.FieldEligiblePost3, field.TypeString, value)
	}
	if epu.mutation.EligiblePost3Cleared() {
		_spec.ClearField(exam_pa.FieldEligiblePost3, field.TypeString)
	}
	if value, ok := epu.mutation.EligiblePost4(); ok {
		_spec.SetField(exam_pa.FieldEligiblePost4, field.TypeString, value)
	}
	if epu.mutation.EligiblePost4Cleared() {
		_spec.ClearField(exam_pa.FieldEligiblePost4, field.TypeString)
	}
	if value, ok := epu.mutation.EligiblePost5(); ok {
		_spec.SetField(exam_pa.FieldEligiblePost5, field.TypeString, value)
	}
	if epu.mutation.EligiblePost5Cleared() {
		_spec.ClearField(exam_pa.FieldEligiblePost5, field.TypeString)
	}
	if value, ok := epu.mutation.ExamPost1(); ok {
		_spec.SetField(exam_pa.FieldExamPost1, field.TypeString, value)
	}
	if epu.mutation.ExamPost1Cleared() {
		_spec.ClearField(exam_pa.FieldExamPost1, field.TypeString)
	}
	if value, ok := epu.mutation.ExamPost2(); ok {
		_spec.SetField(exam_pa.FieldExamPost2, field.TypeString, value)
	}
	if epu.mutation.ExamPost2Cleared() {
		_spec.ClearField(exam_pa.FieldExamPost2, field.TypeString)
	}
	if value, ok := epu.mutation.ExamPost3(); ok {
		_spec.SetField(exam_pa.FieldExamPost3, field.TypeString, value)
	}
	if epu.mutation.ExamPost3Cleared() {
		_spec.ClearField(exam_pa.FieldExamPost3, field.TypeString)
	}
	if value, ok := epu.mutation.ExamPost4(); ok {
		_spec.SetField(exam_pa.FieldExamPost4, field.TypeString, value)
	}
	if epu.mutation.ExamPost4Cleared() {
		_spec.ClearField(exam_pa.FieldExamPost4, field.TypeString)
	}
	if value, ok := epu.mutation.ExamPost5(); ok {
		_spec.SetField(exam_pa.FieldExamPost5, field.TypeString, value)
	}
	if epu.mutation.ExamPost5Cleared() {
		_spec.ClearField(exam_pa.FieldExamPost5, field.TypeString)
	}
	if value, ok := epu.mutation.EducationCriteria(); ok {
		_spec.SetField(exam_pa.FieldEducationCriteria, field.TypeString, value)
	}
	if epu.mutation.EducationCriteriaCleared() {
		_spec.ClearField(exam_pa.FieldEducationCriteria, field.TypeString)
	}
	if value, ok := epu.mutation.CategoryAgeLimitGEN(); ok {
		_spec.SetField(exam_pa.FieldCategoryAgeLimitGEN, field.TypeString, value)
	}
	if epu.mutation.CategoryAgeLimitGENCleared() {
		_spec.ClearField(exam_pa.FieldCategoryAgeLimitGEN, field.TypeString)
	}
	if value, ok := epu.mutation.CategoryAgeLimitSC(); ok {
		_spec.SetField(exam_pa.FieldCategoryAgeLimitSC, field.TypeString, value)
	}
	if epu.mutation.CategoryAgeLimitSCCleared() {
		_spec.ClearField(exam_pa.FieldCategoryAgeLimitSC, field.TypeString)
	}
	if value, ok := epu.mutation.CategoryAgeLimitST(); ok {
		_spec.SetField(exam_pa.FieldCategoryAgeLimitST, field.TypeString, value)
	}
	if epu.mutation.CategoryAgeLimitSTCleared() {
		_spec.ClearField(exam_pa.FieldCategoryAgeLimitST, field.TypeString)
	}
	if value, ok := epu.mutation.ServiceYears(); ok {
		_spec.SetField(exam_pa.FieldServiceYears, field.TypeString, value)
	}
	if epu.mutation.ServiceYearsCleared() {
		_spec.ClearField(exam_pa.FieldServiceYears, field.TypeString)
	}
	if value, ok := epu.mutation.DrivingLicenseRequired(); ok {
		_spec.SetField(exam_pa.FieldDrivingLicenseRequired, field.TypeString, value)
	}
	if epu.mutation.DrivingLicenseRequiredCleared() {
		_spec.ClearField(exam_pa.FieldDrivingLicenseRequired, field.TypeString)
	}
	if value, ok := epu.mutation.ExamPaperCode(); ok {
		_spec.SetField(exam_pa.FieldExamPaperCode, field.TypeString, value)
	}
	if epu.mutation.ExamPaperCodeCleared() {
		_spec.ClearField(exam_pa.FieldExamPaperCode, field.TypeString)
	}
	if value, ok := epu.mutation.ExamPaper1(); ok {
		_spec.SetField(exam_pa.FieldExamPaper1, field.TypeString, value)
	}
	if epu.mutation.ExamPaper1Cleared() {
		_spec.ClearField(exam_pa.FieldExamPaper1, field.TypeString)
	}
	if value, ok := epu.mutation.ExamPaper2(); ok {
		_spec.SetField(exam_pa.FieldExamPaper2, field.TypeString, value)
	}
	if epu.mutation.ExamPaper2Cleared() {
		_spec.ClearField(exam_pa.FieldExamPaper2, field.TypeString)
	}
	if value, ok := epu.mutation.ExamPaper3(); ok {
		_spec.SetField(exam_pa.FieldExamPaper3, field.TypeString, value)
	}
	if epu.mutation.ExamPaper3Cleared() {
		_spec.ClearField(exam_pa.FieldExamPaper3, field.TypeString)
	}
	if value, ok := epu.mutation.ExamPaper4(); ok {
		_spec.SetField(exam_pa.FieldExamPaper4, field.TypeString, value)
	}
	if epu.mutation.ExamPaper4Cleared() {
		_spec.ClearField(exam_pa.FieldExamPaper4, field.TypeString)
	}
	if value, ok := epu.mutation.ExamPaper5(); ok {
		_spec.SetField(exam_pa.FieldExamPaper5, field.TypeString, value)
	}
	if epu.mutation.ExamPaper5Cleared() {
		_spec.ClearField(exam_pa.FieldExamPaper5, field.TypeString)
	}
	if value, ok := epu.mutation.ExamPaper6(); ok {
		_spec.SetField(exam_pa.FieldExamPaper6, field.TypeString, value)
	}
	if epu.mutation.ExamPaper6Cleared() {
		_spec.ClearField(exam_pa.FieldExamPaper6, field.TypeString)
	}
	if value, ok := epu.mutation.PayLevelEligibilty(); ok {
		_spec.SetField(exam_pa.FieldPayLevelEligibilty, field.TypeBool, value)
	}
	if epu.mutation.PayLevelEligibiltyCleared() {
		_spec.ClearField(exam_pa.FieldPayLevelEligibilty, field.TypeBool)
	}
	if value, ok := epu.mutation.CategoryMinMarksSCSTPH(); ok {
		_spec.SetField(exam_pa.FieldCategoryMinMarksSCSTPH, field.TypeString, value)
	}
	if epu.mutation.CategoryMinMarksSCSTPHCleared() {
		_spec.ClearField(exam_pa.FieldCategoryMinMarksSCSTPH, field.TypeString)
	}
	if value, ok := epu.mutation.CategoryMinMarksGENOBC(); ok {
		_spec.SetField(exam_pa.FieldCategoryMinMarksGENOBC, field.TypeString, value)
	}
	if epu.mutation.CategoryMinMarksGENOBCCleared() {
		_spec.ClearField(exam_pa.FieldCategoryMinMarksGENOBC, field.TypeString)
	}
	if value, ok := epu.mutation.LocalLanguageAllowed(); ok {
		_spec.SetField(exam_pa.FieldLocalLanguageAllowed, field.TypeBool, value)
	}
	if epu.mutation.LocalLanguageAllowedCleared() {
		_spec.ClearField(exam_pa.FieldLocalLanguageAllowed, field.TypeBool)
	}
	if value, ok := epu.mutation.UpdatedAt(); ok {
		_spec.SetField(exam_pa.FieldUpdatedAt, field.TypeTime, value)
	}
	if epu.mutation.UpdatedAtCleared() {
		_spec.ClearField(exam_pa.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := epu.mutation.UpdatedBy(); ok {
		_spec.SetField(exam_pa.FieldUpdatedBy, field.TypeString, value)
	}
	if epu.mutation.UpdatedByCleared() {
		_spec.ClearField(exam_pa.FieldUpdatedBy, field.TypeString)
	}
	if epu.mutation.ExamcalPsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.ExamcalPsRefTable,
			Columns: []string{exam_pa.ExamcalPsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.RemovedExamcalPsRefIDs(); len(nodes) > 0 && !epu.mutation.ExamcalPsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.ExamcalPsRefTable,
			Columns: []string{exam_pa.ExamcalPsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.ExamcalPsRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.ExamcalPsRefTable,
			Columns: []string{exam_pa.ExamcalPsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epu.mutation.PapersPsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.PapersPsRefTable,
			Columns: []string{exam_pa.PapersPsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.RemovedPapersPsRefIDs(); len(nodes) > 0 && !epu.mutation.PapersPsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.PapersPsRefTable,
			Columns: []string{exam_pa.PapersPsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.PapersPsRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.PapersPsRefTable,
			Columns: []string{exam_pa.PapersPsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epu.mutation.UsersPsTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.UsersPsTypeTable,
			Columns: []string{exam_pa.UsersPsTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.RemovedUsersPsTypeIDs(); len(nodes) > 0 && !epu.mutation.UsersPsTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.UsersPsTypeTable,
			Columns: []string{exam_pa.UsersPsTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.UsersPsTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.UsersPsTypeTable,
			Columns: []string{exam_pa.UsersPsTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epu.mutation.ExamApplnPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.ExamApplnPSRefTable,
			Columns: []string{exam_pa.ExamApplnPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.RemovedExamApplnPSRefIDs(); len(nodes) > 0 && !epu.mutation.ExamApplnPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.ExamApplnPSRefTable,
			Columns: []string{exam_pa.ExamApplnPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.ExamApplnPSRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.ExamApplnPSRefTable,
			Columns: []string{exam_pa.ExamApplnPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epu.mutation.NotificationsPsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.NotificationsPsTable,
			Columns: []string{exam_pa.NotificationsPsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.RemovedNotificationsPsIDs(); len(nodes) > 0 && !epu.mutation.NotificationsPsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.NotificationsPsTable,
			Columns: []string{exam_pa.NotificationsPsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.NotificationsPsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.NotificationsPsTable,
			Columns: []string{exam_pa.NotificationsPsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, epu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exam_pa.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	epu.mutation.done = true
	return n, nil
}

// ExamPAUpdateOne is the builder for updating a single Exam_PA entity.
type ExamPAUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExamPAMutation
}

// SetExamNameCode sets the "ExamNameCode" field.
func (epuo *ExamPAUpdateOne) SetExamNameCode(s string) *ExamPAUpdateOne {
	epuo.mutation.SetExamNameCode(s)
	return epuo
}

// SetNillableExamNameCode sets the "ExamNameCode" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableExamNameCode(s *string) *ExamPAUpdateOne {
	if s != nil {
		epuo.SetExamNameCode(*s)
	}
	return epuo
}

// ClearExamNameCode clears the value of the "ExamNameCode" field.
func (epuo *ExamPAUpdateOne) ClearExamNameCode() *ExamPAUpdateOne {
	epuo.mutation.ClearExamNameCode()
	return epuo
}

// SetExamName sets the "ExamName" field.
func (epuo *ExamPAUpdateOne) SetExamName(s string) *ExamPAUpdateOne {
	epuo.mutation.SetExamName(s)
	return epuo
}

// SetExamType sets the "ExamType" field.
func (epuo *ExamPAUpdateOne) SetExamType(s string) *ExamPAUpdateOne {
	epuo.mutation.SetExamType(s)
	return epuo
}

// SetNotificationCode sets the "NotificationCode" field.
func (epuo *ExamPAUpdateOne) SetNotificationCode(i int32) *ExamPAUpdateOne {
	epuo.mutation.ResetNotificationCode()
	epuo.mutation.SetNotificationCode(i)
	return epuo
}

// SetNillableNotificationCode sets the "NotificationCode" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableNotificationCode(i *int32) *ExamPAUpdateOne {
	if i != nil {
		epuo.SetNotificationCode(*i)
	}
	return epuo
}

// AddNotificationCode adds i to the "NotificationCode" field.
func (epuo *ExamPAUpdateOne) AddNotificationCode(i int32) *ExamPAUpdateOne {
	epuo.mutation.AddNotificationCode(i)
	return epuo
}

// ClearNotificationCode clears the value of the "NotificationCode" field.
func (epuo *ExamPAUpdateOne) ClearNotificationCode() *ExamPAUpdateOne {
	epuo.mutation.ClearNotificationCode()
	return epuo
}

// SetConductedBy sets the "ConductedBy" field.
func (epuo *ExamPAUpdateOne) SetConductedBy(s string) *ExamPAUpdateOne {
	epuo.mutation.SetConductedBy(s)
	return epuo
}

// SetNodalOffice sets the "NodalOffice" field.
func (epuo *ExamPAUpdateOne) SetNodalOffice(s string) *ExamPAUpdateOne {
	epuo.mutation.SetNodalOffice(s)
	return epuo
}

// SetNillableNodalOffice sets the "NodalOffice" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableNodalOffice(s *string) *ExamPAUpdateOne {
	if s != nil {
		epuo.SetNodalOffice(*s)
	}
	return epuo
}

// ClearNodalOffice clears the value of the "NodalOffice" field.
func (epuo *ExamPAUpdateOne) ClearNodalOffice() *ExamPAUpdateOne {
	epuo.mutation.ClearNodalOffice()
	return epuo
}

// SetCalendarCode sets the "CalendarCode" field.
func (epuo *ExamPAUpdateOne) SetCalendarCode(i int32) *ExamPAUpdateOne {
	epuo.mutation.ResetCalendarCode()
	epuo.mutation.SetCalendarCode(i)
	return epuo
}

// SetNillableCalendarCode sets the "CalendarCode" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableCalendarCode(i *int32) *ExamPAUpdateOne {
	if i != nil {
		epuo.SetCalendarCode(*i)
	}
	return epuo
}

// AddCalendarCode adds i to the "CalendarCode" field.
func (epuo *ExamPAUpdateOne) AddCalendarCode(i int32) *ExamPAUpdateOne {
	epuo.mutation.AddCalendarCode(i)
	return epuo
}

// ClearCalendarCode clears the value of the "CalendarCode" field.
func (epuo *ExamPAUpdateOne) ClearCalendarCode() *ExamPAUpdateOne {
	epuo.mutation.ClearCalendarCode()
	return epuo
}

// SetPaperCode sets the "PaperCode" field.
func (epuo *ExamPAUpdateOne) SetPaperCode(i int32) *ExamPAUpdateOne {
	epuo.mutation.ResetPaperCode()
	epuo.mutation.SetPaperCode(i)
	return epuo
}

// SetNillablePaperCode sets the "PaperCode" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillablePaperCode(i *int32) *ExamPAUpdateOne {
	if i != nil {
		epuo.SetPaperCode(*i)
	}
	return epuo
}

// AddPaperCode adds i to the "PaperCode" field.
func (epuo *ExamPAUpdateOne) AddPaperCode(i int32) *ExamPAUpdateOne {
	epuo.mutation.AddPaperCode(i)
	return epuo
}

// ClearPaperCode clears the value of the "PaperCode" field.
func (epuo *ExamPAUpdateOne) ClearPaperCode() *ExamPAUpdateOne {
	epuo.mutation.ClearPaperCode()
	return epuo
}

// SetEligibleCadre sets the "EligibleCadre" field.
func (epuo *ExamPAUpdateOne) SetEligibleCadre(s string) *ExamPAUpdateOne {
	epuo.mutation.SetEligibleCadre(s)
	return epuo
}

// SetNillableEligibleCadre sets the "EligibleCadre" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableEligibleCadre(s *string) *ExamPAUpdateOne {
	if s != nil {
		epuo.SetEligibleCadre(*s)
	}
	return epuo
}

// ClearEligibleCadre clears the value of the "EligibleCadre" field.
func (epuo *ExamPAUpdateOne) ClearEligibleCadre() *ExamPAUpdateOne {
	epuo.mutation.ClearEligibleCadre()
	return epuo
}

// SetEligiblePost1 sets the "EligiblePost1" field.
func (epuo *ExamPAUpdateOne) SetEligiblePost1(s string) *ExamPAUpdateOne {
	epuo.mutation.SetEligiblePost1(s)
	return epuo
}

// SetNillableEligiblePost1 sets the "EligiblePost1" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableEligiblePost1(s *string) *ExamPAUpdateOne {
	if s != nil {
		epuo.SetEligiblePost1(*s)
	}
	return epuo
}

// ClearEligiblePost1 clears the value of the "EligiblePost1" field.
func (epuo *ExamPAUpdateOne) ClearEligiblePost1() *ExamPAUpdateOne {
	epuo.mutation.ClearEligiblePost1()
	return epuo
}

// SetEligiblePost2 sets the "EligiblePost2" field.
func (epuo *ExamPAUpdateOne) SetEligiblePost2(s string) *ExamPAUpdateOne {
	epuo.mutation.SetEligiblePost2(s)
	return epuo
}

// SetNillableEligiblePost2 sets the "EligiblePost2" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableEligiblePost2(s *string) *ExamPAUpdateOne {
	if s != nil {
		epuo.SetEligiblePost2(*s)
	}
	return epuo
}

// ClearEligiblePost2 clears the value of the "EligiblePost2" field.
func (epuo *ExamPAUpdateOne) ClearEligiblePost2() *ExamPAUpdateOne {
	epuo.mutation.ClearEligiblePost2()
	return epuo
}

// SetEligiblePost3 sets the "EligiblePost3" field.
func (epuo *ExamPAUpdateOne) SetEligiblePost3(s string) *ExamPAUpdateOne {
	epuo.mutation.SetEligiblePost3(s)
	return epuo
}

// SetNillableEligiblePost3 sets the "EligiblePost3" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableEligiblePost3(s *string) *ExamPAUpdateOne {
	if s != nil {
		epuo.SetEligiblePost3(*s)
	}
	return epuo
}

// ClearEligiblePost3 clears the value of the "EligiblePost3" field.
func (epuo *ExamPAUpdateOne) ClearEligiblePost3() *ExamPAUpdateOne {
	epuo.mutation.ClearEligiblePost3()
	return epuo
}

// SetEligiblePost4 sets the "EligiblePost4" field.
func (epuo *ExamPAUpdateOne) SetEligiblePost4(s string) *ExamPAUpdateOne {
	epuo.mutation.SetEligiblePost4(s)
	return epuo
}

// SetNillableEligiblePost4 sets the "EligiblePost4" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableEligiblePost4(s *string) *ExamPAUpdateOne {
	if s != nil {
		epuo.SetEligiblePost4(*s)
	}
	return epuo
}

// ClearEligiblePost4 clears the value of the "EligiblePost4" field.
func (epuo *ExamPAUpdateOne) ClearEligiblePost4() *ExamPAUpdateOne {
	epuo.mutation.ClearEligiblePost4()
	return epuo
}

// SetEligiblePost5 sets the "EligiblePost5" field.
func (epuo *ExamPAUpdateOne) SetEligiblePost5(s string) *ExamPAUpdateOne {
	epuo.mutation.SetEligiblePost5(s)
	return epuo
}

// SetNillableEligiblePost5 sets the "EligiblePost5" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableEligiblePost5(s *string) *ExamPAUpdateOne {
	if s != nil {
		epuo.SetEligiblePost5(*s)
	}
	return epuo
}

// ClearEligiblePost5 clears the value of the "EligiblePost5" field.
func (epuo *ExamPAUpdateOne) ClearEligiblePost5() *ExamPAUpdateOne {
	epuo.mutation.ClearEligiblePost5()
	return epuo
}

// SetExamPost1 sets the "ExamPost1" field.
func (epuo *ExamPAUpdateOne) SetExamPost1(s string) *ExamPAUpdateOne {
	epuo.mutation.SetExamPost1(s)
	return epuo
}

// SetNillableExamPost1 sets the "ExamPost1" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableExamPost1(s *string) *ExamPAUpdateOne {
	if s != nil {
		epuo.SetExamPost1(*s)
	}
	return epuo
}

// ClearExamPost1 clears the value of the "ExamPost1" field.
func (epuo *ExamPAUpdateOne) ClearExamPost1() *ExamPAUpdateOne {
	epuo.mutation.ClearExamPost1()
	return epuo
}

// SetExamPost2 sets the "ExamPost2" field.
func (epuo *ExamPAUpdateOne) SetExamPost2(s string) *ExamPAUpdateOne {
	epuo.mutation.SetExamPost2(s)
	return epuo
}

// SetNillableExamPost2 sets the "ExamPost2" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableExamPost2(s *string) *ExamPAUpdateOne {
	if s != nil {
		epuo.SetExamPost2(*s)
	}
	return epuo
}

// ClearExamPost2 clears the value of the "ExamPost2" field.
func (epuo *ExamPAUpdateOne) ClearExamPost2() *ExamPAUpdateOne {
	epuo.mutation.ClearExamPost2()
	return epuo
}

// SetExamPost3 sets the "ExamPost3" field.
func (epuo *ExamPAUpdateOne) SetExamPost3(s string) *ExamPAUpdateOne {
	epuo.mutation.SetExamPost3(s)
	return epuo
}

// SetNillableExamPost3 sets the "ExamPost3" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableExamPost3(s *string) *ExamPAUpdateOne {
	if s != nil {
		epuo.SetExamPost3(*s)
	}
	return epuo
}

// ClearExamPost3 clears the value of the "ExamPost3" field.
func (epuo *ExamPAUpdateOne) ClearExamPost3() *ExamPAUpdateOne {
	epuo.mutation.ClearExamPost3()
	return epuo
}

// SetExamPost4 sets the "ExamPost4" field.
func (epuo *ExamPAUpdateOne) SetExamPost4(s string) *ExamPAUpdateOne {
	epuo.mutation.SetExamPost4(s)
	return epuo
}

// SetNillableExamPost4 sets the "ExamPost4" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableExamPost4(s *string) *ExamPAUpdateOne {
	if s != nil {
		epuo.SetExamPost4(*s)
	}
	return epuo
}

// ClearExamPost4 clears the value of the "ExamPost4" field.
func (epuo *ExamPAUpdateOne) ClearExamPost4() *ExamPAUpdateOne {
	epuo.mutation.ClearExamPost4()
	return epuo
}

// SetExamPost5 sets the "ExamPost5" field.
func (epuo *ExamPAUpdateOne) SetExamPost5(s string) *ExamPAUpdateOne {
	epuo.mutation.SetExamPost5(s)
	return epuo
}

// SetNillableExamPost5 sets the "ExamPost5" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableExamPost5(s *string) *ExamPAUpdateOne {
	if s != nil {
		epuo.SetExamPost5(*s)
	}
	return epuo
}

// ClearExamPost5 clears the value of the "ExamPost5" field.
func (epuo *ExamPAUpdateOne) ClearExamPost5() *ExamPAUpdateOne {
	epuo.mutation.ClearExamPost5()
	return epuo
}

// SetEducationCriteria sets the "EducationCriteria" field.
func (epuo *ExamPAUpdateOne) SetEducationCriteria(s string) *ExamPAUpdateOne {
	epuo.mutation.SetEducationCriteria(s)
	return epuo
}

// SetNillableEducationCriteria sets the "EducationCriteria" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableEducationCriteria(s *string) *ExamPAUpdateOne {
	if s != nil {
		epuo.SetEducationCriteria(*s)
	}
	return epuo
}

// ClearEducationCriteria clears the value of the "EducationCriteria" field.
func (epuo *ExamPAUpdateOne) ClearEducationCriteria() *ExamPAUpdateOne {
	epuo.mutation.ClearEducationCriteria()
	return epuo
}

// SetCategoryAgeLimitGEN sets the "CategoryAgeLimitGEN" field.
func (epuo *ExamPAUpdateOne) SetCategoryAgeLimitGEN(s string) *ExamPAUpdateOne {
	epuo.mutation.SetCategoryAgeLimitGEN(s)
	return epuo
}

// SetNillableCategoryAgeLimitGEN sets the "CategoryAgeLimitGEN" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableCategoryAgeLimitGEN(s *string) *ExamPAUpdateOne {
	if s != nil {
		epuo.SetCategoryAgeLimitGEN(*s)
	}
	return epuo
}

// ClearCategoryAgeLimitGEN clears the value of the "CategoryAgeLimitGEN" field.
func (epuo *ExamPAUpdateOne) ClearCategoryAgeLimitGEN() *ExamPAUpdateOne {
	epuo.mutation.ClearCategoryAgeLimitGEN()
	return epuo
}

// SetCategoryAgeLimitSC sets the "CategoryAgeLimitSC" field.
func (epuo *ExamPAUpdateOne) SetCategoryAgeLimitSC(s string) *ExamPAUpdateOne {
	epuo.mutation.SetCategoryAgeLimitSC(s)
	return epuo
}

// SetNillableCategoryAgeLimitSC sets the "CategoryAgeLimitSC" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableCategoryAgeLimitSC(s *string) *ExamPAUpdateOne {
	if s != nil {
		epuo.SetCategoryAgeLimitSC(*s)
	}
	return epuo
}

// ClearCategoryAgeLimitSC clears the value of the "CategoryAgeLimitSC" field.
func (epuo *ExamPAUpdateOne) ClearCategoryAgeLimitSC() *ExamPAUpdateOne {
	epuo.mutation.ClearCategoryAgeLimitSC()
	return epuo
}

// SetCategoryAgeLimitST sets the "CategoryAgeLimitST" field.
func (epuo *ExamPAUpdateOne) SetCategoryAgeLimitST(s string) *ExamPAUpdateOne {
	epuo.mutation.SetCategoryAgeLimitST(s)
	return epuo
}

// SetNillableCategoryAgeLimitST sets the "CategoryAgeLimitST" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableCategoryAgeLimitST(s *string) *ExamPAUpdateOne {
	if s != nil {
		epuo.SetCategoryAgeLimitST(*s)
	}
	return epuo
}

// ClearCategoryAgeLimitST clears the value of the "CategoryAgeLimitST" field.
func (epuo *ExamPAUpdateOne) ClearCategoryAgeLimitST() *ExamPAUpdateOne {
	epuo.mutation.ClearCategoryAgeLimitST()
	return epuo
}

// SetServiceYears sets the "ServiceYears" field.
func (epuo *ExamPAUpdateOne) SetServiceYears(s string) *ExamPAUpdateOne {
	epuo.mutation.SetServiceYears(s)
	return epuo
}

// SetNillableServiceYears sets the "ServiceYears" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableServiceYears(s *string) *ExamPAUpdateOne {
	if s != nil {
		epuo.SetServiceYears(*s)
	}
	return epuo
}

// ClearServiceYears clears the value of the "ServiceYears" field.
func (epuo *ExamPAUpdateOne) ClearServiceYears() *ExamPAUpdateOne {
	epuo.mutation.ClearServiceYears()
	return epuo
}

// SetDrivingLicenseRequired sets the "DrivingLicenseRequired" field.
func (epuo *ExamPAUpdateOne) SetDrivingLicenseRequired(s string) *ExamPAUpdateOne {
	epuo.mutation.SetDrivingLicenseRequired(s)
	return epuo
}

// SetNillableDrivingLicenseRequired sets the "DrivingLicenseRequired" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableDrivingLicenseRequired(s *string) *ExamPAUpdateOne {
	if s != nil {
		epuo.SetDrivingLicenseRequired(*s)
	}
	return epuo
}

// ClearDrivingLicenseRequired clears the value of the "DrivingLicenseRequired" field.
func (epuo *ExamPAUpdateOne) ClearDrivingLicenseRequired() *ExamPAUpdateOne {
	epuo.mutation.ClearDrivingLicenseRequired()
	return epuo
}

// SetExamPaperCode sets the "ExamPaperCode" field.
func (epuo *ExamPAUpdateOne) SetExamPaperCode(s string) *ExamPAUpdateOne {
	epuo.mutation.SetExamPaperCode(s)
	return epuo
}

// SetNillableExamPaperCode sets the "ExamPaperCode" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableExamPaperCode(s *string) *ExamPAUpdateOne {
	if s != nil {
		epuo.SetExamPaperCode(*s)
	}
	return epuo
}

// ClearExamPaperCode clears the value of the "ExamPaperCode" field.
func (epuo *ExamPAUpdateOne) ClearExamPaperCode() *ExamPAUpdateOne {
	epuo.mutation.ClearExamPaperCode()
	return epuo
}

// SetExamPaper1 sets the "ExamPaper1" field.
func (epuo *ExamPAUpdateOne) SetExamPaper1(s string) *ExamPAUpdateOne {
	epuo.mutation.SetExamPaper1(s)
	return epuo
}

// SetNillableExamPaper1 sets the "ExamPaper1" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableExamPaper1(s *string) *ExamPAUpdateOne {
	if s != nil {
		epuo.SetExamPaper1(*s)
	}
	return epuo
}

// ClearExamPaper1 clears the value of the "ExamPaper1" field.
func (epuo *ExamPAUpdateOne) ClearExamPaper1() *ExamPAUpdateOne {
	epuo.mutation.ClearExamPaper1()
	return epuo
}

// SetExamPaper2 sets the "ExamPaper2" field.
func (epuo *ExamPAUpdateOne) SetExamPaper2(s string) *ExamPAUpdateOne {
	epuo.mutation.SetExamPaper2(s)
	return epuo
}

// SetNillableExamPaper2 sets the "ExamPaper2" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableExamPaper2(s *string) *ExamPAUpdateOne {
	if s != nil {
		epuo.SetExamPaper2(*s)
	}
	return epuo
}

// ClearExamPaper2 clears the value of the "ExamPaper2" field.
func (epuo *ExamPAUpdateOne) ClearExamPaper2() *ExamPAUpdateOne {
	epuo.mutation.ClearExamPaper2()
	return epuo
}

// SetExamPaper3 sets the "ExamPaper3" field.
func (epuo *ExamPAUpdateOne) SetExamPaper3(s string) *ExamPAUpdateOne {
	epuo.mutation.SetExamPaper3(s)
	return epuo
}

// SetNillableExamPaper3 sets the "ExamPaper3" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableExamPaper3(s *string) *ExamPAUpdateOne {
	if s != nil {
		epuo.SetExamPaper3(*s)
	}
	return epuo
}

// ClearExamPaper3 clears the value of the "ExamPaper3" field.
func (epuo *ExamPAUpdateOne) ClearExamPaper3() *ExamPAUpdateOne {
	epuo.mutation.ClearExamPaper3()
	return epuo
}

// SetExamPaper4 sets the "ExamPaper4" field.
func (epuo *ExamPAUpdateOne) SetExamPaper4(s string) *ExamPAUpdateOne {
	epuo.mutation.SetExamPaper4(s)
	return epuo
}

// SetNillableExamPaper4 sets the "ExamPaper4" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableExamPaper4(s *string) *ExamPAUpdateOne {
	if s != nil {
		epuo.SetExamPaper4(*s)
	}
	return epuo
}

// ClearExamPaper4 clears the value of the "ExamPaper4" field.
func (epuo *ExamPAUpdateOne) ClearExamPaper4() *ExamPAUpdateOne {
	epuo.mutation.ClearExamPaper4()
	return epuo
}

// SetExamPaper5 sets the "ExamPaper5" field.
func (epuo *ExamPAUpdateOne) SetExamPaper5(s string) *ExamPAUpdateOne {
	epuo.mutation.SetExamPaper5(s)
	return epuo
}

// SetNillableExamPaper5 sets the "ExamPaper5" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableExamPaper5(s *string) *ExamPAUpdateOne {
	if s != nil {
		epuo.SetExamPaper5(*s)
	}
	return epuo
}

// ClearExamPaper5 clears the value of the "ExamPaper5" field.
func (epuo *ExamPAUpdateOne) ClearExamPaper5() *ExamPAUpdateOne {
	epuo.mutation.ClearExamPaper5()
	return epuo
}

// SetExamPaper6 sets the "ExamPaper6" field.
func (epuo *ExamPAUpdateOne) SetExamPaper6(s string) *ExamPAUpdateOne {
	epuo.mutation.SetExamPaper6(s)
	return epuo
}

// SetNillableExamPaper6 sets the "ExamPaper6" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableExamPaper6(s *string) *ExamPAUpdateOne {
	if s != nil {
		epuo.SetExamPaper6(*s)
	}
	return epuo
}

// ClearExamPaper6 clears the value of the "ExamPaper6" field.
func (epuo *ExamPAUpdateOne) ClearExamPaper6() *ExamPAUpdateOne {
	epuo.mutation.ClearExamPaper6()
	return epuo
}

// SetPayLevelEligibilty sets the "PayLevelEligibilty" field.
func (epuo *ExamPAUpdateOne) SetPayLevelEligibilty(b bool) *ExamPAUpdateOne {
	epuo.mutation.SetPayLevelEligibilty(b)
	return epuo
}

// SetNillablePayLevelEligibilty sets the "PayLevelEligibilty" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillablePayLevelEligibilty(b *bool) *ExamPAUpdateOne {
	if b != nil {
		epuo.SetPayLevelEligibilty(*b)
	}
	return epuo
}

// ClearPayLevelEligibilty clears the value of the "PayLevelEligibilty" field.
func (epuo *ExamPAUpdateOne) ClearPayLevelEligibilty() *ExamPAUpdateOne {
	epuo.mutation.ClearPayLevelEligibilty()
	return epuo
}

// SetCategoryMinMarksSCSTPH sets the "CategoryMinMarksSCSTPH" field.
func (epuo *ExamPAUpdateOne) SetCategoryMinMarksSCSTPH(s string) *ExamPAUpdateOne {
	epuo.mutation.SetCategoryMinMarksSCSTPH(s)
	return epuo
}

// SetNillableCategoryMinMarksSCSTPH sets the "CategoryMinMarksSCSTPH" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableCategoryMinMarksSCSTPH(s *string) *ExamPAUpdateOne {
	if s != nil {
		epuo.SetCategoryMinMarksSCSTPH(*s)
	}
	return epuo
}

// ClearCategoryMinMarksSCSTPH clears the value of the "CategoryMinMarksSCSTPH" field.
func (epuo *ExamPAUpdateOne) ClearCategoryMinMarksSCSTPH() *ExamPAUpdateOne {
	epuo.mutation.ClearCategoryMinMarksSCSTPH()
	return epuo
}

// SetCategoryMinMarksGENOBC sets the "CategoryMinMarksGENOBC" field.
func (epuo *ExamPAUpdateOne) SetCategoryMinMarksGENOBC(s string) *ExamPAUpdateOne {
	epuo.mutation.SetCategoryMinMarksGENOBC(s)
	return epuo
}

// SetNillableCategoryMinMarksGENOBC sets the "CategoryMinMarksGENOBC" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableCategoryMinMarksGENOBC(s *string) *ExamPAUpdateOne {
	if s != nil {
		epuo.SetCategoryMinMarksGENOBC(*s)
	}
	return epuo
}

// ClearCategoryMinMarksGENOBC clears the value of the "CategoryMinMarksGENOBC" field.
func (epuo *ExamPAUpdateOne) ClearCategoryMinMarksGENOBC() *ExamPAUpdateOne {
	epuo.mutation.ClearCategoryMinMarksGENOBC()
	return epuo
}

// SetLocalLanguageAllowed sets the "LocalLanguageAllowed" field.
func (epuo *ExamPAUpdateOne) SetLocalLanguageAllowed(b bool) *ExamPAUpdateOne {
	epuo.mutation.SetLocalLanguageAllowed(b)
	return epuo
}

// SetNillableLocalLanguageAllowed sets the "LocalLanguageAllowed" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableLocalLanguageAllowed(b *bool) *ExamPAUpdateOne {
	if b != nil {
		epuo.SetLocalLanguageAllowed(*b)
	}
	return epuo
}

// ClearLocalLanguageAllowed clears the value of the "LocalLanguageAllowed" field.
func (epuo *ExamPAUpdateOne) ClearLocalLanguageAllowed() *ExamPAUpdateOne {
	epuo.mutation.ClearLocalLanguageAllowed()
	return epuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (epuo *ExamPAUpdateOne) SetUpdatedAt(t time.Time) *ExamPAUpdateOne {
	epuo.mutation.SetUpdatedAt(t)
	return epuo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableUpdatedAt(t *time.Time) *ExamPAUpdateOne {
	if t != nil {
		epuo.SetUpdatedAt(*t)
	}
	return epuo
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (epuo *ExamPAUpdateOne) ClearUpdatedAt() *ExamPAUpdateOne {
	epuo.mutation.ClearUpdatedAt()
	return epuo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (epuo *ExamPAUpdateOne) SetUpdatedBy(s string) *ExamPAUpdateOne {
	epuo.mutation.SetUpdatedBy(s)
	return epuo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (epuo *ExamPAUpdateOne) SetNillableUpdatedBy(s *string) *ExamPAUpdateOne {
	if s != nil {
		epuo.SetUpdatedBy(*s)
	}
	return epuo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (epuo *ExamPAUpdateOne) ClearUpdatedBy() *ExamPAUpdateOne {
	epuo.mutation.ClearUpdatedBy()
	return epuo
}

// AddExamcalPsRefIDs adds the "examcal_ps_ref" edge to the ExamCalendar entity by IDs.
func (epuo *ExamPAUpdateOne) AddExamcalPsRefIDs(ids ...int32) *ExamPAUpdateOne {
	epuo.mutation.AddExamcalPsRefIDs(ids...)
	return epuo
}

// AddExamcalPsRef adds the "examcal_ps_ref" edges to the ExamCalendar entity.
func (epuo *ExamPAUpdateOne) AddExamcalPsRef(e ...*ExamCalendar) *ExamPAUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.AddExamcalPsRefIDs(ids...)
}

// AddPapersPsRefIDs adds the "papers_ps_ref" edge to the ExamPapers entity by IDs.
func (epuo *ExamPAUpdateOne) AddPapersPsRefIDs(ids ...int32) *ExamPAUpdateOne {
	epuo.mutation.AddPapersPsRefIDs(ids...)
	return epuo
}

// AddPapersPsRef adds the "papers_ps_ref" edges to the ExamPapers entity.
func (epuo *ExamPAUpdateOne) AddPapersPsRef(e ...*ExamPapers) *ExamPAUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.AddPapersPsRefIDs(ids...)
}

// AddUsersPsTypeIDs adds the "users_ps_type" edge to the UserMaster entity by IDs.
func (epuo *ExamPAUpdateOne) AddUsersPsTypeIDs(ids ...int64) *ExamPAUpdateOne {
	epuo.mutation.AddUsersPsTypeIDs(ids...)
	return epuo
}

// AddUsersPsType adds the "users_ps_type" edges to the UserMaster entity.
func (epuo *ExamPAUpdateOne) AddUsersPsType(u ...*UserMaster) *ExamPAUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return epuo.AddUsersPsTypeIDs(ids...)
}

// AddExamApplnPSRefIDs adds the "ExamAppln_PS_Ref" edge to the Exam_Applications_PS entity by IDs.
func (epuo *ExamPAUpdateOne) AddExamApplnPSRefIDs(ids ...int64) *ExamPAUpdateOne {
	epuo.mutation.AddExamApplnPSRefIDs(ids...)
	return epuo
}

// AddExamApplnPSRef adds the "ExamAppln_PS_Ref" edges to the Exam_Applications_PS entity.
func (epuo *ExamPAUpdateOne) AddExamApplnPSRef(e ...*Exam_Applications_PS) *ExamPAUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.AddExamApplnPSRefIDs(ids...)
}

// AddNotificationsPIDs adds the "notifications_ps" edge to the Notification entity by IDs.
func (epuo *ExamPAUpdateOne) AddNotificationsPIDs(ids ...int32) *ExamPAUpdateOne {
	epuo.mutation.AddNotificationsPIDs(ids...)
	return epuo
}

// AddNotificationsPs adds the "notifications_ps" edges to the Notification entity.
func (epuo *ExamPAUpdateOne) AddNotificationsPs(n ...*Notification) *ExamPAUpdateOne {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return epuo.AddNotificationsPIDs(ids...)
}

// Mutation returns the ExamPAMutation object of the builder.
func (epuo *ExamPAUpdateOne) Mutation() *ExamPAMutation {
	return epuo.mutation
}

// ClearExamcalPsRef clears all "examcal_ps_ref" edges to the ExamCalendar entity.
func (epuo *ExamPAUpdateOne) ClearExamcalPsRef() *ExamPAUpdateOne {
	epuo.mutation.ClearExamcalPsRef()
	return epuo
}

// RemoveExamcalPsRefIDs removes the "examcal_ps_ref" edge to ExamCalendar entities by IDs.
func (epuo *ExamPAUpdateOne) RemoveExamcalPsRefIDs(ids ...int32) *ExamPAUpdateOne {
	epuo.mutation.RemoveExamcalPsRefIDs(ids...)
	return epuo
}

// RemoveExamcalPsRef removes "examcal_ps_ref" edges to ExamCalendar entities.
func (epuo *ExamPAUpdateOne) RemoveExamcalPsRef(e ...*ExamCalendar) *ExamPAUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.RemoveExamcalPsRefIDs(ids...)
}

// ClearPapersPsRef clears all "papers_ps_ref" edges to the ExamPapers entity.
func (epuo *ExamPAUpdateOne) ClearPapersPsRef() *ExamPAUpdateOne {
	epuo.mutation.ClearPapersPsRef()
	return epuo
}

// RemovePapersPsRefIDs removes the "papers_ps_ref" edge to ExamPapers entities by IDs.
func (epuo *ExamPAUpdateOne) RemovePapersPsRefIDs(ids ...int32) *ExamPAUpdateOne {
	epuo.mutation.RemovePapersPsRefIDs(ids...)
	return epuo
}

// RemovePapersPsRef removes "papers_ps_ref" edges to ExamPapers entities.
func (epuo *ExamPAUpdateOne) RemovePapersPsRef(e ...*ExamPapers) *ExamPAUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.RemovePapersPsRefIDs(ids...)
}

// ClearUsersPsType clears all "users_ps_type" edges to the UserMaster entity.
func (epuo *ExamPAUpdateOne) ClearUsersPsType() *ExamPAUpdateOne {
	epuo.mutation.ClearUsersPsType()
	return epuo
}

// RemoveUsersPsTypeIDs removes the "users_ps_type" edge to UserMaster entities by IDs.
func (epuo *ExamPAUpdateOne) RemoveUsersPsTypeIDs(ids ...int64) *ExamPAUpdateOne {
	epuo.mutation.RemoveUsersPsTypeIDs(ids...)
	return epuo
}

// RemoveUsersPsType removes "users_ps_type" edges to UserMaster entities.
func (epuo *ExamPAUpdateOne) RemoveUsersPsType(u ...*UserMaster) *ExamPAUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return epuo.RemoveUsersPsTypeIDs(ids...)
}

// ClearExamApplnPSRef clears all "ExamAppln_PS_Ref" edges to the Exam_Applications_PS entity.
func (epuo *ExamPAUpdateOne) ClearExamApplnPSRef() *ExamPAUpdateOne {
	epuo.mutation.ClearExamApplnPSRef()
	return epuo
}

// RemoveExamApplnPSRefIDs removes the "ExamAppln_PS_Ref" edge to Exam_Applications_PS entities by IDs.
func (epuo *ExamPAUpdateOne) RemoveExamApplnPSRefIDs(ids ...int64) *ExamPAUpdateOne {
	epuo.mutation.RemoveExamApplnPSRefIDs(ids...)
	return epuo
}

// RemoveExamApplnPSRef removes "ExamAppln_PS_Ref" edges to Exam_Applications_PS entities.
func (epuo *ExamPAUpdateOne) RemoveExamApplnPSRef(e ...*Exam_Applications_PS) *ExamPAUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.RemoveExamApplnPSRefIDs(ids...)
}

// ClearNotificationsPs clears all "notifications_ps" edges to the Notification entity.
func (epuo *ExamPAUpdateOne) ClearNotificationsPs() *ExamPAUpdateOne {
	epuo.mutation.ClearNotificationsPs()
	return epuo
}

// RemoveNotificationsPIDs removes the "notifications_ps" edge to Notification entities by IDs.
func (epuo *ExamPAUpdateOne) RemoveNotificationsPIDs(ids ...int32) *ExamPAUpdateOne {
	epuo.mutation.RemoveNotificationsPIDs(ids...)
	return epuo
}

// RemoveNotificationsPs removes "notifications_ps" edges to Notification entities.
func (epuo *ExamPAUpdateOne) RemoveNotificationsPs(n ...*Notification) *ExamPAUpdateOne {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return epuo.RemoveNotificationsPIDs(ids...)
}

// Where appends a list predicates to the ExamPAUpdate builder.
func (epuo *ExamPAUpdateOne) Where(ps ...predicate.Exam_PA) *ExamPAUpdateOne {
	epuo.mutation.Where(ps...)
	return epuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (epuo *ExamPAUpdateOne) Select(field string, fields ...string) *ExamPAUpdateOne {
	epuo.fields = append([]string{field}, fields...)
	return epuo
}

// Save executes the query and returns the updated Exam_PA entity.
func (epuo *ExamPAUpdateOne) Save(ctx context.Context) (*Exam_PA, error) {
	return withHooks(ctx, epuo.sqlSave, epuo.mutation, epuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epuo *ExamPAUpdateOne) SaveX(ctx context.Context) *Exam_PA {
	node, err := epuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (epuo *ExamPAUpdateOne) Exec(ctx context.Context) error {
	_, err := epuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epuo *ExamPAUpdateOne) ExecX(ctx context.Context) {
	if err := epuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (epuo *ExamPAUpdateOne) sqlSave(ctx context.Context) (_node *Exam_PA, err error) {
	_spec := sqlgraph.NewUpdateSpec(exam_pa.Table, exam_pa.Columns, sqlgraph.NewFieldSpec(exam_pa.FieldID, field.TypeInt32))
	id, ok := epuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Exam_PA.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := epuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exam_pa.FieldID)
		for _, f := range fields {
			if !exam_pa.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exam_pa.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := epuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epuo.mutation.ExamNameCode(); ok {
		_spec.SetField(exam_pa.FieldExamNameCode, field.TypeString, value)
	}
	if epuo.mutation.ExamNameCodeCleared() {
		_spec.ClearField(exam_pa.FieldExamNameCode, field.TypeString)
	}
	if value, ok := epuo.mutation.ExamName(); ok {
		_spec.SetField(exam_pa.FieldExamName, field.TypeString, value)
	}
	if value, ok := epuo.mutation.ExamType(); ok {
		_spec.SetField(exam_pa.FieldExamType, field.TypeString, value)
	}
	if value, ok := epuo.mutation.NotificationCode(); ok {
		_spec.SetField(exam_pa.FieldNotificationCode, field.TypeInt32, value)
	}
	if value, ok := epuo.mutation.AddedNotificationCode(); ok {
		_spec.AddField(exam_pa.FieldNotificationCode, field.TypeInt32, value)
	}
	if epuo.mutation.NotificationCodeCleared() {
		_spec.ClearField(exam_pa.FieldNotificationCode, field.TypeInt32)
	}
	if value, ok := epuo.mutation.ConductedBy(); ok {
		_spec.SetField(exam_pa.FieldConductedBy, field.TypeString, value)
	}
	if value, ok := epuo.mutation.NodalOffice(); ok {
		_spec.SetField(exam_pa.FieldNodalOffice, field.TypeString, value)
	}
	if epuo.mutation.NodalOfficeCleared() {
		_spec.ClearField(exam_pa.FieldNodalOffice, field.TypeString)
	}
	if value, ok := epuo.mutation.CalendarCode(); ok {
		_spec.SetField(exam_pa.FieldCalendarCode, field.TypeInt32, value)
	}
	if value, ok := epuo.mutation.AddedCalendarCode(); ok {
		_spec.AddField(exam_pa.FieldCalendarCode, field.TypeInt32, value)
	}
	if epuo.mutation.CalendarCodeCleared() {
		_spec.ClearField(exam_pa.FieldCalendarCode, field.TypeInt32)
	}
	if value, ok := epuo.mutation.PaperCode(); ok {
		_spec.SetField(exam_pa.FieldPaperCode, field.TypeInt32, value)
	}
	if value, ok := epuo.mutation.AddedPaperCode(); ok {
		_spec.AddField(exam_pa.FieldPaperCode, field.TypeInt32, value)
	}
	if epuo.mutation.PaperCodeCleared() {
		_spec.ClearField(exam_pa.FieldPaperCode, field.TypeInt32)
	}
	if value, ok := epuo.mutation.EligibleCadre(); ok {
		_spec.SetField(exam_pa.FieldEligibleCadre, field.TypeString, value)
	}
	if epuo.mutation.EligibleCadreCleared() {
		_spec.ClearField(exam_pa.FieldEligibleCadre, field.TypeString)
	}
	if value, ok := epuo.mutation.EligiblePost1(); ok {
		_spec.SetField(exam_pa.FieldEligiblePost1, field.TypeString, value)
	}
	if epuo.mutation.EligiblePost1Cleared() {
		_spec.ClearField(exam_pa.FieldEligiblePost1, field.TypeString)
	}
	if value, ok := epuo.mutation.EligiblePost2(); ok {
		_spec.SetField(exam_pa.FieldEligiblePost2, field.TypeString, value)
	}
	if epuo.mutation.EligiblePost2Cleared() {
		_spec.ClearField(exam_pa.FieldEligiblePost2, field.TypeString)
	}
	if value, ok := epuo.mutation.EligiblePost3(); ok {
		_spec.SetField(exam_pa.FieldEligiblePost3, field.TypeString, value)
	}
	if epuo.mutation.EligiblePost3Cleared() {
		_spec.ClearField(exam_pa.FieldEligiblePost3, field.TypeString)
	}
	if value, ok := epuo.mutation.EligiblePost4(); ok {
		_spec.SetField(exam_pa.FieldEligiblePost4, field.TypeString, value)
	}
	if epuo.mutation.EligiblePost4Cleared() {
		_spec.ClearField(exam_pa.FieldEligiblePost4, field.TypeString)
	}
	if value, ok := epuo.mutation.EligiblePost5(); ok {
		_spec.SetField(exam_pa.FieldEligiblePost5, field.TypeString, value)
	}
	if epuo.mutation.EligiblePost5Cleared() {
		_spec.ClearField(exam_pa.FieldEligiblePost5, field.TypeString)
	}
	if value, ok := epuo.mutation.ExamPost1(); ok {
		_spec.SetField(exam_pa.FieldExamPost1, field.TypeString, value)
	}
	if epuo.mutation.ExamPost1Cleared() {
		_spec.ClearField(exam_pa.FieldExamPost1, field.TypeString)
	}
	if value, ok := epuo.mutation.ExamPost2(); ok {
		_spec.SetField(exam_pa.FieldExamPost2, field.TypeString, value)
	}
	if epuo.mutation.ExamPost2Cleared() {
		_spec.ClearField(exam_pa.FieldExamPost2, field.TypeString)
	}
	if value, ok := epuo.mutation.ExamPost3(); ok {
		_spec.SetField(exam_pa.FieldExamPost3, field.TypeString, value)
	}
	if epuo.mutation.ExamPost3Cleared() {
		_spec.ClearField(exam_pa.FieldExamPost3, field.TypeString)
	}
	if value, ok := epuo.mutation.ExamPost4(); ok {
		_spec.SetField(exam_pa.FieldExamPost4, field.TypeString, value)
	}
	if epuo.mutation.ExamPost4Cleared() {
		_spec.ClearField(exam_pa.FieldExamPost4, field.TypeString)
	}
	if value, ok := epuo.mutation.ExamPost5(); ok {
		_spec.SetField(exam_pa.FieldExamPost5, field.TypeString, value)
	}
	if epuo.mutation.ExamPost5Cleared() {
		_spec.ClearField(exam_pa.FieldExamPost5, field.TypeString)
	}
	if value, ok := epuo.mutation.EducationCriteria(); ok {
		_spec.SetField(exam_pa.FieldEducationCriteria, field.TypeString, value)
	}
	if epuo.mutation.EducationCriteriaCleared() {
		_spec.ClearField(exam_pa.FieldEducationCriteria, field.TypeString)
	}
	if value, ok := epuo.mutation.CategoryAgeLimitGEN(); ok {
		_spec.SetField(exam_pa.FieldCategoryAgeLimitGEN, field.TypeString, value)
	}
	if epuo.mutation.CategoryAgeLimitGENCleared() {
		_spec.ClearField(exam_pa.FieldCategoryAgeLimitGEN, field.TypeString)
	}
	if value, ok := epuo.mutation.CategoryAgeLimitSC(); ok {
		_spec.SetField(exam_pa.FieldCategoryAgeLimitSC, field.TypeString, value)
	}
	if epuo.mutation.CategoryAgeLimitSCCleared() {
		_spec.ClearField(exam_pa.FieldCategoryAgeLimitSC, field.TypeString)
	}
	if value, ok := epuo.mutation.CategoryAgeLimitST(); ok {
		_spec.SetField(exam_pa.FieldCategoryAgeLimitST, field.TypeString, value)
	}
	if epuo.mutation.CategoryAgeLimitSTCleared() {
		_spec.ClearField(exam_pa.FieldCategoryAgeLimitST, field.TypeString)
	}
	if value, ok := epuo.mutation.ServiceYears(); ok {
		_spec.SetField(exam_pa.FieldServiceYears, field.TypeString, value)
	}
	if epuo.mutation.ServiceYearsCleared() {
		_spec.ClearField(exam_pa.FieldServiceYears, field.TypeString)
	}
	if value, ok := epuo.mutation.DrivingLicenseRequired(); ok {
		_spec.SetField(exam_pa.FieldDrivingLicenseRequired, field.TypeString, value)
	}
	if epuo.mutation.DrivingLicenseRequiredCleared() {
		_spec.ClearField(exam_pa.FieldDrivingLicenseRequired, field.TypeString)
	}
	if value, ok := epuo.mutation.ExamPaperCode(); ok {
		_spec.SetField(exam_pa.FieldExamPaperCode, field.TypeString, value)
	}
	if epuo.mutation.ExamPaperCodeCleared() {
		_spec.ClearField(exam_pa.FieldExamPaperCode, field.TypeString)
	}
	if value, ok := epuo.mutation.ExamPaper1(); ok {
		_spec.SetField(exam_pa.FieldExamPaper1, field.TypeString, value)
	}
	if epuo.mutation.ExamPaper1Cleared() {
		_spec.ClearField(exam_pa.FieldExamPaper1, field.TypeString)
	}
	if value, ok := epuo.mutation.ExamPaper2(); ok {
		_spec.SetField(exam_pa.FieldExamPaper2, field.TypeString, value)
	}
	if epuo.mutation.ExamPaper2Cleared() {
		_spec.ClearField(exam_pa.FieldExamPaper2, field.TypeString)
	}
	if value, ok := epuo.mutation.ExamPaper3(); ok {
		_spec.SetField(exam_pa.FieldExamPaper3, field.TypeString, value)
	}
	if epuo.mutation.ExamPaper3Cleared() {
		_spec.ClearField(exam_pa.FieldExamPaper3, field.TypeString)
	}
	if value, ok := epuo.mutation.ExamPaper4(); ok {
		_spec.SetField(exam_pa.FieldExamPaper4, field.TypeString, value)
	}
	if epuo.mutation.ExamPaper4Cleared() {
		_spec.ClearField(exam_pa.FieldExamPaper4, field.TypeString)
	}
	if value, ok := epuo.mutation.ExamPaper5(); ok {
		_spec.SetField(exam_pa.FieldExamPaper5, field.TypeString, value)
	}
	if epuo.mutation.ExamPaper5Cleared() {
		_spec.ClearField(exam_pa.FieldExamPaper5, field.TypeString)
	}
	if value, ok := epuo.mutation.ExamPaper6(); ok {
		_spec.SetField(exam_pa.FieldExamPaper6, field.TypeString, value)
	}
	if epuo.mutation.ExamPaper6Cleared() {
		_spec.ClearField(exam_pa.FieldExamPaper6, field.TypeString)
	}
	if value, ok := epuo.mutation.PayLevelEligibilty(); ok {
		_spec.SetField(exam_pa.FieldPayLevelEligibilty, field.TypeBool, value)
	}
	if epuo.mutation.PayLevelEligibiltyCleared() {
		_spec.ClearField(exam_pa.FieldPayLevelEligibilty, field.TypeBool)
	}
	if value, ok := epuo.mutation.CategoryMinMarksSCSTPH(); ok {
		_spec.SetField(exam_pa.FieldCategoryMinMarksSCSTPH, field.TypeString, value)
	}
	if epuo.mutation.CategoryMinMarksSCSTPHCleared() {
		_spec.ClearField(exam_pa.FieldCategoryMinMarksSCSTPH, field.TypeString)
	}
	if value, ok := epuo.mutation.CategoryMinMarksGENOBC(); ok {
		_spec.SetField(exam_pa.FieldCategoryMinMarksGENOBC, field.TypeString, value)
	}
	if epuo.mutation.CategoryMinMarksGENOBCCleared() {
		_spec.ClearField(exam_pa.FieldCategoryMinMarksGENOBC, field.TypeString)
	}
	if value, ok := epuo.mutation.LocalLanguageAllowed(); ok {
		_spec.SetField(exam_pa.FieldLocalLanguageAllowed, field.TypeBool, value)
	}
	if epuo.mutation.LocalLanguageAllowedCleared() {
		_spec.ClearField(exam_pa.FieldLocalLanguageAllowed, field.TypeBool)
	}
	if value, ok := epuo.mutation.UpdatedAt(); ok {
		_spec.SetField(exam_pa.FieldUpdatedAt, field.TypeTime, value)
	}
	if epuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(exam_pa.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := epuo.mutation.UpdatedBy(); ok {
		_spec.SetField(exam_pa.FieldUpdatedBy, field.TypeString, value)
	}
	if epuo.mutation.UpdatedByCleared() {
		_spec.ClearField(exam_pa.FieldUpdatedBy, field.TypeString)
	}
	if epuo.mutation.ExamcalPsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.ExamcalPsRefTable,
			Columns: []string{exam_pa.ExamcalPsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.RemovedExamcalPsRefIDs(); len(nodes) > 0 && !epuo.mutation.ExamcalPsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.ExamcalPsRefTable,
			Columns: []string{exam_pa.ExamcalPsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.ExamcalPsRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.ExamcalPsRefTable,
			Columns: []string{exam_pa.ExamcalPsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epuo.mutation.PapersPsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.PapersPsRefTable,
			Columns: []string{exam_pa.PapersPsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.RemovedPapersPsRefIDs(); len(nodes) > 0 && !epuo.mutation.PapersPsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.PapersPsRefTable,
			Columns: []string{exam_pa.PapersPsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.PapersPsRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.PapersPsRefTable,
			Columns: []string{exam_pa.PapersPsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epuo.mutation.UsersPsTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.UsersPsTypeTable,
			Columns: []string{exam_pa.UsersPsTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.RemovedUsersPsTypeIDs(); len(nodes) > 0 && !epuo.mutation.UsersPsTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.UsersPsTypeTable,
			Columns: []string{exam_pa.UsersPsTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.UsersPsTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.UsersPsTypeTable,
			Columns: []string{exam_pa.UsersPsTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epuo.mutation.ExamApplnPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.ExamApplnPSRefTable,
			Columns: []string{exam_pa.ExamApplnPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.RemovedExamApplnPSRefIDs(); len(nodes) > 0 && !epuo.mutation.ExamApplnPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.ExamApplnPSRefTable,
			Columns: []string{exam_pa.ExamApplnPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.ExamApplnPSRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.ExamApplnPSRefTable,
			Columns: []string{exam_pa.ExamApplnPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epuo.mutation.NotificationsPsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.NotificationsPsTable,
			Columns: []string{exam_pa.NotificationsPsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.RemovedNotificationsPsIDs(); len(nodes) > 0 && !epuo.mutation.NotificationsPsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.NotificationsPsTable,
			Columns: []string{exam_pa.NotificationsPsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.NotificationsPsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_pa.NotificationsPsTable,
			Columns: []string{exam_pa.NotificationsPsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Exam_PA{config: epuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, epuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exam_pa.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	epuo.mutation.done = true
	return _node, nil
}
