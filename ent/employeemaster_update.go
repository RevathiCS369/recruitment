// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/employeemaster"
	"recruit/ent/exam_applications_ps"
	"recruit/ent/predicate"
	"recruit/ent/usermaster"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmployeeMasterUpdate is the builder for updating EmployeeMaster entities.
type EmployeeMasterUpdate struct {
	config
	hooks    []Hook
	mutation *EmployeeMasterMutation
}

// Where appends a list predicates to the EmployeeMasterUpdate builder.
func (emu *EmployeeMasterUpdate) Where(ps ...predicate.EmployeeMaster) *EmployeeMasterUpdate {
	emu.mutation.Where(ps...)
	return emu
}

// SetEmployeeID sets the "EmployeeID" field.
func (emu *EmployeeMasterUpdate) SetEmployeeID(i int64) *EmployeeMasterUpdate {
	emu.mutation.ResetEmployeeID()
	emu.mutation.SetEmployeeID(i)
	return emu
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (emu *EmployeeMasterUpdate) AddEmployeeID(i int64) *EmployeeMasterUpdate {
	emu.mutation.AddEmployeeID(i)
	return emu
}

// SetEmployeeName sets the "EmployeeName" field.
func (emu *EmployeeMasterUpdate) SetEmployeeName(s string) *EmployeeMasterUpdate {
	emu.mutation.SetEmployeeName(s)
	return emu
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableEmployeeName(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetEmployeeName(*s)
	}
	return emu
}

// ClearEmployeeName clears the value of the "EmployeeName" field.
func (emu *EmployeeMasterUpdate) ClearEmployeeName() *EmployeeMasterUpdate {
	emu.mutation.ClearEmployeeName()
	return emu
}

// SetDOB sets the "DOB" field.
func (emu *EmployeeMasterUpdate) SetDOB(s string) *EmployeeMasterUpdate {
	emu.mutation.SetDOB(s)
	return emu
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableDOB(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetDOB(*s)
	}
	return emu
}

// ClearDOB clears the value of the "DOB" field.
func (emu *EmployeeMasterUpdate) ClearDOB() *EmployeeMasterUpdate {
	emu.mutation.ClearDOB()
	return emu
}

// SetGender sets the "Gender" field.
func (emu *EmployeeMasterUpdate) SetGender(e employeemaster.Gender) *EmployeeMasterUpdate {
	emu.mutation.SetGender(e)
	return emu
}

// SetMobileNumber sets the "MobileNumber" field.
func (emu *EmployeeMasterUpdate) SetMobileNumber(s string) *EmployeeMasterUpdate {
	emu.mutation.SetMobileNumber(s)
	return emu
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableMobileNumber(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetMobileNumber(*s)
	}
	return emu
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (emu *EmployeeMasterUpdate) ClearMobileNumber() *EmployeeMasterUpdate {
	emu.mutation.ClearMobileNumber()
	return emu
}

// SetEmailID sets the "EmailID" field.
func (emu *EmployeeMasterUpdate) SetEmailID(s string) *EmployeeMasterUpdate {
	emu.mutation.SetEmailID(s)
	return emu
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableEmailID(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetEmailID(*s)
	}
	return emu
}

// ClearEmailID clears the value of the "EmailID" field.
func (emu *EmployeeMasterUpdate) ClearEmailID() *EmployeeMasterUpdate {
	emu.mutation.ClearEmailID()
	return emu
}

// SetEmployeeCategoryCode sets the "EmployeeCategoryCode" field.
func (emu *EmployeeMasterUpdate) SetEmployeeCategoryCode(s string) *EmployeeMasterUpdate {
	emu.mutation.SetEmployeeCategoryCode(s)
	return emu
}

// SetNillableEmployeeCategoryCode sets the "EmployeeCategoryCode" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableEmployeeCategoryCode(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetEmployeeCategoryCode(*s)
	}
	return emu
}

// ClearEmployeeCategoryCode clears the value of the "EmployeeCategoryCode" field.
func (emu *EmployeeMasterUpdate) ClearEmployeeCategoryCode() *EmployeeMasterUpdate {
	emu.mutation.ClearEmployeeCategoryCode()
	return emu
}

// SetEmployeeCategory sets the "EmployeeCategory" field.
func (emu *EmployeeMasterUpdate) SetEmployeeCategory(s string) *EmployeeMasterUpdate {
	emu.mutation.SetEmployeeCategory(s)
	return emu
}

// SetNillableEmployeeCategory sets the "EmployeeCategory" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableEmployeeCategory(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetEmployeeCategory(*s)
	}
	return emu
}

// ClearEmployeeCategory clears the value of the "EmployeeCategory" field.
func (emu *EmployeeMasterUpdate) ClearEmployeeCategory() *EmployeeMasterUpdate {
	emu.mutation.ClearEmployeeCategory()
	return emu
}

// SetPostCode sets the "PostCode" field.
func (emu *EmployeeMasterUpdate) SetPostCode(s string) *EmployeeMasterUpdate {
	emu.mutation.SetPostCode(s)
	return emu
}

// SetNillablePostCode sets the "PostCode" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillablePostCode(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetPostCode(*s)
	}
	return emu
}

// ClearPostCode clears the value of the "PostCode" field.
func (emu *EmployeeMasterUpdate) ClearPostCode() *EmployeeMasterUpdate {
	emu.mutation.ClearPostCode()
	return emu
}

// SetEmployeePost sets the "EmployeePost" field.
func (emu *EmployeeMasterUpdate) SetEmployeePost(s string) *EmployeeMasterUpdate {
	emu.mutation.SetEmployeePost(s)
	return emu
}

// SetNillableEmployeePost sets the "EmployeePost" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableEmployeePost(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetEmployeePost(*s)
	}
	return emu
}

// ClearEmployeePost clears the value of the "EmployeePost" field.
func (emu *EmployeeMasterUpdate) ClearEmployeePost() *EmployeeMasterUpdate {
	emu.mutation.ClearEmployeePost()
	return emu
}

// SetFacilityID sets the "FacilityID" field.
func (emu *EmployeeMasterUpdate) SetFacilityID(s string) *EmployeeMasterUpdate {
	emu.mutation.SetFacilityID(s)
	return emu
}

// SetNillableFacilityID sets the "FacilityID" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableFacilityID(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetFacilityID(*s)
	}
	return emu
}

// ClearFacilityID clears the value of the "FacilityID" field.
func (emu *EmployeeMasterUpdate) ClearFacilityID() *EmployeeMasterUpdate {
	emu.mutation.ClearFacilityID()
	return emu
}

// SetDCCS sets the "DCCS" field.
func (emu *EmployeeMasterUpdate) SetDCCS(s string) *EmployeeMasterUpdate {
	emu.mutation.SetDCCS(s)
	return emu
}

// SetNillableDCCS sets the "DCCS" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableDCCS(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetDCCS(*s)
	}
	return emu
}

// ClearDCCS clears the value of the "DCCS" field.
func (emu *EmployeeMasterUpdate) ClearDCCS() *EmployeeMasterUpdate {
	emu.mutation.ClearDCCS()
	return emu
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (emu *EmployeeMasterUpdate) SetDCInPresentCadre(s string) *EmployeeMasterUpdate {
	emu.mutation.SetDCInPresentCadre(s)
	return emu
}

// SetNillableDCInPresentCadre sets the "DCInPresentCadre" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableDCInPresentCadre(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetDCInPresentCadre(*s)
	}
	return emu
}

// ClearDCInPresentCadre clears the value of the "DCInPresentCadre" field.
func (emu *EmployeeMasterUpdate) ClearDCInPresentCadre() *EmployeeMasterUpdate {
	emu.mutation.ClearDCInPresentCadre()
	return emu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (emu *EmployeeMasterUpdate) SetUpdatedAt(t time.Time) *EmployeeMasterUpdate {
	emu.mutation.SetUpdatedAt(t)
	return emu
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableUpdatedAt(t *time.Time) *EmployeeMasterUpdate {
	if t != nil {
		emu.SetUpdatedAt(*t)
	}
	return emu
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (emu *EmployeeMasterUpdate) ClearUpdatedAt() *EmployeeMasterUpdate {
	emu.mutation.ClearUpdatedAt()
	return emu
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (emu *EmployeeMasterUpdate) SetUpdatedBy(s string) *EmployeeMasterUpdate {
	emu.mutation.SetUpdatedBy(s)
	return emu
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableUpdatedBy(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetUpdatedBy(*s)
	}
	return emu
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (emu *EmployeeMasterUpdate) ClearUpdatedBy() *EmployeeMasterUpdate {
	emu.mutation.ClearUpdatedBy()
	return emu
}

// SetCadre sets the "Cadre" field.
func (emu *EmployeeMasterUpdate) SetCadre(s string) *EmployeeMasterUpdate {
	emu.mutation.SetCadre(s)
	return emu
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableCadre(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetCadre(*s)
	}
	return emu
}

// ClearCadre clears the value of the "Cadre" field.
func (emu *EmployeeMasterUpdate) ClearCadre() *EmployeeMasterUpdate {
	emu.mutation.ClearCadre()
	return emu
}

// AddUsermasterRefIDs adds the "UsermasterRef" edge to the UserMaster entity by IDs.
func (emu *EmployeeMasterUpdate) AddUsermasterRefIDs(ids ...int64) *EmployeeMasterUpdate {
	emu.mutation.AddUsermasterRefIDs(ids...)
	return emu
}

// AddUsermasterRef adds the "UsermasterRef" edges to the UserMaster entity.
func (emu *EmployeeMasterUpdate) AddUsermasterRef(u ...*UserMaster) *EmployeeMasterUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return emu.AddUsermasterRefIDs(ids...)
}

// AddEmpRefIDs adds the "Emp_Ref" edge to the Exam_Applications_PS entity by IDs.
func (emu *EmployeeMasterUpdate) AddEmpRefIDs(ids ...int64) *EmployeeMasterUpdate {
	emu.mutation.AddEmpRefIDs(ids...)
	return emu
}

// AddEmpRef adds the "Emp_Ref" edges to the Exam_Applications_PS entity.
func (emu *EmployeeMasterUpdate) AddEmpRef(e ...*Exam_Applications_PS) *EmployeeMasterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return emu.AddEmpRefIDs(ids...)
}

// Mutation returns the EmployeeMasterMutation object of the builder.
func (emu *EmployeeMasterUpdate) Mutation() *EmployeeMasterMutation {
	return emu.mutation
}

// ClearUsermasterRef clears all "UsermasterRef" edges to the UserMaster entity.
func (emu *EmployeeMasterUpdate) ClearUsermasterRef() *EmployeeMasterUpdate {
	emu.mutation.ClearUsermasterRef()
	return emu
}

// RemoveUsermasterRefIDs removes the "UsermasterRef" edge to UserMaster entities by IDs.
func (emu *EmployeeMasterUpdate) RemoveUsermasterRefIDs(ids ...int64) *EmployeeMasterUpdate {
	emu.mutation.RemoveUsermasterRefIDs(ids...)
	return emu
}

// RemoveUsermasterRef removes "UsermasterRef" edges to UserMaster entities.
func (emu *EmployeeMasterUpdate) RemoveUsermasterRef(u ...*UserMaster) *EmployeeMasterUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return emu.RemoveUsermasterRefIDs(ids...)
}

// ClearEmpRef clears all "Emp_Ref" edges to the Exam_Applications_PS entity.
func (emu *EmployeeMasterUpdate) ClearEmpRef() *EmployeeMasterUpdate {
	emu.mutation.ClearEmpRef()
	return emu
}

// RemoveEmpRefIDs removes the "Emp_Ref" edge to Exam_Applications_PS entities by IDs.
func (emu *EmployeeMasterUpdate) RemoveEmpRefIDs(ids ...int64) *EmployeeMasterUpdate {
	emu.mutation.RemoveEmpRefIDs(ids...)
	return emu
}

// RemoveEmpRef removes "Emp_Ref" edges to Exam_Applications_PS entities.
func (emu *EmployeeMasterUpdate) RemoveEmpRef(e ...*Exam_Applications_PS) *EmployeeMasterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return emu.RemoveEmpRefIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (emu *EmployeeMasterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, emu.sqlSave, emu.mutation, emu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (emu *EmployeeMasterUpdate) SaveX(ctx context.Context) int {
	affected, err := emu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (emu *EmployeeMasterUpdate) Exec(ctx context.Context) error {
	_, err := emu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (emu *EmployeeMasterUpdate) ExecX(ctx context.Context) {
	if err := emu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (emu *EmployeeMasterUpdate) check() error {
	if v, ok := emu.mutation.Gender(); ok {
		if err := employeemaster.GenderValidator(v); err != nil {
			return &ValidationError{Name: "Gender", err: fmt.Errorf(`ent: validator failed for field "EmployeeMaster.Gender": %w`, err)}
		}
	}
	return nil
}

func (emu *EmployeeMasterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := emu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(employeemaster.Table, employeemaster.Columns, sqlgraph.NewFieldSpec(employeemaster.FieldID, field.TypeInt64))
	if ps := emu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := emu.mutation.EmployeeID(); ok {
		_spec.SetField(employeemaster.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := emu.mutation.AddedEmployeeID(); ok {
		_spec.AddField(employeemaster.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := emu.mutation.EmployeeName(); ok {
		_spec.SetField(employeemaster.FieldEmployeeName, field.TypeString, value)
	}
	if emu.mutation.EmployeeNameCleared() {
		_spec.ClearField(employeemaster.FieldEmployeeName, field.TypeString)
	}
	if value, ok := emu.mutation.DOB(); ok {
		_spec.SetField(employeemaster.FieldDOB, field.TypeString, value)
	}
	if emu.mutation.DOBCleared() {
		_spec.ClearField(employeemaster.FieldDOB, field.TypeString)
	}
	if value, ok := emu.mutation.Gender(); ok {
		_spec.SetField(employeemaster.FieldGender, field.TypeEnum, value)
	}
	if value, ok := emu.mutation.MobileNumber(); ok {
		_spec.SetField(employeemaster.FieldMobileNumber, field.TypeString, value)
	}
	if emu.mutation.MobileNumberCleared() {
		_spec.ClearField(employeemaster.FieldMobileNumber, field.TypeString)
	}
	if value, ok := emu.mutation.EmailID(); ok {
		_spec.SetField(employeemaster.FieldEmailID, field.TypeString, value)
	}
	if emu.mutation.EmailIDCleared() {
		_spec.ClearField(employeemaster.FieldEmailID, field.TypeString)
	}
	if value, ok := emu.mutation.EmployeeCategoryCode(); ok {
		_spec.SetField(employeemaster.FieldEmployeeCategoryCode, field.TypeString, value)
	}
	if emu.mutation.EmployeeCategoryCodeCleared() {
		_spec.ClearField(employeemaster.FieldEmployeeCategoryCode, field.TypeString)
	}
	if value, ok := emu.mutation.EmployeeCategory(); ok {
		_spec.SetField(employeemaster.FieldEmployeeCategory, field.TypeString, value)
	}
	if emu.mutation.EmployeeCategoryCleared() {
		_spec.ClearField(employeemaster.FieldEmployeeCategory, field.TypeString)
	}
	if value, ok := emu.mutation.PostCode(); ok {
		_spec.SetField(employeemaster.FieldPostCode, field.TypeString, value)
	}
	if emu.mutation.PostCodeCleared() {
		_spec.ClearField(employeemaster.FieldPostCode, field.TypeString)
	}
	if value, ok := emu.mutation.EmployeePost(); ok {
		_spec.SetField(employeemaster.FieldEmployeePost, field.TypeString, value)
	}
	if emu.mutation.EmployeePostCleared() {
		_spec.ClearField(employeemaster.FieldEmployeePost, field.TypeString)
	}
	if value, ok := emu.mutation.FacilityID(); ok {
		_spec.SetField(employeemaster.FieldFacilityID, field.TypeString, value)
	}
	if emu.mutation.FacilityIDCleared() {
		_spec.ClearField(employeemaster.FieldFacilityID, field.TypeString)
	}
	if value, ok := emu.mutation.DCCS(); ok {
		_spec.SetField(employeemaster.FieldDCCS, field.TypeString, value)
	}
	if emu.mutation.DCCSCleared() {
		_spec.ClearField(employeemaster.FieldDCCS, field.TypeString)
	}
	if value, ok := emu.mutation.DCInPresentCadre(); ok {
		_spec.SetField(employeemaster.FieldDCInPresentCadre, field.TypeString, value)
	}
	if emu.mutation.DCInPresentCadreCleared() {
		_spec.ClearField(employeemaster.FieldDCInPresentCadre, field.TypeString)
	}
	if value, ok := emu.mutation.UpdatedAt(); ok {
		_spec.SetField(employeemaster.FieldUpdatedAt, field.TypeTime, value)
	}
	if emu.mutation.UpdatedAtCleared() {
		_spec.ClearField(employeemaster.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := emu.mutation.UpdatedBy(); ok {
		_spec.SetField(employeemaster.FieldUpdatedBy, field.TypeString, value)
	}
	if emu.mutation.UpdatedByCleared() {
		_spec.ClearField(employeemaster.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := emu.mutation.Cadre(); ok {
		_spec.SetField(employeemaster.FieldCadre, field.TypeString, value)
	}
	if emu.mutation.CadreCleared() {
		_spec.ClearField(employeemaster.FieldCadre, field.TypeString)
	}
	if emu.mutation.UsermasterRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.UsermasterRefTable,
			Columns: []string{employeemaster.UsermasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emu.mutation.RemovedUsermasterRefIDs(); len(nodes) > 0 && !emu.mutation.UsermasterRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.UsermasterRefTable,
			Columns: []string{employeemaster.UsermasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emu.mutation.UsermasterRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.UsermasterRefTable,
			Columns: []string{employeemaster.UsermasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if emu.mutation.EmpRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.EmpRefTable,
			Columns: []string{employeemaster.EmpRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emu.mutation.RemovedEmpRefIDs(); len(nodes) > 0 && !emu.mutation.EmpRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.EmpRefTable,
			Columns: []string{employeemaster.EmpRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emu.mutation.EmpRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.EmpRefTable,
			Columns: []string{employeemaster.EmpRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, emu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employeemaster.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	emu.mutation.done = true
	return n, nil
}

// EmployeeMasterUpdateOne is the builder for updating a single EmployeeMaster entity.
type EmployeeMasterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmployeeMasterMutation
}

// SetEmployeeID sets the "EmployeeID" field.
func (emuo *EmployeeMasterUpdateOne) SetEmployeeID(i int64) *EmployeeMasterUpdateOne {
	emuo.mutation.ResetEmployeeID()
	emuo.mutation.SetEmployeeID(i)
	return emuo
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (emuo *EmployeeMasterUpdateOne) AddEmployeeID(i int64) *EmployeeMasterUpdateOne {
	emuo.mutation.AddEmployeeID(i)
	return emuo
}

// SetEmployeeName sets the "EmployeeName" field.
func (emuo *EmployeeMasterUpdateOne) SetEmployeeName(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetEmployeeName(s)
	return emuo
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableEmployeeName(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetEmployeeName(*s)
	}
	return emuo
}

// ClearEmployeeName clears the value of the "EmployeeName" field.
func (emuo *EmployeeMasterUpdateOne) ClearEmployeeName() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearEmployeeName()
	return emuo
}

// SetDOB sets the "DOB" field.
func (emuo *EmployeeMasterUpdateOne) SetDOB(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetDOB(s)
	return emuo
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableDOB(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetDOB(*s)
	}
	return emuo
}

// ClearDOB clears the value of the "DOB" field.
func (emuo *EmployeeMasterUpdateOne) ClearDOB() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearDOB()
	return emuo
}

// SetGender sets the "Gender" field.
func (emuo *EmployeeMasterUpdateOne) SetGender(e employeemaster.Gender) *EmployeeMasterUpdateOne {
	emuo.mutation.SetGender(e)
	return emuo
}

// SetMobileNumber sets the "MobileNumber" field.
func (emuo *EmployeeMasterUpdateOne) SetMobileNumber(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetMobileNumber(s)
	return emuo
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableMobileNumber(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetMobileNumber(*s)
	}
	return emuo
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (emuo *EmployeeMasterUpdateOne) ClearMobileNumber() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearMobileNumber()
	return emuo
}

// SetEmailID sets the "EmailID" field.
func (emuo *EmployeeMasterUpdateOne) SetEmailID(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetEmailID(s)
	return emuo
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableEmailID(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetEmailID(*s)
	}
	return emuo
}

// ClearEmailID clears the value of the "EmailID" field.
func (emuo *EmployeeMasterUpdateOne) ClearEmailID() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearEmailID()
	return emuo
}

// SetEmployeeCategoryCode sets the "EmployeeCategoryCode" field.
func (emuo *EmployeeMasterUpdateOne) SetEmployeeCategoryCode(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetEmployeeCategoryCode(s)
	return emuo
}

// SetNillableEmployeeCategoryCode sets the "EmployeeCategoryCode" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableEmployeeCategoryCode(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetEmployeeCategoryCode(*s)
	}
	return emuo
}

// ClearEmployeeCategoryCode clears the value of the "EmployeeCategoryCode" field.
func (emuo *EmployeeMasterUpdateOne) ClearEmployeeCategoryCode() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearEmployeeCategoryCode()
	return emuo
}

// SetEmployeeCategory sets the "EmployeeCategory" field.
func (emuo *EmployeeMasterUpdateOne) SetEmployeeCategory(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetEmployeeCategory(s)
	return emuo
}

// SetNillableEmployeeCategory sets the "EmployeeCategory" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableEmployeeCategory(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetEmployeeCategory(*s)
	}
	return emuo
}

// ClearEmployeeCategory clears the value of the "EmployeeCategory" field.
func (emuo *EmployeeMasterUpdateOne) ClearEmployeeCategory() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearEmployeeCategory()
	return emuo
}

// SetPostCode sets the "PostCode" field.
func (emuo *EmployeeMasterUpdateOne) SetPostCode(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetPostCode(s)
	return emuo
}

// SetNillablePostCode sets the "PostCode" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillablePostCode(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetPostCode(*s)
	}
	return emuo
}

// ClearPostCode clears the value of the "PostCode" field.
func (emuo *EmployeeMasterUpdateOne) ClearPostCode() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearPostCode()
	return emuo
}

// SetEmployeePost sets the "EmployeePost" field.
func (emuo *EmployeeMasterUpdateOne) SetEmployeePost(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetEmployeePost(s)
	return emuo
}

// SetNillableEmployeePost sets the "EmployeePost" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableEmployeePost(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetEmployeePost(*s)
	}
	return emuo
}

// ClearEmployeePost clears the value of the "EmployeePost" field.
func (emuo *EmployeeMasterUpdateOne) ClearEmployeePost() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearEmployeePost()
	return emuo
}

// SetFacilityID sets the "FacilityID" field.
func (emuo *EmployeeMasterUpdateOne) SetFacilityID(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetFacilityID(s)
	return emuo
}

// SetNillableFacilityID sets the "FacilityID" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableFacilityID(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetFacilityID(*s)
	}
	return emuo
}

// ClearFacilityID clears the value of the "FacilityID" field.
func (emuo *EmployeeMasterUpdateOne) ClearFacilityID() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearFacilityID()
	return emuo
}

// SetDCCS sets the "DCCS" field.
func (emuo *EmployeeMasterUpdateOne) SetDCCS(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetDCCS(s)
	return emuo
}

// SetNillableDCCS sets the "DCCS" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableDCCS(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetDCCS(*s)
	}
	return emuo
}

// ClearDCCS clears the value of the "DCCS" field.
func (emuo *EmployeeMasterUpdateOne) ClearDCCS() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearDCCS()
	return emuo
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (emuo *EmployeeMasterUpdateOne) SetDCInPresentCadre(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetDCInPresentCadre(s)
	return emuo
}

// SetNillableDCInPresentCadre sets the "DCInPresentCadre" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableDCInPresentCadre(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetDCInPresentCadre(*s)
	}
	return emuo
}

// ClearDCInPresentCadre clears the value of the "DCInPresentCadre" field.
func (emuo *EmployeeMasterUpdateOne) ClearDCInPresentCadre() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearDCInPresentCadre()
	return emuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (emuo *EmployeeMasterUpdateOne) SetUpdatedAt(t time.Time) *EmployeeMasterUpdateOne {
	emuo.mutation.SetUpdatedAt(t)
	return emuo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableUpdatedAt(t *time.Time) *EmployeeMasterUpdateOne {
	if t != nil {
		emuo.SetUpdatedAt(*t)
	}
	return emuo
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (emuo *EmployeeMasterUpdateOne) ClearUpdatedAt() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearUpdatedAt()
	return emuo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (emuo *EmployeeMasterUpdateOne) SetUpdatedBy(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetUpdatedBy(s)
	return emuo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableUpdatedBy(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetUpdatedBy(*s)
	}
	return emuo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (emuo *EmployeeMasterUpdateOne) ClearUpdatedBy() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearUpdatedBy()
	return emuo
}

// SetCadre sets the "Cadre" field.
func (emuo *EmployeeMasterUpdateOne) SetCadre(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetCadre(s)
	return emuo
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableCadre(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetCadre(*s)
	}
	return emuo
}

// ClearCadre clears the value of the "Cadre" field.
func (emuo *EmployeeMasterUpdateOne) ClearCadre() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearCadre()
	return emuo
}

// AddUsermasterRefIDs adds the "UsermasterRef" edge to the UserMaster entity by IDs.
func (emuo *EmployeeMasterUpdateOne) AddUsermasterRefIDs(ids ...int64) *EmployeeMasterUpdateOne {
	emuo.mutation.AddUsermasterRefIDs(ids...)
	return emuo
}

// AddUsermasterRef adds the "UsermasterRef" edges to the UserMaster entity.
func (emuo *EmployeeMasterUpdateOne) AddUsermasterRef(u ...*UserMaster) *EmployeeMasterUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return emuo.AddUsermasterRefIDs(ids...)
}

// AddEmpRefIDs adds the "Emp_Ref" edge to the Exam_Applications_PS entity by IDs.
func (emuo *EmployeeMasterUpdateOne) AddEmpRefIDs(ids ...int64) *EmployeeMasterUpdateOne {
	emuo.mutation.AddEmpRefIDs(ids...)
	return emuo
}

// AddEmpRef adds the "Emp_Ref" edges to the Exam_Applications_PS entity.
func (emuo *EmployeeMasterUpdateOne) AddEmpRef(e ...*Exam_Applications_PS) *EmployeeMasterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return emuo.AddEmpRefIDs(ids...)
}

// Mutation returns the EmployeeMasterMutation object of the builder.
func (emuo *EmployeeMasterUpdateOne) Mutation() *EmployeeMasterMutation {
	return emuo.mutation
}

// ClearUsermasterRef clears all "UsermasterRef" edges to the UserMaster entity.
func (emuo *EmployeeMasterUpdateOne) ClearUsermasterRef() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearUsermasterRef()
	return emuo
}

// RemoveUsermasterRefIDs removes the "UsermasterRef" edge to UserMaster entities by IDs.
func (emuo *EmployeeMasterUpdateOne) RemoveUsermasterRefIDs(ids ...int64) *EmployeeMasterUpdateOne {
	emuo.mutation.RemoveUsermasterRefIDs(ids...)
	return emuo
}

// RemoveUsermasterRef removes "UsermasterRef" edges to UserMaster entities.
func (emuo *EmployeeMasterUpdateOne) RemoveUsermasterRef(u ...*UserMaster) *EmployeeMasterUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return emuo.RemoveUsermasterRefIDs(ids...)
}

// ClearEmpRef clears all "Emp_Ref" edges to the Exam_Applications_PS entity.
func (emuo *EmployeeMasterUpdateOne) ClearEmpRef() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearEmpRef()
	return emuo
}

// RemoveEmpRefIDs removes the "Emp_Ref" edge to Exam_Applications_PS entities by IDs.
func (emuo *EmployeeMasterUpdateOne) RemoveEmpRefIDs(ids ...int64) *EmployeeMasterUpdateOne {
	emuo.mutation.RemoveEmpRefIDs(ids...)
	return emuo
}

// RemoveEmpRef removes "Emp_Ref" edges to Exam_Applications_PS entities.
func (emuo *EmployeeMasterUpdateOne) RemoveEmpRef(e ...*Exam_Applications_PS) *EmployeeMasterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return emuo.RemoveEmpRefIDs(ids...)
}

// Where appends a list predicates to the EmployeeMasterUpdate builder.
func (emuo *EmployeeMasterUpdateOne) Where(ps ...predicate.EmployeeMaster) *EmployeeMasterUpdateOne {
	emuo.mutation.Where(ps...)
	return emuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (emuo *EmployeeMasterUpdateOne) Select(field string, fields ...string) *EmployeeMasterUpdateOne {
	emuo.fields = append([]string{field}, fields...)
	return emuo
}

// Save executes the query and returns the updated EmployeeMaster entity.
func (emuo *EmployeeMasterUpdateOne) Save(ctx context.Context) (*EmployeeMaster, error) {
	return withHooks(ctx, emuo.sqlSave, emuo.mutation, emuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (emuo *EmployeeMasterUpdateOne) SaveX(ctx context.Context) *EmployeeMaster {
	node, err := emuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (emuo *EmployeeMasterUpdateOne) Exec(ctx context.Context) error {
	_, err := emuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (emuo *EmployeeMasterUpdateOne) ExecX(ctx context.Context) {
	if err := emuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (emuo *EmployeeMasterUpdateOne) check() error {
	if v, ok := emuo.mutation.Gender(); ok {
		if err := employeemaster.GenderValidator(v); err != nil {
			return &ValidationError{Name: "Gender", err: fmt.Errorf(`ent: validator failed for field "EmployeeMaster.Gender": %w`, err)}
		}
	}
	return nil
}

func (emuo *EmployeeMasterUpdateOne) sqlSave(ctx context.Context) (_node *EmployeeMaster, err error) {
	if err := emuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(employeemaster.Table, employeemaster.Columns, sqlgraph.NewFieldSpec(employeemaster.FieldID, field.TypeInt64))
	id, ok := emuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EmployeeMaster.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := emuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, employeemaster.FieldID)
		for _, f := range fields {
			if !employeemaster.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != employeemaster.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := emuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := emuo.mutation.EmployeeID(); ok {
		_spec.SetField(employeemaster.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := emuo.mutation.AddedEmployeeID(); ok {
		_spec.AddField(employeemaster.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := emuo.mutation.EmployeeName(); ok {
		_spec.SetField(employeemaster.FieldEmployeeName, field.TypeString, value)
	}
	if emuo.mutation.EmployeeNameCleared() {
		_spec.ClearField(employeemaster.FieldEmployeeName, field.TypeString)
	}
	if value, ok := emuo.mutation.DOB(); ok {
		_spec.SetField(employeemaster.FieldDOB, field.TypeString, value)
	}
	if emuo.mutation.DOBCleared() {
		_spec.ClearField(employeemaster.FieldDOB, field.TypeString)
	}
	if value, ok := emuo.mutation.Gender(); ok {
		_spec.SetField(employeemaster.FieldGender, field.TypeEnum, value)
	}
	if value, ok := emuo.mutation.MobileNumber(); ok {
		_spec.SetField(employeemaster.FieldMobileNumber, field.TypeString, value)
	}
	if emuo.mutation.MobileNumberCleared() {
		_spec.ClearField(employeemaster.FieldMobileNumber, field.TypeString)
	}
	if value, ok := emuo.mutation.EmailID(); ok {
		_spec.SetField(employeemaster.FieldEmailID, field.TypeString, value)
	}
	if emuo.mutation.EmailIDCleared() {
		_spec.ClearField(employeemaster.FieldEmailID, field.TypeString)
	}
	if value, ok := emuo.mutation.EmployeeCategoryCode(); ok {
		_spec.SetField(employeemaster.FieldEmployeeCategoryCode, field.TypeString, value)
	}
	if emuo.mutation.EmployeeCategoryCodeCleared() {
		_spec.ClearField(employeemaster.FieldEmployeeCategoryCode, field.TypeString)
	}
	if value, ok := emuo.mutation.EmployeeCategory(); ok {
		_spec.SetField(employeemaster.FieldEmployeeCategory, field.TypeString, value)
	}
	if emuo.mutation.EmployeeCategoryCleared() {
		_spec.ClearField(employeemaster.FieldEmployeeCategory, field.TypeString)
	}
	if value, ok := emuo.mutation.PostCode(); ok {
		_spec.SetField(employeemaster.FieldPostCode, field.TypeString, value)
	}
	if emuo.mutation.PostCodeCleared() {
		_spec.ClearField(employeemaster.FieldPostCode, field.TypeString)
	}
	if value, ok := emuo.mutation.EmployeePost(); ok {
		_spec.SetField(employeemaster.FieldEmployeePost, field.TypeString, value)
	}
	if emuo.mutation.EmployeePostCleared() {
		_spec.ClearField(employeemaster.FieldEmployeePost, field.TypeString)
	}
	if value, ok := emuo.mutation.FacilityID(); ok {
		_spec.SetField(employeemaster.FieldFacilityID, field.TypeString, value)
	}
	if emuo.mutation.FacilityIDCleared() {
		_spec.ClearField(employeemaster.FieldFacilityID, field.TypeString)
	}
	if value, ok := emuo.mutation.DCCS(); ok {
		_spec.SetField(employeemaster.FieldDCCS, field.TypeString, value)
	}
	if emuo.mutation.DCCSCleared() {
		_spec.ClearField(employeemaster.FieldDCCS, field.TypeString)
	}
	if value, ok := emuo.mutation.DCInPresentCadre(); ok {
		_spec.SetField(employeemaster.FieldDCInPresentCadre, field.TypeString, value)
	}
	if emuo.mutation.DCInPresentCadreCleared() {
		_spec.ClearField(employeemaster.FieldDCInPresentCadre, field.TypeString)
	}
	if value, ok := emuo.mutation.UpdatedAt(); ok {
		_spec.SetField(employeemaster.FieldUpdatedAt, field.TypeTime, value)
	}
	if emuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(employeemaster.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := emuo.mutation.UpdatedBy(); ok {
		_spec.SetField(employeemaster.FieldUpdatedBy, field.TypeString, value)
	}
	if emuo.mutation.UpdatedByCleared() {
		_spec.ClearField(employeemaster.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := emuo.mutation.Cadre(); ok {
		_spec.SetField(employeemaster.FieldCadre, field.TypeString, value)
	}
	if emuo.mutation.CadreCleared() {
		_spec.ClearField(employeemaster.FieldCadre, field.TypeString)
	}
	if emuo.mutation.UsermasterRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.UsermasterRefTable,
			Columns: []string{employeemaster.UsermasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emuo.mutation.RemovedUsermasterRefIDs(); len(nodes) > 0 && !emuo.mutation.UsermasterRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.UsermasterRefTable,
			Columns: []string{employeemaster.UsermasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emuo.mutation.UsermasterRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.UsermasterRefTable,
			Columns: []string{employeemaster.UsermasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if emuo.mutation.EmpRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.EmpRefTable,
			Columns: []string{employeemaster.EmpRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emuo.mutation.RemovedEmpRefIDs(); len(nodes) > 0 && !emuo.mutation.EmpRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.EmpRefTable,
			Columns: []string{employeemaster.EmpRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emuo.mutation.EmpRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.EmpRefTable,
			Columns: []string{employeemaster.EmpRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EmployeeMaster{config: emuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, emuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employeemaster.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	emuo.mutation.done = true
	return _node, nil
}
