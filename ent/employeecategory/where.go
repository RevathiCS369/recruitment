// Code generated by ent, DO NOT EDIT.

package employeecategory

import (
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldLTE(FieldID, id))
}

// Categrycode applies equality check predicate on the "Categrycode" field. It's identical to CategrycodeEQ.
func Categrycode(v string) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldEQ(FieldCategrycode, v))
}

// CategoryDescription applies equality check predicate on the "CategoryDescription" field. It's identical to CategoryDescriptionEQ.
func CategoryDescription(v string) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldEQ(FieldCategoryDescription, v))
}

// MinimumMarks applies equality check predicate on the "MinimumMarks" field. It's identical to MinimumMarksEQ.
func MinimumMarks(v int32) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldEQ(FieldMinimumMarks, v))
}

// CategrycodeEQ applies the EQ predicate on the "Categrycode" field.
func CategrycodeEQ(v string) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldEQ(FieldCategrycode, v))
}

// CategrycodeNEQ applies the NEQ predicate on the "Categrycode" field.
func CategrycodeNEQ(v string) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldNEQ(FieldCategrycode, v))
}

// CategrycodeIn applies the In predicate on the "Categrycode" field.
func CategrycodeIn(vs ...string) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldIn(FieldCategrycode, vs...))
}

// CategrycodeNotIn applies the NotIn predicate on the "Categrycode" field.
func CategrycodeNotIn(vs ...string) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldNotIn(FieldCategrycode, vs...))
}

// CategrycodeGT applies the GT predicate on the "Categrycode" field.
func CategrycodeGT(v string) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldGT(FieldCategrycode, v))
}

// CategrycodeGTE applies the GTE predicate on the "Categrycode" field.
func CategrycodeGTE(v string) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldGTE(FieldCategrycode, v))
}

// CategrycodeLT applies the LT predicate on the "Categrycode" field.
func CategrycodeLT(v string) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldLT(FieldCategrycode, v))
}

// CategrycodeLTE applies the LTE predicate on the "Categrycode" field.
func CategrycodeLTE(v string) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldLTE(FieldCategrycode, v))
}

// CategrycodeContains applies the Contains predicate on the "Categrycode" field.
func CategrycodeContains(v string) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldContains(FieldCategrycode, v))
}

// CategrycodeHasPrefix applies the HasPrefix predicate on the "Categrycode" field.
func CategrycodeHasPrefix(v string) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldHasPrefix(FieldCategrycode, v))
}

// CategrycodeHasSuffix applies the HasSuffix predicate on the "Categrycode" field.
func CategrycodeHasSuffix(v string) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldHasSuffix(FieldCategrycode, v))
}

// CategrycodeEqualFold applies the EqualFold predicate on the "Categrycode" field.
func CategrycodeEqualFold(v string) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldEqualFold(FieldCategrycode, v))
}

// CategrycodeContainsFold applies the ContainsFold predicate on the "Categrycode" field.
func CategrycodeContainsFold(v string) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldContainsFold(FieldCategrycode, v))
}

// CategoryDescriptionEQ applies the EQ predicate on the "CategoryDescription" field.
func CategoryDescriptionEQ(v string) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldEQ(FieldCategoryDescription, v))
}

// CategoryDescriptionNEQ applies the NEQ predicate on the "CategoryDescription" field.
func CategoryDescriptionNEQ(v string) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldNEQ(FieldCategoryDescription, v))
}

// CategoryDescriptionIn applies the In predicate on the "CategoryDescription" field.
func CategoryDescriptionIn(vs ...string) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldIn(FieldCategoryDescription, vs...))
}

// CategoryDescriptionNotIn applies the NotIn predicate on the "CategoryDescription" field.
func CategoryDescriptionNotIn(vs ...string) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldNotIn(FieldCategoryDescription, vs...))
}

// CategoryDescriptionGT applies the GT predicate on the "CategoryDescription" field.
func CategoryDescriptionGT(v string) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldGT(FieldCategoryDescription, v))
}

// CategoryDescriptionGTE applies the GTE predicate on the "CategoryDescription" field.
func CategoryDescriptionGTE(v string) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldGTE(FieldCategoryDescription, v))
}

// CategoryDescriptionLT applies the LT predicate on the "CategoryDescription" field.
func CategoryDescriptionLT(v string) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldLT(FieldCategoryDescription, v))
}

// CategoryDescriptionLTE applies the LTE predicate on the "CategoryDescription" field.
func CategoryDescriptionLTE(v string) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldLTE(FieldCategoryDescription, v))
}

// CategoryDescriptionContains applies the Contains predicate on the "CategoryDescription" field.
func CategoryDescriptionContains(v string) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldContains(FieldCategoryDescription, v))
}

// CategoryDescriptionHasPrefix applies the HasPrefix predicate on the "CategoryDescription" field.
func CategoryDescriptionHasPrefix(v string) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldHasPrefix(FieldCategoryDescription, v))
}

// CategoryDescriptionHasSuffix applies the HasSuffix predicate on the "CategoryDescription" field.
func CategoryDescriptionHasSuffix(v string) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldHasSuffix(FieldCategoryDescription, v))
}

// CategoryDescriptionEqualFold applies the EqualFold predicate on the "CategoryDescription" field.
func CategoryDescriptionEqualFold(v string) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldEqualFold(FieldCategoryDescription, v))
}

// CategoryDescriptionContainsFold applies the ContainsFold predicate on the "CategoryDescription" field.
func CategoryDescriptionContainsFold(v string) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldContainsFold(FieldCategoryDescription, v))
}

// MinimumMarksEQ applies the EQ predicate on the "MinimumMarks" field.
func MinimumMarksEQ(v int32) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldEQ(FieldMinimumMarks, v))
}

// MinimumMarksNEQ applies the NEQ predicate on the "MinimumMarks" field.
func MinimumMarksNEQ(v int32) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldNEQ(FieldMinimumMarks, v))
}

// MinimumMarksIn applies the In predicate on the "MinimumMarks" field.
func MinimumMarksIn(vs ...int32) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldIn(FieldMinimumMarks, vs...))
}

// MinimumMarksNotIn applies the NotIn predicate on the "MinimumMarks" field.
func MinimumMarksNotIn(vs ...int32) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldNotIn(FieldMinimumMarks, vs...))
}

// MinimumMarksGT applies the GT predicate on the "MinimumMarks" field.
func MinimumMarksGT(v int32) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldGT(FieldMinimumMarks, v))
}

// MinimumMarksGTE applies the GTE predicate on the "MinimumMarks" field.
func MinimumMarksGTE(v int32) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldGTE(FieldMinimumMarks, v))
}

// MinimumMarksLT applies the LT predicate on the "MinimumMarks" field.
func MinimumMarksLT(v int32) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldLT(FieldMinimumMarks, v))
}

// MinimumMarksLTE applies the LTE predicate on the "MinimumMarks" field.
func MinimumMarksLTE(v int32) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldLTE(FieldMinimumMarks, v))
}

// MinimumMarksIsNil applies the IsNil predicate on the "MinimumMarks" field.
func MinimumMarksIsNil() predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldIsNull(FieldMinimumMarks))
}

// MinimumMarksNotNil applies the NotNil predicate on the "MinimumMarks" field.
func MinimumMarksNotNil() predicate.EmployeeCategory {
	return predicate.EmployeeCategory(sql.FieldNotNull(FieldMinimumMarks))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EmployeeCategory) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EmployeeCategory) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EmployeeCategory) predicate.EmployeeCategory {
	return predicate.EmployeeCategory(func(s *sql.Selector) {
		p(s.Not())
	})
}
