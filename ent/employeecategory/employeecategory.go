// Code generated by ent, DO NOT EDIT.

package employeecategory

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the employeecategory type in the database.
	Label = "employee_category"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "categoryidid"
	// FieldCategrycode holds the string denoting the categrycode field in the database.
	FieldCategrycode = "categrycode"
	// FieldCategoryDescription holds the string denoting the categorydescription field in the database.
	FieldCategoryDescription = "category_description"
	// FieldMinimumMarks holds the string denoting the minimummarks field in the database.
	FieldMinimumMarks = "minimum_marks"
	// Table holds the table name of the employeecategory in the database.
	Table = "EmployeeCategory"
)

// Columns holds all SQL columns for employeecategory fields.
var Columns = []string{
	FieldID,
	FieldCategrycode,
	FieldCategoryDescription,
	FieldMinimumMarks,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the EmployeeCategory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCategrycode orders the results by the Categrycode field.
func ByCategrycode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategrycode, opts...).ToFunc()
}

// ByCategoryDescription orders the results by the CategoryDescription field.
func ByCategoryDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategoryDescription, opts...).ToFunc()
}

// ByMinimumMarks orders the results by the MinimumMarks field.
func ByMinimumMarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinimumMarks, opts...).ToFunc()
}
