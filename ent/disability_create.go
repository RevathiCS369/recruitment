// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/disability"
	"recruit/ent/exampapers"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DisabilityCreate is the builder for creating a Disability entity.
type DisabilityCreate struct {
	config
	mutation *DisabilityMutation
	hooks    []Hook
}

// SetDisabilityTypeCode sets the "DisabilityTypeCode" field.
func (dc *DisabilityCreate) SetDisabilityTypeCode(s string) *DisabilityCreate {
	dc.mutation.SetDisabilityTypeCode(s)
	return dc
}

// SetDisabilityTypeDescription sets the "DisabilityTypeDescription" field.
func (dc *DisabilityCreate) SetDisabilityTypeDescription(s string) *DisabilityCreate {
	dc.mutation.SetDisabilityTypeDescription(s)
	return dc
}

// SetDisabilityPercentage sets the "DisabilityPercentage" field.
func (dc *DisabilityCreate) SetDisabilityPercentage(i int32) *DisabilityCreate {
	dc.mutation.SetDisabilityPercentage(i)
	return dc
}

// SetDisabilityFlag sets the "DisabilityFlag" field.
func (dc *DisabilityCreate) SetDisabilityFlag(df disability.DisabilityFlag) *DisabilityCreate {
	dc.mutation.SetDisabilityFlag(df)
	return dc
}

// SetID sets the "id" field.
func (dc *DisabilityCreate) SetID(i int32) *DisabilityCreate {
	dc.mutation.SetID(i)
	return dc
}

// AddDisRefIDs adds the "dis_ref" edge to the ExamPapers entity by IDs.
func (dc *DisabilityCreate) AddDisRefIDs(ids ...int32) *DisabilityCreate {
	dc.mutation.AddDisRefIDs(ids...)
	return dc
}

// AddDisRef adds the "dis_ref" edges to the ExamPapers entity.
func (dc *DisabilityCreate) AddDisRef(e ...*ExamPapers) *DisabilityCreate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return dc.AddDisRefIDs(ids...)
}

// Mutation returns the DisabilityMutation object of the builder.
func (dc *DisabilityCreate) Mutation() *DisabilityMutation {
	return dc.mutation
}

// Save creates the Disability in the database.
func (dc *DisabilityCreate) Save(ctx context.Context) (*Disability, error) {
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DisabilityCreate) SaveX(ctx context.Context) *Disability {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DisabilityCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DisabilityCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DisabilityCreate) check() error {
	if _, ok := dc.mutation.DisabilityTypeCode(); !ok {
		return &ValidationError{Name: "DisabilityTypeCode", err: errors.New(`ent: missing required field "Disability.DisabilityTypeCode"`)}
	}
	if _, ok := dc.mutation.DisabilityTypeDescription(); !ok {
		return &ValidationError{Name: "DisabilityTypeDescription", err: errors.New(`ent: missing required field "Disability.DisabilityTypeDescription"`)}
	}
	if _, ok := dc.mutation.DisabilityPercentage(); !ok {
		return &ValidationError{Name: "DisabilityPercentage", err: errors.New(`ent: missing required field "Disability.DisabilityPercentage"`)}
	}
	if _, ok := dc.mutation.DisabilityFlag(); !ok {
		return &ValidationError{Name: "DisabilityFlag", err: errors.New(`ent: missing required field "Disability.DisabilityFlag"`)}
	}
	if v, ok := dc.mutation.DisabilityFlag(); ok {
		if err := disability.DisabilityFlagValidator(v); err != nil {
			return &ValidationError{Name: "DisabilityFlag", err: fmt.Errorf(`ent: validator failed for field "Disability.DisabilityFlag": %w`, err)}
		}
	}
	return nil
}

func (dc *DisabilityCreate) sqlSave(ctx context.Context) (*Disability, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DisabilityCreate) createSpec() (*Disability, *sqlgraph.CreateSpec) {
	var (
		_node = &Disability{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(disability.Table, sqlgraph.NewFieldSpec(disability.FieldID, field.TypeInt32))
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.DisabilityTypeCode(); ok {
		_spec.SetField(disability.FieldDisabilityTypeCode, field.TypeString, value)
		_node.DisabilityTypeCode = value
	}
	if value, ok := dc.mutation.DisabilityTypeDescription(); ok {
		_spec.SetField(disability.FieldDisabilityTypeDescription, field.TypeString, value)
		_node.DisabilityTypeDescription = value
	}
	if value, ok := dc.mutation.DisabilityPercentage(); ok {
		_spec.SetField(disability.FieldDisabilityPercentage, field.TypeInt32, value)
		_node.DisabilityPercentage = value
	}
	if value, ok := dc.mutation.DisabilityFlag(); ok {
		_spec.SetField(disability.FieldDisabilityFlag, field.TypeEnum, value)
		_node.DisabilityFlag = value
	}
	if nodes := dc.mutation.DisRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   disability.DisRefTable,
			Columns: []string{disability.DisRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DisabilityCreateBulk is the builder for creating many Disability entities in bulk.
type DisabilityCreateBulk struct {
	config
	builders []*DisabilityCreate
}

// Save creates the Disability entities in the database.
func (dcb *DisabilityCreateBulk) Save(ctx context.Context) ([]*Disability, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Disability, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DisabilityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DisabilityCreateBulk) SaveX(ctx context.Context) []*Disability {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DisabilityCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DisabilityCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
