// Code generated by ent, DO NOT EDIT.

package divisionmaster

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the divisionmaster type in the database.
	Label = "division_master"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "DivisionID"
	// FieldDivisionCode holds the string denoting the divisioncode field in the database.
	FieldDivisionCode = "division_code"
	// FieldOfficeType holds the string denoting the officetype field in the database.
	FieldOfficeType = "office_type"
	// FieldDivisionOfficeID holds the string denoting the divisionofficeid field in the database.
	FieldDivisionOfficeID = "division_office_id"
	// FieldDivisionOfficeName holds the string denoting the divisionofficename field in the database.
	FieldDivisionOfficeName = "division_office_name"
	// FieldReportingOfficeType holds the string denoting the reportingofficetype field in the database.
	FieldReportingOfficeType = "reporting_office_type"
	// FieldReportingOfficeCode holds the string denoting the reportingofficecode field in the database.
	FieldReportingOfficeCode = "reporting_office_code"
	// FieldEmailID holds the string denoting the emailid field in the database.
	FieldEmailID = "email_id"
	// FieldMobileNumber holds the string denoting the mobilenumber field in the database.
	FieldMobileNumber = "mobile_number"
	// FieldRegionCode holds the string denoting the regioncode field in the database.
	FieldRegionCode = "region_code"
	// EdgeRegions holds the string denoting the regions edge name in mutations.
	EdgeRegions = "regions"
	// RegionMasterFieldID holds the string denoting the ID field of the RegionMaster.
	RegionMasterFieldID = "RegionID"
	// Table holds the table name of the divisionmaster in the database.
	Table = "DivisionMaster"
	// RegionsTable is the table that holds the regions relation/edge.
	RegionsTable = "RegionMaster"
	// RegionsInverseTable is the table name for the RegionMaster entity.
	// It exists in this package in order to avoid circular dependency with the "regionmaster" package.
	RegionsInverseTable = "RegionMaster"
	// RegionsColumn is the table column denoting the regions relation/edge.
	RegionsColumn = "division_master_regions"
)

// Columns holds all SQL columns for divisionmaster fields.
var Columns = []string{
	FieldID,
	FieldDivisionCode,
	FieldOfficeType,
	FieldDivisionOfficeID,
	FieldDivisionOfficeName,
	FieldReportingOfficeType,
	FieldReportingOfficeCode,
	FieldEmailID,
	FieldMobileNumber,
	FieldRegionCode,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "DivisionMaster"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"region_master_regions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the DivisionMaster queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDivisionCode orders the results by the DivisionCode field.
func ByDivisionCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDivisionCode, opts...).ToFunc()
}

// ByOfficeType orders the results by the OfficeType field.
func ByOfficeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOfficeType, opts...).ToFunc()
}

// ByDivisionOfficeID orders the results by the DivisionOfficeID field.
func ByDivisionOfficeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDivisionOfficeID, opts...).ToFunc()
}

// ByDivisionOfficeName orders the results by the DivisionOfficeName field.
func ByDivisionOfficeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDivisionOfficeName, opts...).ToFunc()
}

// ByReportingOfficeType orders the results by the ReportingOfficeType field.
func ByReportingOfficeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReportingOfficeType, opts...).ToFunc()
}

// ByReportingOfficeCode orders the results by the ReportingOfficeCode field.
func ByReportingOfficeCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReportingOfficeCode, opts...).ToFunc()
}

// ByEmailID orders the results by the EmailID field.
func ByEmailID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailID, opts...).ToFunc()
}

// ByMobileNumber orders the results by the MobileNumber field.
func ByMobileNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobileNumber, opts...).ToFunc()
}

// ByRegionCode orders the results by the RegionCode field.
func ByRegionCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegionCode, opts...).ToFunc()
}

// ByRegionsCount orders the results by regions count.
func ByRegionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRegionsStep(), opts...)
	}
}

// ByRegions orders the results by regions terms.
func ByRegions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRegionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRegionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RegionsInverseTable, RegionMasterFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RegionsTable, RegionsColumn),
	)
}
