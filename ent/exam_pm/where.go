// Code generated by ent, DO NOT EDIT.

package exam_pm

import (
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldID, id))
}

// ExamNameCode applies equality check predicate on the "ExamNameCode" field. It's identical to ExamNameCodeEQ.
func ExamNameCode(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamNameCode, v))
}

// ExamName applies equality check predicate on the "ExamName" field. It's identical to ExamNameEQ.
func ExamName(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamName, v))
}

// ExamType applies equality check predicate on the "ExamType" field. It's identical to ExamTypeEQ.
func ExamType(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamType, v))
}

// NotificationCode applies equality check predicate on the "NotificationCode" field. It's identical to NotificationCodeEQ.
func NotificationCode(v int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldNotificationCode, v))
}

// ConductedBy applies equality check predicate on the "ConductedBy" field. It's identical to ConductedByEQ.
func ConductedBy(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldConductedBy, v))
}

// NodalOffice applies equality check predicate on the "NodalOffice" field. It's identical to NodalOfficeEQ.
func NodalOffice(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldNodalOffice, v))
}

// CalendarCode applies equality check predicate on the "CalendarCode" field. It's identical to CalendarCodeEQ.
func CalendarCode(v int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldCalendarCode, v))
}

// PaperCode applies equality check predicate on the "PaperCode" field. It's identical to PaperCodeEQ.
func PaperCode(v int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldPaperCode, v))
}

// EligibleCadre applies equality check predicate on the "EligibleCadre" field. It's identical to EligibleCadreEQ.
func EligibleCadre(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldEligibleCadre, v))
}

// EligiblePost1 applies equality check predicate on the "EligiblePost1" field. It's identical to EligiblePost1EQ.
func EligiblePost1(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldEligiblePost1, v))
}

// EligiblePost2 applies equality check predicate on the "EligiblePost2" field. It's identical to EligiblePost2EQ.
func EligiblePost2(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldEligiblePost2, v))
}

// EligiblePost3 applies equality check predicate on the "EligiblePost3" field. It's identical to EligiblePost3EQ.
func EligiblePost3(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldEligiblePost3, v))
}

// EligiblePost4 applies equality check predicate on the "EligiblePost4" field. It's identical to EligiblePost4EQ.
func EligiblePost4(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldEligiblePost4, v))
}

// EligiblePost5 applies equality check predicate on the "EligiblePost5" field. It's identical to EligiblePost5EQ.
func EligiblePost5(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldEligiblePost5, v))
}

// ExamPost1 applies equality check predicate on the "ExamPost1" field. It's identical to ExamPost1EQ.
func ExamPost1(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamPost1, v))
}

// ExamPost2 applies equality check predicate on the "ExamPost2" field. It's identical to ExamPost2EQ.
func ExamPost2(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamPost2, v))
}

// ExamPost3 applies equality check predicate on the "ExamPost3" field. It's identical to ExamPost3EQ.
func ExamPost3(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamPost3, v))
}

// ExamPost4 applies equality check predicate on the "ExamPost4" field. It's identical to ExamPost4EQ.
func ExamPost4(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamPost4, v))
}

// ExamPost5 applies equality check predicate on the "ExamPost5" field. It's identical to ExamPost5EQ.
func ExamPost5(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamPost5, v))
}

// EducationCriteria applies equality check predicate on the "EducationCriteria" field. It's identical to EducationCriteriaEQ.
func EducationCriteria(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldEducationCriteria, v))
}

// CategoryAgeLimitGEN applies equality check predicate on the "CategoryAgeLimitGEN" field. It's identical to CategoryAgeLimitGENEQ.
func CategoryAgeLimitGEN(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldCategoryAgeLimitGEN, v))
}

// CategoryAgeLimitSC applies equality check predicate on the "CategoryAgeLimitSC" field. It's identical to CategoryAgeLimitSCEQ.
func CategoryAgeLimitSC(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldCategoryAgeLimitSC, v))
}

// CategoryAgeLimitST applies equality check predicate on the "CategoryAgeLimitST" field. It's identical to CategoryAgeLimitSTEQ.
func CategoryAgeLimitST(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldCategoryAgeLimitST, v))
}

// ServiceYears applies equality check predicate on the "ServiceYears" field. It's identical to ServiceYearsEQ.
func ServiceYears(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldServiceYears, v))
}

// DrivingLicenseRequired applies equality check predicate on the "DrivingLicenseRequired" field. It's identical to DrivingLicenseRequiredEQ.
func DrivingLicenseRequired(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldDrivingLicenseRequired, v))
}

// ExamPaperCode applies equality check predicate on the "ExamPaperCode" field. It's identical to ExamPaperCodeEQ.
func ExamPaperCode(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamPaperCode, v))
}

// ExamPaper1 applies equality check predicate on the "ExamPaper1" field. It's identical to ExamPaper1EQ.
func ExamPaper1(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamPaper1, v))
}

// ExamPaper2 applies equality check predicate on the "ExamPaper2" field. It's identical to ExamPaper2EQ.
func ExamPaper2(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamPaper2, v))
}

// ExamPaper3 applies equality check predicate on the "ExamPaper3" field. It's identical to ExamPaper3EQ.
func ExamPaper3(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamPaper3, v))
}

// ExamPaper4 applies equality check predicate on the "ExamPaper4" field. It's identical to ExamPaper4EQ.
func ExamPaper4(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamPaper4, v))
}

// ExamPaper5 applies equality check predicate on the "ExamPaper5" field. It's identical to ExamPaper5EQ.
func ExamPaper5(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamPaper5, v))
}

// ExamPaper6 applies equality check predicate on the "ExamPaper6" field. It's identical to ExamPaper6EQ.
func ExamPaper6(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamPaper6, v))
}

// PayLevelEligibilty applies equality check predicate on the "PayLevelEligibilty" field. It's identical to PayLevelEligibiltyEQ.
func PayLevelEligibilty(v bool) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldPayLevelEligibilty, v))
}

// CategoryMinMarksSCSTPH applies equality check predicate on the "CategoryMinMarksSCSTPH" field. It's identical to CategoryMinMarksSCSTPHEQ.
func CategoryMinMarksSCSTPH(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldCategoryMinMarksSCSTPH, v))
}

// CategoryMinMarksGENOBC applies equality check predicate on the "CategoryMinMarksGENOBC" field. It's identical to CategoryMinMarksGENOBCEQ.
func CategoryMinMarksGENOBC(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldCategoryMinMarksGENOBC, v))
}

// LocalLanguageAllowed applies equality check predicate on the "LocalLanguageAllowed" field. It's identical to LocalLanguageAllowedEQ.
func LocalLanguageAllowed(v bool) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldLocalLanguageAllowed, v))
}

// UpdatedAt applies equality check predicate on the "UpdatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedBy applies equality check predicate on the "UpdatedBy" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldUpdatedBy, v))
}

// ExamNameCodeEQ applies the EQ predicate on the "ExamNameCode" field.
func ExamNameCodeEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamNameCode, v))
}

// ExamNameCodeNEQ applies the NEQ predicate on the "ExamNameCode" field.
func ExamNameCodeNEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldExamNameCode, v))
}

// ExamNameCodeIn applies the In predicate on the "ExamNameCode" field.
func ExamNameCodeIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldExamNameCode, vs...))
}

// ExamNameCodeNotIn applies the NotIn predicate on the "ExamNameCode" field.
func ExamNameCodeNotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldExamNameCode, vs...))
}

// ExamNameCodeGT applies the GT predicate on the "ExamNameCode" field.
func ExamNameCodeGT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldExamNameCode, v))
}

// ExamNameCodeGTE applies the GTE predicate on the "ExamNameCode" field.
func ExamNameCodeGTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldExamNameCode, v))
}

// ExamNameCodeLT applies the LT predicate on the "ExamNameCode" field.
func ExamNameCodeLT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldExamNameCode, v))
}

// ExamNameCodeLTE applies the LTE predicate on the "ExamNameCode" field.
func ExamNameCodeLTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldExamNameCode, v))
}

// ExamNameCodeContains applies the Contains predicate on the "ExamNameCode" field.
func ExamNameCodeContains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldExamNameCode, v))
}

// ExamNameCodeHasPrefix applies the HasPrefix predicate on the "ExamNameCode" field.
func ExamNameCodeHasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldExamNameCode, v))
}

// ExamNameCodeHasSuffix applies the HasSuffix predicate on the "ExamNameCode" field.
func ExamNameCodeHasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldExamNameCode, v))
}

// ExamNameCodeIsNil applies the IsNil predicate on the "ExamNameCode" field.
func ExamNameCodeIsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldExamNameCode))
}

// ExamNameCodeNotNil applies the NotNil predicate on the "ExamNameCode" field.
func ExamNameCodeNotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldExamNameCode))
}

// ExamNameCodeEqualFold applies the EqualFold predicate on the "ExamNameCode" field.
func ExamNameCodeEqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldExamNameCode, v))
}

// ExamNameCodeContainsFold applies the ContainsFold predicate on the "ExamNameCode" field.
func ExamNameCodeContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldExamNameCode, v))
}

// ExamNameEQ applies the EQ predicate on the "ExamName" field.
func ExamNameEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamName, v))
}

// ExamNameNEQ applies the NEQ predicate on the "ExamName" field.
func ExamNameNEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldExamName, v))
}

// ExamNameIn applies the In predicate on the "ExamName" field.
func ExamNameIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldExamName, vs...))
}

// ExamNameNotIn applies the NotIn predicate on the "ExamName" field.
func ExamNameNotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldExamName, vs...))
}

// ExamNameGT applies the GT predicate on the "ExamName" field.
func ExamNameGT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldExamName, v))
}

// ExamNameGTE applies the GTE predicate on the "ExamName" field.
func ExamNameGTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldExamName, v))
}

// ExamNameLT applies the LT predicate on the "ExamName" field.
func ExamNameLT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldExamName, v))
}

// ExamNameLTE applies the LTE predicate on the "ExamName" field.
func ExamNameLTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldExamName, v))
}

// ExamNameContains applies the Contains predicate on the "ExamName" field.
func ExamNameContains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldExamName, v))
}

// ExamNameHasPrefix applies the HasPrefix predicate on the "ExamName" field.
func ExamNameHasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldExamName, v))
}

// ExamNameHasSuffix applies the HasSuffix predicate on the "ExamName" field.
func ExamNameHasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldExamName, v))
}

// ExamNameEqualFold applies the EqualFold predicate on the "ExamName" field.
func ExamNameEqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldExamName, v))
}

// ExamNameContainsFold applies the ContainsFold predicate on the "ExamName" field.
func ExamNameContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldExamName, v))
}

// ExamTypeEQ applies the EQ predicate on the "ExamType" field.
func ExamTypeEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamType, v))
}

// ExamTypeNEQ applies the NEQ predicate on the "ExamType" field.
func ExamTypeNEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldExamType, v))
}

// ExamTypeIn applies the In predicate on the "ExamType" field.
func ExamTypeIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldExamType, vs...))
}

// ExamTypeNotIn applies the NotIn predicate on the "ExamType" field.
func ExamTypeNotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldExamType, vs...))
}

// ExamTypeGT applies the GT predicate on the "ExamType" field.
func ExamTypeGT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldExamType, v))
}

// ExamTypeGTE applies the GTE predicate on the "ExamType" field.
func ExamTypeGTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldExamType, v))
}

// ExamTypeLT applies the LT predicate on the "ExamType" field.
func ExamTypeLT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldExamType, v))
}

// ExamTypeLTE applies the LTE predicate on the "ExamType" field.
func ExamTypeLTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldExamType, v))
}

// ExamTypeContains applies the Contains predicate on the "ExamType" field.
func ExamTypeContains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldExamType, v))
}

// ExamTypeHasPrefix applies the HasPrefix predicate on the "ExamType" field.
func ExamTypeHasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldExamType, v))
}

// ExamTypeHasSuffix applies the HasSuffix predicate on the "ExamType" field.
func ExamTypeHasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldExamType, v))
}

// ExamTypeEqualFold applies the EqualFold predicate on the "ExamType" field.
func ExamTypeEqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldExamType, v))
}

// ExamTypeContainsFold applies the ContainsFold predicate on the "ExamType" field.
func ExamTypeContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldExamType, v))
}

// NotificationCodeEQ applies the EQ predicate on the "NotificationCode" field.
func NotificationCodeEQ(v int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldNotificationCode, v))
}

// NotificationCodeNEQ applies the NEQ predicate on the "NotificationCode" field.
func NotificationCodeNEQ(v int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldNotificationCode, v))
}

// NotificationCodeIn applies the In predicate on the "NotificationCode" field.
func NotificationCodeIn(vs ...int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldNotificationCode, vs...))
}

// NotificationCodeNotIn applies the NotIn predicate on the "NotificationCode" field.
func NotificationCodeNotIn(vs ...int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldNotificationCode, vs...))
}

// NotificationCodeGT applies the GT predicate on the "NotificationCode" field.
func NotificationCodeGT(v int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldNotificationCode, v))
}

// NotificationCodeGTE applies the GTE predicate on the "NotificationCode" field.
func NotificationCodeGTE(v int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldNotificationCode, v))
}

// NotificationCodeLT applies the LT predicate on the "NotificationCode" field.
func NotificationCodeLT(v int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldNotificationCode, v))
}

// NotificationCodeLTE applies the LTE predicate on the "NotificationCode" field.
func NotificationCodeLTE(v int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldNotificationCode, v))
}

// NotificationCodeIsNil applies the IsNil predicate on the "NotificationCode" field.
func NotificationCodeIsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldNotificationCode))
}

// NotificationCodeNotNil applies the NotNil predicate on the "NotificationCode" field.
func NotificationCodeNotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldNotificationCode))
}

// ConductedByEQ applies the EQ predicate on the "ConductedBy" field.
func ConductedByEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldConductedBy, v))
}

// ConductedByNEQ applies the NEQ predicate on the "ConductedBy" field.
func ConductedByNEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldConductedBy, v))
}

// ConductedByIn applies the In predicate on the "ConductedBy" field.
func ConductedByIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldConductedBy, vs...))
}

// ConductedByNotIn applies the NotIn predicate on the "ConductedBy" field.
func ConductedByNotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldConductedBy, vs...))
}

// ConductedByGT applies the GT predicate on the "ConductedBy" field.
func ConductedByGT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldConductedBy, v))
}

// ConductedByGTE applies the GTE predicate on the "ConductedBy" field.
func ConductedByGTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldConductedBy, v))
}

// ConductedByLT applies the LT predicate on the "ConductedBy" field.
func ConductedByLT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldConductedBy, v))
}

// ConductedByLTE applies the LTE predicate on the "ConductedBy" field.
func ConductedByLTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldConductedBy, v))
}

// ConductedByContains applies the Contains predicate on the "ConductedBy" field.
func ConductedByContains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldConductedBy, v))
}

// ConductedByHasPrefix applies the HasPrefix predicate on the "ConductedBy" field.
func ConductedByHasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldConductedBy, v))
}

// ConductedByHasSuffix applies the HasSuffix predicate on the "ConductedBy" field.
func ConductedByHasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldConductedBy, v))
}

// ConductedByEqualFold applies the EqualFold predicate on the "ConductedBy" field.
func ConductedByEqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldConductedBy, v))
}

// ConductedByContainsFold applies the ContainsFold predicate on the "ConductedBy" field.
func ConductedByContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldConductedBy, v))
}

// NodalOfficeEQ applies the EQ predicate on the "NodalOffice" field.
func NodalOfficeEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldNodalOffice, v))
}

// NodalOfficeNEQ applies the NEQ predicate on the "NodalOffice" field.
func NodalOfficeNEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldNodalOffice, v))
}

// NodalOfficeIn applies the In predicate on the "NodalOffice" field.
func NodalOfficeIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldNodalOffice, vs...))
}

// NodalOfficeNotIn applies the NotIn predicate on the "NodalOffice" field.
func NodalOfficeNotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldNodalOffice, vs...))
}

// NodalOfficeGT applies the GT predicate on the "NodalOffice" field.
func NodalOfficeGT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldNodalOffice, v))
}

// NodalOfficeGTE applies the GTE predicate on the "NodalOffice" field.
func NodalOfficeGTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldNodalOffice, v))
}

// NodalOfficeLT applies the LT predicate on the "NodalOffice" field.
func NodalOfficeLT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldNodalOffice, v))
}

// NodalOfficeLTE applies the LTE predicate on the "NodalOffice" field.
func NodalOfficeLTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldNodalOffice, v))
}

// NodalOfficeContains applies the Contains predicate on the "NodalOffice" field.
func NodalOfficeContains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldNodalOffice, v))
}

// NodalOfficeHasPrefix applies the HasPrefix predicate on the "NodalOffice" field.
func NodalOfficeHasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldNodalOffice, v))
}

// NodalOfficeHasSuffix applies the HasSuffix predicate on the "NodalOffice" field.
func NodalOfficeHasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldNodalOffice, v))
}

// NodalOfficeIsNil applies the IsNil predicate on the "NodalOffice" field.
func NodalOfficeIsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldNodalOffice))
}

// NodalOfficeNotNil applies the NotNil predicate on the "NodalOffice" field.
func NodalOfficeNotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldNodalOffice))
}

// NodalOfficeEqualFold applies the EqualFold predicate on the "NodalOffice" field.
func NodalOfficeEqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldNodalOffice, v))
}

// NodalOfficeContainsFold applies the ContainsFold predicate on the "NodalOffice" field.
func NodalOfficeContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldNodalOffice, v))
}

// CalendarCodeEQ applies the EQ predicate on the "CalendarCode" field.
func CalendarCodeEQ(v int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldCalendarCode, v))
}

// CalendarCodeNEQ applies the NEQ predicate on the "CalendarCode" field.
func CalendarCodeNEQ(v int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldCalendarCode, v))
}

// CalendarCodeIn applies the In predicate on the "CalendarCode" field.
func CalendarCodeIn(vs ...int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldCalendarCode, vs...))
}

// CalendarCodeNotIn applies the NotIn predicate on the "CalendarCode" field.
func CalendarCodeNotIn(vs ...int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldCalendarCode, vs...))
}

// CalendarCodeGT applies the GT predicate on the "CalendarCode" field.
func CalendarCodeGT(v int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldCalendarCode, v))
}

// CalendarCodeGTE applies the GTE predicate on the "CalendarCode" field.
func CalendarCodeGTE(v int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldCalendarCode, v))
}

// CalendarCodeLT applies the LT predicate on the "CalendarCode" field.
func CalendarCodeLT(v int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldCalendarCode, v))
}

// CalendarCodeLTE applies the LTE predicate on the "CalendarCode" field.
func CalendarCodeLTE(v int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldCalendarCode, v))
}

// CalendarCodeIsNil applies the IsNil predicate on the "CalendarCode" field.
func CalendarCodeIsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldCalendarCode))
}

// CalendarCodeNotNil applies the NotNil predicate on the "CalendarCode" field.
func CalendarCodeNotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldCalendarCode))
}

// PaperCodeEQ applies the EQ predicate on the "PaperCode" field.
func PaperCodeEQ(v int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldPaperCode, v))
}

// PaperCodeNEQ applies the NEQ predicate on the "PaperCode" field.
func PaperCodeNEQ(v int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldPaperCode, v))
}

// PaperCodeIn applies the In predicate on the "PaperCode" field.
func PaperCodeIn(vs ...int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldPaperCode, vs...))
}

// PaperCodeNotIn applies the NotIn predicate on the "PaperCode" field.
func PaperCodeNotIn(vs ...int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldPaperCode, vs...))
}

// PaperCodeGT applies the GT predicate on the "PaperCode" field.
func PaperCodeGT(v int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldPaperCode, v))
}

// PaperCodeGTE applies the GTE predicate on the "PaperCode" field.
func PaperCodeGTE(v int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldPaperCode, v))
}

// PaperCodeLT applies the LT predicate on the "PaperCode" field.
func PaperCodeLT(v int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldPaperCode, v))
}

// PaperCodeLTE applies the LTE predicate on the "PaperCode" field.
func PaperCodeLTE(v int32) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldPaperCode, v))
}

// PaperCodeIsNil applies the IsNil predicate on the "PaperCode" field.
func PaperCodeIsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldPaperCode))
}

// PaperCodeNotNil applies the NotNil predicate on the "PaperCode" field.
func PaperCodeNotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldPaperCode))
}

// EligibleCadreEQ applies the EQ predicate on the "EligibleCadre" field.
func EligibleCadreEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldEligibleCadre, v))
}

// EligibleCadreNEQ applies the NEQ predicate on the "EligibleCadre" field.
func EligibleCadreNEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldEligibleCadre, v))
}

// EligibleCadreIn applies the In predicate on the "EligibleCadre" field.
func EligibleCadreIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldEligibleCadre, vs...))
}

// EligibleCadreNotIn applies the NotIn predicate on the "EligibleCadre" field.
func EligibleCadreNotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldEligibleCadre, vs...))
}

// EligibleCadreGT applies the GT predicate on the "EligibleCadre" field.
func EligibleCadreGT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldEligibleCadre, v))
}

// EligibleCadreGTE applies the GTE predicate on the "EligibleCadre" field.
func EligibleCadreGTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldEligibleCadre, v))
}

// EligibleCadreLT applies the LT predicate on the "EligibleCadre" field.
func EligibleCadreLT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldEligibleCadre, v))
}

// EligibleCadreLTE applies the LTE predicate on the "EligibleCadre" field.
func EligibleCadreLTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldEligibleCadre, v))
}

// EligibleCadreContains applies the Contains predicate on the "EligibleCadre" field.
func EligibleCadreContains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldEligibleCadre, v))
}

// EligibleCadreHasPrefix applies the HasPrefix predicate on the "EligibleCadre" field.
func EligibleCadreHasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldEligibleCadre, v))
}

// EligibleCadreHasSuffix applies the HasSuffix predicate on the "EligibleCadre" field.
func EligibleCadreHasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldEligibleCadre, v))
}

// EligibleCadreIsNil applies the IsNil predicate on the "EligibleCadre" field.
func EligibleCadreIsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldEligibleCadre))
}

// EligibleCadreNotNil applies the NotNil predicate on the "EligibleCadre" field.
func EligibleCadreNotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldEligibleCadre))
}

// EligibleCadreEqualFold applies the EqualFold predicate on the "EligibleCadre" field.
func EligibleCadreEqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldEligibleCadre, v))
}

// EligibleCadreContainsFold applies the ContainsFold predicate on the "EligibleCadre" field.
func EligibleCadreContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldEligibleCadre, v))
}

// EligiblePost1EQ applies the EQ predicate on the "EligiblePost1" field.
func EligiblePost1EQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldEligiblePost1, v))
}

// EligiblePost1NEQ applies the NEQ predicate on the "EligiblePost1" field.
func EligiblePost1NEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldEligiblePost1, v))
}

// EligiblePost1In applies the In predicate on the "EligiblePost1" field.
func EligiblePost1In(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldEligiblePost1, vs...))
}

// EligiblePost1NotIn applies the NotIn predicate on the "EligiblePost1" field.
func EligiblePost1NotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldEligiblePost1, vs...))
}

// EligiblePost1GT applies the GT predicate on the "EligiblePost1" field.
func EligiblePost1GT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldEligiblePost1, v))
}

// EligiblePost1GTE applies the GTE predicate on the "EligiblePost1" field.
func EligiblePost1GTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldEligiblePost1, v))
}

// EligiblePost1LT applies the LT predicate on the "EligiblePost1" field.
func EligiblePost1LT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldEligiblePost1, v))
}

// EligiblePost1LTE applies the LTE predicate on the "EligiblePost1" field.
func EligiblePost1LTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldEligiblePost1, v))
}

// EligiblePost1Contains applies the Contains predicate on the "EligiblePost1" field.
func EligiblePost1Contains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldEligiblePost1, v))
}

// EligiblePost1HasPrefix applies the HasPrefix predicate on the "EligiblePost1" field.
func EligiblePost1HasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldEligiblePost1, v))
}

// EligiblePost1HasSuffix applies the HasSuffix predicate on the "EligiblePost1" field.
func EligiblePost1HasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldEligiblePost1, v))
}

// EligiblePost1IsNil applies the IsNil predicate on the "EligiblePost1" field.
func EligiblePost1IsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldEligiblePost1))
}

// EligiblePost1NotNil applies the NotNil predicate on the "EligiblePost1" field.
func EligiblePost1NotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldEligiblePost1))
}

// EligiblePost1EqualFold applies the EqualFold predicate on the "EligiblePost1" field.
func EligiblePost1EqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldEligiblePost1, v))
}

// EligiblePost1ContainsFold applies the ContainsFold predicate on the "EligiblePost1" field.
func EligiblePost1ContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldEligiblePost1, v))
}

// EligiblePost2EQ applies the EQ predicate on the "EligiblePost2" field.
func EligiblePost2EQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldEligiblePost2, v))
}

// EligiblePost2NEQ applies the NEQ predicate on the "EligiblePost2" field.
func EligiblePost2NEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldEligiblePost2, v))
}

// EligiblePost2In applies the In predicate on the "EligiblePost2" field.
func EligiblePost2In(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldEligiblePost2, vs...))
}

// EligiblePost2NotIn applies the NotIn predicate on the "EligiblePost2" field.
func EligiblePost2NotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldEligiblePost2, vs...))
}

// EligiblePost2GT applies the GT predicate on the "EligiblePost2" field.
func EligiblePost2GT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldEligiblePost2, v))
}

// EligiblePost2GTE applies the GTE predicate on the "EligiblePost2" field.
func EligiblePost2GTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldEligiblePost2, v))
}

// EligiblePost2LT applies the LT predicate on the "EligiblePost2" field.
func EligiblePost2LT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldEligiblePost2, v))
}

// EligiblePost2LTE applies the LTE predicate on the "EligiblePost2" field.
func EligiblePost2LTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldEligiblePost2, v))
}

// EligiblePost2Contains applies the Contains predicate on the "EligiblePost2" field.
func EligiblePost2Contains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldEligiblePost2, v))
}

// EligiblePost2HasPrefix applies the HasPrefix predicate on the "EligiblePost2" field.
func EligiblePost2HasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldEligiblePost2, v))
}

// EligiblePost2HasSuffix applies the HasSuffix predicate on the "EligiblePost2" field.
func EligiblePost2HasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldEligiblePost2, v))
}

// EligiblePost2IsNil applies the IsNil predicate on the "EligiblePost2" field.
func EligiblePost2IsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldEligiblePost2))
}

// EligiblePost2NotNil applies the NotNil predicate on the "EligiblePost2" field.
func EligiblePost2NotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldEligiblePost2))
}

// EligiblePost2EqualFold applies the EqualFold predicate on the "EligiblePost2" field.
func EligiblePost2EqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldEligiblePost2, v))
}

// EligiblePost2ContainsFold applies the ContainsFold predicate on the "EligiblePost2" field.
func EligiblePost2ContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldEligiblePost2, v))
}

// EligiblePost3EQ applies the EQ predicate on the "EligiblePost3" field.
func EligiblePost3EQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldEligiblePost3, v))
}

// EligiblePost3NEQ applies the NEQ predicate on the "EligiblePost3" field.
func EligiblePost3NEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldEligiblePost3, v))
}

// EligiblePost3In applies the In predicate on the "EligiblePost3" field.
func EligiblePost3In(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldEligiblePost3, vs...))
}

// EligiblePost3NotIn applies the NotIn predicate on the "EligiblePost3" field.
func EligiblePost3NotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldEligiblePost3, vs...))
}

// EligiblePost3GT applies the GT predicate on the "EligiblePost3" field.
func EligiblePost3GT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldEligiblePost3, v))
}

// EligiblePost3GTE applies the GTE predicate on the "EligiblePost3" field.
func EligiblePost3GTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldEligiblePost3, v))
}

// EligiblePost3LT applies the LT predicate on the "EligiblePost3" field.
func EligiblePost3LT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldEligiblePost3, v))
}

// EligiblePost3LTE applies the LTE predicate on the "EligiblePost3" field.
func EligiblePost3LTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldEligiblePost3, v))
}

// EligiblePost3Contains applies the Contains predicate on the "EligiblePost3" field.
func EligiblePost3Contains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldEligiblePost3, v))
}

// EligiblePost3HasPrefix applies the HasPrefix predicate on the "EligiblePost3" field.
func EligiblePost3HasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldEligiblePost3, v))
}

// EligiblePost3HasSuffix applies the HasSuffix predicate on the "EligiblePost3" field.
func EligiblePost3HasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldEligiblePost3, v))
}

// EligiblePost3IsNil applies the IsNil predicate on the "EligiblePost3" field.
func EligiblePost3IsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldEligiblePost3))
}

// EligiblePost3NotNil applies the NotNil predicate on the "EligiblePost3" field.
func EligiblePost3NotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldEligiblePost3))
}

// EligiblePost3EqualFold applies the EqualFold predicate on the "EligiblePost3" field.
func EligiblePost3EqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldEligiblePost3, v))
}

// EligiblePost3ContainsFold applies the ContainsFold predicate on the "EligiblePost3" field.
func EligiblePost3ContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldEligiblePost3, v))
}

// EligiblePost4EQ applies the EQ predicate on the "EligiblePost4" field.
func EligiblePost4EQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldEligiblePost4, v))
}

// EligiblePost4NEQ applies the NEQ predicate on the "EligiblePost4" field.
func EligiblePost4NEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldEligiblePost4, v))
}

// EligiblePost4In applies the In predicate on the "EligiblePost4" field.
func EligiblePost4In(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldEligiblePost4, vs...))
}

// EligiblePost4NotIn applies the NotIn predicate on the "EligiblePost4" field.
func EligiblePost4NotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldEligiblePost4, vs...))
}

// EligiblePost4GT applies the GT predicate on the "EligiblePost4" field.
func EligiblePost4GT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldEligiblePost4, v))
}

// EligiblePost4GTE applies the GTE predicate on the "EligiblePost4" field.
func EligiblePost4GTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldEligiblePost4, v))
}

// EligiblePost4LT applies the LT predicate on the "EligiblePost4" field.
func EligiblePost4LT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldEligiblePost4, v))
}

// EligiblePost4LTE applies the LTE predicate on the "EligiblePost4" field.
func EligiblePost4LTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldEligiblePost4, v))
}

// EligiblePost4Contains applies the Contains predicate on the "EligiblePost4" field.
func EligiblePost4Contains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldEligiblePost4, v))
}

// EligiblePost4HasPrefix applies the HasPrefix predicate on the "EligiblePost4" field.
func EligiblePost4HasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldEligiblePost4, v))
}

// EligiblePost4HasSuffix applies the HasSuffix predicate on the "EligiblePost4" field.
func EligiblePost4HasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldEligiblePost4, v))
}

// EligiblePost4IsNil applies the IsNil predicate on the "EligiblePost4" field.
func EligiblePost4IsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldEligiblePost4))
}

// EligiblePost4NotNil applies the NotNil predicate on the "EligiblePost4" field.
func EligiblePost4NotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldEligiblePost4))
}

// EligiblePost4EqualFold applies the EqualFold predicate on the "EligiblePost4" field.
func EligiblePost4EqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldEligiblePost4, v))
}

// EligiblePost4ContainsFold applies the ContainsFold predicate on the "EligiblePost4" field.
func EligiblePost4ContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldEligiblePost4, v))
}

// EligiblePost5EQ applies the EQ predicate on the "EligiblePost5" field.
func EligiblePost5EQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldEligiblePost5, v))
}

// EligiblePost5NEQ applies the NEQ predicate on the "EligiblePost5" field.
func EligiblePost5NEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldEligiblePost5, v))
}

// EligiblePost5In applies the In predicate on the "EligiblePost5" field.
func EligiblePost5In(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldEligiblePost5, vs...))
}

// EligiblePost5NotIn applies the NotIn predicate on the "EligiblePost5" field.
func EligiblePost5NotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldEligiblePost5, vs...))
}

// EligiblePost5GT applies the GT predicate on the "EligiblePost5" field.
func EligiblePost5GT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldEligiblePost5, v))
}

// EligiblePost5GTE applies the GTE predicate on the "EligiblePost5" field.
func EligiblePost5GTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldEligiblePost5, v))
}

// EligiblePost5LT applies the LT predicate on the "EligiblePost5" field.
func EligiblePost5LT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldEligiblePost5, v))
}

// EligiblePost5LTE applies the LTE predicate on the "EligiblePost5" field.
func EligiblePost5LTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldEligiblePost5, v))
}

// EligiblePost5Contains applies the Contains predicate on the "EligiblePost5" field.
func EligiblePost5Contains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldEligiblePost5, v))
}

// EligiblePost5HasPrefix applies the HasPrefix predicate on the "EligiblePost5" field.
func EligiblePost5HasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldEligiblePost5, v))
}

// EligiblePost5HasSuffix applies the HasSuffix predicate on the "EligiblePost5" field.
func EligiblePost5HasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldEligiblePost5, v))
}

// EligiblePost5IsNil applies the IsNil predicate on the "EligiblePost5" field.
func EligiblePost5IsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldEligiblePost5))
}

// EligiblePost5NotNil applies the NotNil predicate on the "EligiblePost5" field.
func EligiblePost5NotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldEligiblePost5))
}

// EligiblePost5EqualFold applies the EqualFold predicate on the "EligiblePost5" field.
func EligiblePost5EqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldEligiblePost5, v))
}

// EligiblePost5ContainsFold applies the ContainsFold predicate on the "EligiblePost5" field.
func EligiblePost5ContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldEligiblePost5, v))
}

// ExamPost1EQ applies the EQ predicate on the "ExamPost1" field.
func ExamPost1EQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamPost1, v))
}

// ExamPost1NEQ applies the NEQ predicate on the "ExamPost1" field.
func ExamPost1NEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldExamPost1, v))
}

// ExamPost1In applies the In predicate on the "ExamPost1" field.
func ExamPost1In(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldExamPost1, vs...))
}

// ExamPost1NotIn applies the NotIn predicate on the "ExamPost1" field.
func ExamPost1NotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldExamPost1, vs...))
}

// ExamPost1GT applies the GT predicate on the "ExamPost1" field.
func ExamPost1GT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldExamPost1, v))
}

// ExamPost1GTE applies the GTE predicate on the "ExamPost1" field.
func ExamPost1GTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldExamPost1, v))
}

// ExamPost1LT applies the LT predicate on the "ExamPost1" field.
func ExamPost1LT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldExamPost1, v))
}

// ExamPost1LTE applies the LTE predicate on the "ExamPost1" field.
func ExamPost1LTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldExamPost1, v))
}

// ExamPost1Contains applies the Contains predicate on the "ExamPost1" field.
func ExamPost1Contains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldExamPost1, v))
}

// ExamPost1HasPrefix applies the HasPrefix predicate on the "ExamPost1" field.
func ExamPost1HasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldExamPost1, v))
}

// ExamPost1HasSuffix applies the HasSuffix predicate on the "ExamPost1" field.
func ExamPost1HasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldExamPost1, v))
}

// ExamPost1IsNil applies the IsNil predicate on the "ExamPost1" field.
func ExamPost1IsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldExamPost1))
}

// ExamPost1NotNil applies the NotNil predicate on the "ExamPost1" field.
func ExamPost1NotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldExamPost1))
}

// ExamPost1EqualFold applies the EqualFold predicate on the "ExamPost1" field.
func ExamPost1EqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldExamPost1, v))
}

// ExamPost1ContainsFold applies the ContainsFold predicate on the "ExamPost1" field.
func ExamPost1ContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldExamPost1, v))
}

// ExamPost2EQ applies the EQ predicate on the "ExamPost2" field.
func ExamPost2EQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamPost2, v))
}

// ExamPost2NEQ applies the NEQ predicate on the "ExamPost2" field.
func ExamPost2NEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldExamPost2, v))
}

// ExamPost2In applies the In predicate on the "ExamPost2" field.
func ExamPost2In(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldExamPost2, vs...))
}

// ExamPost2NotIn applies the NotIn predicate on the "ExamPost2" field.
func ExamPost2NotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldExamPost2, vs...))
}

// ExamPost2GT applies the GT predicate on the "ExamPost2" field.
func ExamPost2GT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldExamPost2, v))
}

// ExamPost2GTE applies the GTE predicate on the "ExamPost2" field.
func ExamPost2GTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldExamPost2, v))
}

// ExamPost2LT applies the LT predicate on the "ExamPost2" field.
func ExamPost2LT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldExamPost2, v))
}

// ExamPost2LTE applies the LTE predicate on the "ExamPost2" field.
func ExamPost2LTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldExamPost2, v))
}

// ExamPost2Contains applies the Contains predicate on the "ExamPost2" field.
func ExamPost2Contains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldExamPost2, v))
}

// ExamPost2HasPrefix applies the HasPrefix predicate on the "ExamPost2" field.
func ExamPost2HasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldExamPost2, v))
}

// ExamPost2HasSuffix applies the HasSuffix predicate on the "ExamPost2" field.
func ExamPost2HasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldExamPost2, v))
}

// ExamPost2IsNil applies the IsNil predicate on the "ExamPost2" field.
func ExamPost2IsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldExamPost2))
}

// ExamPost2NotNil applies the NotNil predicate on the "ExamPost2" field.
func ExamPost2NotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldExamPost2))
}

// ExamPost2EqualFold applies the EqualFold predicate on the "ExamPost2" field.
func ExamPost2EqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldExamPost2, v))
}

// ExamPost2ContainsFold applies the ContainsFold predicate on the "ExamPost2" field.
func ExamPost2ContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldExamPost2, v))
}

// ExamPost3EQ applies the EQ predicate on the "ExamPost3" field.
func ExamPost3EQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamPost3, v))
}

// ExamPost3NEQ applies the NEQ predicate on the "ExamPost3" field.
func ExamPost3NEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldExamPost3, v))
}

// ExamPost3In applies the In predicate on the "ExamPost3" field.
func ExamPost3In(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldExamPost3, vs...))
}

// ExamPost3NotIn applies the NotIn predicate on the "ExamPost3" field.
func ExamPost3NotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldExamPost3, vs...))
}

// ExamPost3GT applies the GT predicate on the "ExamPost3" field.
func ExamPost3GT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldExamPost3, v))
}

// ExamPost3GTE applies the GTE predicate on the "ExamPost3" field.
func ExamPost3GTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldExamPost3, v))
}

// ExamPost3LT applies the LT predicate on the "ExamPost3" field.
func ExamPost3LT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldExamPost3, v))
}

// ExamPost3LTE applies the LTE predicate on the "ExamPost3" field.
func ExamPost3LTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldExamPost3, v))
}

// ExamPost3Contains applies the Contains predicate on the "ExamPost3" field.
func ExamPost3Contains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldExamPost3, v))
}

// ExamPost3HasPrefix applies the HasPrefix predicate on the "ExamPost3" field.
func ExamPost3HasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldExamPost3, v))
}

// ExamPost3HasSuffix applies the HasSuffix predicate on the "ExamPost3" field.
func ExamPost3HasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldExamPost3, v))
}

// ExamPost3IsNil applies the IsNil predicate on the "ExamPost3" field.
func ExamPost3IsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldExamPost3))
}

// ExamPost3NotNil applies the NotNil predicate on the "ExamPost3" field.
func ExamPost3NotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldExamPost3))
}

// ExamPost3EqualFold applies the EqualFold predicate on the "ExamPost3" field.
func ExamPost3EqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldExamPost3, v))
}

// ExamPost3ContainsFold applies the ContainsFold predicate on the "ExamPost3" field.
func ExamPost3ContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldExamPost3, v))
}

// ExamPost4EQ applies the EQ predicate on the "ExamPost4" field.
func ExamPost4EQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamPost4, v))
}

// ExamPost4NEQ applies the NEQ predicate on the "ExamPost4" field.
func ExamPost4NEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldExamPost4, v))
}

// ExamPost4In applies the In predicate on the "ExamPost4" field.
func ExamPost4In(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldExamPost4, vs...))
}

// ExamPost4NotIn applies the NotIn predicate on the "ExamPost4" field.
func ExamPost4NotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldExamPost4, vs...))
}

// ExamPost4GT applies the GT predicate on the "ExamPost4" field.
func ExamPost4GT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldExamPost4, v))
}

// ExamPost4GTE applies the GTE predicate on the "ExamPost4" field.
func ExamPost4GTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldExamPost4, v))
}

// ExamPost4LT applies the LT predicate on the "ExamPost4" field.
func ExamPost4LT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldExamPost4, v))
}

// ExamPost4LTE applies the LTE predicate on the "ExamPost4" field.
func ExamPost4LTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldExamPost4, v))
}

// ExamPost4Contains applies the Contains predicate on the "ExamPost4" field.
func ExamPost4Contains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldExamPost4, v))
}

// ExamPost4HasPrefix applies the HasPrefix predicate on the "ExamPost4" field.
func ExamPost4HasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldExamPost4, v))
}

// ExamPost4HasSuffix applies the HasSuffix predicate on the "ExamPost4" field.
func ExamPost4HasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldExamPost4, v))
}

// ExamPost4IsNil applies the IsNil predicate on the "ExamPost4" field.
func ExamPost4IsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldExamPost4))
}

// ExamPost4NotNil applies the NotNil predicate on the "ExamPost4" field.
func ExamPost4NotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldExamPost4))
}

// ExamPost4EqualFold applies the EqualFold predicate on the "ExamPost4" field.
func ExamPost4EqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldExamPost4, v))
}

// ExamPost4ContainsFold applies the ContainsFold predicate on the "ExamPost4" field.
func ExamPost4ContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldExamPost4, v))
}

// ExamPost5EQ applies the EQ predicate on the "ExamPost5" field.
func ExamPost5EQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamPost5, v))
}

// ExamPost5NEQ applies the NEQ predicate on the "ExamPost5" field.
func ExamPost5NEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldExamPost5, v))
}

// ExamPost5In applies the In predicate on the "ExamPost5" field.
func ExamPost5In(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldExamPost5, vs...))
}

// ExamPost5NotIn applies the NotIn predicate on the "ExamPost5" field.
func ExamPost5NotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldExamPost5, vs...))
}

// ExamPost5GT applies the GT predicate on the "ExamPost5" field.
func ExamPost5GT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldExamPost5, v))
}

// ExamPost5GTE applies the GTE predicate on the "ExamPost5" field.
func ExamPost5GTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldExamPost5, v))
}

// ExamPost5LT applies the LT predicate on the "ExamPost5" field.
func ExamPost5LT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldExamPost5, v))
}

// ExamPost5LTE applies the LTE predicate on the "ExamPost5" field.
func ExamPost5LTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldExamPost5, v))
}

// ExamPost5Contains applies the Contains predicate on the "ExamPost5" field.
func ExamPost5Contains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldExamPost5, v))
}

// ExamPost5HasPrefix applies the HasPrefix predicate on the "ExamPost5" field.
func ExamPost5HasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldExamPost5, v))
}

// ExamPost5HasSuffix applies the HasSuffix predicate on the "ExamPost5" field.
func ExamPost5HasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldExamPost5, v))
}

// ExamPost5IsNil applies the IsNil predicate on the "ExamPost5" field.
func ExamPost5IsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldExamPost5))
}

// ExamPost5NotNil applies the NotNil predicate on the "ExamPost5" field.
func ExamPost5NotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldExamPost5))
}

// ExamPost5EqualFold applies the EqualFold predicate on the "ExamPost5" field.
func ExamPost5EqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldExamPost5, v))
}

// ExamPost5ContainsFold applies the ContainsFold predicate on the "ExamPost5" field.
func ExamPost5ContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldExamPost5, v))
}

// EducationCriteriaEQ applies the EQ predicate on the "EducationCriteria" field.
func EducationCriteriaEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldEducationCriteria, v))
}

// EducationCriteriaNEQ applies the NEQ predicate on the "EducationCriteria" field.
func EducationCriteriaNEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldEducationCriteria, v))
}

// EducationCriteriaIn applies the In predicate on the "EducationCriteria" field.
func EducationCriteriaIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldEducationCriteria, vs...))
}

// EducationCriteriaNotIn applies the NotIn predicate on the "EducationCriteria" field.
func EducationCriteriaNotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldEducationCriteria, vs...))
}

// EducationCriteriaGT applies the GT predicate on the "EducationCriteria" field.
func EducationCriteriaGT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldEducationCriteria, v))
}

// EducationCriteriaGTE applies the GTE predicate on the "EducationCriteria" field.
func EducationCriteriaGTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldEducationCriteria, v))
}

// EducationCriteriaLT applies the LT predicate on the "EducationCriteria" field.
func EducationCriteriaLT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldEducationCriteria, v))
}

// EducationCriteriaLTE applies the LTE predicate on the "EducationCriteria" field.
func EducationCriteriaLTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldEducationCriteria, v))
}

// EducationCriteriaContains applies the Contains predicate on the "EducationCriteria" field.
func EducationCriteriaContains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldEducationCriteria, v))
}

// EducationCriteriaHasPrefix applies the HasPrefix predicate on the "EducationCriteria" field.
func EducationCriteriaHasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldEducationCriteria, v))
}

// EducationCriteriaHasSuffix applies the HasSuffix predicate on the "EducationCriteria" field.
func EducationCriteriaHasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldEducationCriteria, v))
}

// EducationCriteriaIsNil applies the IsNil predicate on the "EducationCriteria" field.
func EducationCriteriaIsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldEducationCriteria))
}

// EducationCriteriaNotNil applies the NotNil predicate on the "EducationCriteria" field.
func EducationCriteriaNotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldEducationCriteria))
}

// EducationCriteriaEqualFold applies the EqualFold predicate on the "EducationCriteria" field.
func EducationCriteriaEqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldEducationCriteria, v))
}

// EducationCriteriaContainsFold applies the ContainsFold predicate on the "EducationCriteria" field.
func EducationCriteriaContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldEducationCriteria, v))
}

// CategoryAgeLimitGENEQ applies the EQ predicate on the "CategoryAgeLimitGEN" field.
func CategoryAgeLimitGENEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldCategoryAgeLimitGEN, v))
}

// CategoryAgeLimitGENNEQ applies the NEQ predicate on the "CategoryAgeLimitGEN" field.
func CategoryAgeLimitGENNEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldCategoryAgeLimitGEN, v))
}

// CategoryAgeLimitGENIn applies the In predicate on the "CategoryAgeLimitGEN" field.
func CategoryAgeLimitGENIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldCategoryAgeLimitGEN, vs...))
}

// CategoryAgeLimitGENNotIn applies the NotIn predicate on the "CategoryAgeLimitGEN" field.
func CategoryAgeLimitGENNotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldCategoryAgeLimitGEN, vs...))
}

// CategoryAgeLimitGENGT applies the GT predicate on the "CategoryAgeLimitGEN" field.
func CategoryAgeLimitGENGT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldCategoryAgeLimitGEN, v))
}

// CategoryAgeLimitGENGTE applies the GTE predicate on the "CategoryAgeLimitGEN" field.
func CategoryAgeLimitGENGTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldCategoryAgeLimitGEN, v))
}

// CategoryAgeLimitGENLT applies the LT predicate on the "CategoryAgeLimitGEN" field.
func CategoryAgeLimitGENLT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldCategoryAgeLimitGEN, v))
}

// CategoryAgeLimitGENLTE applies the LTE predicate on the "CategoryAgeLimitGEN" field.
func CategoryAgeLimitGENLTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldCategoryAgeLimitGEN, v))
}

// CategoryAgeLimitGENContains applies the Contains predicate on the "CategoryAgeLimitGEN" field.
func CategoryAgeLimitGENContains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldCategoryAgeLimitGEN, v))
}

// CategoryAgeLimitGENHasPrefix applies the HasPrefix predicate on the "CategoryAgeLimitGEN" field.
func CategoryAgeLimitGENHasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldCategoryAgeLimitGEN, v))
}

// CategoryAgeLimitGENHasSuffix applies the HasSuffix predicate on the "CategoryAgeLimitGEN" field.
func CategoryAgeLimitGENHasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldCategoryAgeLimitGEN, v))
}

// CategoryAgeLimitGENIsNil applies the IsNil predicate on the "CategoryAgeLimitGEN" field.
func CategoryAgeLimitGENIsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldCategoryAgeLimitGEN))
}

// CategoryAgeLimitGENNotNil applies the NotNil predicate on the "CategoryAgeLimitGEN" field.
func CategoryAgeLimitGENNotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldCategoryAgeLimitGEN))
}

// CategoryAgeLimitGENEqualFold applies the EqualFold predicate on the "CategoryAgeLimitGEN" field.
func CategoryAgeLimitGENEqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldCategoryAgeLimitGEN, v))
}

// CategoryAgeLimitGENContainsFold applies the ContainsFold predicate on the "CategoryAgeLimitGEN" field.
func CategoryAgeLimitGENContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldCategoryAgeLimitGEN, v))
}

// CategoryAgeLimitSCEQ applies the EQ predicate on the "CategoryAgeLimitSC" field.
func CategoryAgeLimitSCEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldCategoryAgeLimitSC, v))
}

// CategoryAgeLimitSCNEQ applies the NEQ predicate on the "CategoryAgeLimitSC" field.
func CategoryAgeLimitSCNEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldCategoryAgeLimitSC, v))
}

// CategoryAgeLimitSCIn applies the In predicate on the "CategoryAgeLimitSC" field.
func CategoryAgeLimitSCIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldCategoryAgeLimitSC, vs...))
}

// CategoryAgeLimitSCNotIn applies the NotIn predicate on the "CategoryAgeLimitSC" field.
func CategoryAgeLimitSCNotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldCategoryAgeLimitSC, vs...))
}

// CategoryAgeLimitSCGT applies the GT predicate on the "CategoryAgeLimitSC" field.
func CategoryAgeLimitSCGT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldCategoryAgeLimitSC, v))
}

// CategoryAgeLimitSCGTE applies the GTE predicate on the "CategoryAgeLimitSC" field.
func CategoryAgeLimitSCGTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldCategoryAgeLimitSC, v))
}

// CategoryAgeLimitSCLT applies the LT predicate on the "CategoryAgeLimitSC" field.
func CategoryAgeLimitSCLT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldCategoryAgeLimitSC, v))
}

// CategoryAgeLimitSCLTE applies the LTE predicate on the "CategoryAgeLimitSC" field.
func CategoryAgeLimitSCLTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldCategoryAgeLimitSC, v))
}

// CategoryAgeLimitSCContains applies the Contains predicate on the "CategoryAgeLimitSC" field.
func CategoryAgeLimitSCContains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldCategoryAgeLimitSC, v))
}

// CategoryAgeLimitSCHasPrefix applies the HasPrefix predicate on the "CategoryAgeLimitSC" field.
func CategoryAgeLimitSCHasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldCategoryAgeLimitSC, v))
}

// CategoryAgeLimitSCHasSuffix applies the HasSuffix predicate on the "CategoryAgeLimitSC" field.
func CategoryAgeLimitSCHasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldCategoryAgeLimitSC, v))
}

// CategoryAgeLimitSCIsNil applies the IsNil predicate on the "CategoryAgeLimitSC" field.
func CategoryAgeLimitSCIsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldCategoryAgeLimitSC))
}

// CategoryAgeLimitSCNotNil applies the NotNil predicate on the "CategoryAgeLimitSC" field.
func CategoryAgeLimitSCNotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldCategoryAgeLimitSC))
}

// CategoryAgeLimitSCEqualFold applies the EqualFold predicate on the "CategoryAgeLimitSC" field.
func CategoryAgeLimitSCEqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldCategoryAgeLimitSC, v))
}

// CategoryAgeLimitSCContainsFold applies the ContainsFold predicate on the "CategoryAgeLimitSC" field.
func CategoryAgeLimitSCContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldCategoryAgeLimitSC, v))
}

// CategoryAgeLimitSTEQ applies the EQ predicate on the "CategoryAgeLimitST" field.
func CategoryAgeLimitSTEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldCategoryAgeLimitST, v))
}

// CategoryAgeLimitSTNEQ applies the NEQ predicate on the "CategoryAgeLimitST" field.
func CategoryAgeLimitSTNEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldCategoryAgeLimitST, v))
}

// CategoryAgeLimitSTIn applies the In predicate on the "CategoryAgeLimitST" field.
func CategoryAgeLimitSTIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldCategoryAgeLimitST, vs...))
}

// CategoryAgeLimitSTNotIn applies the NotIn predicate on the "CategoryAgeLimitST" field.
func CategoryAgeLimitSTNotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldCategoryAgeLimitST, vs...))
}

// CategoryAgeLimitSTGT applies the GT predicate on the "CategoryAgeLimitST" field.
func CategoryAgeLimitSTGT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldCategoryAgeLimitST, v))
}

// CategoryAgeLimitSTGTE applies the GTE predicate on the "CategoryAgeLimitST" field.
func CategoryAgeLimitSTGTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldCategoryAgeLimitST, v))
}

// CategoryAgeLimitSTLT applies the LT predicate on the "CategoryAgeLimitST" field.
func CategoryAgeLimitSTLT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldCategoryAgeLimitST, v))
}

// CategoryAgeLimitSTLTE applies the LTE predicate on the "CategoryAgeLimitST" field.
func CategoryAgeLimitSTLTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldCategoryAgeLimitST, v))
}

// CategoryAgeLimitSTContains applies the Contains predicate on the "CategoryAgeLimitST" field.
func CategoryAgeLimitSTContains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldCategoryAgeLimitST, v))
}

// CategoryAgeLimitSTHasPrefix applies the HasPrefix predicate on the "CategoryAgeLimitST" field.
func CategoryAgeLimitSTHasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldCategoryAgeLimitST, v))
}

// CategoryAgeLimitSTHasSuffix applies the HasSuffix predicate on the "CategoryAgeLimitST" field.
func CategoryAgeLimitSTHasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldCategoryAgeLimitST, v))
}

// CategoryAgeLimitSTIsNil applies the IsNil predicate on the "CategoryAgeLimitST" field.
func CategoryAgeLimitSTIsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldCategoryAgeLimitST))
}

// CategoryAgeLimitSTNotNil applies the NotNil predicate on the "CategoryAgeLimitST" field.
func CategoryAgeLimitSTNotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldCategoryAgeLimitST))
}

// CategoryAgeLimitSTEqualFold applies the EqualFold predicate on the "CategoryAgeLimitST" field.
func CategoryAgeLimitSTEqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldCategoryAgeLimitST, v))
}

// CategoryAgeLimitSTContainsFold applies the ContainsFold predicate on the "CategoryAgeLimitST" field.
func CategoryAgeLimitSTContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldCategoryAgeLimitST, v))
}

// ServiceYearsEQ applies the EQ predicate on the "ServiceYears" field.
func ServiceYearsEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldServiceYears, v))
}

// ServiceYearsNEQ applies the NEQ predicate on the "ServiceYears" field.
func ServiceYearsNEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldServiceYears, v))
}

// ServiceYearsIn applies the In predicate on the "ServiceYears" field.
func ServiceYearsIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldServiceYears, vs...))
}

// ServiceYearsNotIn applies the NotIn predicate on the "ServiceYears" field.
func ServiceYearsNotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldServiceYears, vs...))
}

// ServiceYearsGT applies the GT predicate on the "ServiceYears" field.
func ServiceYearsGT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldServiceYears, v))
}

// ServiceYearsGTE applies the GTE predicate on the "ServiceYears" field.
func ServiceYearsGTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldServiceYears, v))
}

// ServiceYearsLT applies the LT predicate on the "ServiceYears" field.
func ServiceYearsLT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldServiceYears, v))
}

// ServiceYearsLTE applies the LTE predicate on the "ServiceYears" field.
func ServiceYearsLTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldServiceYears, v))
}

// ServiceYearsContains applies the Contains predicate on the "ServiceYears" field.
func ServiceYearsContains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldServiceYears, v))
}

// ServiceYearsHasPrefix applies the HasPrefix predicate on the "ServiceYears" field.
func ServiceYearsHasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldServiceYears, v))
}

// ServiceYearsHasSuffix applies the HasSuffix predicate on the "ServiceYears" field.
func ServiceYearsHasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldServiceYears, v))
}

// ServiceYearsIsNil applies the IsNil predicate on the "ServiceYears" field.
func ServiceYearsIsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldServiceYears))
}

// ServiceYearsNotNil applies the NotNil predicate on the "ServiceYears" field.
func ServiceYearsNotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldServiceYears))
}

// ServiceYearsEqualFold applies the EqualFold predicate on the "ServiceYears" field.
func ServiceYearsEqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldServiceYears, v))
}

// ServiceYearsContainsFold applies the ContainsFold predicate on the "ServiceYears" field.
func ServiceYearsContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldServiceYears, v))
}

// DrivingLicenseRequiredEQ applies the EQ predicate on the "DrivingLicenseRequired" field.
func DrivingLicenseRequiredEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldDrivingLicenseRequired, v))
}

// DrivingLicenseRequiredNEQ applies the NEQ predicate on the "DrivingLicenseRequired" field.
func DrivingLicenseRequiredNEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldDrivingLicenseRequired, v))
}

// DrivingLicenseRequiredIn applies the In predicate on the "DrivingLicenseRequired" field.
func DrivingLicenseRequiredIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldDrivingLicenseRequired, vs...))
}

// DrivingLicenseRequiredNotIn applies the NotIn predicate on the "DrivingLicenseRequired" field.
func DrivingLicenseRequiredNotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldDrivingLicenseRequired, vs...))
}

// DrivingLicenseRequiredGT applies the GT predicate on the "DrivingLicenseRequired" field.
func DrivingLicenseRequiredGT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldDrivingLicenseRequired, v))
}

// DrivingLicenseRequiredGTE applies the GTE predicate on the "DrivingLicenseRequired" field.
func DrivingLicenseRequiredGTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldDrivingLicenseRequired, v))
}

// DrivingLicenseRequiredLT applies the LT predicate on the "DrivingLicenseRequired" field.
func DrivingLicenseRequiredLT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldDrivingLicenseRequired, v))
}

// DrivingLicenseRequiredLTE applies the LTE predicate on the "DrivingLicenseRequired" field.
func DrivingLicenseRequiredLTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldDrivingLicenseRequired, v))
}

// DrivingLicenseRequiredContains applies the Contains predicate on the "DrivingLicenseRequired" field.
func DrivingLicenseRequiredContains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldDrivingLicenseRequired, v))
}

// DrivingLicenseRequiredHasPrefix applies the HasPrefix predicate on the "DrivingLicenseRequired" field.
func DrivingLicenseRequiredHasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldDrivingLicenseRequired, v))
}

// DrivingLicenseRequiredHasSuffix applies the HasSuffix predicate on the "DrivingLicenseRequired" field.
func DrivingLicenseRequiredHasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldDrivingLicenseRequired, v))
}

// DrivingLicenseRequiredIsNil applies the IsNil predicate on the "DrivingLicenseRequired" field.
func DrivingLicenseRequiredIsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldDrivingLicenseRequired))
}

// DrivingLicenseRequiredNotNil applies the NotNil predicate on the "DrivingLicenseRequired" field.
func DrivingLicenseRequiredNotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldDrivingLicenseRequired))
}

// DrivingLicenseRequiredEqualFold applies the EqualFold predicate on the "DrivingLicenseRequired" field.
func DrivingLicenseRequiredEqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldDrivingLicenseRequired, v))
}

// DrivingLicenseRequiredContainsFold applies the ContainsFold predicate on the "DrivingLicenseRequired" field.
func DrivingLicenseRequiredContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldDrivingLicenseRequired, v))
}

// ExamPaperCodeEQ applies the EQ predicate on the "ExamPaperCode" field.
func ExamPaperCodeEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamPaperCode, v))
}

// ExamPaperCodeNEQ applies the NEQ predicate on the "ExamPaperCode" field.
func ExamPaperCodeNEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldExamPaperCode, v))
}

// ExamPaperCodeIn applies the In predicate on the "ExamPaperCode" field.
func ExamPaperCodeIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldExamPaperCode, vs...))
}

// ExamPaperCodeNotIn applies the NotIn predicate on the "ExamPaperCode" field.
func ExamPaperCodeNotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldExamPaperCode, vs...))
}

// ExamPaperCodeGT applies the GT predicate on the "ExamPaperCode" field.
func ExamPaperCodeGT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldExamPaperCode, v))
}

// ExamPaperCodeGTE applies the GTE predicate on the "ExamPaperCode" field.
func ExamPaperCodeGTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldExamPaperCode, v))
}

// ExamPaperCodeLT applies the LT predicate on the "ExamPaperCode" field.
func ExamPaperCodeLT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldExamPaperCode, v))
}

// ExamPaperCodeLTE applies the LTE predicate on the "ExamPaperCode" field.
func ExamPaperCodeLTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldExamPaperCode, v))
}

// ExamPaperCodeContains applies the Contains predicate on the "ExamPaperCode" field.
func ExamPaperCodeContains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldExamPaperCode, v))
}

// ExamPaperCodeHasPrefix applies the HasPrefix predicate on the "ExamPaperCode" field.
func ExamPaperCodeHasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldExamPaperCode, v))
}

// ExamPaperCodeHasSuffix applies the HasSuffix predicate on the "ExamPaperCode" field.
func ExamPaperCodeHasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldExamPaperCode, v))
}

// ExamPaperCodeIsNil applies the IsNil predicate on the "ExamPaperCode" field.
func ExamPaperCodeIsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldExamPaperCode))
}

// ExamPaperCodeNotNil applies the NotNil predicate on the "ExamPaperCode" field.
func ExamPaperCodeNotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldExamPaperCode))
}

// ExamPaperCodeEqualFold applies the EqualFold predicate on the "ExamPaperCode" field.
func ExamPaperCodeEqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldExamPaperCode, v))
}

// ExamPaperCodeContainsFold applies the ContainsFold predicate on the "ExamPaperCode" field.
func ExamPaperCodeContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldExamPaperCode, v))
}

// ExamPaper1EQ applies the EQ predicate on the "ExamPaper1" field.
func ExamPaper1EQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamPaper1, v))
}

// ExamPaper1NEQ applies the NEQ predicate on the "ExamPaper1" field.
func ExamPaper1NEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldExamPaper1, v))
}

// ExamPaper1In applies the In predicate on the "ExamPaper1" field.
func ExamPaper1In(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldExamPaper1, vs...))
}

// ExamPaper1NotIn applies the NotIn predicate on the "ExamPaper1" field.
func ExamPaper1NotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldExamPaper1, vs...))
}

// ExamPaper1GT applies the GT predicate on the "ExamPaper1" field.
func ExamPaper1GT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldExamPaper1, v))
}

// ExamPaper1GTE applies the GTE predicate on the "ExamPaper1" field.
func ExamPaper1GTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldExamPaper1, v))
}

// ExamPaper1LT applies the LT predicate on the "ExamPaper1" field.
func ExamPaper1LT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldExamPaper1, v))
}

// ExamPaper1LTE applies the LTE predicate on the "ExamPaper1" field.
func ExamPaper1LTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldExamPaper1, v))
}

// ExamPaper1Contains applies the Contains predicate on the "ExamPaper1" field.
func ExamPaper1Contains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldExamPaper1, v))
}

// ExamPaper1HasPrefix applies the HasPrefix predicate on the "ExamPaper1" field.
func ExamPaper1HasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldExamPaper1, v))
}

// ExamPaper1HasSuffix applies the HasSuffix predicate on the "ExamPaper1" field.
func ExamPaper1HasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldExamPaper1, v))
}

// ExamPaper1IsNil applies the IsNil predicate on the "ExamPaper1" field.
func ExamPaper1IsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldExamPaper1))
}

// ExamPaper1NotNil applies the NotNil predicate on the "ExamPaper1" field.
func ExamPaper1NotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldExamPaper1))
}

// ExamPaper1EqualFold applies the EqualFold predicate on the "ExamPaper1" field.
func ExamPaper1EqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldExamPaper1, v))
}

// ExamPaper1ContainsFold applies the ContainsFold predicate on the "ExamPaper1" field.
func ExamPaper1ContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldExamPaper1, v))
}

// ExamPaper2EQ applies the EQ predicate on the "ExamPaper2" field.
func ExamPaper2EQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamPaper2, v))
}

// ExamPaper2NEQ applies the NEQ predicate on the "ExamPaper2" field.
func ExamPaper2NEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldExamPaper2, v))
}

// ExamPaper2In applies the In predicate on the "ExamPaper2" field.
func ExamPaper2In(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldExamPaper2, vs...))
}

// ExamPaper2NotIn applies the NotIn predicate on the "ExamPaper2" field.
func ExamPaper2NotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldExamPaper2, vs...))
}

// ExamPaper2GT applies the GT predicate on the "ExamPaper2" field.
func ExamPaper2GT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldExamPaper2, v))
}

// ExamPaper2GTE applies the GTE predicate on the "ExamPaper2" field.
func ExamPaper2GTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldExamPaper2, v))
}

// ExamPaper2LT applies the LT predicate on the "ExamPaper2" field.
func ExamPaper2LT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldExamPaper2, v))
}

// ExamPaper2LTE applies the LTE predicate on the "ExamPaper2" field.
func ExamPaper2LTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldExamPaper2, v))
}

// ExamPaper2Contains applies the Contains predicate on the "ExamPaper2" field.
func ExamPaper2Contains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldExamPaper2, v))
}

// ExamPaper2HasPrefix applies the HasPrefix predicate on the "ExamPaper2" field.
func ExamPaper2HasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldExamPaper2, v))
}

// ExamPaper2HasSuffix applies the HasSuffix predicate on the "ExamPaper2" field.
func ExamPaper2HasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldExamPaper2, v))
}

// ExamPaper2IsNil applies the IsNil predicate on the "ExamPaper2" field.
func ExamPaper2IsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldExamPaper2))
}

// ExamPaper2NotNil applies the NotNil predicate on the "ExamPaper2" field.
func ExamPaper2NotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldExamPaper2))
}

// ExamPaper2EqualFold applies the EqualFold predicate on the "ExamPaper2" field.
func ExamPaper2EqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldExamPaper2, v))
}

// ExamPaper2ContainsFold applies the ContainsFold predicate on the "ExamPaper2" field.
func ExamPaper2ContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldExamPaper2, v))
}

// ExamPaper3EQ applies the EQ predicate on the "ExamPaper3" field.
func ExamPaper3EQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamPaper3, v))
}

// ExamPaper3NEQ applies the NEQ predicate on the "ExamPaper3" field.
func ExamPaper3NEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldExamPaper3, v))
}

// ExamPaper3In applies the In predicate on the "ExamPaper3" field.
func ExamPaper3In(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldExamPaper3, vs...))
}

// ExamPaper3NotIn applies the NotIn predicate on the "ExamPaper3" field.
func ExamPaper3NotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldExamPaper3, vs...))
}

// ExamPaper3GT applies the GT predicate on the "ExamPaper3" field.
func ExamPaper3GT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldExamPaper3, v))
}

// ExamPaper3GTE applies the GTE predicate on the "ExamPaper3" field.
func ExamPaper3GTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldExamPaper3, v))
}

// ExamPaper3LT applies the LT predicate on the "ExamPaper3" field.
func ExamPaper3LT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldExamPaper3, v))
}

// ExamPaper3LTE applies the LTE predicate on the "ExamPaper3" field.
func ExamPaper3LTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldExamPaper3, v))
}

// ExamPaper3Contains applies the Contains predicate on the "ExamPaper3" field.
func ExamPaper3Contains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldExamPaper3, v))
}

// ExamPaper3HasPrefix applies the HasPrefix predicate on the "ExamPaper3" field.
func ExamPaper3HasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldExamPaper3, v))
}

// ExamPaper3HasSuffix applies the HasSuffix predicate on the "ExamPaper3" field.
func ExamPaper3HasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldExamPaper3, v))
}

// ExamPaper3IsNil applies the IsNil predicate on the "ExamPaper3" field.
func ExamPaper3IsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldExamPaper3))
}

// ExamPaper3NotNil applies the NotNil predicate on the "ExamPaper3" field.
func ExamPaper3NotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldExamPaper3))
}

// ExamPaper3EqualFold applies the EqualFold predicate on the "ExamPaper3" field.
func ExamPaper3EqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldExamPaper3, v))
}

// ExamPaper3ContainsFold applies the ContainsFold predicate on the "ExamPaper3" field.
func ExamPaper3ContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldExamPaper3, v))
}

// ExamPaper4EQ applies the EQ predicate on the "ExamPaper4" field.
func ExamPaper4EQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamPaper4, v))
}

// ExamPaper4NEQ applies the NEQ predicate on the "ExamPaper4" field.
func ExamPaper4NEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldExamPaper4, v))
}

// ExamPaper4In applies the In predicate on the "ExamPaper4" field.
func ExamPaper4In(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldExamPaper4, vs...))
}

// ExamPaper4NotIn applies the NotIn predicate on the "ExamPaper4" field.
func ExamPaper4NotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldExamPaper4, vs...))
}

// ExamPaper4GT applies the GT predicate on the "ExamPaper4" field.
func ExamPaper4GT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldExamPaper4, v))
}

// ExamPaper4GTE applies the GTE predicate on the "ExamPaper4" field.
func ExamPaper4GTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldExamPaper4, v))
}

// ExamPaper4LT applies the LT predicate on the "ExamPaper4" field.
func ExamPaper4LT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldExamPaper4, v))
}

// ExamPaper4LTE applies the LTE predicate on the "ExamPaper4" field.
func ExamPaper4LTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldExamPaper4, v))
}

// ExamPaper4Contains applies the Contains predicate on the "ExamPaper4" field.
func ExamPaper4Contains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldExamPaper4, v))
}

// ExamPaper4HasPrefix applies the HasPrefix predicate on the "ExamPaper4" field.
func ExamPaper4HasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldExamPaper4, v))
}

// ExamPaper4HasSuffix applies the HasSuffix predicate on the "ExamPaper4" field.
func ExamPaper4HasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldExamPaper4, v))
}

// ExamPaper4IsNil applies the IsNil predicate on the "ExamPaper4" field.
func ExamPaper4IsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldExamPaper4))
}

// ExamPaper4NotNil applies the NotNil predicate on the "ExamPaper4" field.
func ExamPaper4NotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldExamPaper4))
}

// ExamPaper4EqualFold applies the EqualFold predicate on the "ExamPaper4" field.
func ExamPaper4EqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldExamPaper4, v))
}

// ExamPaper4ContainsFold applies the ContainsFold predicate on the "ExamPaper4" field.
func ExamPaper4ContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldExamPaper4, v))
}

// ExamPaper5EQ applies the EQ predicate on the "ExamPaper5" field.
func ExamPaper5EQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamPaper5, v))
}

// ExamPaper5NEQ applies the NEQ predicate on the "ExamPaper5" field.
func ExamPaper5NEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldExamPaper5, v))
}

// ExamPaper5In applies the In predicate on the "ExamPaper5" field.
func ExamPaper5In(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldExamPaper5, vs...))
}

// ExamPaper5NotIn applies the NotIn predicate on the "ExamPaper5" field.
func ExamPaper5NotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldExamPaper5, vs...))
}

// ExamPaper5GT applies the GT predicate on the "ExamPaper5" field.
func ExamPaper5GT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldExamPaper5, v))
}

// ExamPaper5GTE applies the GTE predicate on the "ExamPaper5" field.
func ExamPaper5GTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldExamPaper5, v))
}

// ExamPaper5LT applies the LT predicate on the "ExamPaper5" field.
func ExamPaper5LT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldExamPaper5, v))
}

// ExamPaper5LTE applies the LTE predicate on the "ExamPaper5" field.
func ExamPaper5LTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldExamPaper5, v))
}

// ExamPaper5Contains applies the Contains predicate on the "ExamPaper5" field.
func ExamPaper5Contains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldExamPaper5, v))
}

// ExamPaper5HasPrefix applies the HasPrefix predicate on the "ExamPaper5" field.
func ExamPaper5HasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldExamPaper5, v))
}

// ExamPaper5HasSuffix applies the HasSuffix predicate on the "ExamPaper5" field.
func ExamPaper5HasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldExamPaper5, v))
}

// ExamPaper5IsNil applies the IsNil predicate on the "ExamPaper5" field.
func ExamPaper5IsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldExamPaper5))
}

// ExamPaper5NotNil applies the NotNil predicate on the "ExamPaper5" field.
func ExamPaper5NotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldExamPaper5))
}

// ExamPaper5EqualFold applies the EqualFold predicate on the "ExamPaper5" field.
func ExamPaper5EqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldExamPaper5, v))
}

// ExamPaper5ContainsFold applies the ContainsFold predicate on the "ExamPaper5" field.
func ExamPaper5ContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldExamPaper5, v))
}

// ExamPaper6EQ applies the EQ predicate on the "ExamPaper6" field.
func ExamPaper6EQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldExamPaper6, v))
}

// ExamPaper6NEQ applies the NEQ predicate on the "ExamPaper6" field.
func ExamPaper6NEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldExamPaper6, v))
}

// ExamPaper6In applies the In predicate on the "ExamPaper6" field.
func ExamPaper6In(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldExamPaper6, vs...))
}

// ExamPaper6NotIn applies the NotIn predicate on the "ExamPaper6" field.
func ExamPaper6NotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldExamPaper6, vs...))
}

// ExamPaper6GT applies the GT predicate on the "ExamPaper6" field.
func ExamPaper6GT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldExamPaper6, v))
}

// ExamPaper6GTE applies the GTE predicate on the "ExamPaper6" field.
func ExamPaper6GTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldExamPaper6, v))
}

// ExamPaper6LT applies the LT predicate on the "ExamPaper6" field.
func ExamPaper6LT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldExamPaper6, v))
}

// ExamPaper6LTE applies the LTE predicate on the "ExamPaper6" field.
func ExamPaper6LTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldExamPaper6, v))
}

// ExamPaper6Contains applies the Contains predicate on the "ExamPaper6" field.
func ExamPaper6Contains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldExamPaper6, v))
}

// ExamPaper6HasPrefix applies the HasPrefix predicate on the "ExamPaper6" field.
func ExamPaper6HasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldExamPaper6, v))
}

// ExamPaper6HasSuffix applies the HasSuffix predicate on the "ExamPaper6" field.
func ExamPaper6HasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldExamPaper6, v))
}

// ExamPaper6IsNil applies the IsNil predicate on the "ExamPaper6" field.
func ExamPaper6IsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldExamPaper6))
}

// ExamPaper6NotNil applies the NotNil predicate on the "ExamPaper6" field.
func ExamPaper6NotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldExamPaper6))
}

// ExamPaper6EqualFold applies the EqualFold predicate on the "ExamPaper6" field.
func ExamPaper6EqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldExamPaper6, v))
}

// ExamPaper6ContainsFold applies the ContainsFold predicate on the "ExamPaper6" field.
func ExamPaper6ContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldExamPaper6, v))
}

// PayLevelEligibiltyEQ applies the EQ predicate on the "PayLevelEligibilty" field.
func PayLevelEligibiltyEQ(v bool) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldPayLevelEligibilty, v))
}

// PayLevelEligibiltyNEQ applies the NEQ predicate on the "PayLevelEligibilty" field.
func PayLevelEligibiltyNEQ(v bool) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldPayLevelEligibilty, v))
}

// PayLevelEligibiltyIsNil applies the IsNil predicate on the "PayLevelEligibilty" field.
func PayLevelEligibiltyIsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldPayLevelEligibilty))
}

// PayLevelEligibiltyNotNil applies the NotNil predicate on the "PayLevelEligibilty" field.
func PayLevelEligibiltyNotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldPayLevelEligibilty))
}

// CategoryMinMarksSCSTPHEQ applies the EQ predicate on the "CategoryMinMarksSCSTPH" field.
func CategoryMinMarksSCSTPHEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldCategoryMinMarksSCSTPH, v))
}

// CategoryMinMarksSCSTPHNEQ applies the NEQ predicate on the "CategoryMinMarksSCSTPH" field.
func CategoryMinMarksSCSTPHNEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldCategoryMinMarksSCSTPH, v))
}

// CategoryMinMarksSCSTPHIn applies the In predicate on the "CategoryMinMarksSCSTPH" field.
func CategoryMinMarksSCSTPHIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldCategoryMinMarksSCSTPH, vs...))
}

// CategoryMinMarksSCSTPHNotIn applies the NotIn predicate on the "CategoryMinMarksSCSTPH" field.
func CategoryMinMarksSCSTPHNotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldCategoryMinMarksSCSTPH, vs...))
}

// CategoryMinMarksSCSTPHGT applies the GT predicate on the "CategoryMinMarksSCSTPH" field.
func CategoryMinMarksSCSTPHGT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldCategoryMinMarksSCSTPH, v))
}

// CategoryMinMarksSCSTPHGTE applies the GTE predicate on the "CategoryMinMarksSCSTPH" field.
func CategoryMinMarksSCSTPHGTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldCategoryMinMarksSCSTPH, v))
}

// CategoryMinMarksSCSTPHLT applies the LT predicate on the "CategoryMinMarksSCSTPH" field.
func CategoryMinMarksSCSTPHLT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldCategoryMinMarksSCSTPH, v))
}

// CategoryMinMarksSCSTPHLTE applies the LTE predicate on the "CategoryMinMarksSCSTPH" field.
func CategoryMinMarksSCSTPHLTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldCategoryMinMarksSCSTPH, v))
}

// CategoryMinMarksSCSTPHContains applies the Contains predicate on the "CategoryMinMarksSCSTPH" field.
func CategoryMinMarksSCSTPHContains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldCategoryMinMarksSCSTPH, v))
}

// CategoryMinMarksSCSTPHHasPrefix applies the HasPrefix predicate on the "CategoryMinMarksSCSTPH" field.
func CategoryMinMarksSCSTPHHasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldCategoryMinMarksSCSTPH, v))
}

// CategoryMinMarksSCSTPHHasSuffix applies the HasSuffix predicate on the "CategoryMinMarksSCSTPH" field.
func CategoryMinMarksSCSTPHHasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldCategoryMinMarksSCSTPH, v))
}

// CategoryMinMarksSCSTPHIsNil applies the IsNil predicate on the "CategoryMinMarksSCSTPH" field.
func CategoryMinMarksSCSTPHIsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldCategoryMinMarksSCSTPH))
}

// CategoryMinMarksSCSTPHNotNil applies the NotNil predicate on the "CategoryMinMarksSCSTPH" field.
func CategoryMinMarksSCSTPHNotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldCategoryMinMarksSCSTPH))
}

// CategoryMinMarksSCSTPHEqualFold applies the EqualFold predicate on the "CategoryMinMarksSCSTPH" field.
func CategoryMinMarksSCSTPHEqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldCategoryMinMarksSCSTPH, v))
}

// CategoryMinMarksSCSTPHContainsFold applies the ContainsFold predicate on the "CategoryMinMarksSCSTPH" field.
func CategoryMinMarksSCSTPHContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldCategoryMinMarksSCSTPH, v))
}

// CategoryMinMarksGENOBCEQ applies the EQ predicate on the "CategoryMinMarksGENOBC" field.
func CategoryMinMarksGENOBCEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldCategoryMinMarksGENOBC, v))
}

// CategoryMinMarksGENOBCNEQ applies the NEQ predicate on the "CategoryMinMarksGENOBC" field.
func CategoryMinMarksGENOBCNEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldCategoryMinMarksGENOBC, v))
}

// CategoryMinMarksGENOBCIn applies the In predicate on the "CategoryMinMarksGENOBC" field.
func CategoryMinMarksGENOBCIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldCategoryMinMarksGENOBC, vs...))
}

// CategoryMinMarksGENOBCNotIn applies the NotIn predicate on the "CategoryMinMarksGENOBC" field.
func CategoryMinMarksGENOBCNotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldCategoryMinMarksGENOBC, vs...))
}

// CategoryMinMarksGENOBCGT applies the GT predicate on the "CategoryMinMarksGENOBC" field.
func CategoryMinMarksGENOBCGT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldCategoryMinMarksGENOBC, v))
}

// CategoryMinMarksGENOBCGTE applies the GTE predicate on the "CategoryMinMarksGENOBC" field.
func CategoryMinMarksGENOBCGTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldCategoryMinMarksGENOBC, v))
}

// CategoryMinMarksGENOBCLT applies the LT predicate on the "CategoryMinMarksGENOBC" field.
func CategoryMinMarksGENOBCLT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldCategoryMinMarksGENOBC, v))
}

// CategoryMinMarksGENOBCLTE applies the LTE predicate on the "CategoryMinMarksGENOBC" field.
func CategoryMinMarksGENOBCLTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldCategoryMinMarksGENOBC, v))
}

// CategoryMinMarksGENOBCContains applies the Contains predicate on the "CategoryMinMarksGENOBC" field.
func CategoryMinMarksGENOBCContains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldCategoryMinMarksGENOBC, v))
}

// CategoryMinMarksGENOBCHasPrefix applies the HasPrefix predicate on the "CategoryMinMarksGENOBC" field.
func CategoryMinMarksGENOBCHasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldCategoryMinMarksGENOBC, v))
}

// CategoryMinMarksGENOBCHasSuffix applies the HasSuffix predicate on the "CategoryMinMarksGENOBC" field.
func CategoryMinMarksGENOBCHasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldCategoryMinMarksGENOBC, v))
}

// CategoryMinMarksGENOBCIsNil applies the IsNil predicate on the "CategoryMinMarksGENOBC" field.
func CategoryMinMarksGENOBCIsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldCategoryMinMarksGENOBC))
}

// CategoryMinMarksGENOBCNotNil applies the NotNil predicate on the "CategoryMinMarksGENOBC" field.
func CategoryMinMarksGENOBCNotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldCategoryMinMarksGENOBC))
}

// CategoryMinMarksGENOBCEqualFold applies the EqualFold predicate on the "CategoryMinMarksGENOBC" field.
func CategoryMinMarksGENOBCEqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldCategoryMinMarksGENOBC, v))
}

// CategoryMinMarksGENOBCContainsFold applies the ContainsFold predicate on the "CategoryMinMarksGENOBC" field.
func CategoryMinMarksGENOBCContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldCategoryMinMarksGENOBC, v))
}

// LocalLanguageAllowedEQ applies the EQ predicate on the "LocalLanguageAllowed" field.
func LocalLanguageAllowedEQ(v bool) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldLocalLanguageAllowed, v))
}

// LocalLanguageAllowedNEQ applies the NEQ predicate on the "LocalLanguageAllowed" field.
func LocalLanguageAllowedNEQ(v bool) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldLocalLanguageAllowed, v))
}

// LocalLanguageAllowedIsNil applies the IsNil predicate on the "LocalLanguageAllowed" field.
func LocalLanguageAllowedIsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldLocalLanguageAllowed))
}

// LocalLanguageAllowedNotNil applies the NotNil predicate on the "LocalLanguageAllowed" field.
func LocalLanguageAllowedNotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldLocalLanguageAllowed))
}

// UpdatedAtEQ applies the EQ predicate on the "UpdatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "UpdatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "UpdatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "UpdatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "UpdatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "UpdatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "UpdatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "UpdatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "UpdatedAt" field.
func UpdatedAtIsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "UpdatedAt" field.
func UpdatedAtNotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldUpdatedAt))
}

// UpdatedByEQ applies the EQ predicate on the "UpdatedBy" field.
func UpdatedByEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "UpdatedBy" field.
func UpdatedByNEQ(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "UpdatedBy" field.
func UpdatedByIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "UpdatedBy" field.
func UpdatedByNotIn(vs ...string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "UpdatedBy" field.
func UpdatedByGT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "UpdatedBy" field.
func UpdatedByGTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "UpdatedBy" field.
func UpdatedByLT(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "UpdatedBy" field.
func UpdatedByLTE(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "UpdatedBy" field.
func UpdatedByContains(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "UpdatedBy" field.
func UpdatedByHasPrefix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "UpdatedBy" field.
func UpdatedByHasSuffix(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "UpdatedBy" field.
func UpdatedByIsNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "UpdatedBy" field.
func UpdatedByNotNil() predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "UpdatedBy" field.
func UpdatedByEqualFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "UpdatedBy" field.
func UpdatedByContainsFold(v string) predicate.Exam_PM {
	return predicate.Exam_PM(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Exam_PM) predicate.Exam_PM {
	return predicate.Exam_PM(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Exam_PM) predicate.Exam_PM {
	return predicate.Exam_PM(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Exam_PM) predicate.Exam_PM {
	return predicate.Exam_PM(func(s *sql.Selector) {
		p(s.Not())
	})
}
