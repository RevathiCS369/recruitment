// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/exam_ip"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Exam_IP is the model entity for the Exam_IP schema.
type Exam_IP struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// ExamNameCode holds the value of the "ExamNameCode" field.
	ExamNameCode string `json:"ExamNameCode,omitempty"`
	// ExamName holds the value of the "ExamName" field.
	ExamName string `json:"ExamName,omitempty"`
	// ExamType holds the value of the "ExamType" field.
	ExamType string `json:"ExamType,omitempty"`
	// NotificationCode holds the value of the "NotificationCode" field.
	NotificationCode int32 `json:"NotificationCode,omitempty"`
	// ConductedBy holds the value of the "ConductedBy" field.
	ConductedBy string `json:"ConductedBy,omitempty"`
	// NodalOffice holds the value of the "NodalOffice" field.
	NodalOffice string `json:"NodalOffice,omitempty"`
	// CalendarCode holds the value of the "CalendarCode" field.
	CalendarCode int32 `json:"CalendarCode,omitempty"`
	// PaperCode holds the value of the "PaperCode" field.
	PaperCode int32 `json:"PaperCode,omitempty"`
	// EligibleCadre holds the value of the "EligibleCadre" field.
	EligibleCadre string `json:"EligibleCadre,omitempty"`
	// EligiblePost1 holds the value of the "EligiblePost1" field.
	EligiblePost1 string `json:"EligiblePost1,omitempty"`
	// EligiblePost2 holds the value of the "EligiblePost2" field.
	EligiblePost2 string `json:"EligiblePost2,omitempty"`
	// EligiblePost3 holds the value of the "EligiblePost3" field.
	EligiblePost3 string `json:"EligiblePost3,omitempty"`
	// EligiblePost4 holds the value of the "EligiblePost4" field.
	EligiblePost4 string `json:"EligiblePost4,omitempty"`
	// EligiblePost5 holds the value of the "EligiblePost5" field.
	EligiblePost5 string `json:"EligiblePost5,omitempty"`
	// ExamPost1 holds the value of the "ExamPost1" field.
	ExamPost1 string `json:"ExamPost1,omitempty"`
	// ExamPost2 holds the value of the "ExamPost2" field.
	ExamPost2 string `json:"ExamPost2,omitempty"`
	// ExamPost3 holds the value of the "ExamPost3" field.
	ExamPost3 string `json:"ExamPost3,omitempty"`
	// ExamPost4 holds the value of the "ExamPost4" field.
	ExamPost4 string `json:"ExamPost4,omitempty"`
	// ExamPost5 holds the value of the "ExamPost5" field.
	ExamPost5 string `json:"ExamPost5,omitempty"`
	// EducationCriteria holds the value of the "EducationCriteria" field.
	EducationCriteria string `json:"EducationCriteria,omitempty"`
	// CategoryAgeLimitGEN holds the value of the "CategoryAgeLimitGEN" field.
	CategoryAgeLimitGEN string `json:"CategoryAgeLimitGEN,omitempty"`
	// CategoryAgeLimitSC holds the value of the "CategoryAgeLimitSC" field.
	CategoryAgeLimitSC string `json:"CategoryAgeLimitSC,omitempty"`
	// CategoryAgeLimitST holds the value of the "CategoryAgeLimitST" field.
	CategoryAgeLimitST string `json:"CategoryAgeLimitST,omitempty"`
	// ServiceYears holds the value of the "ServiceYears" field.
	ServiceYears string `json:"ServiceYears,omitempty"`
	// DrivingLicenseRequired holds the value of the "DrivingLicenseRequired" field.
	DrivingLicenseRequired string `json:"DrivingLicenseRequired,omitempty"`
	// ExamPaperCode holds the value of the "ExamPaperCode" field.
	ExamPaperCode string `json:"ExamPaperCode,omitempty"`
	// ExamPaper1 holds the value of the "ExamPaper1" field.
	ExamPaper1 string `json:"ExamPaper1,omitempty"`
	// ExamPaper2 holds the value of the "ExamPaper2" field.
	ExamPaper2 string `json:"ExamPaper2,omitempty"`
	// ExamPaper3 holds the value of the "ExamPaper3" field.
	ExamPaper3 string `json:"ExamPaper3,omitempty"`
	// ExamPaper4 holds the value of the "ExamPaper4" field.
	ExamPaper4 string `json:"ExamPaper4,omitempty"`
	// ExamPaper5 holds the value of the "ExamPaper5" field.
	ExamPaper5 string `json:"ExamPaper5,omitempty"`
	// ExamPaper6 holds the value of the "ExamPaper6" field.
	ExamPaper6 string `json:"ExamPaper6,omitempty"`
	// PayLevelEligibilty holds the value of the "PayLevelEligibilty" field.
	PayLevelEligibilty bool `json:"PayLevelEligibilty,omitempty"`
	// CategoryMinMarksSCSTPH holds the value of the "CategoryMinMarksSCSTPH" field.
	CategoryMinMarksSCSTPH string `json:"CategoryMinMarksSCSTPH,omitempty"`
	// CategoryMinMarksGENOBC holds the value of the "CategoryMinMarksGENOBC" field.
	CategoryMinMarksGENOBC string `json:"CategoryMinMarksGENOBC,omitempty"`
	// LocalLanguageAllowed holds the value of the "LocalLanguageAllowed" field.
	LocalLanguageAllowed bool `json:"LocalLanguageAllowed,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// UpdatedBy holds the value of the "UpdatedBy" field.
	UpdatedBy string `json:"UpdatedBy,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Exam_IPQuery when eager-loading is set.
	Edges                                  Exam_IPEdges `json:"edges"`
	exam_calendar_examcal_ip_ref           *int32
	exam_papers_papers_ip_ref              *int32
	exam_applications_ip_exam_appln_ip_ref *int64
	notification_notifications_ip          *int32
	user_master_users_ip_type              *int64
	selectValues                           sql.SelectValues
}

// Exam_IPEdges holds the relations/edges for other nodes in the graph.
type Exam_IPEdges struct {
	// ExamcalIPRef holds the value of the examcal_ip_ref edge.
	ExamcalIPRef []*ExamCalendar `json:"examcal_ip_ref,omitempty"`
	// PapersIPRef holds the value of the papers_ip_ref edge.
	PapersIPRef []*ExamPapers `json:"papers_ip_ref,omitempty"`
	// UsersIPType holds the value of the users_ip_type edge.
	UsersIPType []*UserMaster `json:"users_ip_type,omitempty"`
	// ExamApplnIPRef holds the value of the ExamAppln_IP_Ref edge.
	ExamApplnIPRef []*Exam_Applications_IP `json:"ExamAppln_IP_Ref,omitempty"`
	// NotificationsIP holds the value of the notifications_ip edge.
	NotificationsIP []*Notification `json:"notifications_ip,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// ExamcalIPRefOrErr returns the ExamcalIPRef value or an error if the edge
// was not loaded in eager-loading.
func (e Exam_IPEdges) ExamcalIPRefOrErr() ([]*ExamCalendar, error) {
	if e.loadedTypes[0] {
		return e.ExamcalIPRef, nil
	}
	return nil, &NotLoadedError{edge: "examcal_ip_ref"}
}

// PapersIPRefOrErr returns the PapersIPRef value or an error if the edge
// was not loaded in eager-loading.
func (e Exam_IPEdges) PapersIPRefOrErr() ([]*ExamPapers, error) {
	if e.loadedTypes[1] {
		return e.PapersIPRef, nil
	}
	return nil, &NotLoadedError{edge: "papers_ip_ref"}
}

// UsersIPTypeOrErr returns the UsersIPType value or an error if the edge
// was not loaded in eager-loading.
func (e Exam_IPEdges) UsersIPTypeOrErr() ([]*UserMaster, error) {
	if e.loadedTypes[2] {
		return e.UsersIPType, nil
	}
	return nil, &NotLoadedError{edge: "users_ip_type"}
}

// ExamApplnIPRefOrErr returns the ExamApplnIPRef value or an error if the edge
// was not loaded in eager-loading.
func (e Exam_IPEdges) ExamApplnIPRefOrErr() ([]*Exam_Applications_IP, error) {
	if e.loadedTypes[3] {
		return e.ExamApplnIPRef, nil
	}
	return nil, &NotLoadedError{edge: "ExamAppln_IP_Ref"}
}

// NotificationsIPOrErr returns the NotificationsIP value or an error if the edge
// was not loaded in eager-loading.
func (e Exam_IPEdges) NotificationsIPOrErr() ([]*Notification, error) {
	if e.loadedTypes[4] {
		return e.NotificationsIP, nil
	}
	return nil, &NotLoadedError{edge: "notifications_ip"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Exam_IP) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case exam_ip.FieldPayLevelEligibilty, exam_ip.FieldLocalLanguageAllowed:
			values[i] = new(sql.NullBool)
		case exam_ip.FieldID, exam_ip.FieldNotificationCode, exam_ip.FieldCalendarCode, exam_ip.FieldPaperCode:
			values[i] = new(sql.NullInt64)
		case exam_ip.FieldExamNameCode, exam_ip.FieldExamName, exam_ip.FieldExamType, exam_ip.FieldConductedBy, exam_ip.FieldNodalOffice, exam_ip.FieldEligibleCadre, exam_ip.FieldEligiblePost1, exam_ip.FieldEligiblePost2, exam_ip.FieldEligiblePost3, exam_ip.FieldEligiblePost4, exam_ip.FieldEligiblePost5, exam_ip.FieldExamPost1, exam_ip.FieldExamPost2, exam_ip.FieldExamPost3, exam_ip.FieldExamPost4, exam_ip.FieldExamPost5, exam_ip.FieldEducationCriteria, exam_ip.FieldCategoryAgeLimitGEN, exam_ip.FieldCategoryAgeLimitSC, exam_ip.FieldCategoryAgeLimitST, exam_ip.FieldServiceYears, exam_ip.FieldDrivingLicenseRequired, exam_ip.FieldExamPaperCode, exam_ip.FieldExamPaper1, exam_ip.FieldExamPaper2, exam_ip.FieldExamPaper3, exam_ip.FieldExamPaper4, exam_ip.FieldExamPaper5, exam_ip.FieldExamPaper6, exam_ip.FieldCategoryMinMarksSCSTPH, exam_ip.FieldCategoryMinMarksGENOBC, exam_ip.FieldUpdatedBy:
			values[i] = new(sql.NullString)
		case exam_ip.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case exam_ip.ForeignKeys[0]: // exam_calendar_examcal_ip_ref
			values[i] = new(sql.NullInt64)
		case exam_ip.ForeignKeys[1]: // exam_papers_papers_ip_ref
			values[i] = new(sql.NullInt64)
		case exam_ip.ForeignKeys[2]: // exam_applications_ip_exam_appln_ip_ref
			values[i] = new(sql.NullInt64)
		case exam_ip.ForeignKeys[3]: // notification_notifications_ip
			values[i] = new(sql.NullInt64)
		case exam_ip.ForeignKeys[4]: // user_master_users_ip_type
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Exam_IP fields.
func (ei *Exam_IP) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case exam_ip.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ei.ID = int32(value.Int64)
		case exam_ip.FieldExamNameCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamNameCode", values[i])
			} else if value.Valid {
				ei.ExamNameCode = value.String
			}
		case exam_ip.FieldExamName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamName", values[i])
			} else if value.Valid {
				ei.ExamName = value.String
			}
		case exam_ip.FieldExamType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamType", values[i])
			} else if value.Valid {
				ei.ExamType = value.String
			}
		case exam_ip.FieldNotificationCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field NotificationCode", values[i])
			} else if value.Valid {
				ei.NotificationCode = int32(value.Int64)
			}
		case exam_ip.FieldConductedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ConductedBy", values[i])
			} else if value.Valid {
				ei.ConductedBy = value.String
			}
		case exam_ip.FieldNodalOffice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NodalOffice", values[i])
			} else if value.Valid {
				ei.NodalOffice = value.String
			}
		case exam_ip.FieldCalendarCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CalendarCode", values[i])
			} else if value.Valid {
				ei.CalendarCode = int32(value.Int64)
			}
		case exam_ip.FieldPaperCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field PaperCode", values[i])
			} else if value.Valid {
				ei.PaperCode = int32(value.Int64)
			}
		case exam_ip.FieldEligibleCadre:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EligibleCadre", values[i])
			} else if value.Valid {
				ei.EligibleCadre = value.String
			}
		case exam_ip.FieldEligiblePost1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EligiblePost1", values[i])
			} else if value.Valid {
				ei.EligiblePost1 = value.String
			}
		case exam_ip.FieldEligiblePost2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EligiblePost2", values[i])
			} else if value.Valid {
				ei.EligiblePost2 = value.String
			}
		case exam_ip.FieldEligiblePost3:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EligiblePost3", values[i])
			} else if value.Valid {
				ei.EligiblePost3 = value.String
			}
		case exam_ip.FieldEligiblePost4:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EligiblePost4", values[i])
			} else if value.Valid {
				ei.EligiblePost4 = value.String
			}
		case exam_ip.FieldEligiblePost5:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EligiblePost5", values[i])
			} else if value.Valid {
				ei.EligiblePost5 = value.String
			}
		case exam_ip.FieldExamPost1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamPost1", values[i])
			} else if value.Valid {
				ei.ExamPost1 = value.String
			}
		case exam_ip.FieldExamPost2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamPost2", values[i])
			} else if value.Valid {
				ei.ExamPost2 = value.String
			}
		case exam_ip.FieldExamPost3:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamPost3", values[i])
			} else if value.Valid {
				ei.ExamPost3 = value.String
			}
		case exam_ip.FieldExamPost4:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamPost4", values[i])
			} else if value.Valid {
				ei.ExamPost4 = value.String
			}
		case exam_ip.FieldExamPost5:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamPost5", values[i])
			} else if value.Valid {
				ei.ExamPost5 = value.String
			}
		case exam_ip.FieldEducationCriteria:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EducationCriteria", values[i])
			} else if value.Valid {
				ei.EducationCriteria = value.String
			}
		case exam_ip.FieldCategoryAgeLimitGEN:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CategoryAgeLimitGEN", values[i])
			} else if value.Valid {
				ei.CategoryAgeLimitGEN = value.String
			}
		case exam_ip.FieldCategoryAgeLimitSC:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CategoryAgeLimitSC", values[i])
			} else if value.Valid {
				ei.CategoryAgeLimitSC = value.String
			}
		case exam_ip.FieldCategoryAgeLimitST:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CategoryAgeLimitST", values[i])
			} else if value.Valid {
				ei.CategoryAgeLimitST = value.String
			}
		case exam_ip.FieldServiceYears:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ServiceYears", values[i])
			} else if value.Valid {
				ei.ServiceYears = value.String
			}
		case exam_ip.FieldDrivingLicenseRequired:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DrivingLicenseRequired", values[i])
			} else if value.Valid {
				ei.DrivingLicenseRequired = value.String
			}
		case exam_ip.FieldExamPaperCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamPaperCode", values[i])
			} else if value.Valid {
				ei.ExamPaperCode = value.String
			}
		case exam_ip.FieldExamPaper1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamPaper1", values[i])
			} else if value.Valid {
				ei.ExamPaper1 = value.String
			}
		case exam_ip.FieldExamPaper2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamPaper2", values[i])
			} else if value.Valid {
				ei.ExamPaper2 = value.String
			}
		case exam_ip.FieldExamPaper3:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamPaper3", values[i])
			} else if value.Valid {
				ei.ExamPaper3 = value.String
			}
		case exam_ip.FieldExamPaper4:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamPaper4", values[i])
			} else if value.Valid {
				ei.ExamPaper4 = value.String
			}
		case exam_ip.FieldExamPaper5:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamPaper5", values[i])
			} else if value.Valid {
				ei.ExamPaper5 = value.String
			}
		case exam_ip.FieldExamPaper6:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamPaper6", values[i])
			} else if value.Valid {
				ei.ExamPaper6 = value.String
			}
		case exam_ip.FieldPayLevelEligibilty:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field PayLevelEligibilty", values[i])
			} else if value.Valid {
				ei.PayLevelEligibilty = value.Bool
			}
		case exam_ip.FieldCategoryMinMarksSCSTPH:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CategoryMinMarksSCSTPH", values[i])
			} else if value.Valid {
				ei.CategoryMinMarksSCSTPH = value.String
			}
		case exam_ip.FieldCategoryMinMarksGENOBC:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CategoryMinMarksGENOBC", values[i])
			} else if value.Valid {
				ei.CategoryMinMarksGENOBC = value.String
			}
		case exam_ip.FieldLocalLanguageAllowed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field LocalLanguageAllowed", values[i])
			} else if value.Valid {
				ei.LocalLanguageAllowed = value.Bool
			}
		case exam_ip.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				ei.UpdatedAt = value.Time
			}
		case exam_ip.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedBy", values[i])
			} else if value.Valid {
				ei.UpdatedBy = value.String
			}
		case exam_ip.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exam_calendar_examcal_ip_ref", value)
			} else if value.Valid {
				ei.exam_calendar_examcal_ip_ref = new(int32)
				*ei.exam_calendar_examcal_ip_ref = int32(value.Int64)
			}
		case exam_ip.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exam_papers_papers_ip_ref", value)
			} else if value.Valid {
				ei.exam_papers_papers_ip_ref = new(int32)
				*ei.exam_papers_papers_ip_ref = int32(value.Int64)
			}
		case exam_ip.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exam_applications_ip_exam_appln_ip_ref", value)
			} else if value.Valid {
				ei.exam_applications_ip_exam_appln_ip_ref = new(int64)
				*ei.exam_applications_ip_exam_appln_ip_ref = int64(value.Int64)
			}
		case exam_ip.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field notification_notifications_ip", value)
			} else if value.Valid {
				ei.notification_notifications_ip = new(int32)
				*ei.notification_notifications_ip = int32(value.Int64)
			}
		case exam_ip.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_master_users_ip_type", value)
			} else if value.Valid {
				ei.user_master_users_ip_type = new(int64)
				*ei.user_master_users_ip_type = int64(value.Int64)
			}
		default:
			ei.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Exam_IP.
// This includes values selected through modifiers, order, etc.
func (ei *Exam_IP) Value(name string) (ent.Value, error) {
	return ei.selectValues.Get(name)
}

// QueryExamcalIPRef queries the "examcal_ip_ref" edge of the Exam_IP entity.
func (ei *Exam_IP) QueryExamcalIPRef() *ExamCalendarQuery {
	return NewExamIPClient(ei.config).QueryExamcalIPRef(ei)
}

// QueryPapersIPRef queries the "papers_ip_ref" edge of the Exam_IP entity.
func (ei *Exam_IP) QueryPapersIPRef() *ExamPapersQuery {
	return NewExamIPClient(ei.config).QueryPapersIPRef(ei)
}

// QueryUsersIPType queries the "users_ip_type" edge of the Exam_IP entity.
func (ei *Exam_IP) QueryUsersIPType() *UserMasterQuery {
	return NewExamIPClient(ei.config).QueryUsersIPType(ei)
}

// QueryExamApplnIPRef queries the "ExamAppln_IP_Ref" edge of the Exam_IP entity.
func (ei *Exam_IP) QueryExamApplnIPRef() *ExamApplicationsIPQuery {
	return NewExamIPClient(ei.config).QueryExamApplnIPRef(ei)
}

// QueryNotificationsIP queries the "notifications_ip" edge of the Exam_IP entity.
func (ei *Exam_IP) QueryNotificationsIP() *NotificationQuery {
	return NewExamIPClient(ei.config).QueryNotificationsIP(ei)
}

// Update returns a builder for updating this Exam_IP.
// Note that you need to call Exam_IP.Unwrap() before calling this method if this Exam_IP
// was returned from a transaction, and the transaction was committed or rolled back.
func (ei *Exam_IP) Update() *ExamIPUpdateOne {
	return NewExamIPClient(ei.config).UpdateOne(ei)
}

// Unwrap unwraps the Exam_IP entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ei *Exam_IP) Unwrap() *Exam_IP {
	_tx, ok := ei.config.driver.(*txDriver)
	if !ok {
		panic("ent: Exam_IP is not a transactional entity")
	}
	ei.config.driver = _tx.drv
	return ei
}

// String implements the fmt.Stringer.
func (ei *Exam_IP) String() string {
	var builder strings.Builder
	builder.WriteString("Exam_IP(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ei.ID))
	builder.WriteString("ExamNameCode=")
	builder.WriteString(ei.ExamNameCode)
	builder.WriteString(", ")
	builder.WriteString("ExamName=")
	builder.WriteString(ei.ExamName)
	builder.WriteString(", ")
	builder.WriteString("ExamType=")
	builder.WriteString(ei.ExamType)
	builder.WriteString(", ")
	builder.WriteString("NotificationCode=")
	builder.WriteString(fmt.Sprintf("%v", ei.NotificationCode))
	builder.WriteString(", ")
	builder.WriteString("ConductedBy=")
	builder.WriteString(ei.ConductedBy)
	builder.WriteString(", ")
	builder.WriteString("NodalOffice=")
	builder.WriteString(ei.NodalOffice)
	builder.WriteString(", ")
	builder.WriteString("CalendarCode=")
	builder.WriteString(fmt.Sprintf("%v", ei.CalendarCode))
	builder.WriteString(", ")
	builder.WriteString("PaperCode=")
	builder.WriteString(fmt.Sprintf("%v", ei.PaperCode))
	builder.WriteString(", ")
	builder.WriteString("EligibleCadre=")
	builder.WriteString(ei.EligibleCadre)
	builder.WriteString(", ")
	builder.WriteString("EligiblePost1=")
	builder.WriteString(ei.EligiblePost1)
	builder.WriteString(", ")
	builder.WriteString("EligiblePost2=")
	builder.WriteString(ei.EligiblePost2)
	builder.WriteString(", ")
	builder.WriteString("EligiblePost3=")
	builder.WriteString(ei.EligiblePost3)
	builder.WriteString(", ")
	builder.WriteString("EligiblePost4=")
	builder.WriteString(ei.EligiblePost4)
	builder.WriteString(", ")
	builder.WriteString("EligiblePost5=")
	builder.WriteString(ei.EligiblePost5)
	builder.WriteString(", ")
	builder.WriteString("ExamPost1=")
	builder.WriteString(ei.ExamPost1)
	builder.WriteString(", ")
	builder.WriteString("ExamPost2=")
	builder.WriteString(ei.ExamPost2)
	builder.WriteString(", ")
	builder.WriteString("ExamPost3=")
	builder.WriteString(ei.ExamPost3)
	builder.WriteString(", ")
	builder.WriteString("ExamPost4=")
	builder.WriteString(ei.ExamPost4)
	builder.WriteString(", ")
	builder.WriteString("ExamPost5=")
	builder.WriteString(ei.ExamPost5)
	builder.WriteString(", ")
	builder.WriteString("EducationCriteria=")
	builder.WriteString(ei.EducationCriteria)
	builder.WriteString(", ")
	builder.WriteString("CategoryAgeLimitGEN=")
	builder.WriteString(ei.CategoryAgeLimitGEN)
	builder.WriteString(", ")
	builder.WriteString("CategoryAgeLimitSC=")
	builder.WriteString(ei.CategoryAgeLimitSC)
	builder.WriteString(", ")
	builder.WriteString("CategoryAgeLimitST=")
	builder.WriteString(ei.CategoryAgeLimitST)
	builder.WriteString(", ")
	builder.WriteString("ServiceYears=")
	builder.WriteString(ei.ServiceYears)
	builder.WriteString(", ")
	builder.WriteString("DrivingLicenseRequired=")
	builder.WriteString(ei.DrivingLicenseRequired)
	builder.WriteString(", ")
	builder.WriteString("ExamPaperCode=")
	builder.WriteString(ei.ExamPaperCode)
	builder.WriteString(", ")
	builder.WriteString("ExamPaper1=")
	builder.WriteString(ei.ExamPaper1)
	builder.WriteString(", ")
	builder.WriteString("ExamPaper2=")
	builder.WriteString(ei.ExamPaper2)
	builder.WriteString(", ")
	builder.WriteString("ExamPaper3=")
	builder.WriteString(ei.ExamPaper3)
	builder.WriteString(", ")
	builder.WriteString("ExamPaper4=")
	builder.WriteString(ei.ExamPaper4)
	builder.WriteString(", ")
	builder.WriteString("ExamPaper5=")
	builder.WriteString(ei.ExamPaper5)
	builder.WriteString(", ")
	builder.WriteString("ExamPaper6=")
	builder.WriteString(ei.ExamPaper6)
	builder.WriteString(", ")
	builder.WriteString("PayLevelEligibilty=")
	builder.WriteString(fmt.Sprintf("%v", ei.PayLevelEligibilty))
	builder.WriteString(", ")
	builder.WriteString("CategoryMinMarksSCSTPH=")
	builder.WriteString(ei.CategoryMinMarksSCSTPH)
	builder.WriteString(", ")
	builder.WriteString("CategoryMinMarksGENOBC=")
	builder.WriteString(ei.CategoryMinMarksGENOBC)
	builder.WriteString(", ")
	builder.WriteString("LocalLanguageAllowed=")
	builder.WriteString(fmt.Sprintf("%v", ei.LocalLanguageAllowed))
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(ei.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedBy=")
	builder.WriteString(ei.UpdatedBy)
	builder.WriteByte(')')
	return builder.String()
}

// Exam_IPs is a parsable slice of Exam_IP.
type Exam_IPs []*Exam_IP
