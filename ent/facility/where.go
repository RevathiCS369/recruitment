// Code generated by ent, DO NOT EDIT.

package facility

import (
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.Facility {
	return predicate.Facility(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.Facility {
	return predicate.Facility(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.Facility {
	return predicate.Facility(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.Facility {
	return predicate.Facility(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.Facility {
	return predicate.Facility(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.Facility {
	return predicate.Facility(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.Facility {
	return predicate.Facility(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.Facility {
	return predicate.Facility(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.Facility {
	return predicate.Facility(sql.FieldLTE(FieldID, id))
}

// FacilityCode applies equality check predicate on the "FacilityCode" field. It's identical to FacilityCodeEQ.
func FacilityCode(v string) predicate.Facility {
	return predicate.Facility(sql.FieldEQ(FieldFacilityCode, v))
}

// OfficeType applies equality check predicate on the "OfficeType" field. It's identical to OfficeTypeEQ.
func OfficeType(v string) predicate.Facility {
	return predicate.Facility(sql.FieldEQ(FieldOfficeType, v))
}

// FacilityName applies equality check predicate on the "FacilityName" field. It's identical to FacilityNameEQ.
func FacilityName(v string) predicate.Facility {
	return predicate.Facility(sql.FieldEQ(FieldFacilityName, v))
}

// ReportingOfficeType applies equality check predicate on the "ReportingOfficeType" field. It's identical to ReportingOfficeTypeEQ.
func ReportingOfficeType(v string) predicate.Facility {
	return predicate.Facility(sql.FieldEQ(FieldReportingOfficeType, v))
}

// ReportingOfficeCode applies equality check predicate on the "ReportingOfficeCode" field. It's identical to ReportingOfficeCodeEQ.
func ReportingOfficeCode(v string) predicate.Facility {
	return predicate.Facility(sql.FieldEQ(FieldReportingOfficeCode, v))
}

// EmailID applies equality check predicate on the "EmailID" field. It's identical to EmailIDEQ.
func EmailID(v string) predicate.Facility {
	return predicate.Facility(sql.FieldEQ(FieldEmailID, v))
}

// MobileNumber applies equality check predicate on the "MobileNumber" field. It's identical to MobileNumberEQ.
func MobileNumber(v int32) predicate.Facility {
	return predicate.Facility(sql.FieldEQ(FieldMobileNumber, v))
}

// DivisionCode applies equality check predicate on the "DivisionCode" field. It's identical to DivisionCodeEQ.
func DivisionCode(v int32) predicate.Facility {
	return predicate.Facility(sql.FieldEQ(FieldDivisionCode, v))
}

// RegionCode applies equality check predicate on the "RegionCode" field. It's identical to RegionCodeEQ.
func RegionCode(v int32) predicate.Facility {
	return predicate.Facility(sql.FieldEQ(FieldRegionCode, v))
}

// CircleCode applies equality check predicate on the "CircleCode" field. It's identical to CircleCodeEQ.
func CircleCode(v int32) predicate.Facility {
	return predicate.Facility(sql.FieldEQ(FieldCircleCode, v))
}

// FacilityCodeEQ applies the EQ predicate on the "FacilityCode" field.
func FacilityCodeEQ(v string) predicate.Facility {
	return predicate.Facility(sql.FieldEQ(FieldFacilityCode, v))
}

// FacilityCodeNEQ applies the NEQ predicate on the "FacilityCode" field.
func FacilityCodeNEQ(v string) predicate.Facility {
	return predicate.Facility(sql.FieldNEQ(FieldFacilityCode, v))
}

// FacilityCodeIn applies the In predicate on the "FacilityCode" field.
func FacilityCodeIn(vs ...string) predicate.Facility {
	return predicate.Facility(sql.FieldIn(FieldFacilityCode, vs...))
}

// FacilityCodeNotIn applies the NotIn predicate on the "FacilityCode" field.
func FacilityCodeNotIn(vs ...string) predicate.Facility {
	return predicate.Facility(sql.FieldNotIn(FieldFacilityCode, vs...))
}

// FacilityCodeGT applies the GT predicate on the "FacilityCode" field.
func FacilityCodeGT(v string) predicate.Facility {
	return predicate.Facility(sql.FieldGT(FieldFacilityCode, v))
}

// FacilityCodeGTE applies the GTE predicate on the "FacilityCode" field.
func FacilityCodeGTE(v string) predicate.Facility {
	return predicate.Facility(sql.FieldGTE(FieldFacilityCode, v))
}

// FacilityCodeLT applies the LT predicate on the "FacilityCode" field.
func FacilityCodeLT(v string) predicate.Facility {
	return predicate.Facility(sql.FieldLT(FieldFacilityCode, v))
}

// FacilityCodeLTE applies the LTE predicate on the "FacilityCode" field.
func FacilityCodeLTE(v string) predicate.Facility {
	return predicate.Facility(sql.FieldLTE(FieldFacilityCode, v))
}

// FacilityCodeContains applies the Contains predicate on the "FacilityCode" field.
func FacilityCodeContains(v string) predicate.Facility {
	return predicate.Facility(sql.FieldContains(FieldFacilityCode, v))
}

// FacilityCodeHasPrefix applies the HasPrefix predicate on the "FacilityCode" field.
func FacilityCodeHasPrefix(v string) predicate.Facility {
	return predicate.Facility(sql.FieldHasPrefix(FieldFacilityCode, v))
}

// FacilityCodeHasSuffix applies the HasSuffix predicate on the "FacilityCode" field.
func FacilityCodeHasSuffix(v string) predicate.Facility {
	return predicate.Facility(sql.FieldHasSuffix(FieldFacilityCode, v))
}

// FacilityCodeEqualFold applies the EqualFold predicate on the "FacilityCode" field.
func FacilityCodeEqualFold(v string) predicate.Facility {
	return predicate.Facility(sql.FieldEqualFold(FieldFacilityCode, v))
}

// FacilityCodeContainsFold applies the ContainsFold predicate on the "FacilityCode" field.
func FacilityCodeContainsFold(v string) predicate.Facility {
	return predicate.Facility(sql.FieldContainsFold(FieldFacilityCode, v))
}

// OfficeTypeEQ applies the EQ predicate on the "OfficeType" field.
func OfficeTypeEQ(v string) predicate.Facility {
	return predicate.Facility(sql.FieldEQ(FieldOfficeType, v))
}

// OfficeTypeNEQ applies the NEQ predicate on the "OfficeType" field.
func OfficeTypeNEQ(v string) predicate.Facility {
	return predicate.Facility(sql.FieldNEQ(FieldOfficeType, v))
}

// OfficeTypeIn applies the In predicate on the "OfficeType" field.
func OfficeTypeIn(vs ...string) predicate.Facility {
	return predicate.Facility(sql.FieldIn(FieldOfficeType, vs...))
}

// OfficeTypeNotIn applies the NotIn predicate on the "OfficeType" field.
func OfficeTypeNotIn(vs ...string) predicate.Facility {
	return predicate.Facility(sql.FieldNotIn(FieldOfficeType, vs...))
}

// OfficeTypeGT applies the GT predicate on the "OfficeType" field.
func OfficeTypeGT(v string) predicate.Facility {
	return predicate.Facility(sql.FieldGT(FieldOfficeType, v))
}

// OfficeTypeGTE applies the GTE predicate on the "OfficeType" field.
func OfficeTypeGTE(v string) predicate.Facility {
	return predicate.Facility(sql.FieldGTE(FieldOfficeType, v))
}

// OfficeTypeLT applies the LT predicate on the "OfficeType" field.
func OfficeTypeLT(v string) predicate.Facility {
	return predicate.Facility(sql.FieldLT(FieldOfficeType, v))
}

// OfficeTypeLTE applies the LTE predicate on the "OfficeType" field.
func OfficeTypeLTE(v string) predicate.Facility {
	return predicate.Facility(sql.FieldLTE(FieldOfficeType, v))
}

// OfficeTypeContains applies the Contains predicate on the "OfficeType" field.
func OfficeTypeContains(v string) predicate.Facility {
	return predicate.Facility(sql.FieldContains(FieldOfficeType, v))
}

// OfficeTypeHasPrefix applies the HasPrefix predicate on the "OfficeType" field.
func OfficeTypeHasPrefix(v string) predicate.Facility {
	return predicate.Facility(sql.FieldHasPrefix(FieldOfficeType, v))
}

// OfficeTypeHasSuffix applies the HasSuffix predicate on the "OfficeType" field.
func OfficeTypeHasSuffix(v string) predicate.Facility {
	return predicate.Facility(sql.FieldHasSuffix(FieldOfficeType, v))
}

// OfficeTypeEqualFold applies the EqualFold predicate on the "OfficeType" field.
func OfficeTypeEqualFold(v string) predicate.Facility {
	return predicate.Facility(sql.FieldEqualFold(FieldOfficeType, v))
}

// OfficeTypeContainsFold applies the ContainsFold predicate on the "OfficeType" field.
func OfficeTypeContainsFold(v string) predicate.Facility {
	return predicate.Facility(sql.FieldContainsFold(FieldOfficeType, v))
}

// FacilityNameEQ applies the EQ predicate on the "FacilityName" field.
func FacilityNameEQ(v string) predicate.Facility {
	return predicate.Facility(sql.FieldEQ(FieldFacilityName, v))
}

// FacilityNameNEQ applies the NEQ predicate on the "FacilityName" field.
func FacilityNameNEQ(v string) predicate.Facility {
	return predicate.Facility(sql.FieldNEQ(FieldFacilityName, v))
}

// FacilityNameIn applies the In predicate on the "FacilityName" field.
func FacilityNameIn(vs ...string) predicate.Facility {
	return predicate.Facility(sql.FieldIn(FieldFacilityName, vs...))
}

// FacilityNameNotIn applies the NotIn predicate on the "FacilityName" field.
func FacilityNameNotIn(vs ...string) predicate.Facility {
	return predicate.Facility(sql.FieldNotIn(FieldFacilityName, vs...))
}

// FacilityNameGT applies the GT predicate on the "FacilityName" field.
func FacilityNameGT(v string) predicate.Facility {
	return predicate.Facility(sql.FieldGT(FieldFacilityName, v))
}

// FacilityNameGTE applies the GTE predicate on the "FacilityName" field.
func FacilityNameGTE(v string) predicate.Facility {
	return predicate.Facility(sql.FieldGTE(FieldFacilityName, v))
}

// FacilityNameLT applies the LT predicate on the "FacilityName" field.
func FacilityNameLT(v string) predicate.Facility {
	return predicate.Facility(sql.FieldLT(FieldFacilityName, v))
}

// FacilityNameLTE applies the LTE predicate on the "FacilityName" field.
func FacilityNameLTE(v string) predicate.Facility {
	return predicate.Facility(sql.FieldLTE(FieldFacilityName, v))
}

// FacilityNameContains applies the Contains predicate on the "FacilityName" field.
func FacilityNameContains(v string) predicate.Facility {
	return predicate.Facility(sql.FieldContains(FieldFacilityName, v))
}

// FacilityNameHasPrefix applies the HasPrefix predicate on the "FacilityName" field.
func FacilityNameHasPrefix(v string) predicate.Facility {
	return predicate.Facility(sql.FieldHasPrefix(FieldFacilityName, v))
}

// FacilityNameHasSuffix applies the HasSuffix predicate on the "FacilityName" field.
func FacilityNameHasSuffix(v string) predicate.Facility {
	return predicate.Facility(sql.FieldHasSuffix(FieldFacilityName, v))
}

// FacilityNameEqualFold applies the EqualFold predicate on the "FacilityName" field.
func FacilityNameEqualFold(v string) predicate.Facility {
	return predicate.Facility(sql.FieldEqualFold(FieldFacilityName, v))
}

// FacilityNameContainsFold applies the ContainsFold predicate on the "FacilityName" field.
func FacilityNameContainsFold(v string) predicate.Facility {
	return predicate.Facility(sql.FieldContainsFold(FieldFacilityName, v))
}

// ReportingOfficeTypeEQ applies the EQ predicate on the "ReportingOfficeType" field.
func ReportingOfficeTypeEQ(v string) predicate.Facility {
	return predicate.Facility(sql.FieldEQ(FieldReportingOfficeType, v))
}

// ReportingOfficeTypeNEQ applies the NEQ predicate on the "ReportingOfficeType" field.
func ReportingOfficeTypeNEQ(v string) predicate.Facility {
	return predicate.Facility(sql.FieldNEQ(FieldReportingOfficeType, v))
}

// ReportingOfficeTypeIn applies the In predicate on the "ReportingOfficeType" field.
func ReportingOfficeTypeIn(vs ...string) predicate.Facility {
	return predicate.Facility(sql.FieldIn(FieldReportingOfficeType, vs...))
}

// ReportingOfficeTypeNotIn applies the NotIn predicate on the "ReportingOfficeType" field.
func ReportingOfficeTypeNotIn(vs ...string) predicate.Facility {
	return predicate.Facility(sql.FieldNotIn(FieldReportingOfficeType, vs...))
}

// ReportingOfficeTypeGT applies the GT predicate on the "ReportingOfficeType" field.
func ReportingOfficeTypeGT(v string) predicate.Facility {
	return predicate.Facility(sql.FieldGT(FieldReportingOfficeType, v))
}

// ReportingOfficeTypeGTE applies the GTE predicate on the "ReportingOfficeType" field.
func ReportingOfficeTypeGTE(v string) predicate.Facility {
	return predicate.Facility(sql.FieldGTE(FieldReportingOfficeType, v))
}

// ReportingOfficeTypeLT applies the LT predicate on the "ReportingOfficeType" field.
func ReportingOfficeTypeLT(v string) predicate.Facility {
	return predicate.Facility(sql.FieldLT(FieldReportingOfficeType, v))
}

// ReportingOfficeTypeLTE applies the LTE predicate on the "ReportingOfficeType" field.
func ReportingOfficeTypeLTE(v string) predicate.Facility {
	return predicate.Facility(sql.FieldLTE(FieldReportingOfficeType, v))
}

// ReportingOfficeTypeContains applies the Contains predicate on the "ReportingOfficeType" field.
func ReportingOfficeTypeContains(v string) predicate.Facility {
	return predicate.Facility(sql.FieldContains(FieldReportingOfficeType, v))
}

// ReportingOfficeTypeHasPrefix applies the HasPrefix predicate on the "ReportingOfficeType" field.
func ReportingOfficeTypeHasPrefix(v string) predicate.Facility {
	return predicate.Facility(sql.FieldHasPrefix(FieldReportingOfficeType, v))
}

// ReportingOfficeTypeHasSuffix applies the HasSuffix predicate on the "ReportingOfficeType" field.
func ReportingOfficeTypeHasSuffix(v string) predicate.Facility {
	return predicate.Facility(sql.FieldHasSuffix(FieldReportingOfficeType, v))
}

// ReportingOfficeTypeIsNil applies the IsNil predicate on the "ReportingOfficeType" field.
func ReportingOfficeTypeIsNil() predicate.Facility {
	return predicate.Facility(sql.FieldIsNull(FieldReportingOfficeType))
}

// ReportingOfficeTypeNotNil applies the NotNil predicate on the "ReportingOfficeType" field.
func ReportingOfficeTypeNotNil() predicate.Facility {
	return predicate.Facility(sql.FieldNotNull(FieldReportingOfficeType))
}

// ReportingOfficeTypeEqualFold applies the EqualFold predicate on the "ReportingOfficeType" field.
func ReportingOfficeTypeEqualFold(v string) predicate.Facility {
	return predicate.Facility(sql.FieldEqualFold(FieldReportingOfficeType, v))
}

// ReportingOfficeTypeContainsFold applies the ContainsFold predicate on the "ReportingOfficeType" field.
func ReportingOfficeTypeContainsFold(v string) predicate.Facility {
	return predicate.Facility(sql.FieldContainsFold(FieldReportingOfficeType, v))
}

// ReportingOfficeCodeEQ applies the EQ predicate on the "ReportingOfficeCode" field.
func ReportingOfficeCodeEQ(v string) predicate.Facility {
	return predicate.Facility(sql.FieldEQ(FieldReportingOfficeCode, v))
}

// ReportingOfficeCodeNEQ applies the NEQ predicate on the "ReportingOfficeCode" field.
func ReportingOfficeCodeNEQ(v string) predicate.Facility {
	return predicate.Facility(sql.FieldNEQ(FieldReportingOfficeCode, v))
}

// ReportingOfficeCodeIn applies the In predicate on the "ReportingOfficeCode" field.
func ReportingOfficeCodeIn(vs ...string) predicate.Facility {
	return predicate.Facility(sql.FieldIn(FieldReportingOfficeCode, vs...))
}

// ReportingOfficeCodeNotIn applies the NotIn predicate on the "ReportingOfficeCode" field.
func ReportingOfficeCodeNotIn(vs ...string) predicate.Facility {
	return predicate.Facility(sql.FieldNotIn(FieldReportingOfficeCode, vs...))
}

// ReportingOfficeCodeGT applies the GT predicate on the "ReportingOfficeCode" field.
func ReportingOfficeCodeGT(v string) predicate.Facility {
	return predicate.Facility(sql.FieldGT(FieldReportingOfficeCode, v))
}

// ReportingOfficeCodeGTE applies the GTE predicate on the "ReportingOfficeCode" field.
func ReportingOfficeCodeGTE(v string) predicate.Facility {
	return predicate.Facility(sql.FieldGTE(FieldReportingOfficeCode, v))
}

// ReportingOfficeCodeLT applies the LT predicate on the "ReportingOfficeCode" field.
func ReportingOfficeCodeLT(v string) predicate.Facility {
	return predicate.Facility(sql.FieldLT(FieldReportingOfficeCode, v))
}

// ReportingOfficeCodeLTE applies the LTE predicate on the "ReportingOfficeCode" field.
func ReportingOfficeCodeLTE(v string) predicate.Facility {
	return predicate.Facility(sql.FieldLTE(FieldReportingOfficeCode, v))
}

// ReportingOfficeCodeContains applies the Contains predicate on the "ReportingOfficeCode" field.
func ReportingOfficeCodeContains(v string) predicate.Facility {
	return predicate.Facility(sql.FieldContains(FieldReportingOfficeCode, v))
}

// ReportingOfficeCodeHasPrefix applies the HasPrefix predicate on the "ReportingOfficeCode" field.
func ReportingOfficeCodeHasPrefix(v string) predicate.Facility {
	return predicate.Facility(sql.FieldHasPrefix(FieldReportingOfficeCode, v))
}

// ReportingOfficeCodeHasSuffix applies the HasSuffix predicate on the "ReportingOfficeCode" field.
func ReportingOfficeCodeHasSuffix(v string) predicate.Facility {
	return predicate.Facility(sql.FieldHasSuffix(FieldReportingOfficeCode, v))
}

// ReportingOfficeCodeIsNil applies the IsNil predicate on the "ReportingOfficeCode" field.
func ReportingOfficeCodeIsNil() predicate.Facility {
	return predicate.Facility(sql.FieldIsNull(FieldReportingOfficeCode))
}

// ReportingOfficeCodeNotNil applies the NotNil predicate on the "ReportingOfficeCode" field.
func ReportingOfficeCodeNotNil() predicate.Facility {
	return predicate.Facility(sql.FieldNotNull(FieldReportingOfficeCode))
}

// ReportingOfficeCodeEqualFold applies the EqualFold predicate on the "ReportingOfficeCode" field.
func ReportingOfficeCodeEqualFold(v string) predicate.Facility {
	return predicate.Facility(sql.FieldEqualFold(FieldReportingOfficeCode, v))
}

// ReportingOfficeCodeContainsFold applies the ContainsFold predicate on the "ReportingOfficeCode" field.
func ReportingOfficeCodeContainsFold(v string) predicate.Facility {
	return predicate.Facility(sql.FieldContainsFold(FieldReportingOfficeCode, v))
}

// EmailIDEQ applies the EQ predicate on the "EmailID" field.
func EmailIDEQ(v string) predicate.Facility {
	return predicate.Facility(sql.FieldEQ(FieldEmailID, v))
}

// EmailIDNEQ applies the NEQ predicate on the "EmailID" field.
func EmailIDNEQ(v string) predicate.Facility {
	return predicate.Facility(sql.FieldNEQ(FieldEmailID, v))
}

// EmailIDIn applies the In predicate on the "EmailID" field.
func EmailIDIn(vs ...string) predicate.Facility {
	return predicate.Facility(sql.FieldIn(FieldEmailID, vs...))
}

// EmailIDNotIn applies the NotIn predicate on the "EmailID" field.
func EmailIDNotIn(vs ...string) predicate.Facility {
	return predicate.Facility(sql.FieldNotIn(FieldEmailID, vs...))
}

// EmailIDGT applies the GT predicate on the "EmailID" field.
func EmailIDGT(v string) predicate.Facility {
	return predicate.Facility(sql.FieldGT(FieldEmailID, v))
}

// EmailIDGTE applies the GTE predicate on the "EmailID" field.
func EmailIDGTE(v string) predicate.Facility {
	return predicate.Facility(sql.FieldGTE(FieldEmailID, v))
}

// EmailIDLT applies the LT predicate on the "EmailID" field.
func EmailIDLT(v string) predicate.Facility {
	return predicate.Facility(sql.FieldLT(FieldEmailID, v))
}

// EmailIDLTE applies the LTE predicate on the "EmailID" field.
func EmailIDLTE(v string) predicate.Facility {
	return predicate.Facility(sql.FieldLTE(FieldEmailID, v))
}

// EmailIDContains applies the Contains predicate on the "EmailID" field.
func EmailIDContains(v string) predicate.Facility {
	return predicate.Facility(sql.FieldContains(FieldEmailID, v))
}

// EmailIDHasPrefix applies the HasPrefix predicate on the "EmailID" field.
func EmailIDHasPrefix(v string) predicate.Facility {
	return predicate.Facility(sql.FieldHasPrefix(FieldEmailID, v))
}

// EmailIDHasSuffix applies the HasSuffix predicate on the "EmailID" field.
func EmailIDHasSuffix(v string) predicate.Facility {
	return predicate.Facility(sql.FieldHasSuffix(FieldEmailID, v))
}

// EmailIDIsNil applies the IsNil predicate on the "EmailID" field.
func EmailIDIsNil() predicate.Facility {
	return predicate.Facility(sql.FieldIsNull(FieldEmailID))
}

// EmailIDNotNil applies the NotNil predicate on the "EmailID" field.
func EmailIDNotNil() predicate.Facility {
	return predicate.Facility(sql.FieldNotNull(FieldEmailID))
}

// EmailIDEqualFold applies the EqualFold predicate on the "EmailID" field.
func EmailIDEqualFold(v string) predicate.Facility {
	return predicate.Facility(sql.FieldEqualFold(FieldEmailID, v))
}

// EmailIDContainsFold applies the ContainsFold predicate on the "EmailID" field.
func EmailIDContainsFold(v string) predicate.Facility {
	return predicate.Facility(sql.FieldContainsFold(FieldEmailID, v))
}

// MobileNumberEQ applies the EQ predicate on the "MobileNumber" field.
func MobileNumberEQ(v int32) predicate.Facility {
	return predicate.Facility(sql.FieldEQ(FieldMobileNumber, v))
}

// MobileNumberNEQ applies the NEQ predicate on the "MobileNumber" field.
func MobileNumberNEQ(v int32) predicate.Facility {
	return predicate.Facility(sql.FieldNEQ(FieldMobileNumber, v))
}

// MobileNumberIn applies the In predicate on the "MobileNumber" field.
func MobileNumberIn(vs ...int32) predicate.Facility {
	return predicate.Facility(sql.FieldIn(FieldMobileNumber, vs...))
}

// MobileNumberNotIn applies the NotIn predicate on the "MobileNumber" field.
func MobileNumberNotIn(vs ...int32) predicate.Facility {
	return predicate.Facility(sql.FieldNotIn(FieldMobileNumber, vs...))
}

// MobileNumberGT applies the GT predicate on the "MobileNumber" field.
func MobileNumberGT(v int32) predicate.Facility {
	return predicate.Facility(sql.FieldGT(FieldMobileNumber, v))
}

// MobileNumberGTE applies the GTE predicate on the "MobileNumber" field.
func MobileNumberGTE(v int32) predicate.Facility {
	return predicate.Facility(sql.FieldGTE(FieldMobileNumber, v))
}

// MobileNumberLT applies the LT predicate on the "MobileNumber" field.
func MobileNumberLT(v int32) predicate.Facility {
	return predicate.Facility(sql.FieldLT(FieldMobileNumber, v))
}

// MobileNumberLTE applies the LTE predicate on the "MobileNumber" field.
func MobileNumberLTE(v int32) predicate.Facility {
	return predicate.Facility(sql.FieldLTE(FieldMobileNumber, v))
}

// MobileNumberIsNil applies the IsNil predicate on the "MobileNumber" field.
func MobileNumberIsNil() predicate.Facility {
	return predicate.Facility(sql.FieldIsNull(FieldMobileNumber))
}

// MobileNumberNotNil applies the NotNil predicate on the "MobileNumber" field.
func MobileNumberNotNil() predicate.Facility {
	return predicate.Facility(sql.FieldNotNull(FieldMobileNumber))
}

// DivisionCodeEQ applies the EQ predicate on the "DivisionCode" field.
func DivisionCodeEQ(v int32) predicate.Facility {
	return predicate.Facility(sql.FieldEQ(FieldDivisionCode, v))
}

// DivisionCodeNEQ applies the NEQ predicate on the "DivisionCode" field.
func DivisionCodeNEQ(v int32) predicate.Facility {
	return predicate.Facility(sql.FieldNEQ(FieldDivisionCode, v))
}

// DivisionCodeIn applies the In predicate on the "DivisionCode" field.
func DivisionCodeIn(vs ...int32) predicate.Facility {
	return predicate.Facility(sql.FieldIn(FieldDivisionCode, vs...))
}

// DivisionCodeNotIn applies the NotIn predicate on the "DivisionCode" field.
func DivisionCodeNotIn(vs ...int32) predicate.Facility {
	return predicate.Facility(sql.FieldNotIn(FieldDivisionCode, vs...))
}

// DivisionCodeGT applies the GT predicate on the "DivisionCode" field.
func DivisionCodeGT(v int32) predicate.Facility {
	return predicate.Facility(sql.FieldGT(FieldDivisionCode, v))
}

// DivisionCodeGTE applies the GTE predicate on the "DivisionCode" field.
func DivisionCodeGTE(v int32) predicate.Facility {
	return predicate.Facility(sql.FieldGTE(FieldDivisionCode, v))
}

// DivisionCodeLT applies the LT predicate on the "DivisionCode" field.
func DivisionCodeLT(v int32) predicate.Facility {
	return predicate.Facility(sql.FieldLT(FieldDivisionCode, v))
}

// DivisionCodeLTE applies the LTE predicate on the "DivisionCode" field.
func DivisionCodeLTE(v int32) predicate.Facility {
	return predicate.Facility(sql.FieldLTE(FieldDivisionCode, v))
}

// DivisionCodeIsNil applies the IsNil predicate on the "DivisionCode" field.
func DivisionCodeIsNil() predicate.Facility {
	return predicate.Facility(sql.FieldIsNull(FieldDivisionCode))
}

// DivisionCodeNotNil applies the NotNil predicate on the "DivisionCode" field.
func DivisionCodeNotNil() predicate.Facility {
	return predicate.Facility(sql.FieldNotNull(FieldDivisionCode))
}

// RegionCodeEQ applies the EQ predicate on the "RegionCode" field.
func RegionCodeEQ(v int32) predicate.Facility {
	return predicate.Facility(sql.FieldEQ(FieldRegionCode, v))
}

// RegionCodeNEQ applies the NEQ predicate on the "RegionCode" field.
func RegionCodeNEQ(v int32) predicate.Facility {
	return predicate.Facility(sql.FieldNEQ(FieldRegionCode, v))
}

// RegionCodeIn applies the In predicate on the "RegionCode" field.
func RegionCodeIn(vs ...int32) predicate.Facility {
	return predicate.Facility(sql.FieldIn(FieldRegionCode, vs...))
}

// RegionCodeNotIn applies the NotIn predicate on the "RegionCode" field.
func RegionCodeNotIn(vs ...int32) predicate.Facility {
	return predicate.Facility(sql.FieldNotIn(FieldRegionCode, vs...))
}

// RegionCodeGT applies the GT predicate on the "RegionCode" field.
func RegionCodeGT(v int32) predicate.Facility {
	return predicate.Facility(sql.FieldGT(FieldRegionCode, v))
}

// RegionCodeGTE applies the GTE predicate on the "RegionCode" field.
func RegionCodeGTE(v int32) predicate.Facility {
	return predicate.Facility(sql.FieldGTE(FieldRegionCode, v))
}

// RegionCodeLT applies the LT predicate on the "RegionCode" field.
func RegionCodeLT(v int32) predicate.Facility {
	return predicate.Facility(sql.FieldLT(FieldRegionCode, v))
}

// RegionCodeLTE applies the LTE predicate on the "RegionCode" field.
func RegionCodeLTE(v int32) predicate.Facility {
	return predicate.Facility(sql.FieldLTE(FieldRegionCode, v))
}

// RegionCodeIsNil applies the IsNil predicate on the "RegionCode" field.
func RegionCodeIsNil() predicate.Facility {
	return predicate.Facility(sql.FieldIsNull(FieldRegionCode))
}

// RegionCodeNotNil applies the NotNil predicate on the "RegionCode" field.
func RegionCodeNotNil() predicate.Facility {
	return predicate.Facility(sql.FieldNotNull(FieldRegionCode))
}

// CircleCodeEQ applies the EQ predicate on the "CircleCode" field.
func CircleCodeEQ(v int32) predicate.Facility {
	return predicate.Facility(sql.FieldEQ(FieldCircleCode, v))
}

// CircleCodeNEQ applies the NEQ predicate on the "CircleCode" field.
func CircleCodeNEQ(v int32) predicate.Facility {
	return predicate.Facility(sql.FieldNEQ(FieldCircleCode, v))
}

// CircleCodeIn applies the In predicate on the "CircleCode" field.
func CircleCodeIn(vs ...int32) predicate.Facility {
	return predicate.Facility(sql.FieldIn(FieldCircleCode, vs...))
}

// CircleCodeNotIn applies the NotIn predicate on the "CircleCode" field.
func CircleCodeNotIn(vs ...int32) predicate.Facility {
	return predicate.Facility(sql.FieldNotIn(FieldCircleCode, vs...))
}

// CircleCodeGT applies the GT predicate on the "CircleCode" field.
func CircleCodeGT(v int32) predicate.Facility {
	return predicate.Facility(sql.FieldGT(FieldCircleCode, v))
}

// CircleCodeGTE applies the GTE predicate on the "CircleCode" field.
func CircleCodeGTE(v int32) predicate.Facility {
	return predicate.Facility(sql.FieldGTE(FieldCircleCode, v))
}

// CircleCodeLT applies the LT predicate on the "CircleCode" field.
func CircleCodeLT(v int32) predicate.Facility {
	return predicate.Facility(sql.FieldLT(FieldCircleCode, v))
}

// CircleCodeLTE applies the LTE predicate on the "CircleCode" field.
func CircleCodeLTE(v int32) predicate.Facility {
	return predicate.Facility(sql.FieldLTE(FieldCircleCode, v))
}

// CircleCodeIsNil applies the IsNil predicate on the "CircleCode" field.
func CircleCodeIsNil() predicate.Facility {
	return predicate.Facility(sql.FieldIsNull(FieldCircleCode))
}

// CircleCodeNotNil applies the NotNil predicate on the "CircleCode" field.
func CircleCodeNotNil() predicate.Facility {
	return predicate.Facility(sql.FieldNotNull(FieldCircleCode))
}

// HasRegionRef applies the HasEdge predicate on the "region_ref" edge.
func HasRegionRef() predicate.Facility {
	return predicate.Facility(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RegionRefTable, RegionRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRegionRefWith applies the HasEdge predicate on the "region_ref" edge with a given conditions (other predicates).
func HasRegionRefWith(preds ...predicate.RegionMaster) predicate.Facility {
	return predicate.Facility(func(s *sql.Selector) {
		step := newRegionRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCircleRef applies the HasEdge predicate on the "circle_ref" edge.
func HasCircleRef() predicate.Facility {
	return predicate.Facility(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CircleRefTable, CircleRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCircleRefWith applies the HasEdge predicate on the "circle_ref" edge with a given conditions (other predicates).
func HasCircleRefWith(preds ...predicate.CircleMaster) predicate.Facility {
	return predicate.Facility(func(s *sql.Selector) {
		step := newCircleRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Facility) predicate.Facility {
	return predicate.Facility(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Facility) predicate.Facility {
	return predicate.Facility(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Facility) predicate.Facility {
	return predicate.Facility(func(s *sql.Selector) {
		p(s.Not())
	})
}
