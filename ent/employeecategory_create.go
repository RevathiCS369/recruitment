// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/employeecategory"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmployeeCategoryCreate is the builder for creating a EmployeeCategory entity.
type EmployeeCategoryCreate struct {
	config
	mutation *EmployeeCategoryMutation
	hooks    []Hook
}

// SetCategrycode sets the "Categrycode" field.
func (ecc *EmployeeCategoryCreate) SetCategrycode(s string) *EmployeeCategoryCreate {
	ecc.mutation.SetCategrycode(s)
	return ecc
}

// SetCategoryDescription sets the "CategoryDescription" field.
func (ecc *EmployeeCategoryCreate) SetCategoryDescription(s string) *EmployeeCategoryCreate {
	ecc.mutation.SetCategoryDescription(s)
	return ecc
}

// SetMinimumMarks sets the "MinimumMarks" field.
func (ecc *EmployeeCategoryCreate) SetMinimumMarks(i int32) *EmployeeCategoryCreate {
	ecc.mutation.SetMinimumMarks(i)
	return ecc
}

// SetNillableMinimumMarks sets the "MinimumMarks" field if the given value is not nil.
func (ecc *EmployeeCategoryCreate) SetNillableMinimumMarks(i *int32) *EmployeeCategoryCreate {
	if i != nil {
		ecc.SetMinimumMarks(*i)
	}
	return ecc
}

// SetID sets the "id" field.
func (ecc *EmployeeCategoryCreate) SetID(i int32) *EmployeeCategoryCreate {
	ecc.mutation.SetID(i)
	return ecc
}

// Mutation returns the EmployeeCategoryMutation object of the builder.
func (ecc *EmployeeCategoryCreate) Mutation() *EmployeeCategoryMutation {
	return ecc.mutation
}

// Save creates the EmployeeCategory in the database.
func (ecc *EmployeeCategoryCreate) Save(ctx context.Context) (*EmployeeCategory, error) {
	return withHooks(ctx, ecc.sqlSave, ecc.mutation, ecc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ecc *EmployeeCategoryCreate) SaveX(ctx context.Context) *EmployeeCategory {
	v, err := ecc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecc *EmployeeCategoryCreate) Exec(ctx context.Context) error {
	_, err := ecc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecc *EmployeeCategoryCreate) ExecX(ctx context.Context) {
	if err := ecc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecc *EmployeeCategoryCreate) check() error {
	if _, ok := ecc.mutation.Categrycode(); !ok {
		return &ValidationError{Name: "Categrycode", err: errors.New(`ent: missing required field "EmployeeCategory.Categrycode"`)}
	}
	if _, ok := ecc.mutation.CategoryDescription(); !ok {
		return &ValidationError{Name: "CategoryDescription", err: errors.New(`ent: missing required field "EmployeeCategory.CategoryDescription"`)}
	}
	return nil
}

func (ecc *EmployeeCategoryCreate) sqlSave(ctx context.Context) (*EmployeeCategory, error) {
	if err := ecc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ecc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ecc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	ecc.mutation.id = &_node.ID
	ecc.mutation.done = true
	return _node, nil
}

func (ecc *EmployeeCategoryCreate) createSpec() (*EmployeeCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &EmployeeCategory{config: ecc.config}
		_spec = sqlgraph.NewCreateSpec(employeecategory.Table, sqlgraph.NewFieldSpec(employeecategory.FieldID, field.TypeInt32))
	)
	if id, ok := ecc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ecc.mutation.Categrycode(); ok {
		_spec.SetField(employeecategory.FieldCategrycode, field.TypeString, value)
		_node.Categrycode = value
	}
	if value, ok := ecc.mutation.CategoryDescription(); ok {
		_spec.SetField(employeecategory.FieldCategoryDescription, field.TypeString, value)
		_node.CategoryDescription = value
	}
	if value, ok := ecc.mutation.MinimumMarks(); ok {
		_spec.SetField(employeecategory.FieldMinimumMarks, field.TypeInt32, value)
		_node.MinimumMarks = value
	}
	return _node, _spec
}

// EmployeeCategoryCreateBulk is the builder for creating many EmployeeCategory entities in bulk.
type EmployeeCategoryCreateBulk struct {
	config
	builders []*EmployeeCategoryCreate
}

// Save creates the EmployeeCategory entities in the database.
func (eccb *EmployeeCategoryCreateBulk) Save(ctx context.Context) ([]*EmployeeCategory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(eccb.builders))
	nodes := make([]*EmployeeCategory, len(eccb.builders))
	mutators := make([]Mutator, len(eccb.builders))
	for i := range eccb.builders {
		func(i int, root context.Context) {
			builder := eccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmployeeCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eccb *EmployeeCategoryCreateBulk) SaveX(ctx context.Context) []*EmployeeCategory {
	v, err := eccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eccb *EmployeeCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := eccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eccb *EmployeeCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := eccb.Exec(ctx); err != nil {
		panic(err)
	}
}
