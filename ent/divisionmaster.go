// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/divisionmaster"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// DivisionMaster is the model entity for the DivisionMaster schema.
type DivisionMaster struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// DivisionCode holds the value of the "DivisionCode" field.
	DivisionCode int32 `json:"DivisionCode,omitempty"`
	// OfficeType holds the value of the "OfficeType" field.
	OfficeType string `json:"OfficeType,omitempty"`
	// DivisionOfficeID holds the value of the "DivisionOfficeID" field.
	DivisionOfficeID string `json:"DivisionOfficeID,omitempty"`
	// DivisionOfficeName holds the value of the "DivisionOfficeName" field.
	DivisionOfficeName string `json:"DivisionOfficeName,omitempty"`
	// ReportingOfficeType holds the value of the "ReportingOfficeType" field.
	ReportingOfficeType string `json:"ReportingOfficeType,omitempty"`
	// ReportingOfficeCode holds the value of the "ReportingOfficeCode" field.
	ReportingOfficeCode string `json:"ReportingOfficeCode,omitempty"`
	// EmailID holds the value of the "EmailID" field.
	EmailID string `json:"EmailID,omitempty"`
	// MobileNumber holds the value of the "MobileNumber" field.
	MobileNumber int32 `json:"MobileNumber,omitempty"`
	// RegionCode holds the value of the "RegionCode" field.
	RegionCode int32 `json:"RegionCode,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DivisionMasterQuery when eager-loading is set.
	Edges                 DivisionMasterEdges `json:"edges"`
	region_master_regions *int32
	selectValues          sql.SelectValues
}

// DivisionMasterEdges holds the relations/edges for other nodes in the graph.
type DivisionMasterEdges struct {
	// Regions holds the value of the regions edge.
	Regions []*RegionMaster `json:"regions,omitempty"`
	// DivisionsRef holds the value of the divisions_ref edge.
	DivisionsRef []*Facility `json:"divisions_ref,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RegionsOrErr returns the Regions value or an error if the edge
// was not loaded in eager-loading.
func (e DivisionMasterEdges) RegionsOrErr() ([]*RegionMaster, error) {
	if e.loadedTypes[0] {
		return e.Regions, nil
	}
	return nil, &NotLoadedError{edge: "regions"}
}

// DivisionsRefOrErr returns the DivisionsRef value or an error if the edge
// was not loaded in eager-loading.
func (e DivisionMasterEdges) DivisionsRefOrErr() ([]*Facility, error) {
	if e.loadedTypes[1] {
		return e.DivisionsRef, nil
	}
	return nil, &NotLoadedError{edge: "divisions_ref"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DivisionMaster) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case divisionmaster.FieldID, divisionmaster.FieldDivisionCode, divisionmaster.FieldMobileNumber, divisionmaster.FieldRegionCode:
			values[i] = new(sql.NullInt64)
		case divisionmaster.FieldOfficeType, divisionmaster.FieldDivisionOfficeID, divisionmaster.FieldDivisionOfficeName, divisionmaster.FieldReportingOfficeType, divisionmaster.FieldReportingOfficeCode, divisionmaster.FieldEmailID:
			values[i] = new(sql.NullString)
		case divisionmaster.ForeignKeys[0]: // region_master_regions
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DivisionMaster fields.
func (dm *DivisionMaster) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case divisionmaster.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dm.ID = int32(value.Int64)
		case divisionmaster.FieldDivisionCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DivisionCode", values[i])
			} else if value.Valid {
				dm.DivisionCode = int32(value.Int64)
			}
		case divisionmaster.FieldOfficeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OfficeType", values[i])
			} else if value.Valid {
				dm.OfficeType = value.String
			}
		case divisionmaster.FieldDivisionOfficeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DivisionOfficeID", values[i])
			} else if value.Valid {
				dm.DivisionOfficeID = value.String
			}
		case divisionmaster.FieldDivisionOfficeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DivisionOfficeName", values[i])
			} else if value.Valid {
				dm.DivisionOfficeName = value.String
			}
		case divisionmaster.FieldReportingOfficeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ReportingOfficeType", values[i])
			} else if value.Valid {
				dm.ReportingOfficeType = value.String
			}
		case divisionmaster.FieldReportingOfficeCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ReportingOfficeCode", values[i])
			} else if value.Valid {
				dm.ReportingOfficeCode = value.String
			}
		case divisionmaster.FieldEmailID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmailID", values[i])
			} else if value.Valid {
				dm.EmailID = value.String
			}
		case divisionmaster.FieldMobileNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field MobileNumber", values[i])
			} else if value.Valid {
				dm.MobileNumber = int32(value.Int64)
			}
		case divisionmaster.FieldRegionCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field RegionCode", values[i])
			} else if value.Valid {
				dm.RegionCode = int32(value.Int64)
			}
		case divisionmaster.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field region_master_regions", value)
			} else if value.Valid {
				dm.region_master_regions = new(int32)
				*dm.region_master_regions = int32(value.Int64)
			}
		default:
			dm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DivisionMaster.
// This includes values selected through modifiers, order, etc.
func (dm *DivisionMaster) Value(name string) (ent.Value, error) {
	return dm.selectValues.Get(name)
}

// QueryRegions queries the "regions" edge of the DivisionMaster entity.
func (dm *DivisionMaster) QueryRegions() *RegionMasterQuery {
	return NewDivisionMasterClient(dm.config).QueryRegions(dm)
}

// QueryDivisionsRef queries the "divisions_ref" edge of the DivisionMaster entity.
func (dm *DivisionMaster) QueryDivisionsRef() *FacilityQuery {
	return NewDivisionMasterClient(dm.config).QueryDivisionsRef(dm)
}

// Update returns a builder for updating this DivisionMaster.
// Note that you need to call DivisionMaster.Unwrap() before calling this method if this DivisionMaster
// was returned from a transaction, and the transaction was committed or rolled back.
func (dm *DivisionMaster) Update() *DivisionMasterUpdateOne {
	return NewDivisionMasterClient(dm.config).UpdateOne(dm)
}

// Unwrap unwraps the DivisionMaster entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dm *DivisionMaster) Unwrap() *DivisionMaster {
	_tx, ok := dm.config.driver.(*txDriver)
	if !ok {
		panic("ent: DivisionMaster is not a transactional entity")
	}
	dm.config.driver = _tx.drv
	return dm
}

// String implements the fmt.Stringer.
func (dm *DivisionMaster) String() string {
	var builder strings.Builder
	builder.WriteString("DivisionMaster(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dm.ID))
	builder.WriteString("DivisionCode=")
	builder.WriteString(fmt.Sprintf("%v", dm.DivisionCode))
	builder.WriteString(", ")
	builder.WriteString("OfficeType=")
	builder.WriteString(dm.OfficeType)
	builder.WriteString(", ")
	builder.WriteString("DivisionOfficeID=")
	builder.WriteString(dm.DivisionOfficeID)
	builder.WriteString(", ")
	builder.WriteString("DivisionOfficeName=")
	builder.WriteString(dm.DivisionOfficeName)
	builder.WriteString(", ")
	builder.WriteString("ReportingOfficeType=")
	builder.WriteString(dm.ReportingOfficeType)
	builder.WriteString(", ")
	builder.WriteString("ReportingOfficeCode=")
	builder.WriteString(dm.ReportingOfficeCode)
	builder.WriteString(", ")
	builder.WriteString("EmailID=")
	builder.WriteString(dm.EmailID)
	builder.WriteString(", ")
	builder.WriteString("MobileNumber=")
	builder.WriteString(fmt.Sprintf("%v", dm.MobileNumber))
	builder.WriteString(", ")
	builder.WriteString("RegionCode=")
	builder.WriteString(fmt.Sprintf("%v", dm.RegionCode))
	builder.WriteByte(')')
	return builder.String()
}

// DivisionMasters is a parsable slice of DivisionMaster.
type DivisionMasters []*DivisionMaster
