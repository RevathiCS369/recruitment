// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/eligibilitymaster"
	"recruit/ent/employeeposts"
	"recruit/ent/employees"
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmployeePostsUpdate is the builder for updating EmployeePosts entities.
type EmployeePostsUpdate struct {
	config
	hooks    []Hook
	mutation *EmployeePostsMutation
}

// Where appends a list predicates to the EmployeePostsUpdate builder.
func (epu *EmployeePostsUpdate) Where(ps ...predicate.EmployeePosts) *EmployeePostsUpdate {
	epu.mutation.Where(ps...)
	return epu
}

// SetPostCode sets the "PostCode" field.
func (epu *EmployeePostsUpdate) SetPostCode(s string) *EmployeePostsUpdate {
	epu.mutation.SetPostCode(s)
	return epu
}

// SetPostDescription sets the "PostDescription" field.
func (epu *EmployeePostsUpdate) SetPostDescription(s string) *EmployeePostsUpdate {
	epu.mutation.SetPostDescription(s)
	return epu
}

// SetGroup sets the "Group" field.
func (epu *EmployeePostsUpdate) SetGroup(s string) *EmployeePostsUpdate {
	epu.mutation.SetGroup(s)
	return epu
}

// SetPayLevel sets the "PayLevel" field.
func (epu *EmployeePostsUpdate) SetPayLevel(s string) *EmployeePostsUpdate {
	epu.mutation.SetPayLevel(s)
	return epu
}

// SetScale sets the "Scale" field.
func (epu *EmployeePostsUpdate) SetScale(s string) *EmployeePostsUpdate {
	epu.mutation.SetScale(s)
	return epu
}

// SetBaseCadreFlag sets the "BaseCadreFlag" field.
func (epu *EmployeePostsUpdate) SetBaseCadreFlag(b bool) *EmployeePostsUpdate {
	epu.mutation.SetBaseCadreFlag(b)
	return epu
}

// AddEmpPostIDs adds the "emp_posts" edge to the Employees entity by IDs.
func (epu *EmployeePostsUpdate) AddEmpPostIDs(ids ...int32) *EmployeePostsUpdate {
	epu.mutation.AddEmpPostIDs(ids...)
	return epu
}

// AddEmpPosts adds the "emp_posts" edges to the Employees entity.
func (epu *EmployeePostsUpdate) AddEmpPosts(e ...*Employees) *EmployeePostsUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.AddEmpPostIDs(ids...)
}

// AddPostEligibilityIDs adds the "PostEligibility" edge to the EligibilityMaster entity by IDs.
func (epu *EmployeePostsUpdate) AddPostEligibilityIDs(ids ...int32) *EmployeePostsUpdate {
	epu.mutation.AddPostEligibilityIDs(ids...)
	return epu
}

// AddPostEligibility adds the "PostEligibility" edges to the EligibilityMaster entity.
func (epu *EmployeePostsUpdate) AddPostEligibility(e ...*EligibilityMaster) *EmployeePostsUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.AddPostEligibilityIDs(ids...)
}

// Mutation returns the EmployeePostsMutation object of the builder.
func (epu *EmployeePostsUpdate) Mutation() *EmployeePostsMutation {
	return epu.mutation
}

// ClearEmpPosts clears all "emp_posts" edges to the Employees entity.
func (epu *EmployeePostsUpdate) ClearEmpPosts() *EmployeePostsUpdate {
	epu.mutation.ClearEmpPosts()
	return epu
}

// RemoveEmpPostIDs removes the "emp_posts" edge to Employees entities by IDs.
func (epu *EmployeePostsUpdate) RemoveEmpPostIDs(ids ...int32) *EmployeePostsUpdate {
	epu.mutation.RemoveEmpPostIDs(ids...)
	return epu
}

// RemoveEmpPosts removes "emp_posts" edges to Employees entities.
func (epu *EmployeePostsUpdate) RemoveEmpPosts(e ...*Employees) *EmployeePostsUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.RemoveEmpPostIDs(ids...)
}

// ClearPostEligibility clears all "PostEligibility" edges to the EligibilityMaster entity.
func (epu *EmployeePostsUpdate) ClearPostEligibility() *EmployeePostsUpdate {
	epu.mutation.ClearPostEligibility()
	return epu
}

// RemovePostEligibilityIDs removes the "PostEligibility" edge to EligibilityMaster entities by IDs.
func (epu *EmployeePostsUpdate) RemovePostEligibilityIDs(ids ...int32) *EmployeePostsUpdate {
	epu.mutation.RemovePostEligibilityIDs(ids...)
	return epu
}

// RemovePostEligibility removes "PostEligibility" edges to EligibilityMaster entities.
func (epu *EmployeePostsUpdate) RemovePostEligibility(e ...*EligibilityMaster) *EmployeePostsUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.RemovePostEligibilityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (epu *EmployeePostsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, epu.sqlSave, epu.mutation, epu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epu *EmployeePostsUpdate) SaveX(ctx context.Context) int {
	affected, err := epu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (epu *EmployeePostsUpdate) Exec(ctx context.Context) error {
	_, err := epu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epu *EmployeePostsUpdate) ExecX(ctx context.Context) {
	if err := epu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (epu *EmployeePostsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(employeeposts.Table, employeeposts.Columns, sqlgraph.NewFieldSpec(employeeposts.FieldID, field.TypeInt32))
	if ps := epu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epu.mutation.PostCode(); ok {
		_spec.SetField(employeeposts.FieldPostCode, field.TypeString, value)
	}
	if value, ok := epu.mutation.PostDescription(); ok {
		_spec.SetField(employeeposts.FieldPostDescription, field.TypeString, value)
	}
	if value, ok := epu.mutation.Group(); ok {
		_spec.SetField(employeeposts.FieldGroup, field.TypeString, value)
	}
	if value, ok := epu.mutation.PayLevel(); ok {
		_spec.SetField(employeeposts.FieldPayLevel, field.TypeString, value)
	}
	if value, ok := epu.mutation.Scale(); ok {
		_spec.SetField(employeeposts.FieldScale, field.TypeString, value)
	}
	if value, ok := epu.mutation.BaseCadreFlag(); ok {
		_spec.SetField(employeeposts.FieldBaseCadreFlag, field.TypeBool, value)
	}
	if epu.mutation.EmpPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeeposts.EmpPostsTable,
			Columns: []string{employeeposts.EmpPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employees.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.RemovedEmpPostsIDs(); len(nodes) > 0 && !epu.mutation.EmpPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeeposts.EmpPostsTable,
			Columns: []string{employeeposts.EmpPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employees.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.EmpPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeeposts.EmpPostsTable,
			Columns: []string{employeeposts.EmpPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employees.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epu.mutation.PostEligibilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeeposts.PostEligibilityTable,
			Columns: []string{employeeposts.PostEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.RemovedPostEligibilityIDs(); len(nodes) > 0 && !epu.mutation.PostEligibilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeeposts.PostEligibilityTable,
			Columns: []string{employeeposts.PostEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.PostEligibilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeeposts.PostEligibilityTable,
			Columns: []string{employeeposts.PostEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, epu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employeeposts.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	epu.mutation.done = true
	return n, nil
}

// EmployeePostsUpdateOne is the builder for updating a single EmployeePosts entity.
type EmployeePostsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmployeePostsMutation
}

// SetPostCode sets the "PostCode" field.
func (epuo *EmployeePostsUpdateOne) SetPostCode(s string) *EmployeePostsUpdateOne {
	epuo.mutation.SetPostCode(s)
	return epuo
}

// SetPostDescription sets the "PostDescription" field.
func (epuo *EmployeePostsUpdateOne) SetPostDescription(s string) *EmployeePostsUpdateOne {
	epuo.mutation.SetPostDescription(s)
	return epuo
}

// SetGroup sets the "Group" field.
func (epuo *EmployeePostsUpdateOne) SetGroup(s string) *EmployeePostsUpdateOne {
	epuo.mutation.SetGroup(s)
	return epuo
}

// SetPayLevel sets the "PayLevel" field.
func (epuo *EmployeePostsUpdateOne) SetPayLevel(s string) *EmployeePostsUpdateOne {
	epuo.mutation.SetPayLevel(s)
	return epuo
}

// SetScale sets the "Scale" field.
func (epuo *EmployeePostsUpdateOne) SetScale(s string) *EmployeePostsUpdateOne {
	epuo.mutation.SetScale(s)
	return epuo
}

// SetBaseCadreFlag sets the "BaseCadreFlag" field.
func (epuo *EmployeePostsUpdateOne) SetBaseCadreFlag(b bool) *EmployeePostsUpdateOne {
	epuo.mutation.SetBaseCadreFlag(b)
	return epuo
}

// AddEmpPostIDs adds the "emp_posts" edge to the Employees entity by IDs.
func (epuo *EmployeePostsUpdateOne) AddEmpPostIDs(ids ...int32) *EmployeePostsUpdateOne {
	epuo.mutation.AddEmpPostIDs(ids...)
	return epuo
}

// AddEmpPosts adds the "emp_posts" edges to the Employees entity.
func (epuo *EmployeePostsUpdateOne) AddEmpPosts(e ...*Employees) *EmployeePostsUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.AddEmpPostIDs(ids...)
}

// AddPostEligibilityIDs adds the "PostEligibility" edge to the EligibilityMaster entity by IDs.
func (epuo *EmployeePostsUpdateOne) AddPostEligibilityIDs(ids ...int32) *EmployeePostsUpdateOne {
	epuo.mutation.AddPostEligibilityIDs(ids...)
	return epuo
}

// AddPostEligibility adds the "PostEligibility" edges to the EligibilityMaster entity.
func (epuo *EmployeePostsUpdateOne) AddPostEligibility(e ...*EligibilityMaster) *EmployeePostsUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.AddPostEligibilityIDs(ids...)
}

// Mutation returns the EmployeePostsMutation object of the builder.
func (epuo *EmployeePostsUpdateOne) Mutation() *EmployeePostsMutation {
	return epuo.mutation
}

// ClearEmpPosts clears all "emp_posts" edges to the Employees entity.
func (epuo *EmployeePostsUpdateOne) ClearEmpPosts() *EmployeePostsUpdateOne {
	epuo.mutation.ClearEmpPosts()
	return epuo
}

// RemoveEmpPostIDs removes the "emp_posts" edge to Employees entities by IDs.
func (epuo *EmployeePostsUpdateOne) RemoveEmpPostIDs(ids ...int32) *EmployeePostsUpdateOne {
	epuo.mutation.RemoveEmpPostIDs(ids...)
	return epuo
}

// RemoveEmpPosts removes "emp_posts" edges to Employees entities.
func (epuo *EmployeePostsUpdateOne) RemoveEmpPosts(e ...*Employees) *EmployeePostsUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.RemoveEmpPostIDs(ids...)
}

// ClearPostEligibility clears all "PostEligibility" edges to the EligibilityMaster entity.
func (epuo *EmployeePostsUpdateOne) ClearPostEligibility() *EmployeePostsUpdateOne {
	epuo.mutation.ClearPostEligibility()
	return epuo
}

// RemovePostEligibilityIDs removes the "PostEligibility" edge to EligibilityMaster entities by IDs.
func (epuo *EmployeePostsUpdateOne) RemovePostEligibilityIDs(ids ...int32) *EmployeePostsUpdateOne {
	epuo.mutation.RemovePostEligibilityIDs(ids...)
	return epuo
}

// RemovePostEligibility removes "PostEligibility" edges to EligibilityMaster entities.
func (epuo *EmployeePostsUpdateOne) RemovePostEligibility(e ...*EligibilityMaster) *EmployeePostsUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.RemovePostEligibilityIDs(ids...)
}

// Where appends a list predicates to the EmployeePostsUpdate builder.
func (epuo *EmployeePostsUpdateOne) Where(ps ...predicate.EmployeePosts) *EmployeePostsUpdateOne {
	epuo.mutation.Where(ps...)
	return epuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (epuo *EmployeePostsUpdateOne) Select(field string, fields ...string) *EmployeePostsUpdateOne {
	epuo.fields = append([]string{field}, fields...)
	return epuo
}

// Save executes the query and returns the updated EmployeePosts entity.
func (epuo *EmployeePostsUpdateOne) Save(ctx context.Context) (*EmployeePosts, error) {
	return withHooks(ctx, epuo.sqlSave, epuo.mutation, epuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epuo *EmployeePostsUpdateOne) SaveX(ctx context.Context) *EmployeePosts {
	node, err := epuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (epuo *EmployeePostsUpdateOne) Exec(ctx context.Context) error {
	_, err := epuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epuo *EmployeePostsUpdateOne) ExecX(ctx context.Context) {
	if err := epuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (epuo *EmployeePostsUpdateOne) sqlSave(ctx context.Context) (_node *EmployeePosts, err error) {
	_spec := sqlgraph.NewUpdateSpec(employeeposts.Table, employeeposts.Columns, sqlgraph.NewFieldSpec(employeeposts.FieldID, field.TypeInt32))
	id, ok := epuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EmployeePosts.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := epuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, employeeposts.FieldID)
		for _, f := range fields {
			if !employeeposts.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != employeeposts.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := epuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epuo.mutation.PostCode(); ok {
		_spec.SetField(employeeposts.FieldPostCode, field.TypeString, value)
	}
	if value, ok := epuo.mutation.PostDescription(); ok {
		_spec.SetField(employeeposts.FieldPostDescription, field.TypeString, value)
	}
	if value, ok := epuo.mutation.Group(); ok {
		_spec.SetField(employeeposts.FieldGroup, field.TypeString, value)
	}
	if value, ok := epuo.mutation.PayLevel(); ok {
		_spec.SetField(employeeposts.FieldPayLevel, field.TypeString, value)
	}
	if value, ok := epuo.mutation.Scale(); ok {
		_spec.SetField(employeeposts.FieldScale, field.TypeString, value)
	}
	if value, ok := epuo.mutation.BaseCadreFlag(); ok {
		_spec.SetField(employeeposts.FieldBaseCadreFlag, field.TypeBool, value)
	}
	if epuo.mutation.EmpPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeeposts.EmpPostsTable,
			Columns: []string{employeeposts.EmpPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employees.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.RemovedEmpPostsIDs(); len(nodes) > 0 && !epuo.mutation.EmpPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeeposts.EmpPostsTable,
			Columns: []string{employeeposts.EmpPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employees.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.EmpPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeeposts.EmpPostsTable,
			Columns: []string{employeeposts.EmpPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employees.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epuo.mutation.PostEligibilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeeposts.PostEligibilityTable,
			Columns: []string{employeeposts.PostEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.RemovedPostEligibilityIDs(); len(nodes) > 0 && !epuo.mutation.PostEligibilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeeposts.PostEligibilityTable,
			Columns: []string{employeeposts.PostEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.PostEligibilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeeposts.PostEligibilityTable,
			Columns: []string{employeeposts.PostEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EmployeePosts{config: epuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, epuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employeeposts.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	epuo.mutation.done = true
	return _node, nil
}
