// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"recruit/ent/exam_applications_ps"
	"recruit/ent/rolemaster"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Exam_Applications_PS is the model entity for the Exam_Applications_PS schema.
type Exam_Applications_PS struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// ApplicationNumber holds the value of the "ApplicationNumber" field.
	ApplicationNumber string `json:"ApplicationNumber,omitempty"`
	// EmployeeID holds the value of the "EmployeeID" field.
	EmployeeID int64 `json:"EmployeeID,omitempty"`
	// EmployeeName holds the value of the "EmployeeName" field.
	EmployeeName string `json:"EmployeeName,omitempty"`
	// DOB holds the value of the "DOB" field.
	DOB string `json:"DOB,omitempty"`
	// Gender holds the value of the "Gender" field.
	Gender exam_applications_ps.Gender `json:"Gender,omitempty"`
	// MobileNumber holds the value of the "MobileNumber" field.
	MobileNumber string `json:"MobileNumber,omitempty"`
	// EmailID holds the value of the "EmailID" field.
	EmailID string `json:"EmailID,omitempty"`
	// EmployeeCategory holds the value of the "EmployeeCategory" field.
	EmployeeCategory string `json:"EmployeeCategory,omitempty"`
	// Cadre holds the value of the "Cadre" field.
	Cadre string `json:"Cadre,omitempty"`
	// EmployeePost holds the value of the "EmployeePost" field.
	EmployeePost string `json:"EmployeePost,omitempty"`
	// FacilityID holds the value of the "FacilityID" field.
	FacilityID string `json:"FacilityID,omitempty"`
	// DCCS holds the value of the "DCCS" field.
	DCCS string `json:"DCCS,omitempty"`
	// DCInPresentCadre holds the value of the "DCInPresentCadre" field.
	DCInPresentCadre string `json:"DCInPresentCadre,omitempty"`
	// DeputationOfficeId holds the value of the "DeputationOfficeId" field.
	DeputationOfficeId string `json:"DeputationOfficeId,omitempty"`
	// DisabilityType holds the value of the "DisabilityType" field.
	DisabilityType string `json:"DisabilityType,omitempty"`
	// DisabilityPercentage holds the value of the "DisabilityPercentage" field.
	DisabilityPercentage string `json:"DisabilityPercentage,omitempty"`
	// Education holds the value of the "Education" field.
	Education string `json:"Education,omitempty"`
	// ExamNameCode holds the value of the "ExamNameCode" field.
	ExamNameCode string `json:"ExamNameCode,omitempty"`
	// ExamYear holds the value of the "ExamYear" field.
	ExamYear string `json:"ExamYear,omitempty"`
	// ExamName holds the value of the "ExamName" field.
	ExamName string `json:"ExamName,omitempty"`
	// CentrePreference holds the value of the "CentrePreference" field.
	CentrePreference string `json:"CentrePreference,omitempty"`
	// Signature holds the value of the "Signature" field.
	Signature string `json:"Signature,omitempty"`
	// Photo holds the value of the "Photo" field.
	Photo string `json:"Photo,omitempty"`
	// ApplicationStatus holds the value of the "ApplicationStatus" field.
	ApplicationStatus string `json:"ApplicationStatus,omitempty"`
	// ApplnSubmittedDate holds the value of the "ApplnSubmittedDate" field.
	ApplnSubmittedDate time.Time `json:"ApplnSubmittedDate,omitempty"`
	// VARemarks holds the value of the "VA_Remarks" field.
	VARemarks string `json:"VA_Remarks,omitempty"`
	// VAUserName holds the value of the "VA_UserName" field.
	VAUserName string `json:"VA_UserName,omitempty"`
	// VADate holds the value of the "VA_Date" field.
	VADate time.Time `json:"VA_Date,omitempty"`
	// CARemarks holds the value of the "CA_Remarks" field.
	CARemarks string `json:"CA_Remarks,omitempty"`
	// CAUserName holds the value of the "CA_UserName" field.
	CAUserName string `json:"CA_UserName,omitempty"`
	// CADate holds the value of the "CA_Date" field.
	CADate time.Time `json:"CA_Date,omitempty"`
	// ApplicationWdlDate holds the value of the "ApplicationWdlDate" field.
	ApplicationWdlDate time.Time `json:"ApplicationWdlDate,omitempty"`
	// NARemarks holds the value of the "NA_Remarks" field.
	NARemarks string `json:"NA_Remarks,omitempty"`
	// NAUserName holds the value of the "NA_UserName" field.
	NAUserName string `json:"NA_UserName,omitempty"`
	// NADate holds the value of the "NA_Date" field.
	NADate time.Time `json:"NA_Date,omitempty"`
	// AppliactionRemarks holds the value of the "AppliactionRemarks" field.
	AppliactionRemarks string `json:"AppliactionRemarks,omitempty"`
	// CadrePreferences holds the value of the "CadrePreferences" field.
	CadrePreferences []interface{} `json:"CadrePreferences,omitempty"`
	// DivisionPreferences holds the value of the "DivisionPreferences" field.
	DivisionPreferences []interface{} `json:"DivisionPreferences,omitempty"`
	// CirclePreferences holds the value of the "CirclePreferences" field.
	CirclePreferences []interface{} `json:"CirclePreferences,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// UpdatedBy holds the value of the "UpdatedBy" field.
	UpdatedBy string `json:"UpdatedBy,omitempty"`
	// RoleUserCode holds the value of the "RoleUserCode" field.
	RoleUserCode int32 `json:"RoleUserCode,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Exam_Applications_PSQuery when eager-loading is set.
	Edges                     Exam_Applications_PSEdges `json:"edges"`
	employee_master_emp_ref   *int64
	exam_pa_exam_appln_ps_ref *int32
	exam_ps_exam_appln_ps_ref *int32
	facility_office_ps_ref    *int32
	user_master_users_ps_ref  *int64
	selectValues              sql.SelectValues
}

// Exam_Applications_PSEdges holds the relations/edges for other nodes in the graph.
type Exam_Applications_PSEdges struct {
	// UsersPSRef holds the value of the UsersPSRef edge.
	UsersPSRef []*UserMaster `json:"UsersPSRef,omitempty"`
	// ExamApplnPSRef holds the value of the ExamAppln_PS_Ref edge.
	ExamApplnPSRef []*Exam_PS `json:"ExamAppln_PS_Ref,omitempty"`
	// OfficePSRef holds the value of the Office_PS_Ref edge.
	OfficePSRef []*Facility `json:"Office_PS_Ref,omitempty"`
	// Roleusers holds the value of the roleusers edge.
	Roleusers *RoleMaster `json:"roleusers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UsersPSRefOrErr returns the UsersPSRef value or an error if the edge
// was not loaded in eager-loading.
func (e Exam_Applications_PSEdges) UsersPSRefOrErr() ([]*UserMaster, error) {
	if e.loadedTypes[0] {
		return e.UsersPSRef, nil
	}
	return nil, &NotLoadedError{edge: "UsersPSRef"}
}

// ExamApplnPSRefOrErr returns the ExamApplnPSRef value or an error if the edge
// was not loaded in eager-loading.
func (e Exam_Applications_PSEdges) ExamApplnPSRefOrErr() ([]*Exam_PS, error) {
	if e.loadedTypes[1] {
		return e.ExamApplnPSRef, nil
	}
	return nil, &NotLoadedError{edge: "ExamAppln_PS_Ref"}
}

// OfficePSRefOrErr returns the OfficePSRef value or an error if the edge
// was not loaded in eager-loading.
func (e Exam_Applications_PSEdges) OfficePSRefOrErr() ([]*Facility, error) {
	if e.loadedTypes[2] {
		return e.OfficePSRef, nil
	}
	return nil, &NotLoadedError{edge: "Office_PS_Ref"}
}

// RoleusersOrErr returns the Roleusers value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Exam_Applications_PSEdges) RoleusersOrErr() (*RoleMaster, error) {
	if e.loadedTypes[3] {
		if e.Roleusers == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: rolemaster.Label}
		}
		return e.Roleusers, nil
	}
	return nil, &NotLoadedError{edge: "roleusers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Exam_Applications_PS) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case exam_applications_ps.FieldCadrePreferences, exam_applications_ps.FieldDivisionPreferences, exam_applications_ps.FieldCirclePreferences:
			values[i] = new([]byte)
		case exam_applications_ps.FieldID, exam_applications_ps.FieldEmployeeID, exam_applications_ps.FieldRoleUserCode:
			values[i] = new(sql.NullInt64)
		case exam_applications_ps.FieldApplicationNumber, exam_applications_ps.FieldEmployeeName, exam_applications_ps.FieldDOB, exam_applications_ps.FieldGender, exam_applications_ps.FieldMobileNumber, exam_applications_ps.FieldEmailID, exam_applications_ps.FieldEmployeeCategory, exam_applications_ps.FieldCadre, exam_applications_ps.FieldEmployeePost, exam_applications_ps.FieldFacilityID, exam_applications_ps.FieldDCCS, exam_applications_ps.FieldDCInPresentCadre, exam_applications_ps.FieldDeputationOfficeId, exam_applications_ps.FieldDisabilityType, exam_applications_ps.FieldDisabilityPercentage, exam_applications_ps.FieldEducation, exam_applications_ps.FieldExamNameCode, exam_applications_ps.FieldExamYear, exam_applications_ps.FieldExamName, exam_applications_ps.FieldCentrePreference, exam_applications_ps.FieldSignature, exam_applications_ps.FieldPhoto, exam_applications_ps.FieldApplicationStatus, exam_applications_ps.FieldVARemarks, exam_applications_ps.FieldVAUserName, exam_applications_ps.FieldCARemarks, exam_applications_ps.FieldCAUserName, exam_applications_ps.FieldNARemarks, exam_applications_ps.FieldNAUserName, exam_applications_ps.FieldAppliactionRemarks, exam_applications_ps.FieldUpdatedBy:
			values[i] = new(sql.NullString)
		case exam_applications_ps.FieldApplnSubmittedDate, exam_applications_ps.FieldVADate, exam_applications_ps.FieldCADate, exam_applications_ps.FieldApplicationWdlDate, exam_applications_ps.FieldNADate, exam_applications_ps.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case exam_applications_ps.ForeignKeys[0]: // employee_master_emp_ref
			values[i] = new(sql.NullInt64)
		case exam_applications_ps.ForeignKeys[1]: // exam_pa_exam_appln_ps_ref
			values[i] = new(sql.NullInt64)
		case exam_applications_ps.ForeignKeys[2]: // exam_ps_exam_appln_ps_ref
			values[i] = new(sql.NullInt64)
		case exam_applications_ps.ForeignKeys[3]: // facility_office_ps_ref
			values[i] = new(sql.NullInt64)
		case exam_applications_ps.ForeignKeys[4]: // user_master_users_ps_ref
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Exam_Applications_PS fields.
func (eap *Exam_Applications_PS) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case exam_applications_ps.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			eap.ID = int64(value.Int64)
		case exam_applications_ps.FieldApplicationNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ApplicationNumber", values[i])
			} else if value.Valid {
				eap.ApplicationNumber = value.String
			}
		case exam_applications_ps.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeID", values[i])
			} else if value.Valid {
				eap.EmployeeID = value.Int64
			}
		case exam_applications_ps.FieldEmployeeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeName", values[i])
			} else if value.Valid {
				eap.EmployeeName = value.String
			}
		case exam_applications_ps.FieldDOB:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DOB", values[i])
			} else if value.Valid {
				eap.DOB = value.String
			}
		case exam_applications_ps.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Gender", values[i])
			} else if value.Valid {
				eap.Gender = exam_applications_ps.Gender(value.String)
			}
		case exam_applications_ps.FieldMobileNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field MobileNumber", values[i])
			} else if value.Valid {
				eap.MobileNumber = value.String
			}
		case exam_applications_ps.FieldEmailID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmailID", values[i])
			} else if value.Valid {
				eap.EmailID = value.String
			}
		case exam_applications_ps.FieldEmployeeCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeCategory", values[i])
			} else if value.Valid {
				eap.EmployeeCategory = value.String
			}
		case exam_applications_ps.FieldCadre:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Cadre", values[i])
			} else if value.Valid {
				eap.Cadre = value.String
			}
		case exam_applications_ps.FieldEmployeePost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeePost", values[i])
			} else if value.Valid {
				eap.EmployeePost = value.String
			}
		case exam_applications_ps.FieldFacilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FacilityID", values[i])
			} else if value.Valid {
				eap.FacilityID = value.String
			}
		case exam_applications_ps.FieldDCCS:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DCCS", values[i])
			} else if value.Valid {
				eap.DCCS = value.String
			}
		case exam_applications_ps.FieldDCInPresentCadre:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DCInPresentCadre", values[i])
			} else if value.Valid {
				eap.DCInPresentCadre = value.String
			}
		case exam_applications_ps.FieldDeputationOfficeId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeputationOfficeId", values[i])
			} else if value.Valid {
				eap.DeputationOfficeId = value.String
			}
		case exam_applications_ps.FieldDisabilityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DisabilityType", values[i])
			} else if value.Valid {
				eap.DisabilityType = value.String
			}
		case exam_applications_ps.FieldDisabilityPercentage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DisabilityPercentage", values[i])
			} else if value.Valid {
				eap.DisabilityPercentage = value.String
			}
		case exam_applications_ps.FieldEducation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Education", values[i])
			} else if value.Valid {
				eap.Education = value.String
			}
		case exam_applications_ps.FieldExamNameCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamNameCode", values[i])
			} else if value.Valid {
				eap.ExamNameCode = value.String
			}
		case exam_applications_ps.FieldExamYear:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamYear", values[i])
			} else if value.Valid {
				eap.ExamYear = value.String
			}
		case exam_applications_ps.FieldExamName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamName", values[i])
			} else if value.Valid {
				eap.ExamName = value.String
			}
		case exam_applications_ps.FieldCentrePreference:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CentrePreference", values[i])
			} else if value.Valid {
				eap.CentrePreference = value.String
			}
		case exam_applications_ps.FieldSignature:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Signature", values[i])
			} else if value.Valid {
				eap.Signature = value.String
			}
		case exam_applications_ps.FieldPhoto:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Photo", values[i])
			} else if value.Valid {
				eap.Photo = value.String
			}
		case exam_applications_ps.FieldApplicationStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ApplicationStatus", values[i])
			} else if value.Valid {
				eap.ApplicationStatus = value.String
			}
		case exam_applications_ps.FieldApplnSubmittedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ApplnSubmittedDate", values[i])
			} else if value.Valid {
				eap.ApplnSubmittedDate = value.Time
			}
		case exam_applications_ps.FieldVARemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VA_Remarks", values[i])
			} else if value.Valid {
				eap.VARemarks = value.String
			}
		case exam_applications_ps.FieldVAUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VA_UserName", values[i])
			} else if value.Valid {
				eap.VAUserName = value.String
			}
		case exam_applications_ps.FieldVADate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field VA_Date", values[i])
			} else if value.Valid {
				eap.VADate = value.Time
			}
		case exam_applications_ps.FieldCARemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CA_Remarks", values[i])
			} else if value.Valid {
				eap.CARemarks = value.String
			}
		case exam_applications_ps.FieldCAUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CA_UserName", values[i])
			} else if value.Valid {
				eap.CAUserName = value.String
			}
		case exam_applications_ps.FieldCADate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CA_Date", values[i])
			} else if value.Valid {
				eap.CADate = value.Time
			}
		case exam_applications_ps.FieldApplicationWdlDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ApplicationWdlDate", values[i])
			} else if value.Valid {
				eap.ApplicationWdlDate = value.Time
			}
		case exam_applications_ps.FieldNARemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NA_Remarks", values[i])
			} else if value.Valid {
				eap.NARemarks = value.String
			}
		case exam_applications_ps.FieldNAUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NA_UserName", values[i])
			} else if value.Valid {
				eap.NAUserName = value.String
			}
		case exam_applications_ps.FieldNADate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field NA_Date", values[i])
			} else if value.Valid {
				eap.NADate = value.Time
			}
		case exam_applications_ps.FieldAppliactionRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AppliactionRemarks", values[i])
			} else if value.Valid {
				eap.AppliactionRemarks = value.String
			}
		case exam_applications_ps.FieldCadrePreferences:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field CadrePreferences", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &eap.CadrePreferences); err != nil {
					return fmt.Errorf("unmarshal field CadrePreferences: %w", err)
				}
			}
		case exam_applications_ps.FieldDivisionPreferences:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field DivisionPreferences", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &eap.DivisionPreferences); err != nil {
					return fmt.Errorf("unmarshal field DivisionPreferences: %w", err)
				}
			}
		case exam_applications_ps.FieldCirclePreferences:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field CirclePreferences", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &eap.CirclePreferences); err != nil {
					return fmt.Errorf("unmarshal field CirclePreferences: %w", err)
				}
			}
		case exam_applications_ps.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				eap.UpdatedAt = value.Time
			}
		case exam_applications_ps.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedBy", values[i])
			} else if value.Valid {
				eap.UpdatedBy = value.String
			}
		case exam_applications_ps.FieldRoleUserCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field RoleUserCode", values[i])
			} else if value.Valid {
				eap.RoleUserCode = int32(value.Int64)
			}
		case exam_applications_ps.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field employee_master_emp_ref", value)
			} else if value.Valid {
				eap.employee_master_emp_ref = new(int64)
				*eap.employee_master_emp_ref = int64(value.Int64)
			}
		case exam_applications_ps.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exam_pa_exam_appln_ps_ref", value)
			} else if value.Valid {
				eap.exam_pa_exam_appln_ps_ref = new(int32)
				*eap.exam_pa_exam_appln_ps_ref = int32(value.Int64)
			}
		case exam_applications_ps.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exam_ps_exam_appln_ps_ref", value)
			} else if value.Valid {
				eap.exam_ps_exam_appln_ps_ref = new(int32)
				*eap.exam_ps_exam_appln_ps_ref = int32(value.Int64)
			}
		case exam_applications_ps.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field facility_office_ps_ref", value)
			} else if value.Valid {
				eap.facility_office_ps_ref = new(int32)
				*eap.facility_office_ps_ref = int32(value.Int64)
			}
		case exam_applications_ps.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_master_users_ps_ref", value)
			} else if value.Valid {
				eap.user_master_users_ps_ref = new(int64)
				*eap.user_master_users_ps_ref = int64(value.Int64)
			}
		default:
			eap.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Exam_Applications_PS.
// This includes values selected through modifiers, order, etc.
func (eap *Exam_Applications_PS) Value(name string) (ent.Value, error) {
	return eap.selectValues.Get(name)
}

// QueryUsersPSRef queries the "UsersPSRef" edge of the Exam_Applications_PS entity.
func (eap *Exam_Applications_PS) QueryUsersPSRef() *UserMasterQuery {
	return NewExamApplicationsPSClient(eap.config).QueryUsersPSRef(eap)
}

// QueryExamApplnPSRef queries the "ExamAppln_PS_Ref" edge of the Exam_Applications_PS entity.
func (eap *Exam_Applications_PS) QueryExamApplnPSRef() *ExamPSQuery {
	return NewExamApplicationsPSClient(eap.config).QueryExamApplnPSRef(eap)
}

// QueryOfficePSRef queries the "Office_PS_Ref" edge of the Exam_Applications_PS entity.
func (eap *Exam_Applications_PS) QueryOfficePSRef() *FacilityQuery {
	return NewExamApplicationsPSClient(eap.config).QueryOfficePSRef(eap)
}

// QueryRoleusers queries the "roleusers" edge of the Exam_Applications_PS entity.
func (eap *Exam_Applications_PS) QueryRoleusers() *RoleMasterQuery {
	return NewExamApplicationsPSClient(eap.config).QueryRoleusers(eap)
}

// Update returns a builder for updating this Exam_Applications_PS.
// Note that you need to call Exam_Applications_PS.Unwrap() before calling this method if this Exam_Applications_PS
// was returned from a transaction, and the transaction was committed or rolled back.
func (eap *Exam_Applications_PS) Update() *ExamApplicationsPSUpdateOne {
	return NewExamApplicationsPSClient(eap.config).UpdateOne(eap)
}

// Unwrap unwraps the Exam_Applications_PS entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (eap *Exam_Applications_PS) Unwrap() *Exam_Applications_PS {
	_tx, ok := eap.config.driver.(*txDriver)
	if !ok {
		panic("ent: Exam_Applications_PS is not a transactional entity")
	}
	eap.config.driver = _tx.drv
	return eap
}

// String implements the fmt.Stringer.
func (eap *Exam_Applications_PS) String() string {
	var builder strings.Builder
	builder.WriteString("Exam_Applications_PS(")
	builder.WriteString(fmt.Sprintf("id=%v, ", eap.ID))
	builder.WriteString("ApplicationNumber=")
	builder.WriteString(eap.ApplicationNumber)
	builder.WriteString(", ")
	builder.WriteString("EmployeeID=")
	builder.WriteString(fmt.Sprintf("%v", eap.EmployeeID))
	builder.WriteString(", ")
	builder.WriteString("EmployeeName=")
	builder.WriteString(eap.EmployeeName)
	builder.WriteString(", ")
	builder.WriteString("DOB=")
	builder.WriteString(eap.DOB)
	builder.WriteString(", ")
	builder.WriteString("Gender=")
	builder.WriteString(fmt.Sprintf("%v", eap.Gender))
	builder.WriteString(", ")
	builder.WriteString("MobileNumber=")
	builder.WriteString(eap.MobileNumber)
	builder.WriteString(", ")
	builder.WriteString("EmailID=")
	builder.WriteString(eap.EmailID)
	builder.WriteString(", ")
	builder.WriteString("EmployeeCategory=")
	builder.WriteString(eap.EmployeeCategory)
	builder.WriteString(", ")
	builder.WriteString("Cadre=")
	builder.WriteString(eap.Cadre)
	builder.WriteString(", ")
	builder.WriteString("EmployeePost=")
	builder.WriteString(eap.EmployeePost)
	builder.WriteString(", ")
	builder.WriteString("FacilityID=")
	builder.WriteString(eap.FacilityID)
	builder.WriteString(", ")
	builder.WriteString("DCCS=")
	builder.WriteString(eap.DCCS)
	builder.WriteString(", ")
	builder.WriteString("DCInPresentCadre=")
	builder.WriteString(eap.DCInPresentCadre)
	builder.WriteString(", ")
	builder.WriteString("DeputationOfficeId=")
	builder.WriteString(eap.DeputationOfficeId)
	builder.WriteString(", ")
	builder.WriteString("DisabilityType=")
	builder.WriteString(eap.DisabilityType)
	builder.WriteString(", ")
	builder.WriteString("DisabilityPercentage=")
	builder.WriteString(eap.DisabilityPercentage)
	builder.WriteString(", ")
	builder.WriteString("Education=")
	builder.WriteString(eap.Education)
	builder.WriteString(", ")
	builder.WriteString("ExamNameCode=")
	builder.WriteString(eap.ExamNameCode)
	builder.WriteString(", ")
	builder.WriteString("ExamYear=")
	builder.WriteString(eap.ExamYear)
	builder.WriteString(", ")
	builder.WriteString("ExamName=")
	builder.WriteString(eap.ExamName)
	builder.WriteString(", ")
	builder.WriteString("CentrePreference=")
	builder.WriteString(eap.CentrePreference)
	builder.WriteString(", ")
	builder.WriteString("Signature=")
	builder.WriteString(eap.Signature)
	builder.WriteString(", ")
	builder.WriteString("Photo=")
	builder.WriteString(eap.Photo)
	builder.WriteString(", ")
	builder.WriteString("ApplicationStatus=")
	builder.WriteString(eap.ApplicationStatus)
	builder.WriteString(", ")
	builder.WriteString("ApplnSubmittedDate=")
	builder.WriteString(eap.ApplnSubmittedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("VA_Remarks=")
	builder.WriteString(eap.VARemarks)
	builder.WriteString(", ")
	builder.WriteString("VA_UserName=")
	builder.WriteString(eap.VAUserName)
	builder.WriteString(", ")
	builder.WriteString("VA_Date=")
	builder.WriteString(eap.VADate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("CA_Remarks=")
	builder.WriteString(eap.CARemarks)
	builder.WriteString(", ")
	builder.WriteString("CA_UserName=")
	builder.WriteString(eap.CAUserName)
	builder.WriteString(", ")
	builder.WriteString("CA_Date=")
	builder.WriteString(eap.CADate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ApplicationWdlDate=")
	builder.WriteString(eap.ApplicationWdlDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("NA_Remarks=")
	builder.WriteString(eap.NARemarks)
	builder.WriteString(", ")
	builder.WriteString("NA_UserName=")
	builder.WriteString(eap.NAUserName)
	builder.WriteString(", ")
	builder.WriteString("NA_Date=")
	builder.WriteString(eap.NADate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("AppliactionRemarks=")
	builder.WriteString(eap.AppliactionRemarks)
	builder.WriteString(", ")
	builder.WriteString("CadrePreferences=")
	builder.WriteString(fmt.Sprintf("%v", eap.CadrePreferences))
	builder.WriteString(", ")
	builder.WriteString("DivisionPreferences=")
	builder.WriteString(fmt.Sprintf("%v", eap.DivisionPreferences))
	builder.WriteString(", ")
	builder.WriteString("CirclePreferences=")
	builder.WriteString(fmt.Sprintf("%v", eap.CirclePreferences))
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(eap.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedBy=")
	builder.WriteString(eap.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("RoleUserCode=")
	builder.WriteString(fmt.Sprintf("%v", eap.RoleUserCode))
	builder.WriteByte(')')
	return builder.String()
}

// Exam_Applications_PSs is a parsable slice of Exam_Applications_PS.
type Exam_Applications_PSs []*Exam_Applications_PS
