// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"recruit/ent/cadre_choice_ip"
	"recruit/ent/exam_applications_ip"
	"recruit/ent/exam_ip"
	"recruit/ent/facility"
	"recruit/ent/placeofpreferenceip"
	"recruit/ent/recommendationsipapplications"
	"recruit/ent/rolemaster"
	"recruit/ent/usermaster"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamApplicationsIPCreate is the builder for creating a Exam_Applications_IP entity.
type ExamApplicationsIPCreate struct {
	config
	mutation *ExamApplicationsIPMutation
	hooks    []Hook
}

// SetApplicationNumber sets the "ApplicationNumber" field.
func (eaic *ExamApplicationsIPCreate) SetApplicationNumber(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetApplicationNumber(s)
	return eaic
}

// SetNillableApplicationNumber sets the "ApplicationNumber" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableApplicationNumber(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetApplicationNumber(*s)
	}
	return eaic
}

// SetEmployeeID sets the "EmployeeID" field.
func (eaic *ExamApplicationsIPCreate) SetEmployeeID(i int64) *ExamApplicationsIPCreate {
	eaic.mutation.SetEmployeeID(i)
	return eaic
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableEmployeeID(i *int64) *ExamApplicationsIPCreate {
	if i != nil {
		eaic.SetEmployeeID(*i)
	}
	return eaic
}

// SetEmployeeName sets the "EmployeeName" field.
func (eaic *ExamApplicationsIPCreate) SetEmployeeName(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetEmployeeName(s)
	return eaic
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableEmployeeName(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetEmployeeName(*s)
	}
	return eaic
}

// SetDOB sets the "DOB" field.
func (eaic *ExamApplicationsIPCreate) SetDOB(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetDOB(s)
	return eaic
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableDOB(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetDOB(*s)
	}
	return eaic
}

// SetGender sets the "Gender" field.
func (eaic *ExamApplicationsIPCreate) SetGender(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetGender(s)
	return eaic
}

// SetNillableGender sets the "Gender" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableGender(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetGender(*s)
	}
	return eaic
}

// SetMobileNumber sets the "MobileNumber" field.
func (eaic *ExamApplicationsIPCreate) SetMobileNumber(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetMobileNumber(s)
	return eaic
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableMobileNumber(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetMobileNumber(*s)
	}
	return eaic
}

// SetEmailID sets the "EmailID" field.
func (eaic *ExamApplicationsIPCreate) SetEmailID(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetEmailID(s)
	return eaic
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableEmailID(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetEmailID(*s)
	}
	return eaic
}

// SetEmployeeCategory sets the "EmployeeCategory" field.
func (eaic *ExamApplicationsIPCreate) SetEmployeeCategory(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetEmployeeCategory(s)
	return eaic
}

// SetNillableEmployeeCategory sets the "EmployeeCategory" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableEmployeeCategory(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetEmployeeCategory(*s)
	}
	return eaic
}

// SetCadre sets the "Cadre" field.
func (eaic *ExamApplicationsIPCreate) SetCadre(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetCadre(s)
	return eaic
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableCadre(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetCadre(*s)
	}
	return eaic
}

// SetEmployeePost sets the "EmployeePost" field.
func (eaic *ExamApplicationsIPCreate) SetEmployeePost(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetEmployeePost(s)
	return eaic
}

// SetNillableEmployeePost sets the "EmployeePost" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableEmployeePost(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetEmployeePost(*s)
	}
	return eaic
}

// SetFacilityID sets the "FacilityID" field.
func (eaic *ExamApplicationsIPCreate) SetFacilityID(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetFacilityID(s)
	return eaic
}

// SetNillableFacilityID sets the "FacilityID" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableFacilityID(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetFacilityID(*s)
	}
	return eaic
}

// SetFacilityName sets the "FacilityName" field.
func (eaic *ExamApplicationsIPCreate) SetFacilityName(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetFacilityName(s)
	return eaic
}

// SetNillableFacilityName sets the "FacilityName" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableFacilityName(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetFacilityName(*s)
	}
	return eaic
}

// SetDivisionName sets the "DivisionName" field.
func (eaic *ExamApplicationsIPCreate) SetDivisionName(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetDivisionName(s)
	return eaic
}

// SetNillableDivisionName sets the "DivisionName" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableDivisionName(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetDivisionName(*s)
	}
	return eaic
}

// SetRegionName sets the "RegionName" field.
func (eaic *ExamApplicationsIPCreate) SetRegionName(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetRegionName(s)
	return eaic
}

// SetNillableRegionName sets the "RegionName" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableRegionName(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetRegionName(*s)
	}
	return eaic
}

// SetReportingOfficeName sets the "ReportingOfficeName" field.
func (eaic *ExamApplicationsIPCreate) SetReportingOfficeName(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetReportingOfficeName(s)
	return eaic
}

// SetNillableReportingOfficeName sets the "ReportingOfficeName" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableReportingOfficeName(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetReportingOfficeName(*s)
	}
	return eaic
}

// SetCircleName sets the "CircleName" field.
func (eaic *ExamApplicationsIPCreate) SetCircleName(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetCircleName(s)
	return eaic
}

// SetNillableCircleName sets the "CircleName" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableCircleName(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetCircleName(*s)
	}
	return eaic
}

// SetEntryCadre sets the "EntryCadre" field.
func (eaic *ExamApplicationsIPCreate) SetEntryCadre(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetEntryCadre(s)
	return eaic
}

// SetNillableEntryCadre sets the "EntryCadre" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableEntryCadre(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetEntryCadre(*s)
	}
	return eaic
}

// SetDCCS sets the "DCCS" field.
func (eaic *ExamApplicationsIPCreate) SetDCCS(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetDCCS(s)
	return eaic
}

// SetNillableDCCS sets the "DCCS" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableDCCS(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetDCCS(*s)
	}
	return eaic
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (eaic *ExamApplicationsIPCreate) SetDCInPresentCadre(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetDCInPresentCadre(s)
	return eaic
}

// SetNillableDCInPresentCadre sets the "DCInPresentCadre" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableDCInPresentCadre(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetDCInPresentCadre(*s)
	}
	return eaic
}

// SetDeputationOfficeId sets the "DeputationOfficeId" field.
func (eaic *ExamApplicationsIPCreate) SetDeputationOfficeId(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetDeputationOfficeId(s)
	return eaic
}

// SetNillableDeputationOfficeId sets the "DeputationOfficeId" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableDeputationOfficeId(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetDeputationOfficeId(*s)
	}
	return eaic
}

// SetDisabilityType sets the "DisabilityType" field.
func (eaic *ExamApplicationsIPCreate) SetDisabilityType(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetDisabilityType(s)
	return eaic
}

// SetNillableDisabilityType sets the "DisabilityType" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableDisabilityType(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetDisabilityType(*s)
	}
	return eaic
}

// SetDisabilityPercentage sets the "DisabilityPercentage" field.
func (eaic *ExamApplicationsIPCreate) SetDisabilityPercentage(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetDisabilityPercentage(s)
	return eaic
}

// SetNillableDisabilityPercentage sets the "DisabilityPercentage" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableDisabilityPercentage(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetDisabilityPercentage(*s)
	}
	return eaic
}

// SetEducation sets the "Education" field.
func (eaic *ExamApplicationsIPCreate) SetEducation(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetEducation(s)
	return eaic
}

// SetNillableEducation sets the "Education" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableEducation(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetEducation(*s)
	}
	return eaic
}

// SetExamNameCode sets the "ExamNameCode" field.
func (eaic *ExamApplicationsIPCreate) SetExamNameCode(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetExamNameCode(s)
	return eaic
}

// SetNillableExamNameCode sets the "ExamNameCode" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableExamNameCode(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetExamNameCode(*s)
	}
	return eaic
}

// SetExamYear sets the "ExamYear" field.
func (eaic *ExamApplicationsIPCreate) SetExamYear(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetExamYear(s)
	return eaic
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableExamYear(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetExamYear(*s)
	}
	return eaic
}

// SetExamName sets the "ExamName" field.
func (eaic *ExamApplicationsIPCreate) SetExamName(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetExamName(s)
	return eaic
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableExamName(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetExamName(*s)
	}
	return eaic
}

// SetPresentCadre sets the "PresentCadre" field.
func (eaic *ExamApplicationsIPCreate) SetPresentCadre(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetPresentCadre(s)
	return eaic
}

// SetNillablePresentCadre sets the "PresentCadre" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillablePresentCadre(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetPresentCadre(*s)
	}
	return eaic
}

// SetPresentDesignation sets the "PresentDesignation" field.
func (eaic *ExamApplicationsIPCreate) SetPresentDesignation(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetPresentDesignation(s)
	return eaic
}

// SetNillablePresentDesignation sets the "PresentDesignation" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillablePresentDesignation(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetPresentDesignation(*s)
	}
	return eaic
}

// SetEligibleCadre sets the "EligibleCadre" field.
func (eaic *ExamApplicationsIPCreate) SetEligibleCadre(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetEligibleCadre(s)
	return eaic
}

// SetNillableEligibleCadre sets the "EligibleCadre" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableEligibleCadre(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetEligibleCadre(*s)
	}
	return eaic
}

// SetEligibleCadreDate sets the "EligibleCadreDate" field.
func (eaic *ExamApplicationsIPCreate) SetEligibleCadreDate(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetEligibleCadreDate(s)
	return eaic
}

// SetNillableEligibleCadreDate sets the "EligibleCadreDate" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableEligibleCadreDate(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetEligibleCadreDate(*s)
	}
	return eaic
}

// SetServiceLength sets the "ServiceLength" field.
func (eaic *ExamApplicationsIPCreate) SetServiceLength(i []interface{}) *ExamApplicationsIPCreate {
	eaic.mutation.SetServiceLength(i)
	return eaic
}

// SetCentrePreference sets the "CentrePreference" field.
func (eaic *ExamApplicationsIPCreate) SetCentrePreference(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetCentrePreference(s)
	return eaic
}

// SetNillableCentrePreference sets the "CentrePreference" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableCentrePreference(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetCentrePreference(*s)
	}
	return eaic
}

// SetSignature sets the "Signature" field.
func (eaic *ExamApplicationsIPCreate) SetSignature(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetSignature(s)
	return eaic
}

// SetNillableSignature sets the "Signature" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableSignature(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetSignature(*s)
	}
	return eaic
}

// SetPhoto sets the "Photo" field.
func (eaic *ExamApplicationsIPCreate) SetPhoto(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetPhoto(s)
	return eaic
}

// SetNillablePhoto sets the "Photo" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillablePhoto(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetPhoto(*s)
	}
	return eaic
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (eaic *ExamApplicationsIPCreate) SetApplicationStatus(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetApplicationStatus(s)
	return eaic
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableApplicationStatus(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetApplicationStatus(*s)
	}
	return eaic
}

// SetApplnSubmittedDate sets the "ApplnSubmittedDate" field.
func (eaic *ExamApplicationsIPCreate) SetApplnSubmittedDate(t time.Time) *ExamApplicationsIPCreate {
	eaic.mutation.SetApplnSubmittedDate(t)
	return eaic
}

// SetNillableApplnSubmittedDate sets the "ApplnSubmittedDate" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableApplnSubmittedDate(t *time.Time) *ExamApplicationsIPCreate {
	if t != nil {
		eaic.SetApplnSubmittedDate(*t)
	}
	return eaic
}

// SetVARemarks sets the "VA_Remarks" field.
func (eaic *ExamApplicationsIPCreate) SetVARemarks(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetVARemarks(s)
	return eaic
}

// SetNillableVARemarks sets the "VA_Remarks" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableVARemarks(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetVARemarks(*s)
	}
	return eaic
}

// SetVAUserName sets the "VA_UserName" field.
func (eaic *ExamApplicationsIPCreate) SetVAUserName(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetVAUserName(s)
	return eaic
}

// SetNillableVAUserName sets the "VA_UserName" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableVAUserName(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetVAUserName(*s)
	}
	return eaic
}

// SetVADate sets the "VA_Date" field.
func (eaic *ExamApplicationsIPCreate) SetVADate(t time.Time) *ExamApplicationsIPCreate {
	eaic.mutation.SetVADate(t)
	return eaic
}

// SetNillableVADate sets the "VA_Date" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableVADate(t *time.Time) *ExamApplicationsIPCreate {
	if t != nil {
		eaic.SetVADate(*t)
	}
	return eaic
}

// SetCARemarks sets the "CA_Remarks" field.
func (eaic *ExamApplicationsIPCreate) SetCARemarks(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetCARemarks(s)
	return eaic
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableCARemarks(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetCARemarks(*s)
	}
	return eaic
}

// SetCAUserName sets the "CA_UserName" field.
func (eaic *ExamApplicationsIPCreate) SetCAUserName(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetCAUserName(s)
	return eaic
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableCAUserName(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetCAUserName(*s)
	}
	return eaic
}

// SetCADate sets the "CA_Date" field.
func (eaic *ExamApplicationsIPCreate) SetCADate(t time.Time) *ExamApplicationsIPCreate {
	eaic.mutation.SetCADate(t)
	return eaic
}

// SetNillableCADate sets the "CA_Date" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableCADate(t *time.Time) *ExamApplicationsIPCreate {
	if t != nil {
		eaic.SetCADate(*t)
	}
	return eaic
}

// SetApplicationWdlDate sets the "ApplicationWdlDate" field.
func (eaic *ExamApplicationsIPCreate) SetApplicationWdlDate(t time.Time) *ExamApplicationsIPCreate {
	eaic.mutation.SetApplicationWdlDate(t)
	return eaic
}

// SetNillableApplicationWdlDate sets the "ApplicationWdlDate" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableApplicationWdlDate(t *time.Time) *ExamApplicationsIPCreate {
	if t != nil {
		eaic.SetApplicationWdlDate(*t)
	}
	return eaic
}

// SetNARemarks sets the "NA_Remarks" field.
func (eaic *ExamApplicationsIPCreate) SetNARemarks(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetNARemarks(s)
	return eaic
}

// SetNillableNARemarks sets the "NA_Remarks" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableNARemarks(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetNARemarks(*s)
	}
	return eaic
}

// SetNAUserName sets the "NA_UserName" field.
func (eaic *ExamApplicationsIPCreate) SetNAUserName(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetNAUserName(s)
	return eaic
}

// SetNillableNAUserName sets the "NA_UserName" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableNAUserName(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetNAUserName(*s)
	}
	return eaic
}

// SetNADate sets the "NA_Date" field.
func (eaic *ExamApplicationsIPCreate) SetNADate(t time.Time) *ExamApplicationsIPCreate {
	eaic.mutation.SetNADate(t)
	return eaic
}

// SetNillableNADate sets the "NA_Date" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableNADate(t *time.Time) *ExamApplicationsIPCreate {
	if t != nil {
		eaic.SetNADate(*t)
	}
	return eaic
}

// SetAppliactionRemarks sets the "AppliactionRemarks" field.
func (eaic *ExamApplicationsIPCreate) SetAppliactionRemarks(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetAppliactionRemarks(s)
	return eaic
}

// SetNillableAppliactionRemarks sets the "AppliactionRemarks" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableAppliactionRemarks(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetAppliactionRemarks(*s)
	}
	return eaic
}

// SetCadrePreferences sets the "CadrePreferences" field.
func (eaic *ExamApplicationsIPCreate) SetCadrePreferences(i []interface{}) *ExamApplicationsIPCreate {
	eaic.mutation.SetCadrePreferences(i)
	return eaic
}

// SetDivisionPreferences sets the "DivisionPreferences" field.
func (eaic *ExamApplicationsIPCreate) SetDivisionPreferences(i []interface{}) *ExamApplicationsIPCreate {
	eaic.mutation.SetDivisionPreferences(i)
	return eaic
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (eaic *ExamApplicationsIPCreate) SetUpdatedAt(t time.Time) *ExamApplicationsIPCreate {
	eaic.mutation.SetUpdatedAt(t)
	return eaic
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableUpdatedAt(t *time.Time) *ExamApplicationsIPCreate {
	if t != nil {
		eaic.SetUpdatedAt(*t)
	}
	return eaic
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (eaic *ExamApplicationsIPCreate) SetUpdatedBy(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetUpdatedBy(s)
	return eaic
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableUpdatedBy(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetUpdatedBy(*s)
	}
	return eaic
}

// SetCAPreviousRemarks sets the "CAPreviousRemarks" field.
func (eaic *ExamApplicationsIPCreate) SetCAPreviousRemarks(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetCAPreviousRemarks(s)
	return eaic
}

// SetNillableCAPreviousRemarks sets the "CAPreviousRemarks" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableCAPreviousRemarks(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetCAPreviousRemarks(*s)
	}
	return eaic
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (eaic *ExamApplicationsIPCreate) SetRoleUserCode(i int32) *ExamApplicationsIPCreate {
	eaic.mutation.SetRoleUserCode(i)
	return eaic
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableRoleUserCode(i *int32) *ExamApplicationsIPCreate {
	if i != nil {
		eaic.SetRoleUserCode(*i)
	}
	return eaic
}

// SetID sets the "id" field.
func (eaic *ExamApplicationsIPCreate) SetID(i int64) *ExamApplicationsIPCreate {
	eaic.mutation.SetID(i)
	return eaic
}

// AddUsersIPRefIDs adds the "UsersIPRef" edge to the UserMaster entity by IDs.
func (eaic *ExamApplicationsIPCreate) AddUsersIPRefIDs(ids ...int64) *ExamApplicationsIPCreate {
	eaic.mutation.AddUsersIPRefIDs(ids...)
	return eaic
}

// AddUsersIPRef adds the "UsersIPRef" edges to the UserMaster entity.
func (eaic *ExamApplicationsIPCreate) AddUsersIPRef(u ...*UserMaster) *ExamApplicationsIPCreate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eaic.AddUsersIPRefIDs(ids...)
}

// AddExamApplnIPRefIDs adds the "ExamAppln_IP_Ref" edge to the Exam_IP entity by IDs.
func (eaic *ExamApplicationsIPCreate) AddExamApplnIPRefIDs(ids ...int32) *ExamApplicationsIPCreate {
	eaic.mutation.AddExamApplnIPRefIDs(ids...)
	return eaic
}

// AddExamApplnIPRef adds the "ExamAppln_IP_Ref" edges to the Exam_IP entity.
func (eaic *ExamApplicationsIPCreate) AddExamApplnIPRef(e ...*Exam_IP) *ExamApplicationsIPCreate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eaic.AddExamApplnIPRefIDs(ids...)
}

// AddOfficeIPRefIDs adds the "Office_IP_Ref" edge to the Facility entity by IDs.
func (eaic *ExamApplicationsIPCreate) AddOfficeIPRefIDs(ids ...int32) *ExamApplicationsIPCreate {
	eaic.mutation.AddOfficeIPRefIDs(ids...)
	return eaic
}

// AddOfficeIPRef adds the "Office_IP_Ref" edges to the Facility entity.
func (eaic *ExamApplicationsIPCreate) AddOfficeIPRef(f ...*Facility) *ExamApplicationsIPCreate {
	ids := make([]int32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eaic.AddOfficeIPRefIDs(ids...)
}

// SetRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID.
func (eaic *ExamApplicationsIPCreate) SetRoleusersID(id int32) *ExamApplicationsIPCreate {
	eaic.mutation.SetRoleusersID(id)
	return eaic
}

// SetNillableRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableRoleusersID(id *int32) *ExamApplicationsIPCreate {
	if id != nil {
		eaic = eaic.SetRoleusersID(*id)
	}
	return eaic
}

// SetRoleusers sets the "roleusers" edge to the RoleMaster entity.
func (eaic *ExamApplicationsIPCreate) SetRoleusers(r *RoleMaster) *ExamApplicationsIPCreate {
	return eaic.SetRoleusersID(r.ID)
}

// AddCadrePrefRefIDs adds the "CadrePref_Ref" edge to the Cadre_Choice_IP entity by IDs.
func (eaic *ExamApplicationsIPCreate) AddCadrePrefRefIDs(ids ...int32) *ExamApplicationsIPCreate {
	eaic.mutation.AddCadrePrefRefIDs(ids...)
	return eaic
}

// AddCadrePrefRef adds the "CadrePref_Ref" edges to the Cadre_Choice_IP entity.
func (eaic *ExamApplicationsIPCreate) AddCadrePrefRef(c ...*Cadre_Choice_IP) *ExamApplicationsIPCreate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eaic.AddCadrePrefRefIDs(ids...)
}

// AddCirclePrefRefIDs adds the "CirclePrefRef" edge to the PlaceOfPreferenceIP entity by IDs.
func (eaic *ExamApplicationsIPCreate) AddCirclePrefRefIDs(ids ...int32) *ExamApplicationsIPCreate {
	eaic.mutation.AddCirclePrefRefIDs(ids...)
	return eaic
}

// AddCirclePrefRef adds the "CirclePrefRef" edges to the PlaceOfPreferenceIP entity.
func (eaic *ExamApplicationsIPCreate) AddCirclePrefRef(p ...*PlaceOfPreferenceIP) *ExamApplicationsIPCreate {
	ids := make([]int32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eaic.AddCirclePrefRefIDs(ids...)
}

// AddIPApplicationsRefIDs adds the "IPApplicationsRef" edge to the RecommendationsIPApplications entity by IDs.
func (eaic *ExamApplicationsIPCreate) AddIPApplicationsRefIDs(ids ...int64) *ExamApplicationsIPCreate {
	eaic.mutation.AddIPApplicationsRefIDs(ids...)
	return eaic
}

// AddIPApplicationsRef adds the "IPApplicationsRef" edges to the RecommendationsIPApplications entity.
func (eaic *ExamApplicationsIPCreate) AddIPApplicationsRef(r ...*RecommendationsIPApplications) *ExamApplicationsIPCreate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eaic.AddIPApplicationsRefIDs(ids...)
}

// Mutation returns the ExamApplicationsIPMutation object of the builder.
func (eaic *ExamApplicationsIPCreate) Mutation() *ExamApplicationsIPMutation {
	return eaic.mutation
}

// Save creates the Exam_Applications_IP in the database.
func (eaic *ExamApplicationsIPCreate) Save(ctx context.Context) (*Exam_Applications_IP, error) {
	eaic.defaults()
	return withHooks(ctx, eaic.sqlSave, eaic.mutation, eaic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (eaic *ExamApplicationsIPCreate) SaveX(ctx context.Context) *Exam_Applications_IP {
	v, err := eaic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eaic *ExamApplicationsIPCreate) Exec(ctx context.Context) error {
	_, err := eaic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eaic *ExamApplicationsIPCreate) ExecX(ctx context.Context) {
	if err := eaic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eaic *ExamApplicationsIPCreate) defaults() {
	if _, ok := eaic.mutation.ApplnSubmittedDate(); !ok {
		v := exam_applications_ip.DefaultApplnSubmittedDate()
		eaic.mutation.SetApplnSubmittedDate(v)
	}
	if _, ok := eaic.mutation.UpdatedAt(); !ok {
		v := exam_applications_ip.DefaultUpdatedAt()
		eaic.mutation.SetUpdatedAt(v)
	}
	if _, ok := eaic.mutation.UpdatedBy(); !ok {
		v := exam_applications_ip.DefaultUpdatedBy
		eaic.mutation.SetUpdatedBy(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eaic *ExamApplicationsIPCreate) check() error {
	return nil
}

func (eaic *ExamApplicationsIPCreate) sqlSave(ctx context.Context) (*Exam_Applications_IP, error) {
	if err := eaic.check(); err != nil {
		return nil, err
	}
	_node, _spec := eaic.createSpec()
	if err := sqlgraph.CreateNode(ctx, eaic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	eaic.mutation.id = &_node.ID
	eaic.mutation.done = true
	return _node, nil
}

func (eaic *ExamApplicationsIPCreate) createSpec() (*Exam_Applications_IP, *sqlgraph.CreateSpec) {
	var (
		_node = &Exam_Applications_IP{config: eaic.config}
		_spec = sqlgraph.NewCreateSpec(exam_applications_ip.Table, sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64))
	)
	if id, ok := eaic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := eaic.mutation.ApplicationNumber(); ok {
		_spec.SetField(exam_applications_ip.FieldApplicationNumber, field.TypeString, value)
		_node.ApplicationNumber = value
	}
	if value, ok := eaic.mutation.EmployeeID(); ok {
		_spec.SetField(exam_applications_ip.FieldEmployeeID, field.TypeInt64, value)
		_node.EmployeeID = value
	}
	if value, ok := eaic.mutation.EmployeeName(); ok {
		_spec.SetField(exam_applications_ip.FieldEmployeeName, field.TypeString, value)
		_node.EmployeeName = value
	}
	if value, ok := eaic.mutation.DOB(); ok {
		_spec.SetField(exam_applications_ip.FieldDOB, field.TypeString, value)
		_node.DOB = value
	}
	if value, ok := eaic.mutation.Gender(); ok {
		_spec.SetField(exam_applications_ip.FieldGender, field.TypeString, value)
		_node.Gender = value
	}
	if value, ok := eaic.mutation.MobileNumber(); ok {
		_spec.SetField(exam_applications_ip.FieldMobileNumber, field.TypeString, value)
		_node.MobileNumber = value
	}
	if value, ok := eaic.mutation.EmailID(); ok {
		_spec.SetField(exam_applications_ip.FieldEmailID, field.TypeString, value)
		_node.EmailID = value
	}
	if value, ok := eaic.mutation.EmployeeCategory(); ok {
		_spec.SetField(exam_applications_ip.FieldEmployeeCategory, field.TypeString, value)
		_node.EmployeeCategory = value
	}
	if value, ok := eaic.mutation.Cadre(); ok {
		_spec.SetField(exam_applications_ip.FieldCadre, field.TypeString, value)
		_node.Cadre = value
	}
	if value, ok := eaic.mutation.EmployeePost(); ok {
		_spec.SetField(exam_applications_ip.FieldEmployeePost, field.TypeString, value)
		_node.EmployeePost = value
	}
	if value, ok := eaic.mutation.FacilityID(); ok {
		_spec.SetField(exam_applications_ip.FieldFacilityID, field.TypeString, value)
		_node.FacilityID = value
	}
	if value, ok := eaic.mutation.FacilityName(); ok {
		_spec.SetField(exam_applications_ip.FieldFacilityName, field.TypeString, value)
		_node.FacilityName = value
	}
	if value, ok := eaic.mutation.DivisionName(); ok {
		_spec.SetField(exam_applications_ip.FieldDivisionName, field.TypeString, value)
		_node.DivisionName = value
	}
	if value, ok := eaic.mutation.RegionName(); ok {
		_spec.SetField(exam_applications_ip.FieldRegionName, field.TypeString, value)
		_node.RegionName = value
	}
	if value, ok := eaic.mutation.ReportingOfficeName(); ok {
		_spec.SetField(exam_applications_ip.FieldReportingOfficeName, field.TypeString, value)
		_node.ReportingOfficeName = value
	}
	if value, ok := eaic.mutation.CircleName(); ok {
		_spec.SetField(exam_applications_ip.FieldCircleName, field.TypeString, value)
		_node.CircleName = value
	}
	if value, ok := eaic.mutation.EntryCadre(); ok {
		_spec.SetField(exam_applications_ip.FieldEntryCadre, field.TypeString, value)
		_node.EntryCadre = value
	}
	if value, ok := eaic.mutation.DCCS(); ok {
		_spec.SetField(exam_applications_ip.FieldDCCS, field.TypeString, value)
		_node.DCCS = value
	}
	if value, ok := eaic.mutation.DCInPresentCadre(); ok {
		_spec.SetField(exam_applications_ip.FieldDCInPresentCadre, field.TypeString, value)
		_node.DCInPresentCadre = value
	}
	if value, ok := eaic.mutation.DeputationOfficeId(); ok {
		_spec.SetField(exam_applications_ip.FieldDeputationOfficeId, field.TypeString, value)
		_node.DeputationOfficeId = value
	}
	if value, ok := eaic.mutation.DisabilityType(); ok {
		_spec.SetField(exam_applications_ip.FieldDisabilityType, field.TypeString, value)
		_node.DisabilityType = value
	}
	if value, ok := eaic.mutation.DisabilityPercentage(); ok {
		_spec.SetField(exam_applications_ip.FieldDisabilityPercentage, field.TypeString, value)
		_node.DisabilityPercentage = value
	}
	if value, ok := eaic.mutation.Education(); ok {
		_spec.SetField(exam_applications_ip.FieldEducation, field.TypeString, value)
		_node.Education = value
	}
	if value, ok := eaic.mutation.ExamNameCode(); ok {
		_spec.SetField(exam_applications_ip.FieldExamNameCode, field.TypeString, value)
		_node.ExamNameCode = value
	}
	if value, ok := eaic.mutation.ExamYear(); ok {
		_spec.SetField(exam_applications_ip.FieldExamYear, field.TypeString, value)
		_node.ExamYear = value
	}
	if value, ok := eaic.mutation.ExamName(); ok {
		_spec.SetField(exam_applications_ip.FieldExamName, field.TypeString, value)
		_node.ExamName = value
	}
	if value, ok := eaic.mutation.PresentCadre(); ok {
		_spec.SetField(exam_applications_ip.FieldPresentCadre, field.TypeString, value)
		_node.PresentCadre = value
	}
	if value, ok := eaic.mutation.PresentDesignation(); ok {
		_spec.SetField(exam_applications_ip.FieldPresentDesignation, field.TypeString, value)
		_node.PresentDesignation = value
	}
	if value, ok := eaic.mutation.EligibleCadre(); ok {
		_spec.SetField(exam_applications_ip.FieldEligibleCadre, field.TypeString, value)
		_node.EligibleCadre = value
	}
	if value, ok := eaic.mutation.EligibleCadreDate(); ok {
		_spec.SetField(exam_applications_ip.FieldEligibleCadreDate, field.TypeString, value)
		_node.EligibleCadreDate = value
	}
	if value, ok := eaic.mutation.ServiceLength(); ok {
		_spec.SetField(exam_applications_ip.FieldServiceLength, field.TypeJSON, value)
		_node.ServiceLength = value
	}
	if value, ok := eaic.mutation.CentrePreference(); ok {
		_spec.SetField(exam_applications_ip.FieldCentrePreference, field.TypeString, value)
		_node.CentrePreference = value
	}
	if value, ok := eaic.mutation.Signature(); ok {
		_spec.SetField(exam_applications_ip.FieldSignature, field.TypeString, value)
		_node.Signature = value
	}
	if value, ok := eaic.mutation.Photo(); ok {
		_spec.SetField(exam_applications_ip.FieldPhoto, field.TypeString, value)
		_node.Photo = value
	}
	if value, ok := eaic.mutation.ApplicationStatus(); ok {
		_spec.SetField(exam_applications_ip.FieldApplicationStatus, field.TypeString, value)
		_node.ApplicationStatus = value
	}
	if value, ok := eaic.mutation.ApplnSubmittedDate(); ok {
		_spec.SetField(exam_applications_ip.FieldApplnSubmittedDate, field.TypeTime, value)
		_node.ApplnSubmittedDate = value
	}
	if value, ok := eaic.mutation.VARemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldVARemarks, field.TypeString, value)
		_node.VARemarks = value
	}
	if value, ok := eaic.mutation.VAUserName(); ok {
		_spec.SetField(exam_applications_ip.FieldVAUserName, field.TypeString, value)
		_node.VAUserName = value
	}
	if value, ok := eaic.mutation.VADate(); ok {
		_spec.SetField(exam_applications_ip.FieldVADate, field.TypeTime, value)
		_node.VADate = value
	}
	if value, ok := eaic.mutation.CARemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldCARemarks, field.TypeString, value)
		_node.CARemarks = value
	}
	if value, ok := eaic.mutation.CAUserName(); ok {
		_spec.SetField(exam_applications_ip.FieldCAUserName, field.TypeString, value)
		_node.CAUserName = value
	}
	if value, ok := eaic.mutation.CADate(); ok {
		_spec.SetField(exam_applications_ip.FieldCADate, field.TypeTime, value)
		_node.CADate = value
	}
	if value, ok := eaic.mutation.ApplicationWdlDate(); ok {
		_spec.SetField(exam_applications_ip.FieldApplicationWdlDate, field.TypeTime, value)
		_node.ApplicationWdlDate = value
	}
	if value, ok := eaic.mutation.NARemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldNARemarks, field.TypeString, value)
		_node.NARemarks = value
	}
	if value, ok := eaic.mutation.NAUserName(); ok {
		_spec.SetField(exam_applications_ip.FieldNAUserName, field.TypeString, value)
		_node.NAUserName = value
	}
	if value, ok := eaic.mutation.NADate(); ok {
		_spec.SetField(exam_applications_ip.FieldNADate, field.TypeTime, value)
		_node.NADate = value
	}
	if value, ok := eaic.mutation.AppliactionRemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldAppliactionRemarks, field.TypeString, value)
		_node.AppliactionRemarks = value
	}
	if value, ok := eaic.mutation.CadrePreferences(); ok {
		_spec.SetField(exam_applications_ip.FieldCadrePreferences, field.TypeJSON, value)
		_node.CadrePreferences = value
	}
	if value, ok := eaic.mutation.DivisionPreferences(); ok {
		_spec.SetField(exam_applications_ip.FieldDivisionPreferences, field.TypeJSON, value)
		_node.DivisionPreferences = value
	}
	if value, ok := eaic.mutation.UpdatedAt(); ok {
		_spec.SetField(exam_applications_ip.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := eaic.mutation.UpdatedBy(); ok {
		_spec.SetField(exam_applications_ip.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := eaic.mutation.CAPreviousRemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldCAPreviousRemarks, field.TypeString, value)
		_node.CAPreviousRemarks = value
	}
	if nodes := eaic.mutation.UsersIPRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.UsersIPRefTable,
			Columns: []string{exam_applications_ip.UsersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eaic.mutation.ExamApplnIPRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.ExamApplnIPRefTable,
			Columns: []string{exam_applications_ip.ExamApplnIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_ip.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eaic.mutation.OfficeIPRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.OfficeIPRefTable,
			Columns: []string{exam_applications_ip.OfficeIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eaic.mutation.RoleusersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ip.RoleusersTable,
			Columns: []string{exam_applications_ip.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoleUserCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eaic.mutation.CadrePrefRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.CadrePrefRefTable,
			Columns: []string{exam_applications_ip.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_ip.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eaic.mutation.CirclePrefRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.CirclePrefRefTable,
			Columns: []string{exam_applications_ip.CirclePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeofpreferenceip.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eaic.mutation.IPApplicationsRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.IPApplicationsRefTable,
			Columns: []string{exam_applications_ip.IPApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationsipapplications.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExamApplicationsIPCreateBulk is the builder for creating many Exam_Applications_IP entities in bulk.
type ExamApplicationsIPCreateBulk struct {
	config
	builders []*ExamApplicationsIPCreate
}

// Save creates the Exam_Applications_IP entities in the database.
func (eaicb *ExamApplicationsIPCreateBulk) Save(ctx context.Context) ([]*Exam_Applications_IP, error) {
	specs := make([]*sqlgraph.CreateSpec, len(eaicb.builders))
	nodes := make([]*Exam_Applications_IP, len(eaicb.builders))
	mutators := make([]Mutator, len(eaicb.builders))
	for i := range eaicb.builders {
		func(i int, root context.Context) {
			builder := eaicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExamApplicationsIPMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eaicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eaicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eaicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eaicb *ExamApplicationsIPCreateBulk) SaveX(ctx context.Context) []*Exam_Applications_IP {
	v, err := eaicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eaicb *ExamApplicationsIPCreateBulk) Exec(ctx context.Context) error {
	_, err := eaicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eaicb *ExamApplicationsIPCreateBulk) ExecX(ctx context.Context) {
	if err := eaicb.Exec(ctx); err != nil {
		panic(err)
	}
}
