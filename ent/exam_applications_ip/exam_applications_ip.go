// Code generated by ent, DO NOT EDIT.

package exam_applications_ip

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the exam_applications_ip type in the database.
	Label = "exam_applications_ip"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "ApplicationID"
	// FieldApplicationNumber holds the string denoting the applicationnumber field in the database.
	FieldApplicationNumber = "application_number"
	// FieldEmployeeID holds the string denoting the employeeid field in the database.
	FieldEmployeeID = "employee_id"
	// FieldEmployeeName holds the string denoting the employeename field in the database.
	FieldEmployeeName = "employee_name"
	// FieldDOB holds the string denoting the dob field in the database.
	FieldDOB = "dob"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldMobileNumber holds the string denoting the mobilenumber field in the database.
	FieldMobileNumber = "mobile_number"
	// FieldEmailID holds the string denoting the emailid field in the database.
	FieldEmailID = "email_id"
	// FieldEmployeeCategory holds the string denoting the employeecategory field in the database.
	FieldEmployeeCategory = "employee_category"
	// FieldCadre holds the string denoting the cadre field in the database.
	FieldCadre = "cadre"
	// FieldEmployeePost holds the string denoting the employeepost field in the database.
	FieldEmployeePost = "employee_post"
	// FieldFacilityID holds the string denoting the facilityid field in the database.
	FieldFacilityID = "facility_id"
	// FieldFacilityName holds the string denoting the facilityname field in the database.
	FieldFacilityName = "facility_name"
	// FieldDivisionName holds the string denoting the divisionname field in the database.
	FieldDivisionName = "division_name"
	// FieldRegionName holds the string denoting the regionname field in the database.
	FieldRegionName = "region_name"
	// FieldReportingOfficeName holds the string denoting the reportingofficename field in the database.
	FieldReportingOfficeName = "reporting_office_name"
	// FieldCircleName holds the string denoting the circlename field in the database.
	FieldCircleName = "circle_name"
	// FieldEntryCadre holds the string denoting the entrycadre field in the database.
	FieldEntryCadre = "entry_cadre"
	// FieldDCCS holds the string denoting the dccs field in the database.
	FieldDCCS = "dccs"
	// FieldDCInPresentCadre holds the string denoting the dcinpresentcadre field in the database.
	FieldDCInPresentCadre = "dc_in_present_cadre"
	// FieldDeputationOfficeId holds the string denoting the deputationofficeid field in the database.
	FieldDeputationOfficeId = "deputation_office_id"
	// FieldDisabilityType holds the string denoting the disabilitytype field in the database.
	FieldDisabilityType = "disability_type"
	// FieldDisabilityPercentage holds the string denoting the disabilitypercentage field in the database.
	FieldDisabilityPercentage = "disability_percentage"
	// FieldEducation holds the string denoting the education field in the database.
	FieldEducation = "education"
	// FieldExamNameCode holds the string denoting the examnamecode field in the database.
	FieldExamNameCode = "exam_name_code"
	// FieldExamYear holds the string denoting the examyear field in the database.
	FieldExamYear = "exam_year"
	// FieldExamName holds the string denoting the examname field in the database.
	FieldExamName = "exam_name"
	// FieldPresentCadre holds the string denoting the presentcadre field in the database.
	FieldPresentCadre = "present_cadre"
	// FieldPresentDesignation holds the string denoting the presentdesignation field in the database.
	FieldPresentDesignation = "present_designation"
	// FieldEligibleCadre holds the string denoting the eligiblecadre field in the database.
	FieldEligibleCadre = "eligible_cadre"
	// FieldEligibleCadreDate holds the string denoting the eligiblecadredate field in the database.
	FieldEligibleCadreDate = "eligible_cadre_date"
	// FieldServiceLength holds the string denoting the servicelength field in the database.
	FieldServiceLength = "service_length"
	// FieldCentrePreference holds the string denoting the centrepreference field in the database.
	FieldCentrePreference = "centre_preference"
	// FieldSignature holds the string denoting the signature field in the database.
	FieldSignature = "signature"
	// FieldPhoto holds the string denoting the photo field in the database.
	FieldPhoto = "photo"
	// FieldApplicationStatus holds the string denoting the applicationstatus field in the database.
	FieldApplicationStatus = "application_status"
	// FieldApplnSubmittedDate holds the string denoting the applnsubmitteddate field in the database.
	FieldApplnSubmittedDate = "appln_submitted_date"
	// FieldVARemarks holds the string denoting the va_remarks field in the database.
	FieldVARemarks = "va_remarks"
	// FieldVAUserName holds the string denoting the va_username field in the database.
	FieldVAUserName = "va_user_name"
	// FieldVADate holds the string denoting the va_date field in the database.
	FieldVADate = "va_date"
	// FieldCARemarks holds the string denoting the ca_remarks field in the database.
	FieldCARemarks = "ca_remarks"
	// FieldCAUserName holds the string denoting the ca_username field in the database.
	FieldCAUserName = "ca_user_name"
	// FieldCADate holds the string denoting the ca_date field in the database.
	FieldCADate = "ca_date"
	// FieldApplicationWdlDate holds the string denoting the applicationwdldate field in the database.
	FieldApplicationWdlDate = "application_wdl_date"
	// FieldNARemarks holds the string denoting the na_remarks field in the database.
	FieldNARemarks = "na_remarks"
	// FieldNAUserName holds the string denoting the na_username field in the database.
	FieldNAUserName = "na_user_name"
	// FieldNADate holds the string denoting the na_date field in the database.
	FieldNADate = "na_date"
	// FieldAppliactionRemarks holds the string denoting the appliactionremarks field in the database.
	FieldAppliactionRemarks = "appliaction_remarks"
	// FieldCadrePreferences holds the string denoting the cadrepreferences field in the database.
	FieldCadrePreferences = "cadre_preferences"
	// FieldDivisionPreferences holds the string denoting the divisionpreferences field in the database.
	FieldDivisionPreferences = "division_preferences"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUpdatedBy holds the string denoting the updatedby field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCAPreviousRemarks holds the string denoting the capreviousremarks field in the database.
	FieldCAPreviousRemarks = "ca_previous_remarks"
	// FieldRoleUserCode holds the string denoting the roleusercode field in the database.
	FieldRoleUserCode = "role_user_code"
	// EdgeUsersIPRef holds the string denoting the usersipref edge name in mutations.
	EdgeUsersIPRef = "UsersIPRef"
	// EdgeExamApplnIPRef holds the string denoting the examappln_ip_ref edge name in mutations.
	EdgeExamApplnIPRef = "ExamAppln_IP_Ref"
	// EdgeOfficeIPRef holds the string denoting the office_ip_ref edge name in mutations.
	EdgeOfficeIPRef = "Office_IP_Ref"
	// EdgeRoleusers holds the string denoting the roleusers edge name in mutations.
	EdgeRoleusers = "roleusers"
	// EdgeCadrePrefRef holds the string denoting the cadrepref_ref edge name in mutations.
	EdgeCadrePrefRef = "CadrePref_Ref"
	// EdgeCirclePrefRef holds the string denoting the circleprefref edge name in mutations.
	EdgeCirclePrefRef = "CirclePrefRef"
	// EdgeIPApplicationsRef holds the string denoting the ipapplicationsref edge name in mutations.
	EdgeIPApplicationsRef = "IPApplicationsRef"
	// UserMasterFieldID holds the string denoting the ID field of the UserMaster.
	UserMasterFieldID = "UserID"
	// Exam_IPFieldID holds the string denoting the ID field of the Exam_IP.
	Exam_IPFieldID = "ExamCodeIP"
	// FacilityFieldID holds the string denoting the ID field of the Facility.
	FacilityFieldID = "FacilityID"
	// RoleMasterFieldID holds the string denoting the ID field of the RoleMaster.
	RoleMasterFieldID = "RoleUserCode"
	// Cadre_Choice_IPFieldID holds the string denoting the ID field of the Cadre_Choice_IP.
	Cadre_Choice_IPFieldID = "CadrePrefId"
	// PlaceOfPreferenceIPFieldID holds the string denoting the ID field of the PlaceOfPreferenceIP.
	PlaceOfPreferenceIPFieldID = "PlacePrefId"
	// RecommendationsIPApplicationsFieldID holds the string denoting the ID field of the RecommendationsIPApplications.
	RecommendationsIPApplicationsFieldID = "RecommendationId"
	// Table holds the table name of the exam_applications_ip in the database.
	Table = "Exam_Applications_IP"
	// UsersIPRefTable is the table that holds the UsersIPRef relation/edge.
	UsersIPRefTable = "UserMaster"
	// UsersIPRefInverseTable is the table name for the UserMaster entity.
	// It exists in this package in order to avoid circular dependency with the "usermaster" package.
	UsersIPRefInverseTable = "UserMaster"
	// UsersIPRefColumn is the table column denoting the UsersIPRef relation/edge.
	UsersIPRefColumn = "exam_applications_ip_users_ip_ref"
	// ExamApplnIPRefTable is the table that holds the ExamAppln_IP_Ref relation/edge.
	ExamApplnIPRefTable = "Exam_IP"
	// ExamApplnIPRefInverseTable is the table name for the Exam_IP entity.
	// It exists in this package in order to avoid circular dependency with the "exam_ip" package.
	ExamApplnIPRefInverseTable = "Exam_IP"
	// ExamApplnIPRefColumn is the table column denoting the ExamAppln_IP_Ref relation/edge.
	ExamApplnIPRefColumn = "exam_applications_ip_exam_appln_ip_ref"
	// OfficeIPRefTable is the table that holds the Office_IP_Ref relation/edge.
	OfficeIPRefTable = "Facility"
	// OfficeIPRefInverseTable is the table name for the Facility entity.
	// It exists in this package in order to avoid circular dependency with the "facility" package.
	OfficeIPRefInverseTable = "Facility"
	// OfficeIPRefColumn is the table column denoting the Office_IP_Ref relation/edge.
	OfficeIPRefColumn = "exam_applications_ip_office_ip_ref"
	// RoleusersTable is the table that holds the roleusers relation/edge.
	RoleusersTable = "Exam_Applications_IP"
	// RoleusersInverseTable is the table name for the RoleMaster entity.
	// It exists in this package in order to avoid circular dependency with the "rolemaster" package.
	RoleusersInverseTable = "RoleMaster"
	// RoleusersColumn is the table column denoting the roleusers relation/edge.
	RoleusersColumn = "role_user_code"
	// CadrePrefRefTable is the table that holds the CadrePref_Ref relation/edge.
	CadrePrefRefTable = "Cadre_Choice_IP"
	// CadrePrefRefInverseTable is the table name for the Cadre_Choice_IP entity.
	// It exists in this package in order to avoid circular dependency with the "cadre_choice_ip" package.
	CadrePrefRefInverseTable = "Cadre_Choice_IP"
	// CadrePrefRefColumn is the table column denoting the CadrePref_Ref relation/edge.
	CadrePrefRefColumn = "application_id"
	// CirclePrefRefTable is the table that holds the CirclePrefRef relation/edge.
	CirclePrefRefTable = "PlaceOfPreferenceIP"
	// CirclePrefRefInverseTable is the table name for the PlaceOfPreferenceIP entity.
	// It exists in this package in order to avoid circular dependency with the "placeofpreferenceip" package.
	CirclePrefRefInverseTable = "PlaceOfPreferenceIP"
	// CirclePrefRefColumn is the table column denoting the CirclePrefRef relation/edge.
	CirclePrefRefColumn = "application_id"
	// IPApplicationsRefTable is the table that holds the IPApplicationsRef relation/edge.
	IPApplicationsRefTable = "RecommendationsIPApplications"
	// IPApplicationsRefInverseTable is the table name for the RecommendationsIPApplications entity.
	// It exists in this package in order to avoid circular dependency with the "recommendationsipapplications" package.
	IPApplicationsRefInverseTable = "RecommendationsIPApplications"
	// IPApplicationsRefColumn is the table column denoting the IPApplicationsRef relation/edge.
	IPApplicationsRefColumn = "application_id"
)

// Columns holds all SQL columns for exam_applications_ip fields.
var Columns = []string{
	FieldID,
	FieldApplicationNumber,
	FieldEmployeeID,
	FieldEmployeeName,
	FieldDOB,
	FieldGender,
	FieldMobileNumber,
	FieldEmailID,
	FieldEmployeeCategory,
	FieldCadre,
	FieldEmployeePost,
	FieldFacilityID,
	FieldFacilityName,
	FieldDivisionName,
	FieldRegionName,
	FieldReportingOfficeName,
	FieldCircleName,
	FieldEntryCadre,
	FieldDCCS,
	FieldDCInPresentCadre,
	FieldDeputationOfficeId,
	FieldDisabilityType,
	FieldDisabilityPercentage,
	FieldEducation,
	FieldExamNameCode,
	FieldExamYear,
	FieldExamName,
	FieldPresentCadre,
	FieldPresentDesignation,
	FieldEligibleCadre,
	FieldEligibleCadreDate,
	FieldServiceLength,
	FieldCentrePreference,
	FieldSignature,
	FieldPhoto,
	FieldApplicationStatus,
	FieldApplnSubmittedDate,
	FieldVARemarks,
	FieldVAUserName,
	FieldVADate,
	FieldCARemarks,
	FieldCAUserName,
	FieldCADate,
	FieldApplicationWdlDate,
	FieldNARemarks,
	FieldNAUserName,
	FieldNADate,
	FieldAppliactionRemarks,
	FieldCadrePreferences,
	FieldDivisionPreferences,
	FieldUpdatedAt,
	FieldUpdatedBy,
	FieldCAPreviousRemarks,
	FieldRoleUserCode,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "Exam_Applications_IP"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"exam_ip_exam_appln_ip_ref",
	"facility_office_ip_ref",
	"user_master_users_ip_ref",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultApplnSubmittedDate holds the default value on creation for the "ApplnSubmittedDate" field.
	DefaultApplnSubmittedDate func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "UpdatedAt" field.
	DefaultUpdatedAt func() time.Time
	// DefaultUpdatedBy holds the default value on creation for the "UpdatedBy" field.
	DefaultUpdatedBy string
)

// OrderOption defines the ordering options for the Exam_Applications_IP queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByApplicationNumber orders the results by the ApplicationNumber field.
func ByApplicationNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicationNumber, opts...).ToFunc()
}

// ByEmployeeID orders the results by the EmployeeID field.
func ByEmployeeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeID, opts...).ToFunc()
}

// ByEmployeeName orders the results by the EmployeeName field.
func ByEmployeeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeName, opts...).ToFunc()
}

// ByDOB orders the results by the DOB field.
func ByDOB(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDOB, opts...).ToFunc()
}

// ByGender orders the results by the Gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByMobileNumber orders the results by the MobileNumber field.
func ByMobileNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobileNumber, opts...).ToFunc()
}

// ByEmailID orders the results by the EmailID field.
func ByEmailID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailID, opts...).ToFunc()
}

// ByEmployeeCategory orders the results by the EmployeeCategory field.
func ByEmployeeCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeCategory, opts...).ToFunc()
}

// ByCadre orders the results by the Cadre field.
func ByCadre(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCadre, opts...).ToFunc()
}

// ByEmployeePost orders the results by the EmployeePost field.
func ByEmployeePost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeePost, opts...).ToFunc()
}

// ByFacilityID orders the results by the FacilityID field.
func ByFacilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFacilityID, opts...).ToFunc()
}

// ByFacilityName orders the results by the FacilityName field.
func ByFacilityName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFacilityName, opts...).ToFunc()
}

// ByDivisionName orders the results by the DivisionName field.
func ByDivisionName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDivisionName, opts...).ToFunc()
}

// ByRegionName orders the results by the RegionName field.
func ByRegionName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegionName, opts...).ToFunc()
}

// ByReportingOfficeName orders the results by the ReportingOfficeName field.
func ByReportingOfficeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReportingOfficeName, opts...).ToFunc()
}

// ByCircleName orders the results by the CircleName field.
func ByCircleName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCircleName, opts...).ToFunc()
}

// ByEntryCadre orders the results by the EntryCadre field.
func ByEntryCadre(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntryCadre, opts...).ToFunc()
}

// ByDCCS orders the results by the DCCS field.
func ByDCCS(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDCCS, opts...).ToFunc()
}

// ByDCInPresentCadre orders the results by the DCInPresentCadre field.
func ByDCInPresentCadre(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDCInPresentCadre, opts...).ToFunc()
}

// ByDeputationOfficeId orders the results by the DeputationOfficeId field.
func ByDeputationOfficeId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeputationOfficeId, opts...).ToFunc()
}

// ByDisabilityType orders the results by the DisabilityType field.
func ByDisabilityType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabilityType, opts...).ToFunc()
}

// ByDisabilityPercentage orders the results by the DisabilityPercentage field.
func ByDisabilityPercentage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabilityPercentage, opts...).ToFunc()
}

// ByEducation orders the results by the Education field.
func ByEducation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEducation, opts...).ToFunc()
}

// ByExamNameCode orders the results by the ExamNameCode field.
func ByExamNameCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamNameCode, opts...).ToFunc()
}

// ByExamYear orders the results by the ExamYear field.
func ByExamYear(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamYear, opts...).ToFunc()
}

// ByExamName orders the results by the ExamName field.
func ByExamName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamName, opts...).ToFunc()
}

// ByPresentCadre orders the results by the PresentCadre field.
func ByPresentCadre(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPresentCadre, opts...).ToFunc()
}

// ByPresentDesignation orders the results by the PresentDesignation field.
func ByPresentDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPresentDesignation, opts...).ToFunc()
}

// ByEligibleCadre orders the results by the EligibleCadre field.
func ByEligibleCadre(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEligibleCadre, opts...).ToFunc()
}

// ByEligibleCadreDate orders the results by the EligibleCadreDate field.
func ByEligibleCadreDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEligibleCadreDate, opts...).ToFunc()
}

// ByCentrePreference orders the results by the CentrePreference field.
func ByCentrePreference(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCentrePreference, opts...).ToFunc()
}

// BySignature orders the results by the Signature field.
func BySignature(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSignature, opts...).ToFunc()
}

// ByPhoto orders the results by the Photo field.
func ByPhoto(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoto, opts...).ToFunc()
}

// ByApplicationStatus orders the results by the ApplicationStatus field.
func ByApplicationStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicationStatus, opts...).ToFunc()
}

// ByApplnSubmittedDate orders the results by the ApplnSubmittedDate field.
func ByApplnSubmittedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplnSubmittedDate, opts...).ToFunc()
}

// ByVARemarks orders the results by the VA_Remarks field.
func ByVARemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVARemarks, opts...).ToFunc()
}

// ByVAUserName orders the results by the VA_UserName field.
func ByVAUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVAUserName, opts...).ToFunc()
}

// ByVADate orders the results by the VA_Date field.
func ByVADate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVADate, opts...).ToFunc()
}

// ByCARemarks orders the results by the CA_Remarks field.
func ByCARemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCARemarks, opts...).ToFunc()
}

// ByCAUserName orders the results by the CA_UserName field.
func ByCAUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCAUserName, opts...).ToFunc()
}

// ByCADate orders the results by the CA_Date field.
func ByCADate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCADate, opts...).ToFunc()
}

// ByApplicationWdlDate orders the results by the ApplicationWdlDate field.
func ByApplicationWdlDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicationWdlDate, opts...).ToFunc()
}

// ByNARemarks orders the results by the NA_Remarks field.
func ByNARemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNARemarks, opts...).ToFunc()
}

// ByNAUserName orders the results by the NA_UserName field.
func ByNAUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNAUserName, opts...).ToFunc()
}

// ByNADate orders the results by the NA_Date field.
func ByNADate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNADate, opts...).ToFunc()
}

// ByAppliactionRemarks orders the results by the AppliactionRemarks field.
func ByAppliactionRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppliactionRemarks, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the UpdatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the UpdatedBy field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCAPreviousRemarks orders the results by the CAPreviousRemarks field.
func ByCAPreviousRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCAPreviousRemarks, opts...).ToFunc()
}

// ByRoleUserCode orders the results by the RoleUserCode field.
func ByRoleUserCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoleUserCode, opts...).ToFunc()
}

// ByUsersIPRefCount orders the results by UsersIPRef count.
func ByUsersIPRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersIPRefStep(), opts...)
	}
}

// ByUsersIPRef orders the results by UsersIPRef terms.
func ByUsersIPRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersIPRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExamApplnIPRefCount orders the results by ExamAppln_IP_Ref count.
func ByExamApplnIPRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExamApplnIPRefStep(), opts...)
	}
}

// ByExamApplnIPRef orders the results by ExamAppln_IP_Ref terms.
func ByExamApplnIPRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamApplnIPRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOfficeIPRefCount orders the results by Office_IP_Ref count.
func ByOfficeIPRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOfficeIPRefStep(), opts...)
	}
}

// ByOfficeIPRef orders the results by Office_IP_Ref terms.
func ByOfficeIPRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOfficeIPRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRoleusersField orders the results by roleusers field.
func ByRoleusersField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoleusersStep(), sql.OrderByField(field, opts...))
	}
}

// ByCadrePrefRefCount orders the results by CadrePref_Ref count.
func ByCadrePrefRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCadrePrefRefStep(), opts...)
	}
}

// ByCadrePrefRef orders the results by CadrePref_Ref terms.
func ByCadrePrefRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCadrePrefRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCirclePrefRefCount orders the results by CirclePrefRef count.
func ByCirclePrefRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCirclePrefRefStep(), opts...)
	}
}

// ByCirclePrefRef orders the results by CirclePrefRef terms.
func ByCirclePrefRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCirclePrefRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIPApplicationsRefCount orders the results by IPApplicationsRef count.
func ByIPApplicationsRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIPApplicationsRefStep(), opts...)
	}
}

// ByIPApplicationsRef orders the results by IPApplicationsRef terms.
func ByIPApplicationsRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIPApplicationsRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUsersIPRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersIPRefInverseTable, UserMasterFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UsersIPRefTable, UsersIPRefColumn),
	)
}
func newExamApplnIPRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamApplnIPRefInverseTable, Exam_IPFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExamApplnIPRefTable, ExamApplnIPRefColumn),
	)
}
func newOfficeIPRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OfficeIPRefInverseTable, FacilityFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OfficeIPRefTable, OfficeIPRefColumn),
	)
}
func newRoleusersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoleusersInverseTable, RoleMasterFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RoleusersTable, RoleusersColumn),
	)
}
func newCadrePrefRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CadrePrefRefInverseTable, Cadre_Choice_IPFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CadrePrefRefTable, CadrePrefRefColumn),
	)
}
func newCirclePrefRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CirclePrefRefInverseTable, PlaceOfPreferenceIPFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CirclePrefRefTable, CirclePrefRefColumn),
	)
}
func newIPApplicationsRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IPApplicationsRefInverseTable, RecommendationsIPApplicationsFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IPApplicationsRefTable, IPApplicationsRefColumn),
	)
}
