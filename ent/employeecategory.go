// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/employeecategory"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EmployeeCategory is the model entity for the EmployeeCategory schema.
type EmployeeCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// Categrycode holds the value of the "Categrycode" field.
	Categrycode string `json:"Categrycode,omitempty"`
	// CategoryDescription holds the value of the "CategoryDescription" field.
	CategoryDescription string `json:"CategoryDescription,omitempty"`
	// MinimumMarks holds the value of the "MinimumMarks" field.
	MinimumMarks int32 `json:"MinimumMarks,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmployeeCategory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case employeecategory.FieldID, employeecategory.FieldMinimumMarks:
			values[i] = new(sql.NullInt64)
		case employeecategory.FieldCategrycode, employeecategory.FieldCategoryDescription:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmployeeCategory fields.
func (ec *EmployeeCategory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case employeecategory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ec.ID = int32(value.Int64)
		case employeecategory.FieldCategrycode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Categrycode", values[i])
			} else if value.Valid {
				ec.Categrycode = value.String
			}
		case employeecategory.FieldCategoryDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CategoryDescription", values[i])
			} else if value.Valid {
				ec.CategoryDescription = value.String
			}
		case employeecategory.FieldMinimumMarks:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field MinimumMarks", values[i])
			} else if value.Valid {
				ec.MinimumMarks = int32(value.Int64)
			}
		default:
			ec.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EmployeeCategory.
// This includes values selected through modifiers, order, etc.
func (ec *EmployeeCategory) Value(name string) (ent.Value, error) {
	return ec.selectValues.Get(name)
}

// Update returns a builder for updating this EmployeeCategory.
// Note that you need to call EmployeeCategory.Unwrap() before calling this method if this EmployeeCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (ec *EmployeeCategory) Update() *EmployeeCategoryUpdateOne {
	return NewEmployeeCategoryClient(ec.config).UpdateOne(ec)
}

// Unwrap unwraps the EmployeeCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ec *EmployeeCategory) Unwrap() *EmployeeCategory {
	_tx, ok := ec.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmployeeCategory is not a transactional entity")
	}
	ec.config.driver = _tx.drv
	return ec
}

// String implements the fmt.Stringer.
func (ec *EmployeeCategory) String() string {
	var builder strings.Builder
	builder.WriteString("EmployeeCategory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ec.ID))
	builder.WriteString("Categrycode=")
	builder.WriteString(ec.Categrycode)
	builder.WriteString(", ")
	builder.WriteString("CategoryDescription=")
	builder.WriteString(ec.CategoryDescription)
	builder.WriteString(", ")
	builder.WriteString("MinimumMarks=")
	builder.WriteString(fmt.Sprintf("%v", ec.MinimumMarks))
	builder.WriteByte(')')
	return builder.String()
}

// EmployeeCategories is a parsable slice of EmployeeCategory.
type EmployeeCategories []*EmployeeCategory
