// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/circlemaster"
	"recruit/ent/facility"
	"recruit/ent/predicate"
	"recruit/ent/regionmaster"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CircleMasterUpdate is the builder for updating CircleMaster entities.
type CircleMasterUpdate struct {
	config
	hooks    []Hook
	mutation *CircleMasterMutation
}

// Where appends a list predicates to the CircleMasterUpdate builder.
func (cmu *CircleMasterUpdate) Where(ps ...predicate.CircleMaster) *CircleMasterUpdate {
	cmu.mutation.Where(ps...)
	return cmu
}

// SetCircleCode sets the "CircleCode" field.
func (cmu *CircleMasterUpdate) SetCircleCode(i int32) *CircleMasterUpdate {
	cmu.mutation.ResetCircleCode()
	cmu.mutation.SetCircleCode(i)
	return cmu
}

// AddCircleCode adds i to the "CircleCode" field.
func (cmu *CircleMasterUpdate) AddCircleCode(i int32) *CircleMasterUpdate {
	cmu.mutation.AddCircleCode(i)
	return cmu
}

// SetCircleOfficeId sets the "CircleOfficeId" field.
func (cmu *CircleMasterUpdate) SetCircleOfficeId(s string) *CircleMasterUpdate {
	cmu.mutation.SetCircleOfficeId(s)
	return cmu
}

// SetCircleOfficeName sets the "CircleOfficeName" field.
func (cmu *CircleMasterUpdate) SetCircleOfficeName(s string) *CircleMasterUpdate {
	cmu.mutation.SetCircleOfficeName(s)
	return cmu
}

// SetOfficeType sets the "OfficeType" field.
func (cmu *CircleMasterUpdate) SetOfficeType(s string) *CircleMasterUpdate {
	cmu.mutation.SetOfficeType(s)
	return cmu
}

// SetEmailID sets the "EmailID" field.
func (cmu *CircleMasterUpdate) SetEmailID(s string) *CircleMasterUpdate {
	cmu.mutation.SetEmailID(s)
	return cmu
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (cmu *CircleMasterUpdate) SetNillableEmailID(s *string) *CircleMasterUpdate {
	if s != nil {
		cmu.SetEmailID(*s)
	}
	return cmu
}

// ClearEmailID clears the value of the "EmailID" field.
func (cmu *CircleMasterUpdate) ClearEmailID() *CircleMasterUpdate {
	cmu.mutation.ClearEmailID()
	return cmu
}

// SetMobileNumber sets the "MobileNumber" field.
func (cmu *CircleMasterUpdate) SetMobileNumber(i int32) *CircleMasterUpdate {
	cmu.mutation.ResetMobileNumber()
	cmu.mutation.SetMobileNumber(i)
	return cmu
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (cmu *CircleMasterUpdate) SetNillableMobileNumber(i *int32) *CircleMasterUpdate {
	if i != nil {
		cmu.SetMobileNumber(*i)
	}
	return cmu
}

// AddMobileNumber adds i to the "MobileNumber" field.
func (cmu *CircleMasterUpdate) AddMobileNumber(i int32) *CircleMasterUpdate {
	cmu.mutation.AddMobileNumber(i)
	return cmu
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (cmu *CircleMasterUpdate) ClearMobileNumber() *CircleMasterUpdate {
	cmu.mutation.ClearMobileNumber()
	return cmu
}

// AddRegionRefIDs adds the "region_ref" edge to the RegionMaster entity by IDs.
func (cmu *CircleMasterUpdate) AddRegionRefIDs(ids ...int32) *CircleMasterUpdate {
	cmu.mutation.AddRegionRefIDs(ids...)
	return cmu
}

// AddRegionRef adds the "region_ref" edges to the RegionMaster entity.
func (cmu *CircleMasterUpdate) AddRegionRef(r ...*RegionMaster) *CircleMasterUpdate {
	ids := make([]int32, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cmu.AddRegionRefIDs(ids...)
}

// AddCircleRefIDs adds the "circle_ref" edge to the Facility entity by IDs.
func (cmu *CircleMasterUpdate) AddCircleRefIDs(ids ...int32) *CircleMasterUpdate {
	cmu.mutation.AddCircleRefIDs(ids...)
	return cmu
}

// AddCircleRef adds the "circle_ref" edges to the Facility entity.
func (cmu *CircleMasterUpdate) AddCircleRef(f ...*Facility) *CircleMasterUpdate {
	ids := make([]int32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cmu.AddCircleRefIDs(ids...)
}

// Mutation returns the CircleMasterMutation object of the builder.
func (cmu *CircleMasterUpdate) Mutation() *CircleMasterMutation {
	return cmu.mutation
}

// ClearRegionRef clears all "region_ref" edges to the RegionMaster entity.
func (cmu *CircleMasterUpdate) ClearRegionRef() *CircleMasterUpdate {
	cmu.mutation.ClearRegionRef()
	return cmu
}

// RemoveRegionRefIDs removes the "region_ref" edge to RegionMaster entities by IDs.
func (cmu *CircleMasterUpdate) RemoveRegionRefIDs(ids ...int32) *CircleMasterUpdate {
	cmu.mutation.RemoveRegionRefIDs(ids...)
	return cmu
}

// RemoveRegionRef removes "region_ref" edges to RegionMaster entities.
func (cmu *CircleMasterUpdate) RemoveRegionRef(r ...*RegionMaster) *CircleMasterUpdate {
	ids := make([]int32, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cmu.RemoveRegionRefIDs(ids...)
}

// ClearCircleRef clears all "circle_ref" edges to the Facility entity.
func (cmu *CircleMasterUpdate) ClearCircleRef() *CircleMasterUpdate {
	cmu.mutation.ClearCircleRef()
	return cmu
}

// RemoveCircleRefIDs removes the "circle_ref" edge to Facility entities by IDs.
func (cmu *CircleMasterUpdate) RemoveCircleRefIDs(ids ...int32) *CircleMasterUpdate {
	cmu.mutation.RemoveCircleRefIDs(ids...)
	return cmu
}

// RemoveCircleRef removes "circle_ref" edges to Facility entities.
func (cmu *CircleMasterUpdate) RemoveCircleRef(f ...*Facility) *CircleMasterUpdate {
	ids := make([]int32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cmu.RemoveCircleRefIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cmu *CircleMasterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cmu.sqlSave, cmu.mutation, cmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmu *CircleMasterUpdate) SaveX(ctx context.Context) int {
	affected, err := cmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmu *CircleMasterUpdate) Exec(ctx context.Context) error {
	_, err := cmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmu *CircleMasterUpdate) ExecX(ctx context.Context) {
	if err := cmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cmu *CircleMasterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(circlemaster.Table, circlemaster.Columns, sqlgraph.NewFieldSpec(circlemaster.FieldID, field.TypeInt32))
	if ps := cmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmu.mutation.CircleCode(); ok {
		_spec.SetField(circlemaster.FieldCircleCode, field.TypeInt32, value)
	}
	if value, ok := cmu.mutation.AddedCircleCode(); ok {
		_spec.AddField(circlemaster.FieldCircleCode, field.TypeInt32, value)
	}
	if value, ok := cmu.mutation.CircleOfficeId(); ok {
		_spec.SetField(circlemaster.FieldCircleOfficeId, field.TypeString, value)
	}
	if value, ok := cmu.mutation.CircleOfficeName(); ok {
		_spec.SetField(circlemaster.FieldCircleOfficeName, field.TypeString, value)
	}
	if value, ok := cmu.mutation.OfficeType(); ok {
		_spec.SetField(circlemaster.FieldOfficeType, field.TypeString, value)
	}
	if value, ok := cmu.mutation.EmailID(); ok {
		_spec.SetField(circlemaster.FieldEmailID, field.TypeString, value)
	}
	if cmu.mutation.EmailIDCleared() {
		_spec.ClearField(circlemaster.FieldEmailID, field.TypeString)
	}
	if value, ok := cmu.mutation.MobileNumber(); ok {
		_spec.SetField(circlemaster.FieldMobileNumber, field.TypeInt32, value)
	}
	if value, ok := cmu.mutation.AddedMobileNumber(); ok {
		_spec.AddField(circlemaster.FieldMobileNumber, field.TypeInt32, value)
	}
	if cmu.mutation.MobileNumberCleared() {
		_spec.ClearField(circlemaster.FieldMobileNumber, field.TypeInt32)
	}
	if cmu.mutation.RegionRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlemaster.RegionRefTable,
			Columns: []string{circlemaster.RegionRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionmaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.RemovedRegionRefIDs(); len(nodes) > 0 && !cmu.mutation.RegionRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlemaster.RegionRefTable,
			Columns: []string{circlemaster.RegionRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionmaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.RegionRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlemaster.RegionRefTable,
			Columns: []string{circlemaster.RegionRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionmaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmu.mutation.CircleRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlemaster.CircleRefTable,
			Columns: []string{circlemaster.CircleRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.RemovedCircleRefIDs(); len(nodes) > 0 && !cmu.mutation.CircleRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlemaster.CircleRefTable,
			Columns: []string{circlemaster.CircleRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.CircleRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlemaster.CircleRefTable,
			Columns: []string{circlemaster.CircleRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{circlemaster.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cmu.mutation.done = true
	return n, nil
}

// CircleMasterUpdateOne is the builder for updating a single CircleMaster entity.
type CircleMasterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CircleMasterMutation
}

// SetCircleCode sets the "CircleCode" field.
func (cmuo *CircleMasterUpdateOne) SetCircleCode(i int32) *CircleMasterUpdateOne {
	cmuo.mutation.ResetCircleCode()
	cmuo.mutation.SetCircleCode(i)
	return cmuo
}

// AddCircleCode adds i to the "CircleCode" field.
func (cmuo *CircleMasterUpdateOne) AddCircleCode(i int32) *CircleMasterUpdateOne {
	cmuo.mutation.AddCircleCode(i)
	return cmuo
}

// SetCircleOfficeId sets the "CircleOfficeId" field.
func (cmuo *CircleMasterUpdateOne) SetCircleOfficeId(s string) *CircleMasterUpdateOne {
	cmuo.mutation.SetCircleOfficeId(s)
	return cmuo
}

// SetCircleOfficeName sets the "CircleOfficeName" field.
func (cmuo *CircleMasterUpdateOne) SetCircleOfficeName(s string) *CircleMasterUpdateOne {
	cmuo.mutation.SetCircleOfficeName(s)
	return cmuo
}

// SetOfficeType sets the "OfficeType" field.
func (cmuo *CircleMasterUpdateOne) SetOfficeType(s string) *CircleMasterUpdateOne {
	cmuo.mutation.SetOfficeType(s)
	return cmuo
}

// SetEmailID sets the "EmailID" field.
func (cmuo *CircleMasterUpdateOne) SetEmailID(s string) *CircleMasterUpdateOne {
	cmuo.mutation.SetEmailID(s)
	return cmuo
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (cmuo *CircleMasterUpdateOne) SetNillableEmailID(s *string) *CircleMasterUpdateOne {
	if s != nil {
		cmuo.SetEmailID(*s)
	}
	return cmuo
}

// ClearEmailID clears the value of the "EmailID" field.
func (cmuo *CircleMasterUpdateOne) ClearEmailID() *CircleMasterUpdateOne {
	cmuo.mutation.ClearEmailID()
	return cmuo
}

// SetMobileNumber sets the "MobileNumber" field.
func (cmuo *CircleMasterUpdateOne) SetMobileNumber(i int32) *CircleMasterUpdateOne {
	cmuo.mutation.ResetMobileNumber()
	cmuo.mutation.SetMobileNumber(i)
	return cmuo
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (cmuo *CircleMasterUpdateOne) SetNillableMobileNumber(i *int32) *CircleMasterUpdateOne {
	if i != nil {
		cmuo.SetMobileNumber(*i)
	}
	return cmuo
}

// AddMobileNumber adds i to the "MobileNumber" field.
func (cmuo *CircleMasterUpdateOne) AddMobileNumber(i int32) *CircleMasterUpdateOne {
	cmuo.mutation.AddMobileNumber(i)
	return cmuo
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (cmuo *CircleMasterUpdateOne) ClearMobileNumber() *CircleMasterUpdateOne {
	cmuo.mutation.ClearMobileNumber()
	return cmuo
}

// AddRegionRefIDs adds the "region_ref" edge to the RegionMaster entity by IDs.
func (cmuo *CircleMasterUpdateOne) AddRegionRefIDs(ids ...int32) *CircleMasterUpdateOne {
	cmuo.mutation.AddRegionRefIDs(ids...)
	return cmuo
}

// AddRegionRef adds the "region_ref" edges to the RegionMaster entity.
func (cmuo *CircleMasterUpdateOne) AddRegionRef(r ...*RegionMaster) *CircleMasterUpdateOne {
	ids := make([]int32, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cmuo.AddRegionRefIDs(ids...)
}

// AddCircleRefIDs adds the "circle_ref" edge to the Facility entity by IDs.
func (cmuo *CircleMasterUpdateOne) AddCircleRefIDs(ids ...int32) *CircleMasterUpdateOne {
	cmuo.mutation.AddCircleRefIDs(ids...)
	return cmuo
}

// AddCircleRef adds the "circle_ref" edges to the Facility entity.
func (cmuo *CircleMasterUpdateOne) AddCircleRef(f ...*Facility) *CircleMasterUpdateOne {
	ids := make([]int32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cmuo.AddCircleRefIDs(ids...)
}

// Mutation returns the CircleMasterMutation object of the builder.
func (cmuo *CircleMasterUpdateOne) Mutation() *CircleMasterMutation {
	return cmuo.mutation
}

// ClearRegionRef clears all "region_ref" edges to the RegionMaster entity.
func (cmuo *CircleMasterUpdateOne) ClearRegionRef() *CircleMasterUpdateOne {
	cmuo.mutation.ClearRegionRef()
	return cmuo
}

// RemoveRegionRefIDs removes the "region_ref" edge to RegionMaster entities by IDs.
func (cmuo *CircleMasterUpdateOne) RemoveRegionRefIDs(ids ...int32) *CircleMasterUpdateOne {
	cmuo.mutation.RemoveRegionRefIDs(ids...)
	return cmuo
}

// RemoveRegionRef removes "region_ref" edges to RegionMaster entities.
func (cmuo *CircleMasterUpdateOne) RemoveRegionRef(r ...*RegionMaster) *CircleMasterUpdateOne {
	ids := make([]int32, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cmuo.RemoveRegionRefIDs(ids...)
}

// ClearCircleRef clears all "circle_ref" edges to the Facility entity.
func (cmuo *CircleMasterUpdateOne) ClearCircleRef() *CircleMasterUpdateOne {
	cmuo.mutation.ClearCircleRef()
	return cmuo
}

// RemoveCircleRefIDs removes the "circle_ref" edge to Facility entities by IDs.
func (cmuo *CircleMasterUpdateOne) RemoveCircleRefIDs(ids ...int32) *CircleMasterUpdateOne {
	cmuo.mutation.RemoveCircleRefIDs(ids...)
	return cmuo
}

// RemoveCircleRef removes "circle_ref" edges to Facility entities.
func (cmuo *CircleMasterUpdateOne) RemoveCircleRef(f ...*Facility) *CircleMasterUpdateOne {
	ids := make([]int32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cmuo.RemoveCircleRefIDs(ids...)
}

// Where appends a list predicates to the CircleMasterUpdate builder.
func (cmuo *CircleMasterUpdateOne) Where(ps ...predicate.CircleMaster) *CircleMasterUpdateOne {
	cmuo.mutation.Where(ps...)
	return cmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cmuo *CircleMasterUpdateOne) Select(field string, fields ...string) *CircleMasterUpdateOne {
	cmuo.fields = append([]string{field}, fields...)
	return cmuo
}

// Save executes the query and returns the updated CircleMaster entity.
func (cmuo *CircleMasterUpdateOne) Save(ctx context.Context) (*CircleMaster, error) {
	return withHooks(ctx, cmuo.sqlSave, cmuo.mutation, cmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmuo *CircleMasterUpdateOne) SaveX(ctx context.Context) *CircleMaster {
	node, err := cmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmuo *CircleMasterUpdateOne) Exec(ctx context.Context) error {
	_, err := cmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmuo *CircleMasterUpdateOne) ExecX(ctx context.Context) {
	if err := cmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cmuo *CircleMasterUpdateOne) sqlSave(ctx context.Context) (_node *CircleMaster, err error) {
	_spec := sqlgraph.NewUpdateSpec(circlemaster.Table, circlemaster.Columns, sqlgraph.NewFieldSpec(circlemaster.FieldID, field.TypeInt32))
	id, ok := cmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CircleMaster.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, circlemaster.FieldID)
		for _, f := range fields {
			if !circlemaster.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != circlemaster.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmuo.mutation.CircleCode(); ok {
		_spec.SetField(circlemaster.FieldCircleCode, field.TypeInt32, value)
	}
	if value, ok := cmuo.mutation.AddedCircleCode(); ok {
		_spec.AddField(circlemaster.FieldCircleCode, field.TypeInt32, value)
	}
	if value, ok := cmuo.mutation.CircleOfficeId(); ok {
		_spec.SetField(circlemaster.FieldCircleOfficeId, field.TypeString, value)
	}
	if value, ok := cmuo.mutation.CircleOfficeName(); ok {
		_spec.SetField(circlemaster.FieldCircleOfficeName, field.TypeString, value)
	}
	if value, ok := cmuo.mutation.OfficeType(); ok {
		_spec.SetField(circlemaster.FieldOfficeType, field.TypeString, value)
	}
	if value, ok := cmuo.mutation.EmailID(); ok {
		_spec.SetField(circlemaster.FieldEmailID, field.TypeString, value)
	}
	if cmuo.mutation.EmailIDCleared() {
		_spec.ClearField(circlemaster.FieldEmailID, field.TypeString)
	}
	if value, ok := cmuo.mutation.MobileNumber(); ok {
		_spec.SetField(circlemaster.FieldMobileNumber, field.TypeInt32, value)
	}
	if value, ok := cmuo.mutation.AddedMobileNumber(); ok {
		_spec.AddField(circlemaster.FieldMobileNumber, field.TypeInt32, value)
	}
	if cmuo.mutation.MobileNumberCleared() {
		_spec.ClearField(circlemaster.FieldMobileNumber, field.TypeInt32)
	}
	if cmuo.mutation.RegionRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlemaster.RegionRefTable,
			Columns: []string{circlemaster.RegionRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionmaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.RemovedRegionRefIDs(); len(nodes) > 0 && !cmuo.mutation.RegionRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlemaster.RegionRefTable,
			Columns: []string{circlemaster.RegionRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionmaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.RegionRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlemaster.RegionRefTable,
			Columns: []string{circlemaster.RegionRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionmaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmuo.mutation.CircleRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlemaster.CircleRefTable,
			Columns: []string{circlemaster.CircleRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.RemovedCircleRefIDs(); len(nodes) > 0 && !cmuo.mutation.CircleRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlemaster.CircleRefTable,
			Columns: []string{circlemaster.CircleRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.CircleRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlemaster.CircleRefTable,
			Columns: []string{circlemaster.CircleRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CircleMaster{config: cmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{circlemaster.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cmuo.mutation.done = true
	return _node, nil
}
