// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/exam_applications_ps"
	"recruit/ent/exam_ps"
	"recruit/ent/facility"
	"recruit/ent/predicate"
	"recruit/ent/rolemaster"
	"recruit/ent/usermaster"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ExamApplicationsPSUpdate is the builder for updating Exam_Applications_PS entities.
type ExamApplicationsPSUpdate struct {
	config
	hooks    []Hook
	mutation *ExamApplicationsPSMutation
}

// Where appends a list predicates to the ExamApplicationsPSUpdate builder.
func (eapu *ExamApplicationsPSUpdate) Where(ps ...predicate.Exam_Applications_PS) *ExamApplicationsPSUpdate {
	eapu.mutation.Where(ps...)
	return eapu
}

// SetApplicationNumber sets the "ApplicationNumber" field.
func (eapu *ExamApplicationsPSUpdate) SetApplicationNumber(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetApplicationNumber(s)
	return eapu
}

// SetNillableApplicationNumber sets the "ApplicationNumber" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableApplicationNumber(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetApplicationNumber(*s)
	}
	return eapu
}

// ClearApplicationNumber clears the value of the "ApplicationNumber" field.
func (eapu *ExamApplicationsPSUpdate) ClearApplicationNumber() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearApplicationNumber()
	return eapu
}

// SetEmployeeID sets the "EmployeeID" field.
func (eapu *ExamApplicationsPSUpdate) SetEmployeeID(i int64) *ExamApplicationsPSUpdate {
	eapu.mutation.ResetEmployeeID()
	eapu.mutation.SetEmployeeID(i)
	return eapu
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableEmployeeID(i *int64) *ExamApplicationsPSUpdate {
	if i != nil {
		eapu.SetEmployeeID(*i)
	}
	return eapu
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (eapu *ExamApplicationsPSUpdate) AddEmployeeID(i int64) *ExamApplicationsPSUpdate {
	eapu.mutation.AddEmployeeID(i)
	return eapu
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (eapu *ExamApplicationsPSUpdate) ClearEmployeeID() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearEmployeeID()
	return eapu
}

// SetEmployeeName sets the "EmployeeName" field.
func (eapu *ExamApplicationsPSUpdate) SetEmployeeName(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetEmployeeName(s)
	return eapu
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableEmployeeName(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetEmployeeName(*s)
	}
	return eapu
}

// ClearEmployeeName clears the value of the "EmployeeName" field.
func (eapu *ExamApplicationsPSUpdate) ClearEmployeeName() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearEmployeeName()
	return eapu
}

// SetDOB sets the "DOB" field.
func (eapu *ExamApplicationsPSUpdate) SetDOB(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetDOB(s)
	return eapu
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableDOB(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetDOB(*s)
	}
	return eapu
}

// ClearDOB clears the value of the "DOB" field.
func (eapu *ExamApplicationsPSUpdate) ClearDOB() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearDOB()
	return eapu
}

// SetGender sets the "Gender" field.
func (eapu *ExamApplicationsPSUpdate) SetGender(eap exam_applications_ps.Gender) *ExamApplicationsPSUpdate {
	eapu.mutation.SetGender(eap)
	return eapu
}

// SetMobileNumber sets the "MobileNumber" field.
func (eapu *ExamApplicationsPSUpdate) SetMobileNumber(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetMobileNumber(s)
	return eapu
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableMobileNumber(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetMobileNumber(*s)
	}
	return eapu
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (eapu *ExamApplicationsPSUpdate) ClearMobileNumber() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearMobileNumber()
	return eapu
}

// SetEmailID sets the "EmailID" field.
func (eapu *ExamApplicationsPSUpdate) SetEmailID(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetEmailID(s)
	return eapu
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableEmailID(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetEmailID(*s)
	}
	return eapu
}

// ClearEmailID clears the value of the "EmailID" field.
func (eapu *ExamApplicationsPSUpdate) ClearEmailID() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearEmailID()
	return eapu
}

// SetEmployeeCategory sets the "EmployeeCategory" field.
func (eapu *ExamApplicationsPSUpdate) SetEmployeeCategory(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetEmployeeCategory(s)
	return eapu
}

// SetNillableEmployeeCategory sets the "EmployeeCategory" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableEmployeeCategory(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetEmployeeCategory(*s)
	}
	return eapu
}

// ClearEmployeeCategory clears the value of the "EmployeeCategory" field.
func (eapu *ExamApplicationsPSUpdate) ClearEmployeeCategory() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearEmployeeCategory()
	return eapu
}

// SetCadre sets the "Cadre" field.
func (eapu *ExamApplicationsPSUpdate) SetCadre(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetCadre(s)
	return eapu
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableCadre(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetCadre(*s)
	}
	return eapu
}

// ClearCadre clears the value of the "Cadre" field.
func (eapu *ExamApplicationsPSUpdate) ClearCadre() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearCadre()
	return eapu
}

// SetEmployeePost sets the "EmployeePost" field.
func (eapu *ExamApplicationsPSUpdate) SetEmployeePost(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetEmployeePost(s)
	return eapu
}

// SetNillableEmployeePost sets the "EmployeePost" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableEmployeePost(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetEmployeePost(*s)
	}
	return eapu
}

// ClearEmployeePost clears the value of the "EmployeePost" field.
func (eapu *ExamApplicationsPSUpdate) ClearEmployeePost() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearEmployeePost()
	return eapu
}

// SetFacilityID sets the "FacilityID" field.
func (eapu *ExamApplicationsPSUpdate) SetFacilityID(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetFacilityID(s)
	return eapu
}

// SetNillableFacilityID sets the "FacilityID" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableFacilityID(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetFacilityID(*s)
	}
	return eapu
}

// ClearFacilityID clears the value of the "FacilityID" field.
func (eapu *ExamApplicationsPSUpdate) ClearFacilityID() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearFacilityID()
	return eapu
}

// SetDCCS sets the "DCCS" field.
func (eapu *ExamApplicationsPSUpdate) SetDCCS(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetDCCS(s)
	return eapu
}

// SetNillableDCCS sets the "DCCS" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableDCCS(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetDCCS(*s)
	}
	return eapu
}

// ClearDCCS clears the value of the "DCCS" field.
func (eapu *ExamApplicationsPSUpdate) ClearDCCS() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearDCCS()
	return eapu
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (eapu *ExamApplicationsPSUpdate) SetDCInPresentCadre(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetDCInPresentCadre(s)
	return eapu
}

// SetNillableDCInPresentCadre sets the "DCInPresentCadre" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableDCInPresentCadre(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetDCInPresentCadre(*s)
	}
	return eapu
}

// ClearDCInPresentCadre clears the value of the "DCInPresentCadre" field.
func (eapu *ExamApplicationsPSUpdate) ClearDCInPresentCadre() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearDCInPresentCadre()
	return eapu
}

// SetDeputationOfficeId sets the "DeputationOfficeId" field.
func (eapu *ExamApplicationsPSUpdate) SetDeputationOfficeId(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetDeputationOfficeId(s)
	return eapu
}

// SetNillableDeputationOfficeId sets the "DeputationOfficeId" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableDeputationOfficeId(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetDeputationOfficeId(*s)
	}
	return eapu
}

// ClearDeputationOfficeId clears the value of the "DeputationOfficeId" field.
func (eapu *ExamApplicationsPSUpdate) ClearDeputationOfficeId() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearDeputationOfficeId()
	return eapu
}

// SetDisabilityType sets the "DisabilityType" field.
func (eapu *ExamApplicationsPSUpdate) SetDisabilityType(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetDisabilityType(s)
	return eapu
}

// SetNillableDisabilityType sets the "DisabilityType" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableDisabilityType(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetDisabilityType(*s)
	}
	return eapu
}

// ClearDisabilityType clears the value of the "DisabilityType" field.
func (eapu *ExamApplicationsPSUpdate) ClearDisabilityType() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearDisabilityType()
	return eapu
}

// SetDisabilityPercentage sets the "DisabilityPercentage" field.
func (eapu *ExamApplicationsPSUpdate) SetDisabilityPercentage(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetDisabilityPercentage(s)
	return eapu
}

// SetNillableDisabilityPercentage sets the "DisabilityPercentage" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableDisabilityPercentage(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetDisabilityPercentage(*s)
	}
	return eapu
}

// ClearDisabilityPercentage clears the value of the "DisabilityPercentage" field.
func (eapu *ExamApplicationsPSUpdate) ClearDisabilityPercentage() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearDisabilityPercentage()
	return eapu
}

// SetEducation sets the "Education" field.
func (eapu *ExamApplicationsPSUpdate) SetEducation(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetEducation(s)
	return eapu
}

// SetNillableEducation sets the "Education" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableEducation(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetEducation(*s)
	}
	return eapu
}

// ClearEducation clears the value of the "Education" field.
func (eapu *ExamApplicationsPSUpdate) ClearEducation() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearEducation()
	return eapu
}

// SetExamNameCode sets the "ExamNameCode" field.
func (eapu *ExamApplicationsPSUpdate) SetExamNameCode(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetExamNameCode(s)
	return eapu
}

// SetNillableExamNameCode sets the "ExamNameCode" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableExamNameCode(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetExamNameCode(*s)
	}
	return eapu
}

// ClearExamNameCode clears the value of the "ExamNameCode" field.
func (eapu *ExamApplicationsPSUpdate) ClearExamNameCode() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearExamNameCode()
	return eapu
}

// SetExamYear sets the "ExamYear" field.
func (eapu *ExamApplicationsPSUpdate) SetExamYear(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetExamYear(s)
	return eapu
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableExamYear(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetExamYear(*s)
	}
	return eapu
}

// ClearExamYear clears the value of the "ExamYear" field.
func (eapu *ExamApplicationsPSUpdate) ClearExamYear() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearExamYear()
	return eapu
}

// SetExamName sets the "ExamName" field.
func (eapu *ExamApplicationsPSUpdate) SetExamName(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetExamName(s)
	return eapu
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableExamName(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetExamName(*s)
	}
	return eapu
}

// ClearExamName clears the value of the "ExamName" field.
func (eapu *ExamApplicationsPSUpdate) ClearExamName() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearExamName()
	return eapu
}

// SetCentrePreference sets the "CentrePreference" field.
func (eapu *ExamApplicationsPSUpdate) SetCentrePreference(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetCentrePreference(s)
	return eapu
}

// SetNillableCentrePreference sets the "CentrePreference" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableCentrePreference(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetCentrePreference(*s)
	}
	return eapu
}

// ClearCentrePreference clears the value of the "CentrePreference" field.
func (eapu *ExamApplicationsPSUpdate) ClearCentrePreference() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearCentrePreference()
	return eapu
}

// SetSignature sets the "Signature" field.
func (eapu *ExamApplicationsPSUpdate) SetSignature(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetSignature(s)
	return eapu
}

// SetNillableSignature sets the "Signature" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableSignature(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetSignature(*s)
	}
	return eapu
}

// ClearSignature clears the value of the "Signature" field.
func (eapu *ExamApplicationsPSUpdate) ClearSignature() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearSignature()
	return eapu
}

// SetPhoto sets the "Photo" field.
func (eapu *ExamApplicationsPSUpdate) SetPhoto(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetPhoto(s)
	return eapu
}

// SetNillablePhoto sets the "Photo" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillablePhoto(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetPhoto(*s)
	}
	return eapu
}

// ClearPhoto clears the value of the "Photo" field.
func (eapu *ExamApplicationsPSUpdate) ClearPhoto() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearPhoto()
	return eapu
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (eapu *ExamApplicationsPSUpdate) SetApplicationStatus(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetApplicationStatus(s)
	return eapu
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableApplicationStatus(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetApplicationStatus(*s)
	}
	return eapu
}

// ClearApplicationStatus clears the value of the "ApplicationStatus" field.
func (eapu *ExamApplicationsPSUpdate) ClearApplicationStatus() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearApplicationStatus()
	return eapu
}

// SetApplnSubmittedDate sets the "ApplnSubmittedDate" field.
func (eapu *ExamApplicationsPSUpdate) SetApplnSubmittedDate(t time.Time) *ExamApplicationsPSUpdate {
	eapu.mutation.SetApplnSubmittedDate(t)
	return eapu
}

// SetNillableApplnSubmittedDate sets the "ApplnSubmittedDate" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableApplnSubmittedDate(t *time.Time) *ExamApplicationsPSUpdate {
	if t != nil {
		eapu.SetApplnSubmittedDate(*t)
	}
	return eapu
}

// ClearApplnSubmittedDate clears the value of the "ApplnSubmittedDate" field.
func (eapu *ExamApplicationsPSUpdate) ClearApplnSubmittedDate() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearApplnSubmittedDate()
	return eapu
}

// SetVARemarks sets the "VA_Remarks" field.
func (eapu *ExamApplicationsPSUpdate) SetVARemarks(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetVARemarks(s)
	return eapu
}

// SetNillableVARemarks sets the "VA_Remarks" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableVARemarks(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetVARemarks(*s)
	}
	return eapu
}

// ClearVARemarks clears the value of the "VA_Remarks" field.
func (eapu *ExamApplicationsPSUpdate) ClearVARemarks() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearVARemarks()
	return eapu
}

// SetVAUserName sets the "VA_UserName" field.
func (eapu *ExamApplicationsPSUpdate) SetVAUserName(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetVAUserName(s)
	return eapu
}

// SetNillableVAUserName sets the "VA_UserName" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableVAUserName(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetVAUserName(*s)
	}
	return eapu
}

// ClearVAUserName clears the value of the "VA_UserName" field.
func (eapu *ExamApplicationsPSUpdate) ClearVAUserName() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearVAUserName()
	return eapu
}

// SetVADate sets the "VA_Date" field.
func (eapu *ExamApplicationsPSUpdate) SetVADate(t time.Time) *ExamApplicationsPSUpdate {
	eapu.mutation.SetVADate(t)
	return eapu
}

// SetNillableVADate sets the "VA_Date" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableVADate(t *time.Time) *ExamApplicationsPSUpdate {
	if t != nil {
		eapu.SetVADate(*t)
	}
	return eapu
}

// ClearVADate clears the value of the "VA_Date" field.
func (eapu *ExamApplicationsPSUpdate) ClearVADate() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearVADate()
	return eapu
}

// SetCARemarks sets the "CA_Remarks" field.
func (eapu *ExamApplicationsPSUpdate) SetCARemarks(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetCARemarks(s)
	return eapu
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableCARemarks(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetCARemarks(*s)
	}
	return eapu
}

// ClearCARemarks clears the value of the "CA_Remarks" field.
func (eapu *ExamApplicationsPSUpdate) ClearCARemarks() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearCARemarks()
	return eapu
}

// SetCAUserName sets the "CA_UserName" field.
func (eapu *ExamApplicationsPSUpdate) SetCAUserName(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetCAUserName(s)
	return eapu
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableCAUserName(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetCAUserName(*s)
	}
	return eapu
}

// ClearCAUserName clears the value of the "CA_UserName" field.
func (eapu *ExamApplicationsPSUpdate) ClearCAUserName() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearCAUserName()
	return eapu
}

// SetCADate sets the "CA_Date" field.
func (eapu *ExamApplicationsPSUpdate) SetCADate(t time.Time) *ExamApplicationsPSUpdate {
	eapu.mutation.SetCADate(t)
	return eapu
}

// SetNillableCADate sets the "CA_Date" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableCADate(t *time.Time) *ExamApplicationsPSUpdate {
	if t != nil {
		eapu.SetCADate(*t)
	}
	return eapu
}

// ClearCADate clears the value of the "CA_Date" field.
func (eapu *ExamApplicationsPSUpdate) ClearCADate() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearCADate()
	return eapu
}

// SetApplicationWdlDate sets the "ApplicationWdlDate" field.
func (eapu *ExamApplicationsPSUpdate) SetApplicationWdlDate(t time.Time) *ExamApplicationsPSUpdate {
	eapu.mutation.SetApplicationWdlDate(t)
	return eapu
}

// SetNillableApplicationWdlDate sets the "ApplicationWdlDate" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableApplicationWdlDate(t *time.Time) *ExamApplicationsPSUpdate {
	if t != nil {
		eapu.SetApplicationWdlDate(*t)
	}
	return eapu
}

// ClearApplicationWdlDate clears the value of the "ApplicationWdlDate" field.
func (eapu *ExamApplicationsPSUpdate) ClearApplicationWdlDate() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearApplicationWdlDate()
	return eapu
}

// SetNARemarks sets the "NA_Remarks" field.
func (eapu *ExamApplicationsPSUpdate) SetNARemarks(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetNARemarks(s)
	return eapu
}

// SetNillableNARemarks sets the "NA_Remarks" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableNARemarks(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetNARemarks(*s)
	}
	return eapu
}

// ClearNARemarks clears the value of the "NA_Remarks" field.
func (eapu *ExamApplicationsPSUpdate) ClearNARemarks() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearNARemarks()
	return eapu
}

// SetNAUserName sets the "NA_UserName" field.
func (eapu *ExamApplicationsPSUpdate) SetNAUserName(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetNAUserName(s)
	return eapu
}

// SetNillableNAUserName sets the "NA_UserName" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableNAUserName(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetNAUserName(*s)
	}
	return eapu
}

// ClearNAUserName clears the value of the "NA_UserName" field.
func (eapu *ExamApplicationsPSUpdate) ClearNAUserName() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearNAUserName()
	return eapu
}

// SetNADate sets the "NA_Date" field.
func (eapu *ExamApplicationsPSUpdate) SetNADate(t time.Time) *ExamApplicationsPSUpdate {
	eapu.mutation.SetNADate(t)
	return eapu
}

// SetNillableNADate sets the "NA_Date" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableNADate(t *time.Time) *ExamApplicationsPSUpdate {
	if t != nil {
		eapu.SetNADate(*t)
	}
	return eapu
}

// ClearNADate clears the value of the "NA_Date" field.
func (eapu *ExamApplicationsPSUpdate) ClearNADate() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearNADate()
	return eapu
}

// SetAppliactionRemarks sets the "AppliactionRemarks" field.
func (eapu *ExamApplicationsPSUpdate) SetAppliactionRemarks(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetAppliactionRemarks(s)
	return eapu
}

// SetNillableAppliactionRemarks sets the "AppliactionRemarks" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableAppliactionRemarks(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetAppliactionRemarks(*s)
	}
	return eapu
}

// ClearAppliactionRemarks clears the value of the "AppliactionRemarks" field.
func (eapu *ExamApplicationsPSUpdate) ClearAppliactionRemarks() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearAppliactionRemarks()
	return eapu
}

// SetCadrePreferences sets the "CadrePreferences" field.
func (eapu *ExamApplicationsPSUpdate) SetCadrePreferences(i []interface{}) *ExamApplicationsPSUpdate {
	eapu.mutation.SetCadrePreferences(i)
	return eapu
}

// AppendCadrePreferences appends i to the "CadrePreferences" field.
func (eapu *ExamApplicationsPSUpdate) AppendCadrePreferences(i []interface{}) *ExamApplicationsPSUpdate {
	eapu.mutation.AppendCadrePreferences(i)
	return eapu
}

// ClearCadrePreferences clears the value of the "CadrePreferences" field.
func (eapu *ExamApplicationsPSUpdate) ClearCadrePreferences() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearCadrePreferences()
	return eapu
}

// SetDivisionPreferences sets the "DivisionPreferences" field.
func (eapu *ExamApplicationsPSUpdate) SetDivisionPreferences(i []interface{}) *ExamApplicationsPSUpdate {
	eapu.mutation.SetDivisionPreferences(i)
	return eapu
}

// AppendDivisionPreferences appends i to the "DivisionPreferences" field.
func (eapu *ExamApplicationsPSUpdate) AppendDivisionPreferences(i []interface{}) *ExamApplicationsPSUpdate {
	eapu.mutation.AppendDivisionPreferences(i)
	return eapu
}

// ClearDivisionPreferences clears the value of the "DivisionPreferences" field.
func (eapu *ExamApplicationsPSUpdate) ClearDivisionPreferences() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearDivisionPreferences()
	return eapu
}

// SetCirclePreferences sets the "CirclePreferences" field.
func (eapu *ExamApplicationsPSUpdate) SetCirclePreferences(i []interface{}) *ExamApplicationsPSUpdate {
	eapu.mutation.SetCirclePreferences(i)
	return eapu
}

// AppendCirclePreferences appends i to the "CirclePreferences" field.
func (eapu *ExamApplicationsPSUpdate) AppendCirclePreferences(i []interface{}) *ExamApplicationsPSUpdate {
	eapu.mutation.AppendCirclePreferences(i)
	return eapu
}

// ClearCirclePreferences clears the value of the "CirclePreferences" field.
func (eapu *ExamApplicationsPSUpdate) ClearCirclePreferences() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearCirclePreferences()
	return eapu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (eapu *ExamApplicationsPSUpdate) SetUpdatedAt(t time.Time) *ExamApplicationsPSUpdate {
	eapu.mutation.SetUpdatedAt(t)
	return eapu
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableUpdatedAt(t *time.Time) *ExamApplicationsPSUpdate {
	if t != nil {
		eapu.SetUpdatedAt(*t)
	}
	return eapu
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (eapu *ExamApplicationsPSUpdate) ClearUpdatedAt() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearUpdatedAt()
	return eapu
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (eapu *ExamApplicationsPSUpdate) SetUpdatedBy(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetUpdatedBy(s)
	return eapu
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableUpdatedBy(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetUpdatedBy(*s)
	}
	return eapu
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (eapu *ExamApplicationsPSUpdate) ClearUpdatedBy() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearUpdatedBy()
	return eapu
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (eapu *ExamApplicationsPSUpdate) SetRoleUserCode(i int32) *ExamApplicationsPSUpdate {
	eapu.mutation.SetRoleUserCode(i)
	return eapu
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableRoleUserCode(i *int32) *ExamApplicationsPSUpdate {
	if i != nil {
		eapu.SetRoleUserCode(*i)
	}
	return eapu
}

// ClearRoleUserCode clears the value of the "RoleUserCode" field.
func (eapu *ExamApplicationsPSUpdate) ClearRoleUserCode() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearRoleUserCode()
	return eapu
}

// AddUsersPSRefIDs adds the "UsersPSRef" edge to the UserMaster entity by IDs.
func (eapu *ExamApplicationsPSUpdate) AddUsersPSRefIDs(ids ...int64) *ExamApplicationsPSUpdate {
	eapu.mutation.AddUsersPSRefIDs(ids...)
	return eapu
}

// AddUsersPSRef adds the "UsersPSRef" edges to the UserMaster entity.
func (eapu *ExamApplicationsPSUpdate) AddUsersPSRef(u ...*UserMaster) *ExamApplicationsPSUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eapu.AddUsersPSRefIDs(ids...)
}

// AddExamApplnPSRefIDs adds the "ExamAppln_PS_Ref" edge to the Exam_PS entity by IDs.
func (eapu *ExamApplicationsPSUpdate) AddExamApplnPSRefIDs(ids ...int32) *ExamApplicationsPSUpdate {
	eapu.mutation.AddExamApplnPSRefIDs(ids...)
	return eapu
}

// AddExamApplnPSRef adds the "ExamAppln_PS_Ref" edges to the Exam_PS entity.
func (eapu *ExamApplicationsPSUpdate) AddExamApplnPSRef(e ...*Exam_PS) *ExamApplicationsPSUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eapu.AddExamApplnPSRefIDs(ids...)
}

// AddOfficePSRefIDs adds the "Office_PS_Ref" edge to the Facility entity by IDs.
func (eapu *ExamApplicationsPSUpdate) AddOfficePSRefIDs(ids ...int32) *ExamApplicationsPSUpdate {
	eapu.mutation.AddOfficePSRefIDs(ids...)
	return eapu
}

// AddOfficePSRef adds the "Office_PS_Ref" edges to the Facility entity.
func (eapu *ExamApplicationsPSUpdate) AddOfficePSRef(f ...*Facility) *ExamApplicationsPSUpdate {
	ids := make([]int32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eapu.AddOfficePSRefIDs(ids...)
}

// SetRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID.
func (eapu *ExamApplicationsPSUpdate) SetRoleusersID(id int32) *ExamApplicationsPSUpdate {
	eapu.mutation.SetRoleusersID(id)
	return eapu
}

// SetNillableRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableRoleusersID(id *int32) *ExamApplicationsPSUpdate {
	if id != nil {
		eapu = eapu.SetRoleusersID(*id)
	}
	return eapu
}

// SetRoleusers sets the "roleusers" edge to the RoleMaster entity.
func (eapu *ExamApplicationsPSUpdate) SetRoleusers(r *RoleMaster) *ExamApplicationsPSUpdate {
	return eapu.SetRoleusersID(r.ID)
}

// Mutation returns the ExamApplicationsPSMutation object of the builder.
func (eapu *ExamApplicationsPSUpdate) Mutation() *ExamApplicationsPSMutation {
	return eapu.mutation
}

// ClearUsersPSRef clears all "UsersPSRef" edges to the UserMaster entity.
func (eapu *ExamApplicationsPSUpdate) ClearUsersPSRef() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearUsersPSRef()
	return eapu
}

// RemoveUsersPSRefIDs removes the "UsersPSRef" edge to UserMaster entities by IDs.
func (eapu *ExamApplicationsPSUpdate) RemoveUsersPSRefIDs(ids ...int64) *ExamApplicationsPSUpdate {
	eapu.mutation.RemoveUsersPSRefIDs(ids...)
	return eapu
}

// RemoveUsersPSRef removes "UsersPSRef" edges to UserMaster entities.
func (eapu *ExamApplicationsPSUpdate) RemoveUsersPSRef(u ...*UserMaster) *ExamApplicationsPSUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eapu.RemoveUsersPSRefIDs(ids...)
}

// ClearExamApplnPSRef clears all "ExamAppln_PS_Ref" edges to the Exam_PS entity.
func (eapu *ExamApplicationsPSUpdate) ClearExamApplnPSRef() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearExamApplnPSRef()
	return eapu
}

// RemoveExamApplnPSRefIDs removes the "ExamAppln_PS_Ref" edge to Exam_PS entities by IDs.
func (eapu *ExamApplicationsPSUpdate) RemoveExamApplnPSRefIDs(ids ...int32) *ExamApplicationsPSUpdate {
	eapu.mutation.RemoveExamApplnPSRefIDs(ids...)
	return eapu
}

// RemoveExamApplnPSRef removes "ExamAppln_PS_Ref" edges to Exam_PS entities.
func (eapu *ExamApplicationsPSUpdate) RemoveExamApplnPSRef(e ...*Exam_PS) *ExamApplicationsPSUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eapu.RemoveExamApplnPSRefIDs(ids...)
}

// ClearOfficePSRef clears all "Office_PS_Ref" edges to the Facility entity.
func (eapu *ExamApplicationsPSUpdate) ClearOfficePSRef() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearOfficePSRef()
	return eapu
}

// RemoveOfficePSRefIDs removes the "Office_PS_Ref" edge to Facility entities by IDs.
func (eapu *ExamApplicationsPSUpdate) RemoveOfficePSRefIDs(ids ...int32) *ExamApplicationsPSUpdate {
	eapu.mutation.RemoveOfficePSRefIDs(ids...)
	return eapu
}

// RemoveOfficePSRef removes "Office_PS_Ref" edges to Facility entities.
func (eapu *ExamApplicationsPSUpdate) RemoveOfficePSRef(f ...*Facility) *ExamApplicationsPSUpdate {
	ids := make([]int32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eapu.RemoveOfficePSRefIDs(ids...)
}

// ClearRoleusers clears the "roleusers" edge to the RoleMaster entity.
func (eapu *ExamApplicationsPSUpdate) ClearRoleusers() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearRoleusers()
	return eapu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eapu *ExamApplicationsPSUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eapu.sqlSave, eapu.mutation, eapu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eapu *ExamApplicationsPSUpdate) SaveX(ctx context.Context) int {
	affected, err := eapu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eapu *ExamApplicationsPSUpdate) Exec(ctx context.Context) error {
	_, err := eapu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eapu *ExamApplicationsPSUpdate) ExecX(ctx context.Context) {
	if err := eapu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eapu *ExamApplicationsPSUpdate) check() error {
	if v, ok := eapu.mutation.Gender(); ok {
		if err := exam_applications_ps.GenderValidator(v); err != nil {
			return &ValidationError{Name: "Gender", err: fmt.Errorf(`ent: validator failed for field "Exam_Applications_PS.Gender": %w`, err)}
		}
	}
	return nil
}

func (eapu *ExamApplicationsPSUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eapu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(exam_applications_ps.Table, exam_applications_ps.Columns, sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64))
	if ps := eapu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eapu.mutation.ApplicationNumber(); ok {
		_spec.SetField(exam_applications_ps.FieldApplicationNumber, field.TypeString, value)
	}
	if eapu.mutation.ApplicationNumberCleared() {
		_spec.ClearField(exam_applications_ps.FieldApplicationNumber, field.TypeString)
	}
	if value, ok := eapu.mutation.EmployeeID(); ok {
		_spec.SetField(exam_applications_ps.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := eapu.mutation.AddedEmployeeID(); ok {
		_spec.AddField(exam_applications_ps.FieldEmployeeID, field.TypeInt64, value)
	}
	if eapu.mutation.EmployeeIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := eapu.mutation.EmployeeName(); ok {
		_spec.SetField(exam_applications_ps.FieldEmployeeName, field.TypeString, value)
	}
	if eapu.mutation.EmployeeNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldEmployeeName, field.TypeString)
	}
	if value, ok := eapu.mutation.DOB(); ok {
		_spec.SetField(exam_applications_ps.FieldDOB, field.TypeString, value)
	}
	if eapu.mutation.DOBCleared() {
		_spec.ClearField(exam_applications_ps.FieldDOB, field.TypeString)
	}
	if value, ok := eapu.mutation.Gender(); ok {
		_spec.SetField(exam_applications_ps.FieldGender, field.TypeEnum, value)
	}
	if value, ok := eapu.mutation.MobileNumber(); ok {
		_spec.SetField(exam_applications_ps.FieldMobileNumber, field.TypeString, value)
	}
	if eapu.mutation.MobileNumberCleared() {
		_spec.ClearField(exam_applications_ps.FieldMobileNumber, field.TypeString)
	}
	if value, ok := eapu.mutation.EmailID(); ok {
		_spec.SetField(exam_applications_ps.FieldEmailID, field.TypeString, value)
	}
	if eapu.mutation.EmailIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldEmailID, field.TypeString)
	}
	if value, ok := eapu.mutation.EmployeeCategory(); ok {
		_spec.SetField(exam_applications_ps.FieldEmployeeCategory, field.TypeString, value)
	}
	if eapu.mutation.EmployeeCategoryCleared() {
		_spec.ClearField(exam_applications_ps.FieldEmployeeCategory, field.TypeString)
	}
	if value, ok := eapu.mutation.Cadre(); ok {
		_spec.SetField(exam_applications_ps.FieldCadre, field.TypeString, value)
	}
	if eapu.mutation.CadreCleared() {
		_spec.ClearField(exam_applications_ps.FieldCadre, field.TypeString)
	}
	if value, ok := eapu.mutation.EmployeePost(); ok {
		_spec.SetField(exam_applications_ps.FieldEmployeePost, field.TypeString, value)
	}
	if eapu.mutation.EmployeePostCleared() {
		_spec.ClearField(exam_applications_ps.FieldEmployeePost, field.TypeString)
	}
	if value, ok := eapu.mutation.FacilityID(); ok {
		_spec.SetField(exam_applications_ps.FieldFacilityID, field.TypeString, value)
	}
	if eapu.mutation.FacilityIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldFacilityID, field.TypeString)
	}
	if value, ok := eapu.mutation.DCCS(); ok {
		_spec.SetField(exam_applications_ps.FieldDCCS, field.TypeString, value)
	}
	if eapu.mutation.DCCSCleared() {
		_spec.ClearField(exam_applications_ps.FieldDCCS, field.TypeString)
	}
	if value, ok := eapu.mutation.DCInPresentCadre(); ok {
		_spec.SetField(exam_applications_ps.FieldDCInPresentCadre, field.TypeString, value)
	}
	if eapu.mutation.DCInPresentCadreCleared() {
		_spec.ClearField(exam_applications_ps.FieldDCInPresentCadre, field.TypeString)
	}
	if value, ok := eapu.mutation.DeputationOfficeId(); ok {
		_spec.SetField(exam_applications_ps.FieldDeputationOfficeId, field.TypeString, value)
	}
	if eapu.mutation.DeputationOfficeIdCleared() {
		_spec.ClearField(exam_applications_ps.FieldDeputationOfficeId, field.TypeString)
	}
	if value, ok := eapu.mutation.DisabilityType(); ok {
		_spec.SetField(exam_applications_ps.FieldDisabilityType, field.TypeString, value)
	}
	if eapu.mutation.DisabilityTypeCleared() {
		_spec.ClearField(exam_applications_ps.FieldDisabilityType, field.TypeString)
	}
	if value, ok := eapu.mutation.DisabilityPercentage(); ok {
		_spec.SetField(exam_applications_ps.FieldDisabilityPercentage, field.TypeString, value)
	}
	if eapu.mutation.DisabilityPercentageCleared() {
		_spec.ClearField(exam_applications_ps.FieldDisabilityPercentage, field.TypeString)
	}
	if value, ok := eapu.mutation.Education(); ok {
		_spec.SetField(exam_applications_ps.FieldEducation, field.TypeString, value)
	}
	if eapu.mutation.EducationCleared() {
		_spec.ClearField(exam_applications_ps.FieldEducation, field.TypeString)
	}
	if value, ok := eapu.mutation.ExamNameCode(); ok {
		_spec.SetField(exam_applications_ps.FieldExamNameCode, field.TypeString, value)
	}
	if eapu.mutation.ExamNameCodeCleared() {
		_spec.ClearField(exam_applications_ps.FieldExamNameCode, field.TypeString)
	}
	if value, ok := eapu.mutation.ExamYear(); ok {
		_spec.SetField(exam_applications_ps.FieldExamYear, field.TypeString, value)
	}
	if eapu.mutation.ExamYearCleared() {
		_spec.ClearField(exam_applications_ps.FieldExamYear, field.TypeString)
	}
	if value, ok := eapu.mutation.ExamName(); ok {
		_spec.SetField(exam_applications_ps.FieldExamName, field.TypeString, value)
	}
	if eapu.mutation.ExamNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldExamName, field.TypeString)
	}
	if value, ok := eapu.mutation.CentrePreference(); ok {
		_spec.SetField(exam_applications_ps.FieldCentrePreference, field.TypeString, value)
	}
	if eapu.mutation.CentrePreferenceCleared() {
		_spec.ClearField(exam_applications_ps.FieldCentrePreference, field.TypeString)
	}
	if value, ok := eapu.mutation.Signature(); ok {
		_spec.SetField(exam_applications_ps.FieldSignature, field.TypeString, value)
	}
	if eapu.mutation.SignatureCleared() {
		_spec.ClearField(exam_applications_ps.FieldSignature, field.TypeString)
	}
	if value, ok := eapu.mutation.Photo(); ok {
		_spec.SetField(exam_applications_ps.FieldPhoto, field.TypeString, value)
	}
	if eapu.mutation.PhotoCleared() {
		_spec.ClearField(exam_applications_ps.FieldPhoto, field.TypeString)
	}
	if value, ok := eapu.mutation.ApplicationStatus(); ok {
		_spec.SetField(exam_applications_ps.FieldApplicationStatus, field.TypeString, value)
	}
	if eapu.mutation.ApplicationStatusCleared() {
		_spec.ClearField(exam_applications_ps.FieldApplicationStatus, field.TypeString)
	}
	if value, ok := eapu.mutation.ApplnSubmittedDate(); ok {
		_spec.SetField(exam_applications_ps.FieldApplnSubmittedDate, field.TypeTime, value)
	}
	if eapu.mutation.ApplnSubmittedDateCleared() {
		_spec.ClearField(exam_applications_ps.FieldApplnSubmittedDate, field.TypeTime)
	}
	if value, ok := eapu.mutation.VARemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldVARemarks, field.TypeString, value)
	}
	if eapu.mutation.VARemarksCleared() {
		_spec.ClearField(exam_applications_ps.FieldVARemarks, field.TypeString)
	}
	if value, ok := eapu.mutation.VAUserName(); ok {
		_spec.SetField(exam_applications_ps.FieldVAUserName, field.TypeString, value)
	}
	if eapu.mutation.VAUserNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldVAUserName, field.TypeString)
	}
	if value, ok := eapu.mutation.VADate(); ok {
		_spec.SetField(exam_applications_ps.FieldVADate, field.TypeTime, value)
	}
	if eapu.mutation.VADateCleared() {
		_spec.ClearField(exam_applications_ps.FieldVADate, field.TypeTime)
	}
	if value, ok := eapu.mutation.CARemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldCARemarks, field.TypeString, value)
	}
	if eapu.mutation.CARemarksCleared() {
		_spec.ClearField(exam_applications_ps.FieldCARemarks, field.TypeString)
	}
	if value, ok := eapu.mutation.CAUserName(); ok {
		_spec.SetField(exam_applications_ps.FieldCAUserName, field.TypeString, value)
	}
	if eapu.mutation.CAUserNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldCAUserName, field.TypeString)
	}
	if value, ok := eapu.mutation.CADate(); ok {
		_spec.SetField(exam_applications_ps.FieldCADate, field.TypeTime, value)
	}
	if eapu.mutation.CADateCleared() {
		_spec.ClearField(exam_applications_ps.FieldCADate, field.TypeTime)
	}
	if value, ok := eapu.mutation.ApplicationWdlDate(); ok {
		_spec.SetField(exam_applications_ps.FieldApplicationWdlDate, field.TypeTime, value)
	}
	if eapu.mutation.ApplicationWdlDateCleared() {
		_spec.ClearField(exam_applications_ps.FieldApplicationWdlDate, field.TypeTime)
	}
	if value, ok := eapu.mutation.NARemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldNARemarks, field.TypeString, value)
	}
	if eapu.mutation.NARemarksCleared() {
		_spec.ClearField(exam_applications_ps.FieldNARemarks, field.TypeString)
	}
	if value, ok := eapu.mutation.NAUserName(); ok {
		_spec.SetField(exam_applications_ps.FieldNAUserName, field.TypeString, value)
	}
	if eapu.mutation.NAUserNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldNAUserName, field.TypeString)
	}
	if value, ok := eapu.mutation.NADate(); ok {
		_spec.SetField(exam_applications_ps.FieldNADate, field.TypeTime, value)
	}
	if eapu.mutation.NADateCleared() {
		_spec.ClearField(exam_applications_ps.FieldNADate, field.TypeTime)
	}
	if value, ok := eapu.mutation.AppliactionRemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldAppliactionRemarks, field.TypeString, value)
	}
	if eapu.mutation.AppliactionRemarksCleared() {
		_spec.ClearField(exam_applications_ps.FieldAppliactionRemarks, field.TypeString)
	}
	if value, ok := eapu.mutation.CadrePreferences(); ok {
		_spec.SetField(exam_applications_ps.FieldCadrePreferences, field.TypeJSON, value)
	}
	if value, ok := eapu.mutation.AppendedCadrePreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_ps.FieldCadrePreferences, value)
		})
	}
	if eapu.mutation.CadrePreferencesCleared() {
		_spec.ClearField(exam_applications_ps.FieldCadrePreferences, field.TypeJSON)
	}
	if value, ok := eapu.mutation.DivisionPreferences(); ok {
		_spec.SetField(exam_applications_ps.FieldDivisionPreferences, field.TypeJSON, value)
	}
	if value, ok := eapu.mutation.AppendedDivisionPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_ps.FieldDivisionPreferences, value)
		})
	}
	if eapu.mutation.DivisionPreferencesCleared() {
		_spec.ClearField(exam_applications_ps.FieldDivisionPreferences, field.TypeJSON)
	}
	if value, ok := eapu.mutation.CirclePreferences(); ok {
		_spec.SetField(exam_applications_ps.FieldCirclePreferences, field.TypeJSON, value)
	}
	if value, ok := eapu.mutation.AppendedCirclePreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_ps.FieldCirclePreferences, value)
		})
	}
	if eapu.mutation.CirclePreferencesCleared() {
		_spec.ClearField(exam_applications_ps.FieldCirclePreferences, field.TypeJSON)
	}
	if value, ok := eapu.mutation.UpdatedAt(); ok {
		_spec.SetField(exam_applications_ps.FieldUpdatedAt, field.TypeTime, value)
	}
	if eapu.mutation.UpdatedAtCleared() {
		_spec.ClearField(exam_applications_ps.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := eapu.mutation.UpdatedBy(); ok {
		_spec.SetField(exam_applications_ps.FieldUpdatedBy, field.TypeString, value)
	}
	if eapu.mutation.UpdatedByCleared() {
		_spec.ClearField(exam_applications_ps.FieldUpdatedBy, field.TypeString)
	}
	if eapu.mutation.UsersPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.UsersPSRefTable,
			Columns: []string{exam_applications_ps.UsersPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.RemovedUsersPSRefIDs(); len(nodes) > 0 && !eapu.mutation.UsersPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.UsersPSRefTable,
			Columns: []string{exam_applications_ps.UsersPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.UsersPSRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.UsersPSRefTable,
			Columns: []string{exam_applications_ps.UsersPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapu.mutation.ExamApplnPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.ExamApplnPSRefTable,
			Columns: []string{exam_applications_ps.ExamApplnPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_ps.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.RemovedExamApplnPSRefIDs(); len(nodes) > 0 && !eapu.mutation.ExamApplnPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.ExamApplnPSRefTable,
			Columns: []string{exam_applications_ps.ExamApplnPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_ps.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.ExamApplnPSRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.ExamApplnPSRefTable,
			Columns: []string{exam_applications_ps.ExamApplnPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_ps.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapu.mutation.OfficePSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.OfficePSRefTable,
			Columns: []string{exam_applications_ps.OfficePSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.RemovedOfficePSRefIDs(); len(nodes) > 0 && !eapu.mutation.OfficePSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.OfficePSRefTable,
			Columns: []string{exam_applications_ps.OfficePSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.OfficePSRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.OfficePSRefTable,
			Columns: []string{exam_applications_ps.OfficePSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapu.mutation.RoleusersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.RoleusersTable,
			Columns: []string{exam_applications_ps.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.RoleusersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.RoleusersTable,
			Columns: []string{exam_applications_ps.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eapu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exam_applications_ps.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eapu.mutation.done = true
	return n, nil
}

// ExamApplicationsPSUpdateOne is the builder for updating a single Exam_Applications_PS entity.
type ExamApplicationsPSUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExamApplicationsPSMutation
}

// SetApplicationNumber sets the "ApplicationNumber" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetApplicationNumber(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetApplicationNumber(s)
	return eapuo
}

// SetNillableApplicationNumber sets the "ApplicationNumber" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableApplicationNumber(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetApplicationNumber(*s)
	}
	return eapuo
}

// ClearApplicationNumber clears the value of the "ApplicationNumber" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearApplicationNumber() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearApplicationNumber()
	return eapuo
}

// SetEmployeeID sets the "EmployeeID" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetEmployeeID(i int64) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ResetEmployeeID()
	eapuo.mutation.SetEmployeeID(i)
	return eapuo
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableEmployeeID(i *int64) *ExamApplicationsPSUpdateOne {
	if i != nil {
		eapuo.SetEmployeeID(*i)
	}
	return eapuo
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (eapuo *ExamApplicationsPSUpdateOne) AddEmployeeID(i int64) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.AddEmployeeID(i)
	return eapuo
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearEmployeeID() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearEmployeeID()
	return eapuo
}

// SetEmployeeName sets the "EmployeeName" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetEmployeeName(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetEmployeeName(s)
	return eapuo
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableEmployeeName(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetEmployeeName(*s)
	}
	return eapuo
}

// ClearEmployeeName clears the value of the "EmployeeName" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearEmployeeName() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearEmployeeName()
	return eapuo
}

// SetDOB sets the "DOB" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetDOB(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetDOB(s)
	return eapuo
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableDOB(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetDOB(*s)
	}
	return eapuo
}

// ClearDOB clears the value of the "DOB" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearDOB() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearDOB()
	return eapuo
}

// SetGender sets the "Gender" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetGender(eap exam_applications_ps.Gender) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetGender(eap)
	return eapuo
}

// SetMobileNumber sets the "MobileNumber" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetMobileNumber(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetMobileNumber(s)
	return eapuo
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableMobileNumber(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetMobileNumber(*s)
	}
	return eapuo
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearMobileNumber() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearMobileNumber()
	return eapuo
}

// SetEmailID sets the "EmailID" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetEmailID(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetEmailID(s)
	return eapuo
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableEmailID(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetEmailID(*s)
	}
	return eapuo
}

// ClearEmailID clears the value of the "EmailID" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearEmailID() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearEmailID()
	return eapuo
}

// SetEmployeeCategory sets the "EmployeeCategory" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetEmployeeCategory(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetEmployeeCategory(s)
	return eapuo
}

// SetNillableEmployeeCategory sets the "EmployeeCategory" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableEmployeeCategory(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetEmployeeCategory(*s)
	}
	return eapuo
}

// ClearEmployeeCategory clears the value of the "EmployeeCategory" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearEmployeeCategory() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearEmployeeCategory()
	return eapuo
}

// SetCadre sets the "Cadre" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetCadre(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetCadre(s)
	return eapuo
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableCadre(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetCadre(*s)
	}
	return eapuo
}

// ClearCadre clears the value of the "Cadre" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearCadre() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearCadre()
	return eapuo
}

// SetEmployeePost sets the "EmployeePost" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetEmployeePost(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetEmployeePost(s)
	return eapuo
}

// SetNillableEmployeePost sets the "EmployeePost" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableEmployeePost(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetEmployeePost(*s)
	}
	return eapuo
}

// ClearEmployeePost clears the value of the "EmployeePost" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearEmployeePost() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearEmployeePost()
	return eapuo
}

// SetFacilityID sets the "FacilityID" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetFacilityID(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetFacilityID(s)
	return eapuo
}

// SetNillableFacilityID sets the "FacilityID" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableFacilityID(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetFacilityID(*s)
	}
	return eapuo
}

// ClearFacilityID clears the value of the "FacilityID" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearFacilityID() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearFacilityID()
	return eapuo
}

// SetDCCS sets the "DCCS" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetDCCS(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetDCCS(s)
	return eapuo
}

// SetNillableDCCS sets the "DCCS" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableDCCS(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetDCCS(*s)
	}
	return eapuo
}

// ClearDCCS clears the value of the "DCCS" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearDCCS() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearDCCS()
	return eapuo
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetDCInPresentCadre(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetDCInPresentCadre(s)
	return eapuo
}

// SetNillableDCInPresentCadre sets the "DCInPresentCadre" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableDCInPresentCadre(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetDCInPresentCadre(*s)
	}
	return eapuo
}

// ClearDCInPresentCadre clears the value of the "DCInPresentCadre" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearDCInPresentCadre() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearDCInPresentCadre()
	return eapuo
}

// SetDeputationOfficeId sets the "DeputationOfficeId" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetDeputationOfficeId(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetDeputationOfficeId(s)
	return eapuo
}

// SetNillableDeputationOfficeId sets the "DeputationOfficeId" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableDeputationOfficeId(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetDeputationOfficeId(*s)
	}
	return eapuo
}

// ClearDeputationOfficeId clears the value of the "DeputationOfficeId" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearDeputationOfficeId() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearDeputationOfficeId()
	return eapuo
}

// SetDisabilityType sets the "DisabilityType" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetDisabilityType(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetDisabilityType(s)
	return eapuo
}

// SetNillableDisabilityType sets the "DisabilityType" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableDisabilityType(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetDisabilityType(*s)
	}
	return eapuo
}

// ClearDisabilityType clears the value of the "DisabilityType" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearDisabilityType() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearDisabilityType()
	return eapuo
}

// SetDisabilityPercentage sets the "DisabilityPercentage" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetDisabilityPercentage(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetDisabilityPercentage(s)
	return eapuo
}

// SetNillableDisabilityPercentage sets the "DisabilityPercentage" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableDisabilityPercentage(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetDisabilityPercentage(*s)
	}
	return eapuo
}

// ClearDisabilityPercentage clears the value of the "DisabilityPercentage" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearDisabilityPercentage() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearDisabilityPercentage()
	return eapuo
}

// SetEducation sets the "Education" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetEducation(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetEducation(s)
	return eapuo
}

// SetNillableEducation sets the "Education" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableEducation(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetEducation(*s)
	}
	return eapuo
}

// ClearEducation clears the value of the "Education" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearEducation() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearEducation()
	return eapuo
}

// SetExamNameCode sets the "ExamNameCode" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetExamNameCode(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetExamNameCode(s)
	return eapuo
}

// SetNillableExamNameCode sets the "ExamNameCode" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableExamNameCode(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetExamNameCode(*s)
	}
	return eapuo
}

// ClearExamNameCode clears the value of the "ExamNameCode" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearExamNameCode() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearExamNameCode()
	return eapuo
}

// SetExamYear sets the "ExamYear" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetExamYear(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetExamYear(s)
	return eapuo
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableExamYear(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetExamYear(*s)
	}
	return eapuo
}

// ClearExamYear clears the value of the "ExamYear" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearExamYear() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearExamYear()
	return eapuo
}

// SetExamName sets the "ExamName" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetExamName(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetExamName(s)
	return eapuo
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableExamName(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetExamName(*s)
	}
	return eapuo
}

// ClearExamName clears the value of the "ExamName" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearExamName() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearExamName()
	return eapuo
}

// SetCentrePreference sets the "CentrePreference" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetCentrePreference(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetCentrePreference(s)
	return eapuo
}

// SetNillableCentrePreference sets the "CentrePreference" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableCentrePreference(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetCentrePreference(*s)
	}
	return eapuo
}

// ClearCentrePreference clears the value of the "CentrePreference" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearCentrePreference() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearCentrePreference()
	return eapuo
}

// SetSignature sets the "Signature" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetSignature(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetSignature(s)
	return eapuo
}

// SetNillableSignature sets the "Signature" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableSignature(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetSignature(*s)
	}
	return eapuo
}

// ClearSignature clears the value of the "Signature" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearSignature() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearSignature()
	return eapuo
}

// SetPhoto sets the "Photo" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetPhoto(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetPhoto(s)
	return eapuo
}

// SetNillablePhoto sets the "Photo" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillablePhoto(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetPhoto(*s)
	}
	return eapuo
}

// ClearPhoto clears the value of the "Photo" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearPhoto() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearPhoto()
	return eapuo
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetApplicationStatus(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetApplicationStatus(s)
	return eapuo
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableApplicationStatus(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetApplicationStatus(*s)
	}
	return eapuo
}

// ClearApplicationStatus clears the value of the "ApplicationStatus" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearApplicationStatus() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearApplicationStatus()
	return eapuo
}

// SetApplnSubmittedDate sets the "ApplnSubmittedDate" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetApplnSubmittedDate(t time.Time) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetApplnSubmittedDate(t)
	return eapuo
}

// SetNillableApplnSubmittedDate sets the "ApplnSubmittedDate" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableApplnSubmittedDate(t *time.Time) *ExamApplicationsPSUpdateOne {
	if t != nil {
		eapuo.SetApplnSubmittedDate(*t)
	}
	return eapuo
}

// ClearApplnSubmittedDate clears the value of the "ApplnSubmittedDate" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearApplnSubmittedDate() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearApplnSubmittedDate()
	return eapuo
}

// SetVARemarks sets the "VA_Remarks" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetVARemarks(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetVARemarks(s)
	return eapuo
}

// SetNillableVARemarks sets the "VA_Remarks" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableVARemarks(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetVARemarks(*s)
	}
	return eapuo
}

// ClearVARemarks clears the value of the "VA_Remarks" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearVARemarks() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearVARemarks()
	return eapuo
}

// SetVAUserName sets the "VA_UserName" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetVAUserName(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetVAUserName(s)
	return eapuo
}

// SetNillableVAUserName sets the "VA_UserName" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableVAUserName(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetVAUserName(*s)
	}
	return eapuo
}

// ClearVAUserName clears the value of the "VA_UserName" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearVAUserName() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearVAUserName()
	return eapuo
}

// SetVADate sets the "VA_Date" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetVADate(t time.Time) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetVADate(t)
	return eapuo
}

// SetNillableVADate sets the "VA_Date" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableVADate(t *time.Time) *ExamApplicationsPSUpdateOne {
	if t != nil {
		eapuo.SetVADate(*t)
	}
	return eapuo
}

// ClearVADate clears the value of the "VA_Date" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearVADate() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearVADate()
	return eapuo
}

// SetCARemarks sets the "CA_Remarks" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetCARemarks(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetCARemarks(s)
	return eapuo
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableCARemarks(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetCARemarks(*s)
	}
	return eapuo
}

// ClearCARemarks clears the value of the "CA_Remarks" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearCARemarks() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearCARemarks()
	return eapuo
}

// SetCAUserName sets the "CA_UserName" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetCAUserName(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetCAUserName(s)
	return eapuo
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableCAUserName(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetCAUserName(*s)
	}
	return eapuo
}

// ClearCAUserName clears the value of the "CA_UserName" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearCAUserName() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearCAUserName()
	return eapuo
}

// SetCADate sets the "CA_Date" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetCADate(t time.Time) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetCADate(t)
	return eapuo
}

// SetNillableCADate sets the "CA_Date" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableCADate(t *time.Time) *ExamApplicationsPSUpdateOne {
	if t != nil {
		eapuo.SetCADate(*t)
	}
	return eapuo
}

// ClearCADate clears the value of the "CA_Date" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearCADate() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearCADate()
	return eapuo
}

// SetApplicationWdlDate sets the "ApplicationWdlDate" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetApplicationWdlDate(t time.Time) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetApplicationWdlDate(t)
	return eapuo
}

// SetNillableApplicationWdlDate sets the "ApplicationWdlDate" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableApplicationWdlDate(t *time.Time) *ExamApplicationsPSUpdateOne {
	if t != nil {
		eapuo.SetApplicationWdlDate(*t)
	}
	return eapuo
}

// ClearApplicationWdlDate clears the value of the "ApplicationWdlDate" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearApplicationWdlDate() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearApplicationWdlDate()
	return eapuo
}

// SetNARemarks sets the "NA_Remarks" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetNARemarks(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetNARemarks(s)
	return eapuo
}

// SetNillableNARemarks sets the "NA_Remarks" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableNARemarks(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetNARemarks(*s)
	}
	return eapuo
}

// ClearNARemarks clears the value of the "NA_Remarks" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearNARemarks() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearNARemarks()
	return eapuo
}

// SetNAUserName sets the "NA_UserName" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetNAUserName(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetNAUserName(s)
	return eapuo
}

// SetNillableNAUserName sets the "NA_UserName" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableNAUserName(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetNAUserName(*s)
	}
	return eapuo
}

// ClearNAUserName clears the value of the "NA_UserName" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearNAUserName() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearNAUserName()
	return eapuo
}

// SetNADate sets the "NA_Date" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetNADate(t time.Time) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetNADate(t)
	return eapuo
}

// SetNillableNADate sets the "NA_Date" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableNADate(t *time.Time) *ExamApplicationsPSUpdateOne {
	if t != nil {
		eapuo.SetNADate(*t)
	}
	return eapuo
}

// ClearNADate clears the value of the "NA_Date" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearNADate() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearNADate()
	return eapuo
}

// SetAppliactionRemarks sets the "AppliactionRemarks" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetAppliactionRemarks(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetAppliactionRemarks(s)
	return eapuo
}

// SetNillableAppliactionRemarks sets the "AppliactionRemarks" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableAppliactionRemarks(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetAppliactionRemarks(*s)
	}
	return eapuo
}

// ClearAppliactionRemarks clears the value of the "AppliactionRemarks" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearAppliactionRemarks() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearAppliactionRemarks()
	return eapuo
}

// SetCadrePreferences sets the "CadrePreferences" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetCadrePreferences(i []interface{}) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetCadrePreferences(i)
	return eapuo
}

// AppendCadrePreferences appends i to the "CadrePreferences" field.
func (eapuo *ExamApplicationsPSUpdateOne) AppendCadrePreferences(i []interface{}) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.AppendCadrePreferences(i)
	return eapuo
}

// ClearCadrePreferences clears the value of the "CadrePreferences" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearCadrePreferences() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearCadrePreferences()
	return eapuo
}

// SetDivisionPreferences sets the "DivisionPreferences" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetDivisionPreferences(i []interface{}) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetDivisionPreferences(i)
	return eapuo
}

// AppendDivisionPreferences appends i to the "DivisionPreferences" field.
func (eapuo *ExamApplicationsPSUpdateOne) AppendDivisionPreferences(i []interface{}) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.AppendDivisionPreferences(i)
	return eapuo
}

// ClearDivisionPreferences clears the value of the "DivisionPreferences" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearDivisionPreferences() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearDivisionPreferences()
	return eapuo
}

// SetCirclePreferences sets the "CirclePreferences" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetCirclePreferences(i []interface{}) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetCirclePreferences(i)
	return eapuo
}

// AppendCirclePreferences appends i to the "CirclePreferences" field.
func (eapuo *ExamApplicationsPSUpdateOne) AppendCirclePreferences(i []interface{}) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.AppendCirclePreferences(i)
	return eapuo
}

// ClearCirclePreferences clears the value of the "CirclePreferences" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearCirclePreferences() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearCirclePreferences()
	return eapuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetUpdatedAt(t time.Time) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetUpdatedAt(t)
	return eapuo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableUpdatedAt(t *time.Time) *ExamApplicationsPSUpdateOne {
	if t != nil {
		eapuo.SetUpdatedAt(*t)
	}
	return eapuo
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearUpdatedAt() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearUpdatedAt()
	return eapuo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetUpdatedBy(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetUpdatedBy(s)
	return eapuo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableUpdatedBy(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetUpdatedBy(*s)
	}
	return eapuo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearUpdatedBy() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearUpdatedBy()
	return eapuo
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetRoleUserCode(i int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetRoleUserCode(i)
	return eapuo
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableRoleUserCode(i *int32) *ExamApplicationsPSUpdateOne {
	if i != nil {
		eapuo.SetRoleUserCode(*i)
	}
	return eapuo
}

// ClearRoleUserCode clears the value of the "RoleUserCode" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearRoleUserCode() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearRoleUserCode()
	return eapuo
}

// AddUsersPSRefIDs adds the "UsersPSRef" edge to the UserMaster entity by IDs.
func (eapuo *ExamApplicationsPSUpdateOne) AddUsersPSRefIDs(ids ...int64) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.AddUsersPSRefIDs(ids...)
	return eapuo
}

// AddUsersPSRef adds the "UsersPSRef" edges to the UserMaster entity.
func (eapuo *ExamApplicationsPSUpdateOne) AddUsersPSRef(u ...*UserMaster) *ExamApplicationsPSUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eapuo.AddUsersPSRefIDs(ids...)
}

// AddExamApplnPSRefIDs adds the "ExamAppln_PS_Ref" edge to the Exam_PS entity by IDs.
func (eapuo *ExamApplicationsPSUpdateOne) AddExamApplnPSRefIDs(ids ...int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.AddExamApplnPSRefIDs(ids...)
	return eapuo
}

// AddExamApplnPSRef adds the "ExamAppln_PS_Ref" edges to the Exam_PS entity.
func (eapuo *ExamApplicationsPSUpdateOne) AddExamApplnPSRef(e ...*Exam_PS) *ExamApplicationsPSUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eapuo.AddExamApplnPSRefIDs(ids...)
}

// AddOfficePSRefIDs adds the "Office_PS_Ref" edge to the Facility entity by IDs.
func (eapuo *ExamApplicationsPSUpdateOne) AddOfficePSRefIDs(ids ...int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.AddOfficePSRefIDs(ids...)
	return eapuo
}

// AddOfficePSRef adds the "Office_PS_Ref" edges to the Facility entity.
func (eapuo *ExamApplicationsPSUpdateOne) AddOfficePSRef(f ...*Facility) *ExamApplicationsPSUpdateOne {
	ids := make([]int32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eapuo.AddOfficePSRefIDs(ids...)
}

// SetRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID.
func (eapuo *ExamApplicationsPSUpdateOne) SetRoleusersID(id int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetRoleusersID(id)
	return eapuo
}

// SetNillableRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableRoleusersID(id *int32) *ExamApplicationsPSUpdateOne {
	if id != nil {
		eapuo = eapuo.SetRoleusersID(*id)
	}
	return eapuo
}

// SetRoleusers sets the "roleusers" edge to the RoleMaster entity.
func (eapuo *ExamApplicationsPSUpdateOne) SetRoleusers(r *RoleMaster) *ExamApplicationsPSUpdateOne {
	return eapuo.SetRoleusersID(r.ID)
}

// Mutation returns the ExamApplicationsPSMutation object of the builder.
func (eapuo *ExamApplicationsPSUpdateOne) Mutation() *ExamApplicationsPSMutation {
	return eapuo.mutation
}

// ClearUsersPSRef clears all "UsersPSRef" edges to the UserMaster entity.
func (eapuo *ExamApplicationsPSUpdateOne) ClearUsersPSRef() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearUsersPSRef()
	return eapuo
}

// RemoveUsersPSRefIDs removes the "UsersPSRef" edge to UserMaster entities by IDs.
func (eapuo *ExamApplicationsPSUpdateOne) RemoveUsersPSRefIDs(ids ...int64) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.RemoveUsersPSRefIDs(ids...)
	return eapuo
}

// RemoveUsersPSRef removes "UsersPSRef" edges to UserMaster entities.
func (eapuo *ExamApplicationsPSUpdateOne) RemoveUsersPSRef(u ...*UserMaster) *ExamApplicationsPSUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eapuo.RemoveUsersPSRefIDs(ids...)
}

// ClearExamApplnPSRef clears all "ExamAppln_PS_Ref" edges to the Exam_PS entity.
func (eapuo *ExamApplicationsPSUpdateOne) ClearExamApplnPSRef() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearExamApplnPSRef()
	return eapuo
}

// RemoveExamApplnPSRefIDs removes the "ExamAppln_PS_Ref" edge to Exam_PS entities by IDs.
func (eapuo *ExamApplicationsPSUpdateOne) RemoveExamApplnPSRefIDs(ids ...int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.RemoveExamApplnPSRefIDs(ids...)
	return eapuo
}

// RemoveExamApplnPSRef removes "ExamAppln_PS_Ref" edges to Exam_PS entities.
func (eapuo *ExamApplicationsPSUpdateOne) RemoveExamApplnPSRef(e ...*Exam_PS) *ExamApplicationsPSUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eapuo.RemoveExamApplnPSRefIDs(ids...)
}

// ClearOfficePSRef clears all "Office_PS_Ref" edges to the Facility entity.
func (eapuo *ExamApplicationsPSUpdateOne) ClearOfficePSRef() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearOfficePSRef()
	return eapuo
}

// RemoveOfficePSRefIDs removes the "Office_PS_Ref" edge to Facility entities by IDs.
func (eapuo *ExamApplicationsPSUpdateOne) RemoveOfficePSRefIDs(ids ...int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.RemoveOfficePSRefIDs(ids...)
	return eapuo
}

// RemoveOfficePSRef removes "Office_PS_Ref" edges to Facility entities.
func (eapuo *ExamApplicationsPSUpdateOne) RemoveOfficePSRef(f ...*Facility) *ExamApplicationsPSUpdateOne {
	ids := make([]int32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eapuo.RemoveOfficePSRefIDs(ids...)
}

// ClearRoleusers clears the "roleusers" edge to the RoleMaster entity.
func (eapuo *ExamApplicationsPSUpdateOne) ClearRoleusers() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearRoleusers()
	return eapuo
}

// Where appends a list predicates to the ExamApplicationsPSUpdate builder.
func (eapuo *ExamApplicationsPSUpdateOne) Where(ps ...predicate.Exam_Applications_PS) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.Where(ps...)
	return eapuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eapuo *ExamApplicationsPSUpdateOne) Select(field string, fields ...string) *ExamApplicationsPSUpdateOne {
	eapuo.fields = append([]string{field}, fields...)
	return eapuo
}

// Save executes the query and returns the updated Exam_Applications_PS entity.
func (eapuo *ExamApplicationsPSUpdateOne) Save(ctx context.Context) (*Exam_Applications_PS, error) {
	return withHooks(ctx, eapuo.sqlSave, eapuo.mutation, eapuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eapuo *ExamApplicationsPSUpdateOne) SaveX(ctx context.Context) *Exam_Applications_PS {
	node, err := eapuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eapuo *ExamApplicationsPSUpdateOne) Exec(ctx context.Context) error {
	_, err := eapuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eapuo *ExamApplicationsPSUpdateOne) ExecX(ctx context.Context) {
	if err := eapuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eapuo *ExamApplicationsPSUpdateOne) check() error {
	if v, ok := eapuo.mutation.Gender(); ok {
		if err := exam_applications_ps.GenderValidator(v); err != nil {
			return &ValidationError{Name: "Gender", err: fmt.Errorf(`ent: validator failed for field "Exam_Applications_PS.Gender": %w`, err)}
		}
	}
	return nil
}

func (eapuo *ExamApplicationsPSUpdateOne) sqlSave(ctx context.Context) (_node *Exam_Applications_PS, err error) {
	if err := eapuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(exam_applications_ps.Table, exam_applications_ps.Columns, sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64))
	id, ok := eapuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Exam_Applications_PS.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eapuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exam_applications_ps.FieldID)
		for _, f := range fields {
			if !exam_applications_ps.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exam_applications_ps.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eapuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eapuo.mutation.ApplicationNumber(); ok {
		_spec.SetField(exam_applications_ps.FieldApplicationNumber, field.TypeString, value)
	}
	if eapuo.mutation.ApplicationNumberCleared() {
		_spec.ClearField(exam_applications_ps.FieldApplicationNumber, field.TypeString)
	}
	if value, ok := eapuo.mutation.EmployeeID(); ok {
		_spec.SetField(exam_applications_ps.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := eapuo.mutation.AddedEmployeeID(); ok {
		_spec.AddField(exam_applications_ps.FieldEmployeeID, field.TypeInt64, value)
	}
	if eapuo.mutation.EmployeeIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := eapuo.mutation.EmployeeName(); ok {
		_spec.SetField(exam_applications_ps.FieldEmployeeName, field.TypeString, value)
	}
	if eapuo.mutation.EmployeeNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldEmployeeName, field.TypeString)
	}
	if value, ok := eapuo.mutation.DOB(); ok {
		_spec.SetField(exam_applications_ps.FieldDOB, field.TypeString, value)
	}
	if eapuo.mutation.DOBCleared() {
		_spec.ClearField(exam_applications_ps.FieldDOB, field.TypeString)
	}
	if value, ok := eapuo.mutation.Gender(); ok {
		_spec.SetField(exam_applications_ps.FieldGender, field.TypeEnum, value)
	}
	if value, ok := eapuo.mutation.MobileNumber(); ok {
		_spec.SetField(exam_applications_ps.FieldMobileNumber, field.TypeString, value)
	}
	if eapuo.mutation.MobileNumberCleared() {
		_spec.ClearField(exam_applications_ps.FieldMobileNumber, field.TypeString)
	}
	if value, ok := eapuo.mutation.EmailID(); ok {
		_spec.SetField(exam_applications_ps.FieldEmailID, field.TypeString, value)
	}
	if eapuo.mutation.EmailIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldEmailID, field.TypeString)
	}
	if value, ok := eapuo.mutation.EmployeeCategory(); ok {
		_spec.SetField(exam_applications_ps.FieldEmployeeCategory, field.TypeString, value)
	}
	if eapuo.mutation.EmployeeCategoryCleared() {
		_spec.ClearField(exam_applications_ps.FieldEmployeeCategory, field.TypeString)
	}
	if value, ok := eapuo.mutation.Cadre(); ok {
		_spec.SetField(exam_applications_ps.FieldCadre, field.TypeString, value)
	}
	if eapuo.mutation.CadreCleared() {
		_spec.ClearField(exam_applications_ps.FieldCadre, field.TypeString)
	}
	if value, ok := eapuo.mutation.EmployeePost(); ok {
		_spec.SetField(exam_applications_ps.FieldEmployeePost, field.TypeString, value)
	}
	if eapuo.mutation.EmployeePostCleared() {
		_spec.ClearField(exam_applications_ps.FieldEmployeePost, field.TypeString)
	}
	if value, ok := eapuo.mutation.FacilityID(); ok {
		_spec.SetField(exam_applications_ps.FieldFacilityID, field.TypeString, value)
	}
	if eapuo.mutation.FacilityIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldFacilityID, field.TypeString)
	}
	if value, ok := eapuo.mutation.DCCS(); ok {
		_spec.SetField(exam_applications_ps.FieldDCCS, field.TypeString, value)
	}
	if eapuo.mutation.DCCSCleared() {
		_spec.ClearField(exam_applications_ps.FieldDCCS, field.TypeString)
	}
	if value, ok := eapuo.mutation.DCInPresentCadre(); ok {
		_spec.SetField(exam_applications_ps.FieldDCInPresentCadre, field.TypeString, value)
	}
	if eapuo.mutation.DCInPresentCadreCleared() {
		_spec.ClearField(exam_applications_ps.FieldDCInPresentCadre, field.TypeString)
	}
	if value, ok := eapuo.mutation.DeputationOfficeId(); ok {
		_spec.SetField(exam_applications_ps.FieldDeputationOfficeId, field.TypeString, value)
	}
	if eapuo.mutation.DeputationOfficeIdCleared() {
		_spec.ClearField(exam_applications_ps.FieldDeputationOfficeId, field.TypeString)
	}
	if value, ok := eapuo.mutation.DisabilityType(); ok {
		_spec.SetField(exam_applications_ps.FieldDisabilityType, field.TypeString, value)
	}
	if eapuo.mutation.DisabilityTypeCleared() {
		_spec.ClearField(exam_applications_ps.FieldDisabilityType, field.TypeString)
	}
	if value, ok := eapuo.mutation.DisabilityPercentage(); ok {
		_spec.SetField(exam_applications_ps.FieldDisabilityPercentage, field.TypeString, value)
	}
	if eapuo.mutation.DisabilityPercentageCleared() {
		_spec.ClearField(exam_applications_ps.FieldDisabilityPercentage, field.TypeString)
	}
	if value, ok := eapuo.mutation.Education(); ok {
		_spec.SetField(exam_applications_ps.FieldEducation, field.TypeString, value)
	}
	if eapuo.mutation.EducationCleared() {
		_spec.ClearField(exam_applications_ps.FieldEducation, field.TypeString)
	}
	if value, ok := eapuo.mutation.ExamNameCode(); ok {
		_spec.SetField(exam_applications_ps.FieldExamNameCode, field.TypeString, value)
	}
	if eapuo.mutation.ExamNameCodeCleared() {
		_spec.ClearField(exam_applications_ps.FieldExamNameCode, field.TypeString)
	}
	if value, ok := eapuo.mutation.ExamYear(); ok {
		_spec.SetField(exam_applications_ps.FieldExamYear, field.TypeString, value)
	}
	if eapuo.mutation.ExamYearCleared() {
		_spec.ClearField(exam_applications_ps.FieldExamYear, field.TypeString)
	}
	if value, ok := eapuo.mutation.ExamName(); ok {
		_spec.SetField(exam_applications_ps.FieldExamName, field.TypeString, value)
	}
	if eapuo.mutation.ExamNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldExamName, field.TypeString)
	}
	if value, ok := eapuo.mutation.CentrePreference(); ok {
		_spec.SetField(exam_applications_ps.FieldCentrePreference, field.TypeString, value)
	}
	if eapuo.mutation.CentrePreferenceCleared() {
		_spec.ClearField(exam_applications_ps.FieldCentrePreference, field.TypeString)
	}
	if value, ok := eapuo.mutation.Signature(); ok {
		_spec.SetField(exam_applications_ps.FieldSignature, field.TypeString, value)
	}
	if eapuo.mutation.SignatureCleared() {
		_spec.ClearField(exam_applications_ps.FieldSignature, field.TypeString)
	}
	if value, ok := eapuo.mutation.Photo(); ok {
		_spec.SetField(exam_applications_ps.FieldPhoto, field.TypeString, value)
	}
	if eapuo.mutation.PhotoCleared() {
		_spec.ClearField(exam_applications_ps.FieldPhoto, field.TypeString)
	}
	if value, ok := eapuo.mutation.ApplicationStatus(); ok {
		_spec.SetField(exam_applications_ps.FieldApplicationStatus, field.TypeString, value)
	}
	if eapuo.mutation.ApplicationStatusCleared() {
		_spec.ClearField(exam_applications_ps.FieldApplicationStatus, field.TypeString)
	}
	if value, ok := eapuo.mutation.ApplnSubmittedDate(); ok {
		_spec.SetField(exam_applications_ps.FieldApplnSubmittedDate, field.TypeTime, value)
	}
	if eapuo.mutation.ApplnSubmittedDateCleared() {
		_spec.ClearField(exam_applications_ps.FieldApplnSubmittedDate, field.TypeTime)
	}
	if value, ok := eapuo.mutation.VARemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldVARemarks, field.TypeString, value)
	}
	if eapuo.mutation.VARemarksCleared() {
		_spec.ClearField(exam_applications_ps.FieldVARemarks, field.TypeString)
	}
	if value, ok := eapuo.mutation.VAUserName(); ok {
		_spec.SetField(exam_applications_ps.FieldVAUserName, field.TypeString, value)
	}
	if eapuo.mutation.VAUserNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldVAUserName, field.TypeString)
	}
	if value, ok := eapuo.mutation.VADate(); ok {
		_spec.SetField(exam_applications_ps.FieldVADate, field.TypeTime, value)
	}
	if eapuo.mutation.VADateCleared() {
		_spec.ClearField(exam_applications_ps.FieldVADate, field.TypeTime)
	}
	if value, ok := eapuo.mutation.CARemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldCARemarks, field.TypeString, value)
	}
	if eapuo.mutation.CARemarksCleared() {
		_spec.ClearField(exam_applications_ps.FieldCARemarks, field.TypeString)
	}
	if value, ok := eapuo.mutation.CAUserName(); ok {
		_spec.SetField(exam_applications_ps.FieldCAUserName, field.TypeString, value)
	}
	if eapuo.mutation.CAUserNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldCAUserName, field.TypeString)
	}
	if value, ok := eapuo.mutation.CADate(); ok {
		_spec.SetField(exam_applications_ps.FieldCADate, field.TypeTime, value)
	}
	if eapuo.mutation.CADateCleared() {
		_spec.ClearField(exam_applications_ps.FieldCADate, field.TypeTime)
	}
	if value, ok := eapuo.mutation.ApplicationWdlDate(); ok {
		_spec.SetField(exam_applications_ps.FieldApplicationWdlDate, field.TypeTime, value)
	}
	if eapuo.mutation.ApplicationWdlDateCleared() {
		_spec.ClearField(exam_applications_ps.FieldApplicationWdlDate, field.TypeTime)
	}
	if value, ok := eapuo.mutation.NARemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldNARemarks, field.TypeString, value)
	}
	if eapuo.mutation.NARemarksCleared() {
		_spec.ClearField(exam_applications_ps.FieldNARemarks, field.TypeString)
	}
	if value, ok := eapuo.mutation.NAUserName(); ok {
		_spec.SetField(exam_applications_ps.FieldNAUserName, field.TypeString, value)
	}
	if eapuo.mutation.NAUserNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldNAUserName, field.TypeString)
	}
	if value, ok := eapuo.mutation.NADate(); ok {
		_spec.SetField(exam_applications_ps.FieldNADate, field.TypeTime, value)
	}
	if eapuo.mutation.NADateCleared() {
		_spec.ClearField(exam_applications_ps.FieldNADate, field.TypeTime)
	}
	if value, ok := eapuo.mutation.AppliactionRemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldAppliactionRemarks, field.TypeString, value)
	}
	if eapuo.mutation.AppliactionRemarksCleared() {
		_spec.ClearField(exam_applications_ps.FieldAppliactionRemarks, field.TypeString)
	}
	if value, ok := eapuo.mutation.CadrePreferences(); ok {
		_spec.SetField(exam_applications_ps.FieldCadrePreferences, field.TypeJSON, value)
	}
	if value, ok := eapuo.mutation.AppendedCadrePreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_ps.FieldCadrePreferences, value)
		})
	}
	if eapuo.mutation.CadrePreferencesCleared() {
		_spec.ClearField(exam_applications_ps.FieldCadrePreferences, field.TypeJSON)
	}
	if value, ok := eapuo.mutation.DivisionPreferences(); ok {
		_spec.SetField(exam_applications_ps.FieldDivisionPreferences, field.TypeJSON, value)
	}
	if value, ok := eapuo.mutation.AppendedDivisionPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_ps.FieldDivisionPreferences, value)
		})
	}
	if eapuo.mutation.DivisionPreferencesCleared() {
		_spec.ClearField(exam_applications_ps.FieldDivisionPreferences, field.TypeJSON)
	}
	if value, ok := eapuo.mutation.CirclePreferences(); ok {
		_spec.SetField(exam_applications_ps.FieldCirclePreferences, field.TypeJSON, value)
	}
	if value, ok := eapuo.mutation.AppendedCirclePreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_ps.FieldCirclePreferences, value)
		})
	}
	if eapuo.mutation.CirclePreferencesCleared() {
		_spec.ClearField(exam_applications_ps.FieldCirclePreferences, field.TypeJSON)
	}
	if value, ok := eapuo.mutation.UpdatedAt(); ok {
		_spec.SetField(exam_applications_ps.FieldUpdatedAt, field.TypeTime, value)
	}
	if eapuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(exam_applications_ps.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := eapuo.mutation.UpdatedBy(); ok {
		_spec.SetField(exam_applications_ps.FieldUpdatedBy, field.TypeString, value)
	}
	if eapuo.mutation.UpdatedByCleared() {
		_spec.ClearField(exam_applications_ps.FieldUpdatedBy, field.TypeString)
	}
	if eapuo.mutation.UsersPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.UsersPSRefTable,
			Columns: []string{exam_applications_ps.UsersPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.RemovedUsersPSRefIDs(); len(nodes) > 0 && !eapuo.mutation.UsersPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.UsersPSRefTable,
			Columns: []string{exam_applications_ps.UsersPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.UsersPSRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.UsersPSRefTable,
			Columns: []string{exam_applications_ps.UsersPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapuo.mutation.ExamApplnPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.ExamApplnPSRefTable,
			Columns: []string{exam_applications_ps.ExamApplnPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_ps.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.RemovedExamApplnPSRefIDs(); len(nodes) > 0 && !eapuo.mutation.ExamApplnPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.ExamApplnPSRefTable,
			Columns: []string{exam_applications_ps.ExamApplnPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_ps.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.ExamApplnPSRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.ExamApplnPSRefTable,
			Columns: []string{exam_applications_ps.ExamApplnPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_ps.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapuo.mutation.OfficePSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.OfficePSRefTable,
			Columns: []string{exam_applications_ps.OfficePSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.RemovedOfficePSRefIDs(); len(nodes) > 0 && !eapuo.mutation.OfficePSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.OfficePSRefTable,
			Columns: []string{exam_applications_ps.OfficePSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.OfficePSRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.OfficePSRefTable,
			Columns: []string{exam_applications_ps.OfficePSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(facility.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapuo.mutation.RoleusersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.RoleusersTable,
			Columns: []string{exam_applications_ps.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.RoleusersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.RoleusersTable,
			Columns: []string{exam_applications_ps.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Exam_Applications_PS{config: eapuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eapuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exam_applications_ps.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eapuo.mutation.done = true
	return _node, nil
}
