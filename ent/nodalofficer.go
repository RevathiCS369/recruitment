// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/exam"
	"recruit/ent/nodalofficer"
	"recruit/ent/notification"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// NodalOfficer is the model entity for the NodalOfficer schema.
type NodalOfficer struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// NodalOfficerName holds the value of the "NodalOfficerName" field.
	NodalOfficerName string `json:"NodalOfficerName,omitempty"`
	// DesignationID holds the value of the "DesignationID" field.
	DesignationID int32 `json:"DesignationID,omitempty"`
	// EmailID holds the value of the "EmailID" field.
	EmailID string `json:"EmailID,omitempty"`
	// MobileNumber holds the value of the "MobileNumber" field.
	MobileNumber string `json:"MobileNumber,omitempty"`
	// NotifyCode holds the value of the "NotifyCode" field.
	NotifyCode int32 `json:"NotifyCode,omitempty"`
	// ExamCode holds the value of the "ExamCode" field.
	ExamCode int32 `json:"ExamCode,omitempty"`
	// HallTicketApproved holds the value of the "HallTicketApproved" field.
	HallTicketApproved string `json:"HallTicketApproved,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NodalOfficerQuery when eager-loading is set.
	Edges        NodalOfficerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// NodalOfficerEdges holds the relations/edges for other nodes in the graph.
type NodalOfficerEdges struct {
	// Centers holds the value of the centers edge.
	Centers []*Center `json:"centers,omitempty"`
	// Exam holds the value of the exam edge.
	Exam *Exam `json:"exam,omitempty"`
	// Notification holds the value of the notification edge.
	Notification *Notification `json:"notification,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CentersOrErr returns the Centers value or an error if the edge
// was not loaded in eager-loading.
func (e NodalOfficerEdges) CentersOrErr() ([]*Center, error) {
	if e.loadedTypes[0] {
		return e.Centers, nil
	}
	return nil, &NotLoadedError{edge: "centers"}
}

// ExamOrErr returns the Exam value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NodalOfficerEdges) ExamOrErr() (*Exam, error) {
	if e.loadedTypes[1] {
		if e.Exam == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: exam.Label}
		}
		return e.Exam, nil
	}
	return nil, &NotLoadedError{edge: "exam"}
}

// NotificationOrErr returns the Notification value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NodalOfficerEdges) NotificationOrErr() (*Notification, error) {
	if e.loadedTypes[2] {
		if e.Notification == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: notification.Label}
		}
		return e.Notification, nil
	}
	return nil, &NotLoadedError{edge: "notification"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NodalOfficer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case nodalofficer.FieldID, nodalofficer.FieldDesignationID, nodalofficer.FieldNotifyCode, nodalofficer.FieldExamCode:
			values[i] = new(sql.NullInt64)
		case nodalofficer.FieldNodalOfficerName, nodalofficer.FieldEmailID, nodalofficer.FieldMobileNumber, nodalofficer.FieldHallTicketApproved:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NodalOfficer fields.
func (no *NodalOfficer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case nodalofficer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			no.ID = int32(value.Int64)
		case nodalofficer.FieldNodalOfficerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NodalOfficerName", values[i])
			} else if value.Valid {
				no.NodalOfficerName = value.String
			}
		case nodalofficer.FieldDesignationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DesignationID", values[i])
			} else if value.Valid {
				no.DesignationID = int32(value.Int64)
			}
		case nodalofficer.FieldEmailID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmailID", values[i])
			} else if value.Valid {
				no.EmailID = value.String
			}
		case nodalofficer.FieldMobileNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field MobileNumber", values[i])
			} else if value.Valid {
				no.MobileNumber = value.String
			}
		case nodalofficer.FieldNotifyCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field NotifyCode", values[i])
			} else if value.Valid {
				no.NotifyCode = int32(value.Int64)
			}
		case nodalofficer.FieldExamCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamCode", values[i])
			} else if value.Valid {
				no.ExamCode = int32(value.Int64)
			}
		case nodalofficer.FieldHallTicketApproved:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field HallTicketApproved", values[i])
			} else if value.Valid {
				no.HallTicketApproved = value.String
			}
		default:
			no.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NodalOfficer.
// This includes values selected through modifiers, order, etc.
func (no *NodalOfficer) Value(name string) (ent.Value, error) {
	return no.selectValues.Get(name)
}

// QueryCenters queries the "centers" edge of the NodalOfficer entity.
func (no *NodalOfficer) QueryCenters() *CenterQuery {
	return NewNodalOfficerClient(no.config).QueryCenters(no)
}

// QueryExam queries the "exam" edge of the NodalOfficer entity.
func (no *NodalOfficer) QueryExam() *ExamQuery {
	return NewNodalOfficerClient(no.config).QueryExam(no)
}

// QueryNotification queries the "notification" edge of the NodalOfficer entity.
func (no *NodalOfficer) QueryNotification() *NotificationQuery {
	return NewNodalOfficerClient(no.config).QueryNotification(no)
}

// Update returns a builder for updating this NodalOfficer.
// Note that you need to call NodalOfficer.Unwrap() before calling this method if this NodalOfficer
// was returned from a transaction, and the transaction was committed or rolled back.
func (no *NodalOfficer) Update() *NodalOfficerUpdateOne {
	return NewNodalOfficerClient(no.config).UpdateOne(no)
}

// Unwrap unwraps the NodalOfficer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (no *NodalOfficer) Unwrap() *NodalOfficer {
	_tx, ok := no.config.driver.(*txDriver)
	if !ok {
		panic("ent: NodalOfficer is not a transactional entity")
	}
	no.config.driver = _tx.drv
	return no
}

// String implements the fmt.Stringer.
func (no *NodalOfficer) String() string {
	var builder strings.Builder
	builder.WriteString("NodalOfficer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", no.ID))
	builder.WriteString("NodalOfficerName=")
	builder.WriteString(no.NodalOfficerName)
	builder.WriteString(", ")
	builder.WriteString("DesignationID=")
	builder.WriteString(fmt.Sprintf("%v", no.DesignationID))
	builder.WriteString(", ")
	builder.WriteString("EmailID=")
	builder.WriteString(no.EmailID)
	builder.WriteString(", ")
	builder.WriteString("MobileNumber=")
	builder.WriteString(no.MobileNumber)
	builder.WriteString(", ")
	builder.WriteString("NotifyCode=")
	builder.WriteString(fmt.Sprintf("%v", no.NotifyCode))
	builder.WriteString(", ")
	builder.WriteString("ExamCode=")
	builder.WriteString(fmt.Sprintf("%v", no.ExamCode))
	builder.WriteString(", ")
	builder.WriteString("HallTicketApproved=")
	builder.WriteString(no.HallTicketApproved)
	builder.WriteByte(')')
	return builder.String()
}

// NodalOfficers is a parsable slice of NodalOfficer.
type NodalOfficers []*NodalOfficer
