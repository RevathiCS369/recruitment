// Code generated by ent, DO NOT EDIT.

package employeeposts

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the employeeposts type in the database.
	Label = "employee_posts"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "PostID"
	// FieldPostCode holds the string denoting the postcode field in the database.
	FieldPostCode = "post_code"
	// FieldPostDescription holds the string denoting the postdescription field in the database.
	FieldPostDescription = "post_description"
	// FieldGroup holds the string denoting the group field in the database.
	FieldGroup = "group"
	// FieldPayLevel holds the string denoting the paylevel field in the database.
	FieldPayLevel = "pay_level"
	// FieldScale holds the string denoting the scale field in the database.
	FieldScale = "scale"
	// FieldBaseCadreFlag holds the string denoting the basecadreflag field in the database.
	FieldBaseCadreFlag = "base_cadre_flag"
	// Table holds the table name of the employeeposts in the database.
	Table = "EmployeePosts"
)

// Columns holds all SQL columns for employeeposts fields.
var Columns = []string{
	FieldID,
	FieldPostCode,
	FieldPostDescription,
	FieldGroup,
	FieldPayLevel,
	FieldScale,
	FieldBaseCadreFlag,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the EmployeePosts queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPostCode orders the results by the PostCode field.
func ByPostCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostCode, opts...).ToFunc()
}

// ByPostDescription orders the results by the PostDescription field.
func ByPostDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostDescription, opts...).ToFunc()
}

// ByGroup orders the results by the Group field.
func ByGroup(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGroup, opts...).ToFunc()
}

// ByPayLevel orders the results by the PayLevel field.
func ByPayLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayLevel, opts...).ToFunc()
}

// ByScale orders the results by the Scale field.
func ByScale(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScale, opts...).ToFunc()
}

// ByBaseCadreFlag orders the results by the BaseCadreFlag field.
func ByBaseCadreFlag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBaseCadreFlag, opts...).ToFunc()
}
