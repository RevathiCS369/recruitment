// Code generated by ent, DO NOT EDIT.

package circlemaster

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the circlemaster type in the database.
	Label = "circle_master"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "CircleID"
	// FieldCircleCode holds the string denoting the circlecode field in the database.
	FieldCircleCode = "circle_code"
	// FieldCircleOfficeId holds the string denoting the circleofficeid field in the database.
	FieldCircleOfficeId = "circle_office_id"
	// FieldCircleOfficeName holds the string denoting the circleofficename field in the database.
	FieldCircleOfficeName = "circle_office_name"
	// FieldOfficeType holds the string denoting the officetype field in the database.
	FieldOfficeType = "office_type"
	// FieldEmailID holds the string denoting the emailid field in the database.
	FieldEmailID = "email_id"
	// FieldMobileNumber holds the string denoting the mobilenumber field in the database.
	FieldMobileNumber = "mobile_number"
	// EdgeRegionRef holds the string denoting the region_ref edge name in mutations.
	EdgeRegionRef = "region_ref"
	// EdgeCircleRef holds the string denoting the circle_ref edge name in mutations.
	EdgeCircleRef = "circle_ref"
	// RegionMasterFieldID holds the string denoting the ID field of the RegionMaster.
	RegionMasterFieldID = "RegionID"
	// FacilityFieldID holds the string denoting the ID field of the Facility.
	FacilityFieldID = "FacilityID"
	// Table holds the table name of the circlemaster in the database.
	Table = "CircleMaster"
	// RegionRefTable is the table that holds the region_ref relation/edge.
	RegionRefTable = "RegionMaster"
	// RegionRefInverseTable is the table name for the RegionMaster entity.
	// It exists in this package in order to avoid circular dependency with the "regionmaster" package.
	RegionRefInverseTable = "RegionMaster"
	// RegionRefColumn is the table column denoting the region_ref relation/edge.
	RegionRefColumn = "circle_master_region_ref"
	// CircleRefTable is the table that holds the circle_ref relation/edge.
	CircleRefTable = "Facility"
	// CircleRefInverseTable is the table name for the Facility entity.
	// It exists in this package in order to avoid circular dependency with the "facility" package.
	CircleRefInverseTable = "Facility"
	// CircleRefColumn is the table column denoting the circle_ref relation/edge.
	CircleRefColumn = "circle_master_circle_ref"
)

// Columns holds all SQL columns for circlemaster fields.
var Columns = []string{
	FieldID,
	FieldCircleCode,
	FieldCircleOfficeId,
	FieldCircleOfficeName,
	FieldOfficeType,
	FieldEmailID,
	FieldMobileNumber,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "CircleMaster"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"facility_circle_ref",
	"region_master_circle_ref",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the CircleMaster queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCircleCode orders the results by the CircleCode field.
func ByCircleCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCircleCode, opts...).ToFunc()
}

// ByCircleOfficeId orders the results by the CircleOfficeId field.
func ByCircleOfficeId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCircleOfficeId, opts...).ToFunc()
}

// ByCircleOfficeName orders the results by the CircleOfficeName field.
func ByCircleOfficeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCircleOfficeName, opts...).ToFunc()
}

// ByOfficeType orders the results by the OfficeType field.
func ByOfficeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOfficeType, opts...).ToFunc()
}

// ByEmailID orders the results by the EmailID field.
func ByEmailID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailID, opts...).ToFunc()
}

// ByMobileNumber orders the results by the MobileNumber field.
func ByMobileNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobileNumber, opts...).ToFunc()
}

// ByRegionRefCount orders the results by region_ref count.
func ByRegionRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRegionRefStep(), opts...)
	}
}

// ByRegionRef orders the results by region_ref terms.
func ByRegionRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRegionRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCircleRefCount orders the results by circle_ref count.
func ByCircleRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCircleRefStep(), opts...)
	}
}

// ByCircleRef orders the results by circle_ref terms.
func ByCircleRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCircleRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRegionRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RegionRefInverseTable, RegionMasterFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RegionRefTable, RegionRefColumn),
	)
}
func newCircleRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CircleRefInverseTable, FacilityFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CircleRefTable, CircleRefColumn),
	)
}
