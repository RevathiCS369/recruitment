// Code generated by ent, DO NOT EDIT.

package circlemaster

import (
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldLTE(FieldID, id))
}

// CircleCode applies equality check predicate on the "CircleCode" field. It's identical to CircleCodeEQ.
func CircleCode(v int32) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldEQ(FieldCircleCode, v))
}

// CircleOfficeId applies equality check predicate on the "CircleOfficeId" field. It's identical to CircleOfficeIdEQ.
func CircleOfficeId(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldEQ(FieldCircleOfficeId, v))
}

// CircleOfficeName applies equality check predicate on the "CircleOfficeName" field. It's identical to CircleOfficeNameEQ.
func CircleOfficeName(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldEQ(FieldCircleOfficeName, v))
}

// OfficeType applies equality check predicate on the "OfficeType" field. It's identical to OfficeTypeEQ.
func OfficeType(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldEQ(FieldOfficeType, v))
}

// EmailID applies equality check predicate on the "EmailID" field. It's identical to EmailIDEQ.
func EmailID(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldEQ(FieldEmailID, v))
}

// MobileNumber applies equality check predicate on the "MobileNumber" field. It's identical to MobileNumberEQ.
func MobileNumber(v int32) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldEQ(FieldMobileNumber, v))
}

// CircleCodeEQ applies the EQ predicate on the "CircleCode" field.
func CircleCodeEQ(v int32) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldEQ(FieldCircleCode, v))
}

// CircleCodeNEQ applies the NEQ predicate on the "CircleCode" field.
func CircleCodeNEQ(v int32) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldNEQ(FieldCircleCode, v))
}

// CircleCodeIn applies the In predicate on the "CircleCode" field.
func CircleCodeIn(vs ...int32) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldIn(FieldCircleCode, vs...))
}

// CircleCodeNotIn applies the NotIn predicate on the "CircleCode" field.
func CircleCodeNotIn(vs ...int32) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldNotIn(FieldCircleCode, vs...))
}

// CircleCodeGT applies the GT predicate on the "CircleCode" field.
func CircleCodeGT(v int32) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldGT(FieldCircleCode, v))
}

// CircleCodeGTE applies the GTE predicate on the "CircleCode" field.
func CircleCodeGTE(v int32) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldGTE(FieldCircleCode, v))
}

// CircleCodeLT applies the LT predicate on the "CircleCode" field.
func CircleCodeLT(v int32) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldLT(FieldCircleCode, v))
}

// CircleCodeLTE applies the LTE predicate on the "CircleCode" field.
func CircleCodeLTE(v int32) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldLTE(FieldCircleCode, v))
}

// CircleOfficeIdEQ applies the EQ predicate on the "CircleOfficeId" field.
func CircleOfficeIdEQ(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldEQ(FieldCircleOfficeId, v))
}

// CircleOfficeIdNEQ applies the NEQ predicate on the "CircleOfficeId" field.
func CircleOfficeIdNEQ(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldNEQ(FieldCircleOfficeId, v))
}

// CircleOfficeIdIn applies the In predicate on the "CircleOfficeId" field.
func CircleOfficeIdIn(vs ...string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldIn(FieldCircleOfficeId, vs...))
}

// CircleOfficeIdNotIn applies the NotIn predicate on the "CircleOfficeId" field.
func CircleOfficeIdNotIn(vs ...string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldNotIn(FieldCircleOfficeId, vs...))
}

// CircleOfficeIdGT applies the GT predicate on the "CircleOfficeId" field.
func CircleOfficeIdGT(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldGT(FieldCircleOfficeId, v))
}

// CircleOfficeIdGTE applies the GTE predicate on the "CircleOfficeId" field.
func CircleOfficeIdGTE(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldGTE(FieldCircleOfficeId, v))
}

// CircleOfficeIdLT applies the LT predicate on the "CircleOfficeId" field.
func CircleOfficeIdLT(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldLT(FieldCircleOfficeId, v))
}

// CircleOfficeIdLTE applies the LTE predicate on the "CircleOfficeId" field.
func CircleOfficeIdLTE(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldLTE(FieldCircleOfficeId, v))
}

// CircleOfficeIdContains applies the Contains predicate on the "CircleOfficeId" field.
func CircleOfficeIdContains(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldContains(FieldCircleOfficeId, v))
}

// CircleOfficeIdHasPrefix applies the HasPrefix predicate on the "CircleOfficeId" field.
func CircleOfficeIdHasPrefix(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldHasPrefix(FieldCircleOfficeId, v))
}

// CircleOfficeIdHasSuffix applies the HasSuffix predicate on the "CircleOfficeId" field.
func CircleOfficeIdHasSuffix(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldHasSuffix(FieldCircleOfficeId, v))
}

// CircleOfficeIdEqualFold applies the EqualFold predicate on the "CircleOfficeId" field.
func CircleOfficeIdEqualFold(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldEqualFold(FieldCircleOfficeId, v))
}

// CircleOfficeIdContainsFold applies the ContainsFold predicate on the "CircleOfficeId" field.
func CircleOfficeIdContainsFold(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldContainsFold(FieldCircleOfficeId, v))
}

// CircleOfficeNameEQ applies the EQ predicate on the "CircleOfficeName" field.
func CircleOfficeNameEQ(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldEQ(FieldCircleOfficeName, v))
}

// CircleOfficeNameNEQ applies the NEQ predicate on the "CircleOfficeName" field.
func CircleOfficeNameNEQ(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldNEQ(FieldCircleOfficeName, v))
}

// CircleOfficeNameIn applies the In predicate on the "CircleOfficeName" field.
func CircleOfficeNameIn(vs ...string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldIn(FieldCircleOfficeName, vs...))
}

// CircleOfficeNameNotIn applies the NotIn predicate on the "CircleOfficeName" field.
func CircleOfficeNameNotIn(vs ...string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldNotIn(FieldCircleOfficeName, vs...))
}

// CircleOfficeNameGT applies the GT predicate on the "CircleOfficeName" field.
func CircleOfficeNameGT(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldGT(FieldCircleOfficeName, v))
}

// CircleOfficeNameGTE applies the GTE predicate on the "CircleOfficeName" field.
func CircleOfficeNameGTE(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldGTE(FieldCircleOfficeName, v))
}

// CircleOfficeNameLT applies the LT predicate on the "CircleOfficeName" field.
func CircleOfficeNameLT(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldLT(FieldCircleOfficeName, v))
}

// CircleOfficeNameLTE applies the LTE predicate on the "CircleOfficeName" field.
func CircleOfficeNameLTE(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldLTE(FieldCircleOfficeName, v))
}

// CircleOfficeNameContains applies the Contains predicate on the "CircleOfficeName" field.
func CircleOfficeNameContains(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldContains(FieldCircleOfficeName, v))
}

// CircleOfficeNameHasPrefix applies the HasPrefix predicate on the "CircleOfficeName" field.
func CircleOfficeNameHasPrefix(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldHasPrefix(FieldCircleOfficeName, v))
}

// CircleOfficeNameHasSuffix applies the HasSuffix predicate on the "CircleOfficeName" field.
func CircleOfficeNameHasSuffix(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldHasSuffix(FieldCircleOfficeName, v))
}

// CircleOfficeNameEqualFold applies the EqualFold predicate on the "CircleOfficeName" field.
func CircleOfficeNameEqualFold(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldEqualFold(FieldCircleOfficeName, v))
}

// CircleOfficeNameContainsFold applies the ContainsFold predicate on the "CircleOfficeName" field.
func CircleOfficeNameContainsFold(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldContainsFold(FieldCircleOfficeName, v))
}

// OfficeTypeEQ applies the EQ predicate on the "OfficeType" field.
func OfficeTypeEQ(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldEQ(FieldOfficeType, v))
}

// OfficeTypeNEQ applies the NEQ predicate on the "OfficeType" field.
func OfficeTypeNEQ(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldNEQ(FieldOfficeType, v))
}

// OfficeTypeIn applies the In predicate on the "OfficeType" field.
func OfficeTypeIn(vs ...string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldIn(FieldOfficeType, vs...))
}

// OfficeTypeNotIn applies the NotIn predicate on the "OfficeType" field.
func OfficeTypeNotIn(vs ...string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldNotIn(FieldOfficeType, vs...))
}

// OfficeTypeGT applies the GT predicate on the "OfficeType" field.
func OfficeTypeGT(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldGT(FieldOfficeType, v))
}

// OfficeTypeGTE applies the GTE predicate on the "OfficeType" field.
func OfficeTypeGTE(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldGTE(FieldOfficeType, v))
}

// OfficeTypeLT applies the LT predicate on the "OfficeType" field.
func OfficeTypeLT(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldLT(FieldOfficeType, v))
}

// OfficeTypeLTE applies the LTE predicate on the "OfficeType" field.
func OfficeTypeLTE(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldLTE(FieldOfficeType, v))
}

// OfficeTypeContains applies the Contains predicate on the "OfficeType" field.
func OfficeTypeContains(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldContains(FieldOfficeType, v))
}

// OfficeTypeHasPrefix applies the HasPrefix predicate on the "OfficeType" field.
func OfficeTypeHasPrefix(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldHasPrefix(FieldOfficeType, v))
}

// OfficeTypeHasSuffix applies the HasSuffix predicate on the "OfficeType" field.
func OfficeTypeHasSuffix(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldHasSuffix(FieldOfficeType, v))
}

// OfficeTypeEqualFold applies the EqualFold predicate on the "OfficeType" field.
func OfficeTypeEqualFold(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldEqualFold(FieldOfficeType, v))
}

// OfficeTypeContainsFold applies the ContainsFold predicate on the "OfficeType" field.
func OfficeTypeContainsFold(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldContainsFold(FieldOfficeType, v))
}

// EmailIDEQ applies the EQ predicate on the "EmailID" field.
func EmailIDEQ(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldEQ(FieldEmailID, v))
}

// EmailIDNEQ applies the NEQ predicate on the "EmailID" field.
func EmailIDNEQ(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldNEQ(FieldEmailID, v))
}

// EmailIDIn applies the In predicate on the "EmailID" field.
func EmailIDIn(vs ...string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldIn(FieldEmailID, vs...))
}

// EmailIDNotIn applies the NotIn predicate on the "EmailID" field.
func EmailIDNotIn(vs ...string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldNotIn(FieldEmailID, vs...))
}

// EmailIDGT applies the GT predicate on the "EmailID" field.
func EmailIDGT(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldGT(FieldEmailID, v))
}

// EmailIDGTE applies the GTE predicate on the "EmailID" field.
func EmailIDGTE(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldGTE(FieldEmailID, v))
}

// EmailIDLT applies the LT predicate on the "EmailID" field.
func EmailIDLT(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldLT(FieldEmailID, v))
}

// EmailIDLTE applies the LTE predicate on the "EmailID" field.
func EmailIDLTE(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldLTE(FieldEmailID, v))
}

// EmailIDContains applies the Contains predicate on the "EmailID" field.
func EmailIDContains(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldContains(FieldEmailID, v))
}

// EmailIDHasPrefix applies the HasPrefix predicate on the "EmailID" field.
func EmailIDHasPrefix(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldHasPrefix(FieldEmailID, v))
}

// EmailIDHasSuffix applies the HasSuffix predicate on the "EmailID" field.
func EmailIDHasSuffix(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldHasSuffix(FieldEmailID, v))
}

// EmailIDIsNil applies the IsNil predicate on the "EmailID" field.
func EmailIDIsNil() predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldIsNull(FieldEmailID))
}

// EmailIDNotNil applies the NotNil predicate on the "EmailID" field.
func EmailIDNotNil() predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldNotNull(FieldEmailID))
}

// EmailIDEqualFold applies the EqualFold predicate on the "EmailID" field.
func EmailIDEqualFold(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldEqualFold(FieldEmailID, v))
}

// EmailIDContainsFold applies the ContainsFold predicate on the "EmailID" field.
func EmailIDContainsFold(v string) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldContainsFold(FieldEmailID, v))
}

// MobileNumberEQ applies the EQ predicate on the "MobileNumber" field.
func MobileNumberEQ(v int32) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldEQ(FieldMobileNumber, v))
}

// MobileNumberNEQ applies the NEQ predicate on the "MobileNumber" field.
func MobileNumberNEQ(v int32) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldNEQ(FieldMobileNumber, v))
}

// MobileNumberIn applies the In predicate on the "MobileNumber" field.
func MobileNumberIn(vs ...int32) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldIn(FieldMobileNumber, vs...))
}

// MobileNumberNotIn applies the NotIn predicate on the "MobileNumber" field.
func MobileNumberNotIn(vs ...int32) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldNotIn(FieldMobileNumber, vs...))
}

// MobileNumberGT applies the GT predicate on the "MobileNumber" field.
func MobileNumberGT(v int32) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldGT(FieldMobileNumber, v))
}

// MobileNumberGTE applies the GTE predicate on the "MobileNumber" field.
func MobileNumberGTE(v int32) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldGTE(FieldMobileNumber, v))
}

// MobileNumberLT applies the LT predicate on the "MobileNumber" field.
func MobileNumberLT(v int32) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldLT(FieldMobileNumber, v))
}

// MobileNumberLTE applies the LTE predicate on the "MobileNumber" field.
func MobileNumberLTE(v int32) predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldLTE(FieldMobileNumber, v))
}

// MobileNumberIsNil applies the IsNil predicate on the "MobileNumber" field.
func MobileNumberIsNil() predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldIsNull(FieldMobileNumber))
}

// MobileNumberNotNil applies the NotNil predicate on the "MobileNumber" field.
func MobileNumberNotNil() predicate.CircleMaster {
	return predicate.CircleMaster(sql.FieldNotNull(FieldMobileNumber))
}

// HasRegionRef applies the HasEdge predicate on the "region_ref" edge.
func HasRegionRef() predicate.CircleMaster {
	return predicate.CircleMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RegionRefTable, RegionRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRegionRefWith applies the HasEdge predicate on the "region_ref" edge with a given conditions (other predicates).
func HasRegionRefWith(preds ...predicate.RegionMaster) predicate.CircleMaster {
	return predicate.CircleMaster(func(s *sql.Selector) {
		step := newRegionRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCircleRef applies the HasEdge predicate on the "circle_ref" edge.
func HasCircleRef() predicate.CircleMaster {
	return predicate.CircleMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CircleRefTable, CircleRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCircleRefWith applies the HasEdge predicate on the "circle_ref" edge with a given conditions (other predicates).
func HasCircleRefWith(preds ...predicate.Facility) predicate.CircleMaster {
	return predicate.CircleMaster(func(s *sql.Selector) {
		step := newCircleRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CircleMaster) predicate.CircleMaster {
	return predicate.CircleMaster(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CircleMaster) predicate.CircleMaster {
	return predicate.CircleMaster(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CircleMaster) predicate.CircleMaster {
	return predicate.CircleMaster(func(s *sql.Selector) {
		p(s.Not())
	})
}
