// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/center"
	"recruit/ent/exam"
	"recruit/ent/nodalofficer"
	"recruit/ent/notification"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NodalOfficerCreate is the builder for creating a NodalOfficer entity.
type NodalOfficerCreate struct {
	config
	mutation *NodalOfficerMutation
	hooks    []Hook
}

// SetNodalOfficerName sets the "NodalOfficerName" field.
func (noc *NodalOfficerCreate) SetNodalOfficerName(s string) *NodalOfficerCreate {
	noc.mutation.SetNodalOfficerName(s)
	return noc
}

// SetDesignationID sets the "DesignationID" field.
func (noc *NodalOfficerCreate) SetDesignationID(i int32) *NodalOfficerCreate {
	noc.mutation.SetDesignationID(i)
	return noc
}

// SetEmailID sets the "EmailID" field.
func (noc *NodalOfficerCreate) SetEmailID(s string) *NodalOfficerCreate {
	noc.mutation.SetEmailID(s)
	return noc
}

// SetMobileNumber sets the "MobileNumber" field.
func (noc *NodalOfficerCreate) SetMobileNumber(s string) *NodalOfficerCreate {
	noc.mutation.SetMobileNumber(s)
	return noc
}

// SetNotifyCode sets the "NotifyCode" field.
func (noc *NodalOfficerCreate) SetNotifyCode(i int32) *NodalOfficerCreate {
	noc.mutation.SetNotifyCode(i)
	return noc
}

// SetNillableNotifyCode sets the "NotifyCode" field if the given value is not nil.
func (noc *NodalOfficerCreate) SetNillableNotifyCode(i *int32) *NodalOfficerCreate {
	if i != nil {
		noc.SetNotifyCode(*i)
	}
	return noc
}

// SetExamCode sets the "ExamCode" field.
func (noc *NodalOfficerCreate) SetExamCode(i int32) *NodalOfficerCreate {
	noc.mutation.SetExamCode(i)
	return noc
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (noc *NodalOfficerCreate) SetNillableExamCode(i *int32) *NodalOfficerCreate {
	if i != nil {
		noc.SetExamCode(*i)
	}
	return noc
}

// SetHallTicketApproved sets the "HallTicketApproved" field.
func (noc *NodalOfficerCreate) SetHallTicketApproved(s string) *NodalOfficerCreate {
	noc.mutation.SetHallTicketApproved(s)
	return noc
}

// SetNillableHallTicketApproved sets the "HallTicketApproved" field if the given value is not nil.
func (noc *NodalOfficerCreate) SetNillableHallTicketApproved(s *string) *NodalOfficerCreate {
	if s != nil {
		noc.SetHallTicketApproved(*s)
	}
	return noc
}

// SetID sets the "id" field.
func (noc *NodalOfficerCreate) SetID(i int32) *NodalOfficerCreate {
	noc.mutation.SetID(i)
	return noc
}

// AddCenterIDs adds the "centers" edge to the Center entity by IDs.
func (noc *NodalOfficerCreate) AddCenterIDs(ids ...int32) *NodalOfficerCreate {
	noc.mutation.AddCenterIDs(ids...)
	return noc
}

// AddCenters adds the "centers" edges to the Center entity.
func (noc *NodalOfficerCreate) AddCenters(c ...*Center) *NodalOfficerCreate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return noc.AddCenterIDs(ids...)
}

// SetExamID sets the "exam" edge to the Exam entity by ID.
func (noc *NodalOfficerCreate) SetExamID(id int32) *NodalOfficerCreate {
	noc.mutation.SetExamID(id)
	return noc
}

// SetNillableExamID sets the "exam" edge to the Exam entity by ID if the given value is not nil.
func (noc *NodalOfficerCreate) SetNillableExamID(id *int32) *NodalOfficerCreate {
	if id != nil {
		noc = noc.SetExamID(*id)
	}
	return noc
}

// SetExam sets the "exam" edge to the Exam entity.
func (noc *NodalOfficerCreate) SetExam(e *Exam) *NodalOfficerCreate {
	return noc.SetExamID(e.ID)
}

// SetNotificationID sets the "notification" edge to the Notification entity by ID.
func (noc *NodalOfficerCreate) SetNotificationID(id int32) *NodalOfficerCreate {
	noc.mutation.SetNotificationID(id)
	return noc
}

// SetNillableNotificationID sets the "notification" edge to the Notification entity by ID if the given value is not nil.
func (noc *NodalOfficerCreate) SetNillableNotificationID(id *int32) *NodalOfficerCreate {
	if id != nil {
		noc = noc.SetNotificationID(*id)
	}
	return noc
}

// SetNotification sets the "notification" edge to the Notification entity.
func (noc *NodalOfficerCreate) SetNotification(n *Notification) *NodalOfficerCreate {
	return noc.SetNotificationID(n.ID)
}

// Mutation returns the NodalOfficerMutation object of the builder.
func (noc *NodalOfficerCreate) Mutation() *NodalOfficerMutation {
	return noc.mutation
}

// Save creates the NodalOfficer in the database.
func (noc *NodalOfficerCreate) Save(ctx context.Context) (*NodalOfficer, error) {
	return withHooks(ctx, noc.sqlSave, noc.mutation, noc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (noc *NodalOfficerCreate) SaveX(ctx context.Context) *NodalOfficer {
	v, err := noc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (noc *NodalOfficerCreate) Exec(ctx context.Context) error {
	_, err := noc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (noc *NodalOfficerCreate) ExecX(ctx context.Context) {
	if err := noc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (noc *NodalOfficerCreate) check() error {
	if _, ok := noc.mutation.NodalOfficerName(); !ok {
		return &ValidationError{Name: "NodalOfficerName", err: errors.New(`ent: missing required field "NodalOfficer.NodalOfficerName"`)}
	}
	if _, ok := noc.mutation.DesignationID(); !ok {
		return &ValidationError{Name: "DesignationID", err: errors.New(`ent: missing required field "NodalOfficer.DesignationID"`)}
	}
	if _, ok := noc.mutation.EmailID(); !ok {
		return &ValidationError{Name: "EmailID", err: errors.New(`ent: missing required field "NodalOfficer.EmailID"`)}
	}
	if _, ok := noc.mutation.MobileNumber(); !ok {
		return &ValidationError{Name: "MobileNumber", err: errors.New(`ent: missing required field "NodalOfficer.MobileNumber"`)}
	}
	return nil
}

func (noc *NodalOfficerCreate) sqlSave(ctx context.Context) (*NodalOfficer, error) {
	if err := noc.check(); err != nil {
		return nil, err
	}
	_node, _spec := noc.createSpec()
	if err := sqlgraph.CreateNode(ctx, noc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	noc.mutation.id = &_node.ID
	noc.mutation.done = true
	return _node, nil
}

func (noc *NodalOfficerCreate) createSpec() (*NodalOfficer, *sqlgraph.CreateSpec) {
	var (
		_node = &NodalOfficer{config: noc.config}
		_spec = sqlgraph.NewCreateSpec(nodalofficer.Table, sqlgraph.NewFieldSpec(nodalofficer.FieldID, field.TypeInt32))
	)
	if id, ok := noc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := noc.mutation.NodalOfficerName(); ok {
		_spec.SetField(nodalofficer.FieldNodalOfficerName, field.TypeString, value)
		_node.NodalOfficerName = value
	}
	if value, ok := noc.mutation.DesignationID(); ok {
		_spec.SetField(nodalofficer.FieldDesignationID, field.TypeInt32, value)
		_node.DesignationID = value
	}
	if value, ok := noc.mutation.EmailID(); ok {
		_spec.SetField(nodalofficer.FieldEmailID, field.TypeString, value)
		_node.EmailID = value
	}
	if value, ok := noc.mutation.MobileNumber(); ok {
		_spec.SetField(nodalofficer.FieldMobileNumber, field.TypeString, value)
		_node.MobileNumber = value
	}
	if value, ok := noc.mutation.HallTicketApproved(); ok {
		_spec.SetField(nodalofficer.FieldHallTicketApproved, field.TypeString, value)
		_node.HallTicketApproved = value
	}
	if nodes := noc.mutation.CentersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nodalofficer.CentersTable,
			Columns: []string{nodalofficer.CentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := noc.mutation.ExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nodalofficer.ExamTable,
			Columns: []string{nodalofficer.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ExamCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := noc.mutation.NotificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nodalofficer.NotificationTable,
			Columns: []string{nodalofficer.NotificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.NotifyCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NodalOfficerCreateBulk is the builder for creating many NodalOfficer entities in bulk.
type NodalOfficerCreateBulk struct {
	config
	builders []*NodalOfficerCreate
}

// Save creates the NodalOfficer entities in the database.
func (nocb *NodalOfficerCreateBulk) Save(ctx context.Context) ([]*NodalOfficer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(nocb.builders))
	nodes := make([]*NodalOfficer, len(nocb.builders))
	mutators := make([]Mutator, len(nocb.builders))
	for i := range nocb.builders {
		func(i int, root context.Context) {
			builder := nocb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NodalOfficerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nocb *NodalOfficerCreateBulk) SaveX(ctx context.Context) []*NodalOfficer {
	v, err := nocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nocb *NodalOfficerCreateBulk) Exec(ctx context.Context) error {
	_, err := nocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nocb *NodalOfficerCreateBulk) ExecX(ctx context.Context) {
	if err := nocb.Exec(ctx); err != nil {
		panic(err)
	}
}
